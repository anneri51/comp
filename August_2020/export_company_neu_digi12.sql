--------------------------------------------------------
--  Datei erstellt -Dienstag-August-04-2020   
--------------------------------------------------------
DROP TYPE "COMPANY"."T_TF_ROW";
DROP TYPE "COMPANY"."T_TF_TAB";
DROP TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL";
DROP TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL_1";
DROP TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL_2";
DROP TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL2";
DROP SEQUENCE "COMPANY"."APEX$_WS_SEQ";
DROP SEQUENCE "COMPANY"."CONTR_KATEGORIE_ZAHLUNG_SEQ";
DROP SEQUENCE "COMPANY"."DEMO_CUST_SEQ";
DROP SEQUENCE "COMPANY"."DEMO_ORDER_ITEMS_SEQ";
DROP SEQUENCE "COMPANY"."DEMO_ORD_SEQ";
DROP SEQUENCE "COMPANY"."DEMO_PROD_SEQ";
DROP SEQUENCE "COMPANY"."DEPT_SEQ";
DROP SEQUENCE "COMPANY"."DL_IMP_SEQ";
DROP SEQUENCE "COMPANY"."DL_IMP_SEQ1";
DROP SEQUENCE "COMPANY"."D_SEQ";
DROP SEQUENCE "COMPANY"."EBA_DEMO_IG_DEPT_SEQ";
DROP SEQUENCE "COMPANY"."EBA_DEMO_IG_EMP_SEQ";
DROP SEQUENCE "COMPANY"."EBA_DEMO_IG_PEOPLE_SEQ";
DROP SEQUENCE "COMPANY"."EMP_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_ALLG_BEL_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_ALLG_BEL1_SICH_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_AUTOERSATZTEILE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_BEL_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_BEL_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_BUSSGELDER_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_CARMIETE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_COWORKING_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_ELEKTRONIK_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_GRENZBELEGE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_HEIZUNGSABRECHNUNG_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_HOTELRECHNUNGEN_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_HOTELRECHNUNGEN_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_BA_HOTELRECHNUNGEN_SEQ2";
DROP SEQUENCE "COMPANY"."IMP_BA_KFZ_VERSICHERUNGEN_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_KFZ_VERSICHERUNG_POS_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_KRANKENKASSE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_KRANKENKASSE_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_BA_OEFFENTL_TICKETS_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_PARKTICKETS_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_PARKTICKETS_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_BA_SOFTWARE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_SOFTWARE_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_BA_SOFTWARE_SEQ2";
DROP SEQUENCE "COMPANY"."IMP_BA_SONSTIGE_BELEGE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_TANKSTELLE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_TELEFONKARTEN_SEQ";
DROP SEQUENCE "COMPANY"."IMP_BA_TELEFONKARTEN_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_BA_TEXTILREINIGUNG_SEQ";
DROP SEQUENCE "COMPANY"."IMP_HOTEL_BOOKING_SEQ";
DROP SEQUENCE "COMPANY"."IMP_KONTENBLATT_2018_SEQ";
DROP SEQUENCE "COMPANY"."IMP_KONTENBLATT_2018_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_LEX_SUSA_SEQ";
DROP SEQUENCE "COMPANY"."IMP_LOG_LOAD_SEQ";
DROP SEQUENCE "COMPANY"."IMP_RE_LEXWARE_SEQ";
DROP SEQUENCE "COMPANY"."IMP_TEL_MOBILCOM_RECH_OV_SEQ";
DROP SEQUENCE "COMPANY"."IMP_TEL_MOBILCOM_RECH_SEQ";
DROP SEQUENCE "COMPANY"."IMP_TEL_MOBILCOM_RECH_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_TEL_O2_SEQ";
DROP SEQUENCE "COMPANY"."IMP_TEL_O2_SEQ1";
DROP SEQUENCE "COMPANY"."IMP_TEL_VODAFONE_SEQ";
DROP SEQUENCE "COMPANY"."INP_BELEGE_ALL_SEQ";
DROP SEQUENCE "COMPANY"."INP_BELEGE_ALL_SEQ1";
DROP SEQUENCE "COMPANY"."INP_BELEGE_ALL_SEQ2";
DROP SEQUENCE "COMPANY"."INP_BELEGE_POS_ALL_SEQ";
DROP SEQUENCE "COMPANY"."KAS_KASSE_SEQ";
DROP SEQUENCE "COMPANY"."KAS_KASSE_SEQ1";
DROP SEQUENCE "COMPANY"."KTO_Girokonto_SEQ";
DROP SEQUENCE "COMPANY"."KTO_GIROKONTO_SEQ";
DROP SEQUENCE "COMPANY"."KTO_GIROKONTO_SEQ1";
DROP SEQUENCE "COMPANY"."KTO_Girokonto_SE8";
DROP SEQUENCE "COMPANY"."KTO_KONTO_SEQ";
DROP SEQUENCE "COMPANY"."KTO_Kreditkarte_SEQ";
DROP SEQUENCE "COMPANY"."KTO_KREDITKARTE_SEQ";
DROP SEQUENCE "COMPANY"."KTO_Kreditkarte_SEQ1";
DROP SEQUENCE "COMPANY"."KTO_KREDITKARTE_SEQ1";
DROP SEQUENCE "COMPANY"."KTO_Kreditkarte_SEQ2";
DROP SEQUENCE "COMPANY"."KTO_Kreditkarte_SEQ3";
DROP SEQUENCE "COMPANY"."KTO_Kreditkarte_SEQ4";
DROP SEQUENCE "COMPANY"."KTO_Kreditkarte_SEQ5";
DROP SEQUENCE "COMPANY"."KTO_PAYPAL_SEQ";
DROP SEQUENCE "COMPANY"."KTO_PAYPAL_SEQ1";
DROP SEQUENCE "COMPANY"."KTO_Paypal_SEQ2";
DROP SEQUENCE "COMPANY"."KTO_Tagesgeldkonto_SEQ";
DROP SEQUENCE "COMPANY"."KTO_TAGESGELDKONTO_SEQ";
DROP SEQUENCE "COMPANY"."KTO_Tagesgeldkonto_SEQ2";
DROP SEQUENCE "COMPANY"."PP_DOWNLOAD_SEQ";
DROP SEQUENCE "COMPANY"."PP_VORGANG_DOWNLOAD_SEQ";
DROP SEQUENCE "COMPANY"."PP_VORGANG_SEQ";
DROP SEQUENCE "COMPANY"."PP_Vorgang_SEQ1";
DROP SEQUENCE "COMPANY"."SEQ_ABSCHLUSSTYP";
DROP SEQUENCE "COMPANY"."SEQ_ADRESSE";
DROP SEQUENCE "COMPANY"."SEQ_ARBEITSTAGE";
DROP SEQUENCE "COMPANY"."SEQ_ARBEITSZEITEN";
DROP SEQUENCE "COMPANY"."SEQ_ARTIKEL";
DROP SEQUENCE "COMPANY"."SEQ_ARTIKELBESTANDTEILE";
DROP SEQUENCE "COMPANY"."SEQ_ARTIKELBESTANDTEILTYP";
DROP SEQUENCE "COMPANY"."SEQ_ARTIKELTYP";
DROP SEQUENCE "COMPANY"."SEQ_AUFGABE";
DROP SEQUENCE "COMPANY"."SEQ_BANK";
DROP SEQUENCE "COMPANY"."SEQ_BELEG";
DROP SEQUENCE "COMPANY"."SEQ_BELEGART";
DROP SEQUENCE "COMPANY"."SEQ_BELEGART_GRP";
DROP SEQUENCE "COMPANY"."SEQ_BELEGPOSITION";
DROP SEQUENCE "COMPANY"."SEQ_BELEGSEL";
DROP SEQUENCE "COMPANY"."SEQ_BESTELLUNG";
DROP SEQUENCE "COMPANY"."SEQ_BUCH";
DROP SEQUENCE "COMPANY"."SEQ_BUENDELUNG";
DROP SEQUENCE "COMPANY"."SEQ_EINSENDEAUFGABE";
DROP SEQUENCE "COMPANY"."SEQ_EINSENDEAUFGABENSTATUS";
DROP SEQUENCE "COMPANY"."SEQ_FRAGE";
DROP SEQUENCE "COMPANY"."SEQ_GESCHÄFTSPARTNER";
DROP SEQUENCE "COMPANY"."SEQ_GESCHÄFTSPARTNERTYP";
DROP SEQUENCE "COMPANY"."SEQ_HERSTELLER";
DROP SEQUENCE "COMPANY"."SEQ_INVENTARE";
DROP SEQUENCE "COMPANY"."SEQ_INVENTARTYP";
DROP SEQUENCE "COMPANY"."SEQ_KONTAKTTYP";
DROP SEQUENCE "COMPANY"."SEQ_LAGERORT";
DROP SEQUENCE "COMPANY"."SEQ_LOCATION";
DROP SEQUENCE "COMPANY"."SEQ_LOCATION_TYPE";
DROP SEQUENCE "COMPANY"."SEQ_MENGENEINHEIT";
DROP SEQUENCE "COMPANY"."SEQ_ORGANISATIONSEINHEIT";
DROP SEQUENCE "COMPANY"."SEQ_ORT";
DROP SEQUENCE "COMPANY"."SEQ_PACKUNGSTYP";
DROP SEQUENCE "COMPANY"."SEQ_PERSON";
DROP SEQUENCE "COMPANY"."SEQ_PLZ_ORT";
DROP SEQUENCE "COMPANY"."SEQ_PRODUKT";
DROP SEQUENCE "COMPANY"."SEQ_PROJEKT";
DROP SEQUENCE "COMPANY"."SEQ_PRUEFUNG";
DROP SEQUENCE "COMPANY"."SEQ_QUELLE";
DROP SEQUENCE "COMPANY"."SEQ_QUELLENTYP";
DROP SEQUENCE "COMPANY"."SEQ_RECHNUNG";
DROP SEQUENCE "COMPANY"."SEQ_RECHNUNGSTYP";
DROP SEQUENCE "COMPANY"."SEQ_REL_ARTIKEL_ARTIKELTYP";
DROP SEQUENCE "COMPANY"."SEQ_REL_ARTT_ARTT";
DROP SEQUENCE "COMPANY"."SEQ_REL_BELEG_INVENTAR";
DROP SEQUENCE "COMPANY"."SEQ_REL_BELEG_LOCATION";
DROP SEQUENCE "COMPANY"."SEQ_REL_BELEG_PRODUKT";
DROP SEQUENCE "COMPANY"."SEQ_REL_BEL_VERBRAUCHSMAT";
DROP SEQUENCE "COMPANY"."SEQ_REL_GESCHAEFTSP_KONT";
DROP SEQUENCE "COMPANY"."SEQ_REL_INVENTAR_ARTIKEL";
DROP SEQUENCE "COMPANY"."SEQ_REL_INVENTAR_INVENTARTYP";
DROP SEQUENCE "COMPANY"."SEQ_REL_LAGERORT_ARTIKEL";
DROP SEQUENCE "COMPANY"."SEQ_REL_RECHNG_STUNDEN";
DROP SEQUENCE "COMPANY"."SEQ_REL_RECHNUNG_BELEG";
DROP SEQUENCE "COMPANY"."SEQ_REL_RECHNUNG_STD";
DROP SEQUENCE "COMPANY"."SEQ_REL_STUNDENZETTEL_BELEG";
DROP SEQUENCE "COMPANY"."SEQ_STD_GROUP";
DROP SEQUENCE "COMPANY"."SEQ_STEUERSATZ";
DROP SEQUENCE "COMPANY"."SEQ_STUNDENZETTEL";
DROP SEQUENCE "COMPANY"."SEQ_T_KONTAKT";
DROP SEQUENCE "COMPANY"."SEQ_T_PACKUNGSTYP";
DROP SEQUENCE "COMPANY"."SEQ_T_PROJEKT";
DROP SEQUENCE "COMPANY"."SEQ_T_REL_FRAGE_LÖS";
DROP SEQUENCE "COMPANY"."SEQ_T_REL_INV_VERBRAUCHSMAT";
DROP SEQUENCE "COMPANY"."SEQ_T_REL_KONTAKT_KONTAKTTYP";
DROP SEQUENCE "COMPANY"."SEQ_T_REL_REZEPT_ARTIKEL";
DROP SEQUENCE "COMPANY"."SEQ_T_STD";
DROP SEQUENCE "COMPANY"."SEQ_T_STUNDENZETTEL";
DROP SEQUENCE "COMPANY"."SEQ_T_VERBRAUCHSMATERIAL";
DROP SEQUENCE "COMPANY"."SEQ_UMSATZART";
DROP SEQUENCE "COMPANY"."SEQ_VERBRAUCHSMATERIAL";
DROP SEQUENCE "COMPANY"."SEQ_VERBRAUCHSMAT_TYP";
DROP SEQUENCE "COMPANY"."SEQ_VERWENDUNGSZWECK";
DROP SEQUENCE "COMPANY"."STD_KONTOTYP_SEQ";
DROP SEQUENCE "COMPANY"."STD_OBERKATEGORIE_SEQ";
DROP SEQUENCE "COMPANY"."STD_VERWENDUNGSZWECK_SEQ";
DROP SEQUENCE "COMPANY"."T_ABL_ORDNER_PAGE_SEQ";
DROP SEQUENCE "COMPANY"."T_ABL_ORDNER_SEQ";
DROP SEQUENCE "COMPANY"."T_ABL_ORDNER_SEQ1";
DROP SEQUENCE "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_ABR_EN_STROMABLESUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_ABR_HOTELRECHNUNGEN_SEQ";
DROP SEQUENCE "COMPANY"."T_ABSCHLUSSTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_ADDFRIEND_SEQ";
DROP SEQUENCE "COMPANY"."T_ADR_ADRESSE_SCHNELL_SEQ";
DROP SEQUENCE "COMPANY"."T_ADR_ADRESSE_SEQ";
DROP SEQUENCE "COMPANY"."T_ADR_BUNDESLAND_SEQ";
DROP SEQUENCE "COMPANY"."T_ADRESSE_SCHNELL_SEQ";
DROP SEQUENCE "COMPANY"."T_ADRESSE_SEQ";
DROP SEQUENCE "COMPANY"."T_ADR_LAND_SEQ";
DROP SEQUENCE "COMPANY"."T_ADR_ORT_SEQ";
DROP SEQUENCE "COMPANY"."T_ADR_PLZ_ORT_SEQ";
DROP SEQUENCE "COMPANY"."T_ARBEITSTAGE_SEQ";
DROP SEQUENCE "COMPANY"."T_ARBEITSTAGE_SEQ1";
DROP SEQUENCE "COMPANY"."T_ARTIKELBESTANDTEILE_SEQ";
DROP SEQUENCE "COMPANY"."T_ARTIKELBESTANDTEILTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_ARTIKEL_SEQ";
DROP SEQUENCE "COMPANY"."T_ARTIKELTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_ARTIKELTYP_SEQ1";
DROP SEQUENCE "COMPANY"."T_AUDI_FIN_VERTRAG_POS_SEQ";
DROP SEQUENCE "COMPANY"."T_BAHN_SEQ";
DROP SEQUENCE "COMPANY"."T_BANKKONTO_SEQ";
DROP SEQUENCE "COMPANY"."T_BANKKONTO_SEQ1";
DROP SEQUENCE "COMPANY"."T_BANK_SEQ";
DROP SEQUENCE "COMPANY"."T_BARGELD_SEQ";
DROP SEQUENCE "COMPANY"."T_BAS_KAT_IMMO_SEQ";
DROP SEQUENCE "COMPANY"."T_BAS_KAT_KONTO_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_BAS_KONTO_BUCH_KAT_SEQ";
DROP SEQUENCE "COMPANY"."T_BAS_STEU_STEUER_SATZ_SEQ";
DROP SEQUENCE "COMPANY"."T_BEI_KK_KRANKENKASSE_DET_SEQ";
DROP SEQUENCE "COMPANY"."T_BEITRAG_SEQ";
DROP SEQUENCE "COMPANY"."T_BEITRAG_SEQ1";
DROP SEQUENCE "COMPANY"."T_BELEGART_GRP_SEQ";
DROP SEQUENCE "COMPANY"."T_BELEGART_SEQ";
DROP SEQUENCE "COMPANY"."T_BELEGART_SEQ1";
DROP SEQUENCE "COMPANY"."T_BELEGPOSITION_SEQ";
DROP SEQUENCE "COMPANY"."T_BELEG_SEQ";
DROP SEQUENCE "COMPANY"."T_BELEG_SEQ1";
DROP SEQUENCE "COMPANY"."T_BILD_BA_SEQ";
DROP SEQUENCE "COMPANY"."T_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_BUENDELUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_CAR_AUTO_VERSICHERUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_COMP_SEQ";
DROP SEQUENCE "COMPANY"."T_DB_OBJECT_LIST_SEQ";
DROP SEQUENCE "COMPANY"."T_DB_OBJ_OBJECT_LIST_SEQ";
DROP SEQUENCE "COMPANY"."T_DB_RENAME_SEQ";
DROP SEQUENCE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT_SEQ";
DROP SEQUENCE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_SEQ";
DROP SEQUENCE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_SEQ";
DROP SEQUENCE "COMPANY"."T_DUPLIKAT_CHECK_KONTROLLE_SEQ";
DROP SEQUENCE "COMPANY"."T_DUPLIKAT_CHECK_SEQ";
DROP SEQUENCE "COMPANY"."T_DUPLIKAT_SEQ";
DROP SEQUENCE "COMPANY"."T_EINSENDEAUFGABENSTATUS_SEQ";
DROP SEQUENCE "COMPANY"."T_EINSENDEAUFGABE_SEQ";
DROP SEQUENCE "COMPANY"."T_FARBE_SEQ";
DROP SEQUENCE "COMPANY"."T_FLI_AIR_AIRPORTS_SEQ";
DROP SEQUENCE "COMPANY"."T_FLI_APL_PLANE_SEQ";
DROP SEQUENCE "COMPANY"."T_GESCHAEFTSPARTNER_SEQ";
DROP SEQUENCE "COMPANY"."T_GESCHAEFTSPARTNER_SEQ1";
DROP SEQUENCE "COMPANY"."T_GESCHAEFTSPARTNERTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_HEIZUNGSABLESUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_HERSTELLER_SEQ";
DROP SEQUENCE "COMPANY"."T_IMP_BEL_SEQ";
DROP SEQUENCE "COMPANY"."T_IMP_KTO_GIR_KTO_SEQ";
DROP SEQUENCE "COMPANY"."T_IMP_LOG_LOAD_SEQ";
DROP SEQUENCE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET_SEQ";
DROP SEQUENCE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_SEQ";
DROP SEQUENCE "COMPANY"."T_IMP_TEL_VODAFONE_SEQ";
DROP SEQUENCE "COMPANY"."T_INP_BELEGE_ALL_SEQ";
DROP SEQUENCE "COMPANY"."T_INSURANCE_YEARLY_SEQ";
DROP SEQUENCE "COMPANY"."T_INSURANCE_YEARLY_SEQ1";
DROP SEQUENCE "COMPANY"."T_INTERNETPORTAL_APP_SEQ";
DROP SEQUENCE "COMPANY"."T_INT_INTERNETPORTAL_APP_SEQ";
DROP SEQUENCE "COMPANY"."T_INVENTARE_SEQ";
DROP SEQUENCE "COMPANY"."T_INVENTARE_SEQ1";
DROP SEQUENCE "COMPANY"."T_INVENTARTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_INVENTARTYP_SEQ1";
DROP SEQUENCE "COMPANY"."T_INV_INVENTARE_SEQ";
DROP SEQUENCE "COMPANY"."T_KAL_TERMINE_SEQ";
DROP SEQUENCE "COMPANY"."T_KON_GESCHAEFTSPARTNER_SEQ";
DROP SEQUENCE "COMPANY"."T_KON_PERSON_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTAKT_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTAKTTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_GRP_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_KAT_GRP_S";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_KAT_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_KL_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_SEQ1";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_KONTEN_TYP_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTENPLAN_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTINENT_LAND_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTINENT_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTOAUSZUG_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTO_AUSZUG_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTO_BUCH_KAT_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTO_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_KONTO_BUCH_SEQ1";
DROP SEQUENCE "COMPANY"."T_KONTROLLE_SEQ";
DROP SEQUENCE "COMPANY"."T_KTO_BANKKONTO_SEQ";
DROP SEQUENCE "COMPANY"."T_KTO_GIROKONTO_SEQ";
DROP SEQUENCE "COMPANY"."T_KTO_KAS_KASSE_SEQ";
DROP SEQUENCE "COMPANY"."T_KTO_KONTO_AUSZUG_SEQ";
DROP SEQUENCE "COMPANY"."T_KZ_KENNZAHLEN_SEQ";
DROP SEQUENCE "COMPANY"."T_LAND_SEQ";
DROP SEQUENCE "COMPANY"."T_LEHRGANG_SEQ";
DROP SEQUENCE "COMPANY"."T_LEX_BANK_KONTO_SEQ";
DROP SEQUENCE "COMPANY"."T_LEX_IMP_SEQ";
DROP SEQUENCE "COMPANY"."T_LEX_KONTENBLATT_SEQ";
DROP SEQUENCE "COMPANY"."T_LEX_LONG_COMM_SEQ";
DROP SEQUENCE "COMPANY"."T_LEX_SEQ";
DROP SEQUENCE "COMPANY"."T_LEX_SUSA_SEQ";
DROP SEQUENCE "COMPANY"."T_LOCATION_SEQ";
DROP SEQUENCE "COMPANY"."T_LOCATION_TYPE_SEQ";
DROP SEQUENCE "COMPANY"."T_LOCATION_TYPE_SEQ1";
DROP SEQUENCE "COMPANY"."T_LOC_LOCATION_SEQ";
DROP SEQUENCE "COMPANY"."T_LÖSUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_MASCH_KOMPONENTEN_SEQ";
DROP SEQUENCE "COMPANY"."T_MASCH_MATERIAL_SEQ";
DROP SEQUENCE "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHM_SEQ";
DROP SEQUENCE "COMPANY"."T_MASCH_PROJ_MATERIAL_SEQ";
DROP SEQUENCE "COMPANY"."T_MATCH_SEQ";
DROP SEQUENCE "COMPANY"."T_MDT_MANDANT_SEQ";
DROP SEQUENCE "COMPANY"."T_MENGENEINHEIT_SEQ";
DROP SEQUENCE "COMPANY"."T_MIETVERTRAG_SEQ";
DROP SEQUENCE "COMPANY"."T_NIEDERSCHLAGSMENGE_SEQ";
DROP SEQUENCE "COMPANY"."T_NIEDERSCHLAGSMENGE_SEQ1";
DROP SEQUENCE "COMPANY"."T_OFFENE_EINGANGSRECHNUNGEN_S";
DROP SEQUENCE "COMPANY"."T_OFFENE_EINGANGSRECHNUNGEN_SEQ";
DROP SEQUENCE "COMPANY"."T_ORGANISATIONSEINHEIT_SEQ";
DROP SEQUENCE "COMPANY"."T_ORT_SEQ";
DROP SEQUENCE "COMPANY"."T_ORT_SEQ1";
DROP SEQUENCE "COMPANY"."T_PACKUNGSTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_PERSON_SEQ";
DROP SEQUENCE "COMPANY"."T_PLZ_ORT_SEQ";
DROP SEQUENCE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_SEQ";
DROP SEQUENCE "COMPANY"."T_PROD_PRODUCT_SEQ";
DROP SEQUENCE "COMPANY"."T_PROJEKT_ART_SEQ";
DROP SEQUENCE "COMPANY"."T_PROJEKT_SEQ";
DROP SEQUENCE "COMPANY"."T_PROJEKT_SEQ1";
DROP SEQUENCE "COMPANY"."T_PROJ_PROJEKT_ANGEBOT_SEQ";
DROP SEQUENCE "COMPANY"."T_PROJ_PROJEKT_SEQ";
DROP SEQUENCE "COMPANY"."T_QUELLENTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_RECHNUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_RECHNUNG_SEQ1";
DROP SEQUENCE "COMPANY"."T_RECHNUNGSTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BARGELD_BELEG_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BELEGART_GRP_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BELEG_ARTIKEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BELEG_INVENTAR_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BELEG_LOCATION_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BEL_KONT_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BEL_LEX_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_BEL_VERBRAUCHSMAT_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_GESCHAEFTSP_KONT_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_IMP_BEL_BEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_IMP_BEL_BEL_SEQ_V";
DROP SEQUENCE "COMPANY"."T_REL_IMP_BEL_BEL_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_INVENTAR_ARTIKEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_INVENTAR_BARZAHL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_INVENTAR_ZAHLUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_INV_VERBRAUCHSMAT_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONTAKT_KONTAKTTYP_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONTAKTPERSON_ADRESSE_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONT_BUCH_IMP_BEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONT_BUCH_IMP_BEL_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_KONT_BUCH_KONT_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONT_BUCH_KONT_BUCH_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_KONT_BUCH_LEX_BUCH_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONTENPLAN_KTO_KTO_KAT_";
DROP SEQUENCE "COMPANY"."T_REL_KONTINENT_LAND_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONTINENT_LAND_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_KONTINENT_LAND_SEQ2";
DROP SEQUENCE "COMPANY"."T_REL_KONTO_AUSZUG_BILD_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONTO_AUSZUG_GIR_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_KONTO_AUSZUG_GIR_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_LAGERORT_ARTIKEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_LEX_KTO_BEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_LEX_KTO_BEL_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_LEX_LEX_BANKKONTO_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_LEX_LEX_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_LEX_LEX_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_PROJEKT_LOCATION_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_PROJEKT_ZAHLUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_RECHNG_STUNDEN_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_RECHNUNG_BELEG_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_RECHNUNG_STUNDENZETTEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_RECHNUNG_STUNDENZETTEL_1";
DROP SEQUENCE "COMPANY"."T_REL_RECHNUNG_ZAHLUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_RECHNUNG_ZAHLUNG_SEQ1";
DROP SEQUENCE "COMPANY"."T_REL_STEUER_LOHN_INP_BEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_STEUER_LOHN_ZAHL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_STEUER_MONAT_BEL_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_STEUER_MONAT_RECH_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_STEUER_SATZ_GÜLT_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_STUNDENZETTEL_BELEG_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_TXT_REPLACED_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_VERPFL_BEELG_SRC_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_VERPFL_BELEGE_ORT_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_VERPFL_BELEG_ORT_SEQ";
DROP SEQUENCE "COMPANY"."T_REL_VERPFL_BELEG_SRC_SEQ";
DROP SEQUENCE "COMPANY"."T_RV_AUSZUG_PAGE_DET_SEQ";
DROP SEQUENCE "COMPANY"."T_RV_AUSZUG_PAGE_SEQ";
DROP SEQUENCE "COMPANY"."T_RV_AUSZUG_SEQ";
DROP SEQUENCE "COMPANY"."T_SEPA_VORLAGEN_SEQ";
DROP SEQUENCE "COMPANY"."T_STD_GROUP_SEQ";
DROP SEQUENCE "COMPANY"."T_STD_GROUP_SEQ1";
DROP SEQUENCE "COMPANY"."T_STD_SEQ";
DROP SEQUENCE "COMPANY"."T_STD_SEQ1";
DROP SEQUENCE "COMPANY"."T_STEUER_JAHR_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_JAHR_TODO_GRP_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_JAHR_TODO_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_KRANKENKASSE_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_LOHN_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_LOHN_SEQ1";
DROP SEQUENCE "COMPANY"."T_STEUER_LOHNSTEUERKARTE_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_MONAT_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_MONAT_TODO_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUERNUMMER_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUERNUMMER_SEQ1";
DROP SEQUENCE "COMPANY"."T_STEUER_SATZ_LEX_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUERSATZ_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUERSATZ_SEQ1";
DROP SEQUENCE "COMPANY"."T_STEUER_VERPFL_MEHRAUFWD_DET_SEQ";
DROP SEQUENCE "COMPANY"."T_STEUER_VORANMLDG_SEQ";
DROP SEQUENCE "COMPANY"."T_STEU_STEUER_VORANMLDG_SEQ";
DROP SEQUENCE "COMPANY"."T_STROMABLESUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_STROMABLESUNG_SEQ1";
DROP SEQUENCE "COMPANY"."T_STUNDENZETTEL_SEQ";
DROP SEQUENCE "COMPANY"."T_TEL_TELEFONKARTEN_SEQ";
DROP SEQUENCE "COMPANY"."T_TEMP_BELEG_SEQ";
DROP SEQUENCE "COMPANY"."T_TERMINE_SEQ";
DROP SEQUENCE "COMPANY"."T_TERMINE_SEQ1";
DROP SEQUENCE "COMPANY"."T_TXT_REPLACE_CONTEXT_SEQ";
DROP SEQUENCE "COMPANY"."T_TXT_REPLACED_SEQ";
DROP SEQUENCE "COMPANY"."T_TXT_REPLACE_SEQ";
DROP SEQUENCE "COMPANY"."T_UMTAUSCHKURS_SEQ";
DROP SEQUENCE "COMPANY"."T_UNTERLAGEN_SEQ";
DROP SEQUENCE "COMPANY"."T_USER_SEQ";
DROP SEQUENCE "COMPANY"."T_VERBRAUCHSMATERIAL_SEQ";
DROP SEQUENCE "COMPANY"."T_VERBRAUCHSMAT_TYP_SEQ";
DROP SEQUENCE "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_DET_SEQ";
DROP SEQUENCE "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_SEQ";
DROP SEQUENCE "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_SEQ1";
DROP SEQUENCE "COMPANY"."T_VERTRAG_SEQ";
DROP SEQUENCE "COMPANY"."T_VER_VERTRAG_MIETE_SEQ";
DROP SEQUENCE "COMPANY"."T_VER_VERTRAG_SEQ";
DROP SEQUENCE "COMPANY"."T_VERWENDUNGSZWECK_SEQ";
DROP SEQUENCE "COMPANY"."T_WAEHRUNG_SEQ";
DROP SEQUENCE "COMPANY"."T_WET_NIEDERSCHLAGSMENGE_SEQ";
DROP SEQUENCE "COMPANY"."T_WET_NIEDERSCHLAGSMENGE_SEQ1";
DROP SEQUENCE "COMPANY"."T_ZAHLUNGSÜBERSICHTEN_SEQ";
DROP TABLE "COMPANY"."ADR_ADDRESS" cascade constraints;
DROP TABLE "COMPANY"."ADR_CITY" cascade constraints;
DROP TABLE "COMPANY"."ADR_COUNTRY" cascade constraints;
DROP TABLE "COMPANY"."AHNENTAFEL" cascade constraints;
DROP TABLE "COMPANY"."AHNENTAFEL_DISP" cascade constraints;
DROP TABLE "COMPANY"."AIRORT_NR" cascade constraints;
DROP TABLE "COMPANY"."AIRPORTS" cascade constraints;
DROP TABLE "COMPANY"."APL_ENGINE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."APL_MAINT" cascade constraints;
DROP TABLE "COMPANY"."APL_MAINT_PROGR" cascade constraints;
DROP TABLE "COMPANY"."APL_PLANE" cascade constraints;
DROP TABLE "COMPANY"."APL_PLANE_MODELL" cascade constraints;
DROP TABLE "COMPANY"."APL_PLANE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."ARP_AIRPORT" cascade constraints;
DROP TABLE "COMPANY"."BAK_BANKACCOUNT" cascade constraints;
DROP TABLE "COMPANY"."BAK_BANKACCOUNT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."BAS_BASIC" cascade constraints;
DROP TABLE "COMPANY"."BAS_BASIC_GRP" cascade constraints;
DROP TABLE "COMPANY"."BEST_POS" cascade constraints;
DROP TABLE "COMPANY"."BILDER" cascade constraints;
DROP TABLE "COMPANY"."BILDER_TAB" cascade constraints;
DROP TABLE "COMPANY"."BOR_BORD_LOG" cascade constraints;
DROP TABLE "COMPANY"."BOR_BORD_LOG_ENTRY" cascade constraints;
DROP TABLE "COMPANY"."BOR_BORD_LOG_ENTRY_ADD" cascade constraints;
DROP TABLE "COMPANY"."BOR_BORD_LOG_ENTRY_GRP" cascade constraints;
DROP TABLE "COMPANY"."BOR_BORD_LOG_ENTRY_HOB_RPM" cascade constraints;
DROP TABLE "COMPANY"."CON_CONTACT" cascade constraints;
DROP TABLE "COMPANY"."CON_CONTACT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."COST_COST_GRP" cascade constraints;
DROP TABLE "COMPANY"."DOC_DOCUMENT" cascade constraints;
DROP TABLE "COMPANY"."DOC_DOCUMENT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."DOC_USAGE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."ELTERN" cascade constraints;
DROP TABLE "COMPANY"."FAMILIE" cascade constraints;
DROP TABLE "COMPANY"."FAMILIE_BILD" cascade constraints;
DROP TABLE "COMPANY"."FLI_FLIGHT" cascade constraints;
DROP TABLE "COMPANY"."FLI_FLIGHT_COMMENTS" cascade constraints;
DROP TABLE "COMPANY"."FLI_FLIGHT_DISCOUNT_REASONS" cascade constraints;
DROP TABLE "COMPANY"."FLI_FLIGHT_DISCOUNTS" cascade constraints;
DROP TABLE "COMPANY"."GAL_GAIN_AND_LOSS" cascade constraints;
DROP TABLE "COMPANY"."GESCHWISTER" cascade constraints;
DROP TABLE "COMPANY"."HAN_HANGAR" cascade constraints;
DROP TABLE "COMPANY"."IMP_AIR_AIRPORTS_ALPHABET" cascade constraints;
DROP TABLE "COMPANY"."IMP_AIR_AIRPORTS_ARTIFICIAL" cascade constraints;
DROP TABLE "COMPANY"."IMP_AIR_AIRPORTS_INTERNATIONAL" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_ALLG_BEL" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_BEL_DET" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_BUSSGELDER" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_COWORKING" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_GRENZBELEGE" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_OEFFENTL_TICKETS" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_PARKTICKETS" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_SONSTIGE_BELEGE" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_TANKSTELLE" cascade constraints;
DROP TABLE "COMPANY"."IMP_BA_UNTERHALTUNG" cascade constraints;
DROP TABLE "COMPANY"."IMP_GEO" cascade constraints;
DROP TABLE "COMPANY"."IMP_KRED_OV_OLD" cascade constraints;
DROP TABLE "COMPANY"."INV_INVOICE" cascade constraints;
DROP TABLE "COMPANY"."INV_INVOICE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."LAND" cascade constraints;
DROP TABLE "COMPANY"."LAN_LANDING" cascade constraints;
DROP TABLE "COMPANY"."LEBENSPARTNER" cascade constraints;
DROP TABLE "COMPANY"."LEBENSPARTNER_BILD" cascade constraints;
DROP TABLE "COMPANY"."MDT_MANDANT" cascade constraints;
DROP TABLE "COMPANY"."ORG_UNIT" cascade constraints;
DROP TABLE "COMPANY"."ORG_UNIT_CHECK_OUT" cascade constraints;
DROP TABLE "COMPANY"."ORG_UNIT_REL_TYPE" cascade constraints;
DROP TABLE "COMPANY"."ORG_UNIT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."ORT" cascade constraints;
DROP TABLE "COMPANY"."PAY_PAYMENT" cascade constraints;
DROP TABLE "COMPANY"."PAY_PAYMENT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."PERSON" cascade constraints;
DROP TABLE "COMPANY"."PERSON_BERUF" cascade constraints;
DROP TABLE "COMPANY"."PERSON_BILD" cascade constraints;
DROP TABLE "COMPANY"."PERSON_FAMILIE" cascade constraints;
DROP TABLE "COMPANY"."PERSON_KONTAKTDATEN" cascade constraints;
DROP TABLE "COMPANY"."PERSON_OFFENE_PUNKTE" cascade constraints;
DROP TABLE "COMPANY"."PERSON_RELIGION" cascade constraints;
DROP TABLE "COMPANY"."PERSON_WOHNORT" cascade constraints;
DROP TABLE "COMPANY"."PLA_ENGINE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."PLZ_ORT" cascade constraints;
DROP TABLE "COMPANY"."PROJ1_ADDFRIEND" cascade constraints;
DROP TABLE "COMPANY"."PROJ1_ADDFRIEND_RELATIONS" cascade constraints;
DROP TABLE "COMPANY"."REL_AIRPORT_LOCATION" cascade constraints;
DROP TABLE "COMPANY"."REL_BORD_LOG_ENTRY_PAY" cascade constraints;
DROP TABLE "COMPANY"."REL_CONTACT_ADDRESS" cascade constraints;
DROP TABLE "COMPANY"."REL_CONTACT_BANKACCOUNT" cascade constraints;
DROP TABLE "COMPANY"."REL_DOC_CONTACT" cascade constraints;
DROP TABLE "COMPANY"."REL_DOC_FLIGHT" cascade constraints;
DROP TABLE "COMPANY"."REL_DOC_HANGAR" cascade constraints;
DROP TABLE "COMPANY"."REL_DOC_PLANE" cascade constraints;
DROP TABLE "COMPANY"."REL_DOC_TYPE_USAGE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."REL_INV_PL_FLI_CH" cascade constraints;
DROP TABLE "COMPANY"."REL_ORG_UNIT_CON" cascade constraints;
DROP TABLE "COMPANY"."REL_ORG_UNIT_CON_ORG_REL_TYPE" cascade constraints;
DROP TABLE "COMPANY"."REL_PAY_PLANE_FLI_CH" cascade constraints;
DROP TABLE "COMPANY"."REL_PLANE_FLIGHT" cascade constraints;
DROP TABLE "COMPANY"."REL_PLANE_FLIGHT_CHARTERER" cascade constraints;
DROP TABLE "COMPANY"."RES_RESERVATION" cascade constraints;
DROP TABLE "COMPANY"."SPARCHILD" cascade constraints;
DROP TABLE "COMPANY"."SPARCHILD1" cascade constraints;
DROP TABLE "COMPANY"."STD_PARAM" cascade constraints;
DROP TABLE "COMPANY"."STD_PARAM_ATTR" cascade constraints;
DROP TABLE "COMPANY"."STRASSE" cascade constraints;
DROP TABLE "COMPANY"."T_ABL_ORDNER" cascade constraints;
DROP TABLE "COMPANY"."T_ABL_ORDNER_PAGE" cascade constraints;
DROP TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABLESUNG_DETAILS" cascade constraints;
DROP TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG" cascade constraints;
DROP TABLE "COMPANY"."T_ABR_EN_STROMABLESUNG" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_ADRESSE" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_ADRESSE_SCHNELL" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_KONTINENT" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_LAND" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_ORT" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_ORT_KOORDINATEN" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_PLZ_ORT" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_PLZ_ORT_BUNDESLAND" cascade constraints;
DROP TABLE "COMPANY"."T_ADR_REGION" cascade constraints;
DROP TABLE "COMPANY"."T_AHN_AHNENTAFEL" cascade constraints;
DROP TABLE "COMPANY"."T_AHN_FAMILIE" cascade constraints;
DROP TABLE "COMPANY"."T_AHN_PERSON_STAMM" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_BAS_FARBE" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_BAS_MENGENEINHEIT" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_BEL_BELEGART" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_BEL_BELEGART_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_DOC_DOCUMENT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_FLI_APL_PLANE_MODELL" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_INV_INVENTARTYP" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_KAL_ARBEITSTAGE" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_KAT_IMMO" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_KAT_KATEGORIE" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_KAT_OBERKATEGORIE" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_KON_GESCHAEFTSPARTNERTYP" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_KON_KONTAKTTYP" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_LOC_LOCATION_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_MON_UMTAUSCHKURS" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_MON_WAEHRUNG" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_ORG_ORG_UNIT" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_PROJ_PROJEKT_ART_OLD" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_STEU_STEUER_SATZ" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBESTANDTEILTYP" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBUENDELUNG" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELTYP" cascade constraints;
DROP TABLE "COMPANY"."T_BAS_WH_PACKUNGSTYP" cascade constraints;
DROP TABLE "COMPANY"."T_BEI_KK_KRANKENKASSE_DET" cascade constraints;
DROP TABLE "COMPANY"."T_BEL_BELEG" cascade constraints;
DROP TABLE "COMPANY"."T_BEL_BELEGPOSITION" cascade constraints;
DROP TABLE "COMPANY"."T_BEL_BELEGSEL" cascade constraints;
DROP TABLE "COMPANY"."T_BILD_BILDER" cascade constraints;
DROP TABLE "COMPANY"."T_BOOK_BOOKING" cascade constraints;
DROP TABLE "COMPANY"."T_BOOK_RESERVATION" cascade constraints;
DROP TABLE "COMPANY"."T_BUCH_BUCH" cascade constraints;
DROP TABLE "COMPANY"."T_CALC_MATCH" cascade constraints;
DROP TABLE "COMPANY"."T_CAR_AUTO_ERSATZTEILE" cascade constraints;
DROP TABLE "COMPANY"."T_CAR_AUTO_VERMIETUNG" cascade constraints;
DROP TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG" cascade constraints;
DROP TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG_POS" cascade constraints;
DROP TABLE "COMPANY"."T_CLOB" cascade constraints;
DROP TABLE "COMPANY"."T_COMP_COMPANY" cascade constraints;
DROP TABLE "COMPANY"."T_CONTR_DUPLIKAT" cascade constraints;
DROP TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK" cascade constraints;
DROP TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK_KONTR" cascade constraints;
DROP TABLE "COMPANY"."T_CONTR_KATEGORIE_ZAHLUNG" cascade constraints;
DROP TABLE "COMPANY"."T_CONTR_KONTROLLE" cascade constraints;
DROP TABLE "COMPANY"."T_COST_COST_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_COST_GAIN_AND_LOSS" cascade constraints;
DROP TABLE "COMPANY"."T_DB_APPLICATION" cascade constraints;
DROP TABLE "COMPANY"."T_DB_CONTAINER" cascade constraints;
DROP TABLE "COMPANY"."T_DB_DATENBANK" cascade constraints;
DROP TABLE "COMPANY"."T_DB_OBJ_OBJECT_LIST" cascade constraints;
DROP TABLE "COMPANY"."T_DB_RENAME" cascade constraints;
DROP TABLE "COMPANY"."T_DB_SERVER" cascade constraints;
DROP TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT" cascade constraints;
DROP TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT" cascade constraints;
DROP TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD" cascade constraints;
DROP TABLE "COMPANY"."T_DB_TXT_REPLACE" cascade constraints;
DROP TABLE "COMPANY"."T_DB_TXT_REPLACE_CONTEXT" cascade constraints;
DROP TABLE "COMPANY"."T_DB_TXT_REPLACE_LOG" cascade constraints;
DROP TABLE "COMPANY"."T_DOC_DOCUMENT" cascade constraints;
DROP TABLE "COMPANY"."T_DOC_USAGE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."TEMP_ERG" cascade constraints;
DROP TABLE "COMPANY"."T_ERF_BEL_KOMP" cascade constraints;
DROP TABLE "COMPANY"."T_ERF_BEL_KOMP_DET" cascade constraints;
DROP TABLE "COMPANY"."T_ERF_BEL_KRANKENKASSE" cascade constraints;
DROP TABLE "COMPANY"."TEST" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_AIR_AIRPORTS" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_AIR_HANGAR" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_APL_MAINT" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_APL_MAINT_PROGR" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_APL_PLANE" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_APL_PLANE_ENGINE" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_APL_PLANE_ENGINE_MODELL" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_BOR_BORD_LOG" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY_ADD" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY_HOB_RPM" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_FLI_FLIGHT" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_FLI_FLIGHT_COMMENTS" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_FLI_FLIGHT_DISCOUNT_REASONS" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_FLI_FLIGHT_DISCOUNTS" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_FLI_FLIGHT_STEPS" cascade constraints;
DROP TABLE "COMPANY"."T_FLI_FLIGHT_START_LANDING" cascade constraints;
DROP TABLE "COMPANY"."T_IMMO_OBJEKT" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_ADR" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_BEL" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_HOTEL_BOOKING" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_INP_BELEGE_ALL" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KON_KONTAKTDATEN" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_BANK2" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_BANK3" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_BANK4" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_BANK5" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_BANK6" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_BANK7" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_GIR_KTO" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_GIR_NORIS" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_GIR_POST" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_ING_DIBA" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_KRED" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_PAY" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_KTO_062017" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_EXP_ACII" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2017" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2018_1" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2018_2" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2019" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2020" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_LONG" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_RE" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LEX_TEST" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LIST" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_LOG_LOAD" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_CONGSTAR_RECH" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_CONGSTAR_RECH_DET" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_OV" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_O2" cascade constraints;
DROP TABLE "COMPANY"."T_IMP_TEL_VODAFONE" cascade constraints;
DROP TABLE "COMPANY"."T_INP_BELEGE_ALL" cascade constraints;
DROP TABLE "COMPANY"."T_INP_BELEGE_POS_ALL" cascade constraints;
DROP TABLE "COMPANY"."T_INT_INTERNETPORTAL_APP" cascade constraints;
DROP TABLE "COMPANY"."T_INV_ANL_RESTBUCHWERT" cascade constraints;
DROP TABLE "COMPANY"."T_INV_INVENTARE" cascade constraints;
DROP TABLE "COMPANY"."T_INV_KOMP_KOMPONENTEN" cascade constraints;
DROP TABLE "COMPANY"."T_INV_SUB_ELEKTRONIK" cascade constraints;
DROP TABLE "COMPANY"."T_KAL_TERMINE" cascade constraints;
DROP TABLE "COMPANY"."T_KON_GESCHAEFTSPARTNER" cascade constraints;
DROP TABLE "COMPANY"."T_KON_KONTAKT" cascade constraints;
DROP TABLE "COMPANY"."T_KON_PERSON" cascade constraints;
DROP TABLE "COMPANY"."T_KON_PERSON_OFFENE_PUNKTE" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_BANK" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_BANKKONTO" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_DOWNLOAD" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_GIROKONTO" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_KAS_KASSE" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_KONTO_AUSZUG" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_KONTO_BUCH" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_KREDITKARTE" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_PAYPAL" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_PP_VORGANG" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_PP_VORGANG_DOWNLOAD" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_SEPA_VORLAGEN" cascade constraints;
DROP TABLE "COMPANY"."T_KTO_TAGESGELDKONTO" cascade constraints;
DROP TABLE "COMPANY"."T_KZ_KENNZAHLEN" cascade constraints;
DROP TABLE "COMPANY"."T_LEHR_EINSENDEAUFGABE" cascade constraints;
DROP TABLE "COMPANY"."T_LEHR_FRAGE" cascade constraints;
DROP TABLE "COMPANY"."T_LEHR_LEHRGANG" cascade constraints;
DROP TABLE "COMPANY"."T_LEHR_LOESUNG" cascade constraints;
DROP TABLE "COMPANY"."T_LEX" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENBLATT" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KL" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_TYP" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_KONTENPLAN_NEU" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_LONG" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_LONG_COMM" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_LONG_IMP" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_SACHKONTEN" cascade constraints;
DROP TABLE "COMPANY"."T_LEX_SUSA" cascade constraints;
DROP TABLE "COMPANY"."T_LOC_LOCATION" cascade constraints;
DROP TABLE "COMPANY"."T_LOC_LOCATION_SUB" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_ANLAGEN" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_BAND" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_BAND_STATIONEN" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_KOMPONENTEN" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_MATERIAL" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNGEN" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHME" cascade constraints;
DROP TABLE "COMPANY"."T_MASCH_PROJ_MATERIAL" cascade constraints;
DROP TABLE "COMPANY"."T_MDT_MANDANT" cascade constraints;
DROP TABLE "COMPANY"."T_ORG_BEITRAG" cascade constraints;
DROP TABLE "COMPANY"."T_ORG_UNIT" cascade constraints;
DROP TABLE "COMPANY"."T_ORG_UNIT_CHECK_OUT" cascade constraints;
DROP TABLE "COMPANY"."T_ORG_UNIT_REL_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_ORG_UNIT_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_PLA_PLAN" cascade constraints;
DROP TABLE "COMPANY"."T_PLA_PLAN_DET" cascade constraints;
DROP TABLE "COMPANY"."T_PLA_PLAN_VERSION" cascade constraints;
DROP TABLE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE" cascade constraints;
DROP TABLE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" cascade constraints;
DROP TABLE "COMPANY"."T_PROD_PRODUCT" cascade constraints;
DROP TABLE "COMPANY"."T_PROJ_PROJEKT" cascade constraints;
DROP TABLE "COMPANY"."T_PROJ_PROJEKT_ANGEBOT" cascade constraints;
DROP TABLE "COMPANY"."T_PROJ_PROJEKT_MEILENSTEINE" cascade constraints;
DROP TABLE "COMPANY"."T_PROJ_REISEKOSTEN" cascade constraints;
DROP TABLE "COMPANY"."T_PROJ_STUNDENZETTEL" cascade constraints;
DROP TABLE "COMPANY"."TREE_TAB" cascade constraints;
DROP TABLE "COMPANY"."TREE_TAB1" cascade constraints;
DROP TABLE "COMPANY"."T_REL_ADR_KONTINENT_LAND" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_FAMILIE_BILD" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_PERSON_ELTERN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_PERSON_FAMILIE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_PERSON_GESCHWISTER" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_PERSON_LEBENSPARTNER" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_PERSON_LEBENSPARTNER_BILD" cascade constraints;
DROP TABLE "COMPANY"."T_REL_AHN_PERSON_RELIGION" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_BARGELD_BELEG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_BELEGART_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_BELEG_ARTIKEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_BELEG_INVENTAR" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_BELEG_LOCATION" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_KONT_BUCH" cascade constraints;
DROP TABLE "COMPANY"."T_REL_BEL_LEX" cascade constraints;
DROP TABLE "COMPANY"."T_REL_COMP_COMPANY_COMPANY" cascade constraints;
DROP TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" cascade constraints;
DROP TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART" cascade constraints;
DROP TABLE "COMPANY"."T_REL_DB_TXT_REPLACED" cascade constraints;
DROP TABLE "COMPANY"."T_REL_DOC_DOCUMENT_CONTACT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_DOC_DOCUMENT_TYPE_USAGE_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_AIRPORT_LOCATION" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_BORD_LOG_ENTRY_PAYMENT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_FLIGHT_DOCUMENT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_HANGAR_DOCUMENT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_PAYMENT_PLANE_FLIGHT_CH" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_PLANE_DOCUMENT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_PLANE_FLIGHT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_FLI_PLANE_FLIGHT_CHARTERER" cascade constraints;
DROP TABLE "COMPANY"."T_REL_IMP_BEL_BEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INV_INVENTAR_ARTIKEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INV_INVENTAR_BARZAHL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INV_INVENTAR_KOMPONENTEN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INV_INVENTAR_VERBRAUCHSMAT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_INV_INVENTAR_ZAHLUNG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KAT_KATEGORIE_BUCH_BELEG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_GESCHAEFTSPARTNER_KONTAKT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_KONTAKT_KONTAKTTYP" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_KONTAKTPERSON_ADRESSE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_PERSON_BANKKONTO" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_PERSON_BERUF" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_PERSON_BILD" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_PERSON_DOCUMENT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_PERSON_KONTAKTDATEN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KON_PERSON_WOHNORT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_IMP_BEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_LEX_BUCH" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_BILD" cascade constraints;
DROP TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" cascade constraints;
DROP TABLE "COMPANY"."T_REL_LEHR_FRAGE_LOESUNG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_LEX_KONTENPLAN_KTO_KTO_KAT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_LEX_KTO" cascade constraints;
DROP TABLE "COMPANY"."T_REL_LEX_KTO_BEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_LEX_LEX" cascade constraints;
DROP TABLE "COMPANY"."T_REL_LEX_LEX_BANKKONTO" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_PROJ_INBETRIEBNAHME_MATERIAL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_PROJ_INBETRIEBNAHME_PERSON" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MASCH_PROJ_PROJEKT_ANLAGEN" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MDT_MANDANT_STD" cascade constraints;
DROP TABLE "COMPANY"."T_REL_MDT_MANDANT_STD_GROUP" cascade constraints;
DROP TABLE "COMPANY"."T_REL_ORG_UNIT_CON_ORG_REL_TYPE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_ORG_UNIT_KONTAKT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_PROJ_ANGEBOT_PROJEKT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" cascade constraints;
DROP TABLE "COMPANY"."T_REL_PROJ_PROJECT_PAYMENT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_PROJ_STUNDEN_BELEG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_PROJ_STUNDENZETTEL_BELEG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG_NEU" cascade constraints;
DROP TABLE "COMPANY"."T_REL_RE_RECHNUNG_BOOKING_PLANE" cascade constraints;
DROP TABLE "COMPANY"."T_REL_RE_RECHNUNG_PLANE_FLIGHT_CH" cascade constraints;
DROP TABLE "COMPANY"."T_REL_RE_RECHNUNG_STUNDENZETTEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_RE_RECHNUNG_ZAHLUNG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_SOL_SOLUTION_SOLUTION" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_INP_BEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_ZAHLUNG" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_BEL" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_RECH" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_SATZ_GUELT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_ORT" cascade constraints;
DROP TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_SRC" cascade constraints;
DROP TABLE "COMPANY"."T_REL_WF_WORKFLOW_WORKFLOW" cascade constraints;
DROP TABLE "COMPANY"."T_REL_WH_ARTIKELTYP_ARTIKELTYP" cascade constraints;
DROP TABLE "COMPANY"."T_REL_WH_LAGERORT_ARTIKEL" cascade constraints;
DROP TABLE "COMPANY"."T_RE_RECHNUNG" cascade constraints;
DROP TABLE "COMPANY"."T_RE_RECHNUNG_MAHNUNG" cascade constraints;
DROP TABLE "COMPANY"."T_RE_SUB_HOTELRECHNUNGEN" cascade constraints;
DROP TABLE "COMPANY"."T_SOL_SOLUTION" cascade constraints;
DROP TABLE "COMPANY"."T_SOL_SOLUTION_DET" cascade constraints;
DROP TABLE "COMPANY"."T_STD" cascade constraints;
DROP TABLE "COMPANY"."T_STD_GROUP" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_BESCHEID_POS" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG_ANLAGE" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_JAHR" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO_GRP" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_KRANKENKASSE" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_LOHN" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_LOHNSTEUERKARTE" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_MONAT" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_MONAT_TODO" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_SATZ_LEX" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_STEUERNUMMER" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" cascade constraints;
DROP TABLE "COMPANY"."T_STEU_STEUER_VORANMLDG" cascade constraints;
DROP TABLE "COMPANY"."T_TEL_RECHNUNG_DET" cascade constraints;
DROP TABLE "COMPANY"."T_TEL_TELEFONKARTEN" cascade constraints;
DROP TABLE "COMPANY"."T_TEX_TEXTILREINIGUNG" cascade constraints;
DROP TABLE "COMPANY"."T_USM_USER" cascade constraints;
DROP TABLE "COMPANY"."T_VERK_BAHN" cascade constraints;
DROP TABLE "COMPANY"."T_VERS_INSURANCE_YEARLY" cascade constraints;
DROP TABLE "COMPANY"."T_VERS_RV_AUSZUG" cascade constraints;
DROP TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE" cascade constraints;
DROP TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE_DET" cascade constraints;
DROP TABLE "COMPANY"."T_VERS_VERSICHERUNG" cascade constraints;
DROP TABLE "COMPANY"."T_VER_VERTRAG" cascade constraints;
DROP TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK" cascade constraints;
DROP TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_POS" cascade constraints;
DROP TABLE "COMPANY"."T_VER_VERTRAG_MIETE" cascade constraints;
DROP TABLE "COMPANY"."T_WET_NIEDERSCHLAGSMENGE" cascade constraints;
DROP TABLE "COMPANY"."T_WF_WORKFLOW" cascade constraints;
DROP TABLE "COMPANY"."T_WF_WORKFLOW_DET" cascade constraints;
DROP TABLE "COMPANY"."T_WH_ART_ARTIKEL" cascade constraints;
DROP TABLE "COMPANY"."T_WH_ART_ARTIKELBESTANDTEILE" cascade constraints;
DROP TABLE "COMPANY"."T_WH_ART_ARTIKEL_BESTANDTEIL_INVENTURBESTAND" cascade constraints;
DROP TABLE "COMPANY"."T_WH_ART_ARTIKEL_INVENTUR" cascade constraints;
DROP TABLE "COMPANY"."T_WH_ART_ARTIKEL_INVENTURBESTAND" cascade constraints;
DROP TABLE "COMPANY"."T_WH_ART_ARTIKEL_SOLLBESTAND" cascade constraints;
DROP TABLE "COMPANY"."T_WH_WAREN_BEWEGUNG" cascade constraints;
DROP TABLE "COMPANY"."T_WH_WAREN_BEWEGUNG_DET" cascade constraints;
DROP VIEW "COMPANY"."V_ABL_ORDNER_PAGE";
DROP VIEW "COMPANY"."V_ADR";
DROP VIEW "COMPANY"."V_ADR_ADRESSE";
DROP VIEW "COMPANY"."V_ADR_ORT";
DROP VIEW "COMPANY"."V_ADR_PLZ_BUNDESLAND";
DROP VIEW "COMPANY"."V_ALL_KONT_BUCH";
DROP VIEW "COMPANY"."V_APX_BRANCH_FROM_TO";
DROP VIEW "COMPANY"."V_APX_BRANCH_FROM_TO_ALL";
DROP VIEW "COMPANY"."V_BEL_BELEG";
DROP VIEW "COMPANY"."V_BEL_BELEG_DAT";
DROP VIEW "COMPANY"."V_BEL_BELEG_DAT2";
DROP VIEW "COMPANY"."V_BEL_BELEG_RECHNUNG";
DROP VIEW "COMPANY"."V_BOR_BORD_LOG";
DROP VIEW "COMPANY"."V_BUCHUNGSTATUS_OLD";
DROP VIEW "COMPANY"."V_CALC_BEL_BETRAG";
DROP VIEW "COMPANY"."V_CALC_BEL_POS_BETRAG";
DROP VIEW "COMPANY"."V_CHECK_DATE_FORMAT_LEX_BELEGDAT";
DROP VIEW "COMPANY"."V_CHECK_GIR";
DROP VIEW "COMPANY"."V_CHECK_KRED";
DROP VIEW "COMPANY"."V_CHK_TREE_TAB";
DROP VIEW "COMPANY"."V_CHK_TREE_TAB_LEV_ABSTAND";
DROP VIEW "COMPANY"."V_CNT_OK_LEX";
DROP VIEW "COMPANY"."V_COMP_INP_BELEGE_ALL";
DROP VIEW "COMPANY"."V_COMP_INP_BELEGE_ALL1";
DROP VIEW "COMPANY"."V_COMP_TABLES";
DROP VIEW "COMPANY"."V_CON_DOC_EXISTS";
DROP VIEW "COMPANY"."V_CONTR_KONTROLLE";
DROP VIEW "COMPANY"."V_DB_CHECK_TABLE";
DROP VIEW "COMPANY"."V_DB_CHECK_TABLE_CONTENT";
DROP VIEW "COMPANY"."V_DB_CHECK_TABLE_CONTENT_LOAD";
DROP VIEW "COMPANY"."V_DB_DEPENDENCY";
DROP VIEW "COMPANY"."V_DISP_AHNENTAFEL";
DROP VIEW "COMPANY"."V_DISP_LEBENSPARTNER";
DROP VIEW "COMPANY"."V_DOC_MISS_INVAL";
DROP VIEW "COMPANY"."V_FLI_FLIGHT";
DROP VIEW "COMPANY"."V_GET_ORACLE_VERSION";
DROP VIEW "COMPANY"."V_GET_SPLIT_NR";
DROP VIEW "COMPANY"."V_GROUPING_SETS";
DROP VIEW "COMPANY"."V_IMP_BEL_ZUS";
DROP VIEW "COMPANY"."V_IMP_KONTEN_CHECK";
DROP VIEW "COMPANY"."V_IMP_KONTEN_CHEDK";
DROP VIEW "COMPANY"."V_IMP_TEL_CONTROL";
DROP VIEW "COMPANY"."V_INP_BELEGE_ALL";
DROP VIEW "COMPANY"."V_INP_BELEGE_ALL_IMP";
DROP VIEW "COMPANY"."V_INV_INVENTARE";
DROP VIEW "COMPANY"."V_KON_GESCHAEFTSPARTNER";
DROP VIEW "COMPANY"."V_KONTR_CNT_LEX_ZAHL";
DROP VIEW "COMPANY"."V_KONTR_CNT_LEX_ZAHL_bel";
DROP VIEW "COMPANY"."V_KONTR_DUPL_BUCHUNGSTEXT";
DROP VIEW "COMPANY"."V_KONTR_DUPL_DATUM_BETRAG";
DROP VIEW "COMPANY"."V_KONTR_OK_LEX";
DROP VIEW "COMPANY"."V_KTO_BUCHUNG";
DROP VIEW "COMPANY"."V_KTO_KONTEN_ZUS";
DROP VIEW "COMPANY"."V_KTO_KONTO_AUSZUG";
DROP VIEW "COMPANY"."V_KTO_KONTO_AUSZUG_BUCH";
DROP VIEW "COMPANY"."V_KTO_KONTO_AUSZUG_OV";
DROP VIEW "COMPANY"."V_KTO_STAND_GIR";
DROP VIEW "COMPANY"."V_KTO_ZAHLUNGSWIEDERHOLUNG";
DROP VIEW "COMPANY"."V_LEX_BUCH_CHECK";
DROP VIEW "COMPANY"."V_LEX_BUCH_KTO";
DROP VIEW "COMPANY"."V_LEX_BUCH_KTO_BEL_ALL";
DROP VIEW "COMPANY"."V_LEX_BUCH_KTO_NEU";
DROP VIEW "COMPANY"."V_LEX_DUPL_JAHR_BETR";
DROP VIEW "COMPANY"."V_LEX_FORMAT_BELEGDAT_1";
DROP VIEW "COMPANY"."V_LEX_FORMAT_BELEGDAT_2";
DROP VIEW "COMPANY"."V_LEX_HOTEL_SUB_BUCH";
DROP VIEW "COMPANY"."V_LEX_KTBL_DIFF_YEARS";
DROP VIEW "COMPANY"."V_LOC_LOCATION";
DROP VIEW "COMPANY"."V_PROJ_LEBENSLAUF";
DROP VIEW "COMPANY"."V_PROJ_PROJEKTE";
DROP VIEW "COMPANY"."V_REL_LEX";
DROP VIEW "COMPANY"."V_REL_LEX_KTO";
DROP VIEW "COMPANY"."V_REL_LEX_KTO_BEL";
DROP VIEW "COMPANY"."V_REL_LEX_REL_BEL";
DROP VIEW "COMPANY"."V_REL_LEX_REL_KTO";
DROP VIEW "COMPANY"."V_REL_LEX1";
DROP VIEW "COMPANY"."V_REP_AHNENTAFEL_DISP";
DROP VIEW "COMPANY"."V_REP_CONTR_FOTO";
DROP VIEW "COMPANY"."V_RE_RATIO";
DROP VIEW "COMPANY"."V_RE_RENR";
DROP VIEW "COMPANY"."V_ROLLUP";
DROP VIEW "COMPANY"."V_STEU_STEUER_DATUM_OK";
DROP VIEW "COMPANY"."V_STEU_STEUER_GES";
DROP VIEW "COMPANY"."V_STEU_STEUER_SATZ";
DROP VIEW "COMPANY"."V_STEU_STEUER_VERPFL_ROUTE";
DROP VIEW "COMPANY"."V_STEU_STEUER_VORANMELD_ZUORD_KAS_SPLIT";
DROP VIEW "COMPANY"."V_TXT_SPLIT";
DROP VIEW "COMPANY"."VU_AIRPORTS_IATA_BUCHSTABEN";
DROP VIEW "COMPANY"."V1";
DROP PROCEDURE "COMPANY"."GETCOMPINPBELEGEALL";
DROP PROCEDURE "COMPANY"."LOAD_KTBL_2018";
DROP PROCEDURE "COMPANY"."LOAD_KTBL_2019";
DROP PROCEDURE "COMPANY"."LOAD_KTBL_2020";
DROP PROCEDURE "COMPANY"."P_ADD_INP_BEL_ALL_FROM_ZUS";
DROP PROCEDURE "COMPANY"."P_ADD_INP_BEL_ALL_FROM_ZUS2";
DROP PROCEDURE "COMPANY"."P_ADD_INP_BELEGE_FROM_LEX";
DROP PROCEDURE "COMPANY"."P_ADD_INP_FROM_ZUS2";
DROP PROCEDURE "COMPANY"."P_ADD_INV_ZAHLUNG";
DROP PROCEDURE "COMPANY"."P_ADD_NEW_INP_BEL_KTO";
DROP PROCEDURE "COMPANY"."P_ADD_REL";
DROP PROCEDURE "COMPANY"."P_ADD_REL_FROM_LEX";
DROP PROCEDURE "COMPANY"."P_ADD_REL_FROM_ZUS";
DROP PROCEDURE "COMPANY"."P_ADD_SPLIT_TO_IMP_KTO";
DROP PROCEDURE "COMPANY"."P_ADD_TAGESGELD";
DROP PROCEDURE "COMPANY"."P_COPY_KRED";
DROP PROCEDURE "COMPANY"."P_CREATE_KAS_FROM_LEX";
DROP PROCEDURE "COMPANY"."P_CREATE_KAS_ON_LEX";
DROP PROCEDURE "COMPANY"."P_DB_CHECK_NEW_DUPLIKAT";
DROP PROCEDURE "COMPANY"."P_HEUTE";
DROP PROCEDURE "COMPANY"."P_INP_BEL_COP";
DROP PROCEDURE "COMPANY"."P_INP_BEL_COP_SINGLE";
DROP PROCEDURE "COMPANY"."P_INP_BEL_POS_COP";
DROP PROCEDURE "COMPANY"."P_INP_BEL_POS_COP_SINGLE";
DROP PROCEDURE "COMPANY"."P_KEINE_LEX_BUCHUNG";
DROP PROCEDURE "COMPANY"."P_KTO_CREATE_KAS_FROM_INP";
DROP PROCEDURE "COMPANY"."P_KTO_SET_NAECHSTE_ZAHLUNG";
DROP PROCEDURE "COMPANY"."P_REP";
DROP PROCEDURE "COMPANY"."P_SET_FK_EIN_AUS";
DROP PROCEDURE "COMPANY"."P_SET_NAECHSTE_ZAHLUNG";
DROP PACKAGE "COMPANY"."EBA_DEMO_IG_TEXT_PKG";
DROP PACKAGE "COMPANY"."EBA_DEMO_MD_DATA_PKG";
DROP PACKAGE "COMPANY"."PKG_BELEG";
DROP PACKAGE "COMPANY"."PKG_BELEG_NEU";
DROP PACKAGE "COMPANY"."PKG_DB_OBJ_HIST";
DROP PACKAGE "COMPANY"."PKG_IMP_BA";
DROP PACKAGE "COMPANY"."PKG_IMP_GIR";
DROP PACKAGE "COMPANY"."PKG_IMP_GIR_NEU";
DROP PACKAGE "COMPANY"."PKG_IMP_KRED";
DROP PACKAGE "COMPANY"."PKG_IMP_KRED_NEU";
DROP PACKAGE "COMPANY"."PKG_IMP_PAYPAL";
DROP PACKAGE "COMPANY"."PKG_IMP_TEL";
DROP PACKAGE "COMPANY"."PKG_INP_BEL_ALL";
DROP PACKAGE "COMPANY"."PKG_INP_BEL_ALL_NEU";
DROP PACKAGE "COMPANY"."PKG_KASSE";
DROP PACKAGE "COMPANY"."PKG_KONTO_AUSZUG";
DROP PACKAGE "COMPANY"."PKG_KONTROLLE";
DROP PACKAGE "COMPANY"."PKG_KTBL";
DROP PACKAGE "COMPANY"."PKG_LEX";
DROP PACKAGE "COMPANY"."PKG_LEX_NEU";
DROP PACKAGE "COMPANY"."PKG_RECHNUNG";
DROP PACKAGE "COMPANY"."PKG_SERVICES";
DROP PACKAGE "COMPANY"."PKG_SERVICES_NEU";
DROP PACKAGE "COMPANY"."PKG_STEUER";
DROP PACKAGE "COMPANY"."PKG_STEUER_NEU";
DROP PACKAGE "COMPANY"."PKG_VERPFL";
DROP PACKAGE "COMPANY"."SAMPLE_DATA_PKG";
DROP PACKAGE "COMPANY"."SAMPLE_PKG";
DROP PACKAGE BODY "COMPANY"."EBA_DEMO_IG_TEXT_PKG";
DROP PACKAGE BODY "COMPANY"."EBA_DEMO_MD_DATA_PKG";
DROP PACKAGE BODY "COMPANY"."PKG_BELEG";
DROP PACKAGE BODY "COMPANY"."PKG_BELEG_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_DB_OBJ_HIST";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_BA";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_GIR";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_GIR_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_KRED";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_KRED_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_PAYPAL";
DROP PACKAGE BODY "COMPANY"."PKG_IMP_TEL";
DROP PACKAGE BODY "COMPANY"."PKG_INP_BEL_ALL";
DROP PACKAGE BODY "COMPANY"."PKG_INP_BEL_ALL_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_KASSE";
DROP PACKAGE BODY "COMPANY"."PKG_KONTO_AUSZUG";
DROP PACKAGE BODY "COMPANY"."PKG_KONTROLLE";
DROP PACKAGE BODY "COMPANY"."PKG_KTBL";
DROP PACKAGE BODY "COMPANY"."PKG_LEX";
DROP PACKAGE BODY "COMPANY"."PKG_LEX_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_RECHNUNG";
DROP PACKAGE BODY "COMPANY"."PKG_SERVICES";
DROP PACKAGE BODY "COMPANY"."PKG_SERVICES_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_STEUER";
DROP PACKAGE BODY "COMPANY"."PKG_STEUER_NEU";
DROP PACKAGE BODY "COMPANY"."PKG_VERPFL";
DROP PACKAGE BODY "COMPANY"."SAMPLE_DATA_PKG";
DROP PACKAGE BODY "COMPANY"."SAMPLE_PKG";
DROP FUNCTION "COMPANY"."GETCOMPINPBELEGEALL1";
DROP FUNCTION "COMPANY"."GETCOMPINPBELEGEALL2";
DROP FUNCTION "COMPANY"."GETCOMPINPBELEGEALL3";
DROP FUNCTION "COMPANY"."GET_TAB_PTF";
--------------------------------------------------------
--  DDL for Type T_TF_ROW
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "COMPANY"."T_TF_ROW" AS OBJECT (
  id           NUMBER,
  description  VARCHAR2(50)
);

/
--------------------------------------------------------
--  DDL for Type T_TF_TAB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "COMPANY"."T_TF_TAB" IS TABLE OF t_tf_row;

/
--------------------------------------------------------
--  DDL for Type TY_COMP_INP_BELEGE_ALL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL" 
as table of TY_COMP_INP_BELEGE_ALL_1;

/
--------------------------------------------------------
--  DDL for Type TY_COMP_INP_BELEGE_ALL_1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL_1" AS OBJECT (
 
CREATE_AT VARCHAR2(4000),
SEL  VARCHAR2(4000),
COMM_SONSTIGES VARCHAR2(4000),
DATUM_ORT_OK VARCHAR2(4000),
BIS_UHRZEIT VARCHAR2(4000),
TANKSTELLEN_NR VARCHAR2(4000),
DATUM_ADDRESSE_OK VARCHAR2(4000),
DATUM_BUSSGELD_OK VARCHAR2(4000),
COMM_PRODUKTE VARCHAR2(4000),
FK_IMP_BA_BEL_OLD VARCHAR2(4000),
FK_CALC_STATE VARCHAR2(4000),
BEZEICHNUNG VARCHAR2(4000),
VON_UHRZEIT VARCHAR2(4000),
CNT_PUNKTE VARCHAR2(4000),
NR_ROW NUMBER,
VON VARCHAR2(4000),
FK_UMRECHNUNGSKURS VARCHAR2(4000),
BELEG VARCHAR2(4000),
COMM_TEL_BELEG VARCHAR2(4000),
PERSÖNLICH_VOR_ORT VARCHAR2(4000),
FK_LOCATION_VERG VARCHAR2(4000),
ERG VARCHAR2(4000),
GESCHW_SOLL VARCHAR2(4000),
COMM_VERGEHEN VARCHAR2(4000),
GESCHW_UEBER_GRZ_ABZGL_MESSTOL VARCHAR2(4000),
FK_ZAHLUNGSART VARCHAR2(4000),
FK_LOCATION VARCHAR2(4000),
BRUTTO_INCL_TRINKG_EUR VARCHAR2(4000),
FK_ABL_ORDNER_PAGE VARCHAR2(4000),
MODIFY_BY VARCHAR2(4000),
FK_KATEGORIE VARCHAR2(4000),
BEL_DATUM VARCHAR2(4000),
NETTO_BETRAG VARCHAR2(4000),
FK_LA_WDH VARCHAR2(4000),
PUNKTE_VON VARCHAR2(4000),
GESCHW_IST VARCHAR2(4000),
FK_INVENTAR VARCHAR2(4000),
ZAPFSÄULE VARCHAR2(4000),
COMM_ADRESSE VARCHAR2(4000),
STEUERNUMMER VARCHAR2(4000),
FK_BIS_ARBEITSTAG VARCHAR2(4000),
BRUTTO_BETRAG_EUR VARCHAR2(4000),
MENGENEINHEIT VARCHAR2(4000),
DATUM_VERGEHEN VARCHAR2(4000),
FK_WAEHRUNG VARCHAR2(4000),
FK_FRMDW VARCHAR2(4000),
FK_STATUS VARCHAR2(4000),
SUM1 NUMBER,
FK_LAND VARCHAR2(4000),
FRMDW_MWST_BETRAG VARCHAR2(4000),
LA_DATUM VARCHAR2(4000),
CNT_PUNKTE_GESCHAETZT VARCHAR2(4000),
DATUM_DUPL_OK VARCHAR2(4000),
RNR NUMBER,
FK_ARBEITSTAG VARCHAR2(4000),
CODE_BUSSGELD VARCHAR2(4000),
FK_INTERNET_APP VARCHAR2(4000),
FK_STEUERSATZ VARCHAR2(4000),
FRMDW_BRUTTO_INCL_TRINKG VARCHAR2(4000),
NETTO_BETRAG_EUR VARCHAR2(4000),
FK_GESCHÄFTSPARTNER VARCHAR2(4000),
FK_LEX_BUCHUNG VARCHAR2(4000),
FK_BUCHUNG VARCHAR2(4000),
COMM_BEGRÜNDUNG VARCHAR2(4000),
DATUM_VERPFL_BEL_OK VARCHAR2(4000),
BRUTTO_BETRAG_INCL_TRINKG VARCHAR2(4000),
FRMDW_BRUTTO_BETRAG VARCHAR2(4000),
VERG_BEHOERDE VARCHAR2(4000),
DESCR_BUSSGELD VARCHAR2(4000),
FK_REAL_BELEG_EXIST VARCHAR2(4000),
SEL_PK_INP_BELEGE_ALL NUMBER,
PK_INP_BELEGE_ALL VARCHAR2(4000),
BRUTTO_BETRAG VARCHAR2(4000),
MWST_BETRAG VARCHAR2(4000),
ZAHLUNGSBELEG VARCHAR2(4000),
FK_BELEG_ABLAGE VARCHAR2(4000),
DUPL_BEMERKUNG VARCHAR2(4000),
BELEG_UHRZEIT VARCHAR2(4000),
MODIFY_AT VARCHAR2(4000),
DATUM_BUCHUNG_OK VARCHAR2(4000),
FRMDW_NETTO_BETRAG VARCHAR2(4000),
DUMMY VARCHAR2(4000),
FK_CITY VARCHAR2(4000),
LITER VARCHAR2(4000),
FK_CALC_STATE_FRMDW VARCHAR2(4000),
BIS VARCHAR2(4000),
COMM_REST_BELEG VARCHAR2(4000),
COMM_PARKTICKET VARCHAR2(4000),
MWST_BETRAG_EUR VARCHAR2(4000),
FK_LA_KONTO VARCHAR2(4000),
DATUM_BELEG_POS_OK VARCHAR2(4000),
BELEGNUMMER VARCHAR2(4000),
FK_FRMDW_MWST_SATZ VARCHAR2(4000),
FK_CALC_STATE_EUR VARCHAR2(4000),
STORNIERT VARCHAR2(4000),
PREIS_PRO_MENGE VARCHAR2(4000),
FK_ZAHLSTATUS VARCHAR2(4000),
KUNDENNUMMER VARCHAR2(4000),
PUNKTE_BIS VARCHAR2(4000),
GESCHW_UEBER_GRZ VARCHAR2(4000),
FK_VERWENDUNGSZWECK VARCHAR2(4000),
GEZAHLT_AM VARCHAR2(4000),
CREATE_BY VARCHAR2(4000),
FK_DUPL_STATUS VARCHAR2(4000),
FK_ADRESSE_SCHNELL VARCHAR2(4000),
FK_PROJEKT VARCHAR2(4000),
FK_VON_ARBEITSTAG VARCHAR2(4000),
WEBSEITE VARCHAR2(4000),
FK_LEX_RELATION_SRC VARCHAR2(4000 BYTE),
FK_MAIN_KEY_SRC VARCHAR2(4000 BYTE),
FK_STD_CONTR_STATUS_KAT VARCHAR2(4000 BYTE),
FK_STD_CONTR_STATUS_VERW VARCHAR2(4000 BYTE),
DATUM_STATUS_VERW VARCHAR2(4000 BYTE),
DATUM_STATUS_KAT VARCHAR2(4000 BYTE),
VERG_DATUM_RECHTSKRAFT VARCHAR2(4000 BYTE),
VERG_DATUM_TILGUNG VARCHAR2(4000 BYTE),
VERG_NUMMER_FLENS VARCHAR2(4000 BYTE),
VERG_AKTENZEICHEN VARCHAR2(4000 BYTE),
VERG_TATBESTANDSNUMMER VARCHAR2(4000 BYTE),
FK_VER_VERTRAG VARCHAR2(4000 BYTE)



);

/
--------------------------------------------------------
--  DDL for Type TY_COMP_INP_BELEGE_ALL_2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL_2" AS OBJECT (

CREATE_AT VARCHAR2(4000),
MODIFY_AT VARCHAR2(4000)


);

/
--------------------------------------------------------
--  DDL for Type TY_COMP_INP_BELEGE_ALL2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "COMPANY"."TY_COMP_INP_BELEGE_ALL2" 
as table of TY_COMP_INP_BELEGE_ALL_2;

/
--------------------------------------------------------
--  DDL for Sequence APEX$_WS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."APEX$_WS_SEQ"  MINVALUE 100 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CONTR_KATEGORIE_ZAHLUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."CONTR_KATEGORIE_ZAHLUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3761 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DEMO_CUST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DEMO_CUST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DEMO_ORDER_ITEMS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DEMO_ORDER_ITEMS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 220 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DEMO_ORD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DEMO_ORD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DEMO_PROD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DEMO_PROD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DEPT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DL_IMP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DL_IMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6701 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DL_IMP_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."DL_IMP_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence D_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."D_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EBA_DEMO_IG_DEPT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."EBA_DEMO_IG_DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EBA_DEMO_IG_EMP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."EBA_DEMO_IG_EMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EBA_DEMO_IG_PEOPLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."EBA_DEMO_IG_PEOPLE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 104140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EMP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."EMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_ALLG_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_ALLG_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1341 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_ALLG_BEL1_SICH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_ALLG_BEL1_SICH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_AUTOERSATZTEILE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_AUTOERSATZTEILE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_BEL_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_BEL_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2741 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_BUSSGELDER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_BUSSGELDER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_CARMIETE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_CARMIETE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_COWORKING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_COWORKING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_ELEKTRONIK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_ELEKTRONIK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_GRENZBELEGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_GRENZBELEGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_HEIZUNGSABRECHNUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_HEIZUNGSABRECHNUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_HOTELRECHNUNGEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_HOTELRECHNUNGEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_HOTELRECHNUNGEN_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_HOTELRECHNUNGEN_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 159 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_HOTELRECHNUNGEN_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_HOTELRECHNUNGEN_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_KFZ_VERSICHERUNGEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_KFZ_VERSICHERUNGEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_KFZ_VERSICHERUNG_POS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_KFZ_VERSICHERUNG_POS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_KRANKENKASSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_KRANKENKASSE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_KRANKENKASSE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_KRANKENKASSE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_OEFFENTL_TICKETS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_OEFFENTL_TICKETS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_PARKTICKETS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_PARKTICKETS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 544 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_PARKTICKETS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_PARKTICKETS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_SOFTWARE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_SOFTWARE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_SOFTWARE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_SOFTWARE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_SOFTWARE_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_SOFTWARE_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_SONSTIGE_BELEGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_SONSTIGE_BELEGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_TANKSTELLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_TANKSTELLE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 317 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_TELEFONKARTEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_TELEFONKARTEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_TELEFONKARTEN_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_TELEFONKARTEN_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_BA_TEXTILREINIGUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_BA_TEXTILREINIGUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_HOTEL_BOOKING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_HOTEL_BOOKING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_KONTENBLATT_2018_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_KONTENBLATT_2018_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 225629 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_KONTENBLATT_2018_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_KONTENBLATT_2018_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1921 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_LEX_SUSA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_LEX_SUSA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4321 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_LOG_LOAD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_LOG_LOAD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 321 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_RE_LEXWARE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_RE_LEXWARE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_TEL_MOBILCOM_RECH_OV_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_TEL_MOBILCOM_RECH_OV_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_TEL_MOBILCOM_RECH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_TEL_MOBILCOM_RECH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_TEL_MOBILCOM_RECH_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_TEL_MOBILCOM_RECH_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_TEL_O2_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_TEL_O2_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_TEL_O2_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_TEL_O2_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMP_TEL_VODAFONE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."IMP_TEL_VODAFONE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INP_BELEGE_ALL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."INP_BELEGE_ALL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INP_BELEGE_ALL_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."INP_BELEGE_ALL_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INP_BELEGE_ALL_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."INP_BELEGE_ALL_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INP_BELEGE_POS_ALL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."INP_BELEGE_POS_ALL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KAS_KASSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KAS_KASSE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9941 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KAS_KASSE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KAS_KASSE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Girokonto_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Girokonto_SEQ"  MINVALUE 100 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 2540 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_GIROKONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_GIROKONTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16644 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_GIROKONTO_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_GIROKONTO_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Girokonto_SE8
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Girokonto_SE8"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3367 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_KONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_KONTO_SEQ"  MINVALUE 10265 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10625 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Kreditkarte_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Kreditkarte_SEQ"  MINVALUE 100 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 720 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_KREDITKARTE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_KREDITKARTE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Kreditkarte_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Kreditkarte_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_KREDITKARTE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_KREDITKARTE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Kreditkarte_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Kreditkarte_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Kreditkarte_SEQ3
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Kreditkarte_SEQ3"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Kreditkarte_SEQ4
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Kreditkarte_SEQ4"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Kreditkarte_SEQ5
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Kreditkarte_SEQ5"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_PAYPAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_PAYPAL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 300 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_PAYPAL_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_PAYPAL_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Paypal_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Paypal_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Tagesgeldkonto_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Tagesgeldkonto_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_TAGESGELDKONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_TAGESGELDKONTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence KTO_Tagesgeldkonto_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."KTO_Tagesgeldkonto_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PP_DOWNLOAD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."PP_DOWNLOAD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PP_VORGANG_DOWNLOAD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."PP_VORGANG_DOWNLOAD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PP_VORGANG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."PP_VORGANG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PP_Vorgang_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."PP_Vorgang_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ABSCHLUSSTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ABSCHLUSSTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ADRESSE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ADRESSE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 621 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ARBEITSTAGE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ARBEITSTAGE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ARBEITSZEITEN
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ARBEITSZEITEN"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ARTIKEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ARTIKEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 661 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ARTIKELBESTANDTEILE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ARTIKELBESTANDTEILE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ARTIKELBESTANDTEILTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ARTIKELBESTANDTEILTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ARTIKELTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ARTIKELTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_AUFGABE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_AUFGABE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BANK
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BANK"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BELEG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BELEG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6178 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BELEGART
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BELEGART"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BELEGART_GRP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BELEGART_GRP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BELEGPOSITION
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BELEGPOSITION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BELEGSEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BELEGSEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BESTELLUNG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BESTELLUNG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BUCH
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BUCH"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BUENDELUNG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_BUENDELUNG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_EINSENDEAUFGABE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_EINSENDEAUFGABE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_EINSENDEAUFGABENSTATUS
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_EINSENDEAUFGABENSTATUS"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_FRAGE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_FRAGE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_GESCHÄFTSPARTNER
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_GESCHÄFTSPARTNER"  MINVALUE 902 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 902 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_GESCHÄFTSPARTNERTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_GESCHÄFTSPARTNERTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_HERSTELLER
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_HERSTELLER"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_INVENTARE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_INVENTARE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_INVENTARTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_INVENTARTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_KONTAKTTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_KONTAKTTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LAGERORT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_LAGERORT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LOCATION
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_LOCATION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 641 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LOCATION_TYPE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_LOCATION_TYPE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_MENGENEINHEIT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_MENGENEINHEIT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ORGANISATIONSEINHEIT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ORGANISATIONSEINHEIT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ORT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_ORT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 501 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PACKUNGSTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_PACKUNGSTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PERSON
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_PERSON"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PLZ_ORT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_PLZ_ORT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 424 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PRODUKT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_PRODUKT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PROJEKT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_PROJEKT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PRUEFUNG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_PRUEFUNG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QUELLE
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_QUELLE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QUELLENTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_QUELLENTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_RECHNUNG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_RECHNUNG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 104 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_RECHNUNGSTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_RECHNUNGSTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_ARTIKEL_ARTIKELTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_ARTIKEL_ARTIKELTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_ARTT_ARTT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_ARTT_ARTT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_BELEG_INVENTAR
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_BELEG_INVENTAR"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_BELEG_LOCATION
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_BELEG_LOCATION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 497 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_BELEG_PRODUKT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_BELEG_PRODUKT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_BEL_VERBRAUCHSMAT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_BEL_VERBRAUCHSMAT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_GESCHAEFTSP_KONT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_GESCHAEFTSP_KONT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_INVENTAR_ARTIKEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_INVENTAR_ARTIKEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_INVENTAR_INVENTARTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_INVENTAR_INVENTARTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_LAGERORT_ARTIKEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_LAGERORT_ARTIKEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_RECHNG_STUNDEN
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_RECHNG_STUNDEN"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_RECHNUNG_BELEG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_RECHNUNG_BELEG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_RECHNUNG_STD
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_RECHNUNG_STD"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_REL_STUNDENZETTEL_BELEG
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_REL_STUNDENZETTEL_BELEG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 327 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_STD_GROUP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_STD_GROUP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_STEUERSATZ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_STEUERSATZ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_STUNDENZETTEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_STUNDENZETTEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_KONTAKT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_KONTAKT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_PACKUNGSTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_PACKUNGSTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_PROJEKT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_PROJEKT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_REL_FRAGE_LÖS
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_REL_FRAGE_LÖS"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 461 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_REL_INV_VERBRAUCHSMAT
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_REL_INV_VERBRAUCHSMAT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_REL_KONTAKT_KONTAKTTYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_REL_KONTAKT_KONTAKTTYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_REL_REZEPT_ARTIKEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_REL_REZEPT_ARTIKEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_STD
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_STD"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_STUNDENZETTEL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_STUNDENZETTEL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_T_VERBRAUCHSMATERIAL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_T_VERBRAUCHSMATERIAL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_UMSATZART
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_UMSATZART"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_VERBRAUCHSMATERIAL
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_VERBRAUCHSMATERIAL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_VERBRAUCHSMAT_TYP
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_VERBRAUCHSMAT_TYP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_VERWENDUNGSZWECK
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."SEQ_VERWENDUNGSZWECK"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence STD_KONTOTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."STD_KONTOTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence STD_OBERKATEGORIE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."STD_OBERKATEGORIE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence STD_VERWENDUNGSZWECK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."STD_VERWENDUNGSZWECK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABL_ORDNER_PAGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABL_ORDNER_PAGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3081 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABL_ORDNER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABL_ORDNER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABL_ORDNER_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABL_ORDNER_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABR_EN_HEIZUNGSABRECHNUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABR_EN_STROMABLESUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABR_EN_STROMABLESUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABR_HOTELRECHNUNGEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABR_HOTELRECHNUNGEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ABSCHLUSSTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ABSCHLUSSTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADDFRIEND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADDFRIEND_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADR_ADRESSE_SCHNELL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADR_ADRESSE_SCHNELL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADR_ADRESSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADR_ADRESSE_SEQ"  MINVALUE 600 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 620 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADR_BUNDESLAND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADR_BUNDESLAND_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADRESSE_SCHNELL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADRESSE_SCHNELL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADRESSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADRESSE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1961 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADR_LAND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADR_LAND_SEQ"  MINVALUE 300 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 340 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADR_ORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADR_ORT_SEQ"  MINVALUE 1203 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13103 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ADR_PLZ_ORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ADR_PLZ_ORT_SEQ"  MINVALUE 1442 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 15662 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARBEITSTAGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARBEITSTAGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12608 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARBEITSTAGE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARBEITSTAGE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARTIKELBESTANDTEILE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARTIKELBESTANDTEILE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARTIKELBESTANDTEILTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARTIKELBESTANDTEILTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARTIKEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARTIKEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARTIKELTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARTIKELTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ARTIKELTYP_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ARTIKELTYP_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_AUDI_FIN_VERTRAG_POS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_AUDI_FIN_VERTRAG_POS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BAHN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BAHN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BANKKONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BANKKONTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BANKKONTO_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BANKKONTO_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BANK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BANK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BARGELD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BARGELD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BAS_KAT_IMMO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BAS_KAT_IMMO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BAS_KAT_KONTO_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BAS_KAT_KONTO_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BAS_KONTO_BUCH_KAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BAS_KONTO_BUCH_KAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BAS_STEU_STEUER_SATZ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BAS_STEU_STEUER_SATZ_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BEI_KK_KRANKENKASSE_DET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BEI_KK_KRANKENKASSE_DET_SEQ"  MINVALUE 144 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 164 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BEITRAG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BEITRAG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BEITRAG_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BEITRAG_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BELEGART_GRP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BELEGART_GRP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BELEGART_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BELEGART_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BELEGART_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BELEGART_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BELEGPOSITION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BELEGPOSITION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BELEG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BELEG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BELEG_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BELEG_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BILD_BA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BILD_BA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_BUENDELUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_BUENDELUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_CAR_AUTO_VERSICHERUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_CAR_AUTO_VERSICHERUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_COMP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_COMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DB_OBJECT_LIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DB_OBJECT_LIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 521 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DB_OBJ_OBJECT_LIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DB_OBJ_OBJECT_LIST_SEQ"  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 19020 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DB_RENAME_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DB_RENAME_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DB_TAB_TABLE_CONTENT_COUNT_CNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13501 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DB_TAB_TABLE_CONTENT_COUNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_SEQ"  MINVALUE 2245 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8205 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DUPLIKAT_CHECK_KONTROLLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DUPLIKAT_CHECK_KONTROLLE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DUPLIKAT_CHECK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DUPLIKAT_CHECK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 321 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_DUPLIKAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_DUPLIKAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_EINSENDEAUFGABENSTATUS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_EINSENDEAUFGABENSTATUS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_EINSENDEAUFGABE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_EINSENDEAUFGABE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_FARBE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_FARBE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_FLI_AIR_AIRPORTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_FLI_AIR_AIRPORTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11961 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_FLI_APL_PLANE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_FLI_APL_PLANE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_GESCHAEFTSPARTNER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_GESCHAEFTSPARTNER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_GESCHAEFTSPARTNER_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_GESCHAEFTSPARTNER_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 921 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_GESCHAEFTSPARTNERTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_GESCHAEFTSPARTNERTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 321 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_HEIZUNGSABLESUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_HEIZUNGSABLESUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_HERSTELLER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_HERSTELLER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_IMP_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_IMP_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_IMP_KTO_GIR_KTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_IMP_KTO_GIR_KTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_IMP_LOG_LOAD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_IMP_LOG_LOAD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_IMP_TEL_MOBILCOM_RECH_DET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET_SEQ"  MINVALUE 500 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 660 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_IMP_TEL_MOBILCOM_RECH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_SEQ"  MINVALUE 35 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 55 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_IMP_TEL_VODAFONE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_IMP_TEL_VODAFONE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INP_BELEGE_ALL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INP_BELEGE_ALL_SEQ"  MINVALUE 8293 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8753 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INSURANCE_YEARLY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INSURANCE_YEARLY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INSURANCE_YEARLY_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INSURANCE_YEARLY_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INTERNETPORTAL_APP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INTERNETPORTAL_APP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INT_INTERNETPORTAL_APP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INT_INTERNETPORTAL_APP_SEQ"  MINVALUE 202 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 262 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INVENTARE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INVENTARE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INVENTARE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INVENTARE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INVENTARTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INVENTARTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INVENTARTYP_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INVENTARTYP_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_INV_INVENTARE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_INV_INVENTARE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KAL_TERMINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KAL_TERMINE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KON_GESCHAEFTSPARTNER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KON_GESCHAEFTSPARTNER_SEQ"  MINVALUE 902 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1082 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KON_PERSON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KON_PERSON_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTAKT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTAKT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTAKTTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTAKTTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_GRP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_GRP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_KAT_GRP_S
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_KAT_GRP_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_KAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_KAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_KL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_KL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_KONTEN_TYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_KONTEN_TYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTENPLAN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTENPLAN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTINENT_LAND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTINENT_LAND_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTINENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTINENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTOAUSZUG_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTOAUSZUG_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 981 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTO_AUSZUG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTO_AUSZUG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 621 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTO_BUCH_KAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTO_BUCH_KAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 894 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTO_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTO_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 981 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTO_BUCH_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTO_BUCH_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KONTROLLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KONTROLLE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 901 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KTO_BANKKONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KTO_BANKKONTO_SEQ"  MINVALUE 10244 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10264 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KTO_GIROKONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KTO_GIROKONTO_SEQ"  MINVALUE 16634 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16674 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KTO_KAS_KASSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KTO_KAS_KASSE_SEQ"  MINVALUE 9584 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9624 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KTO_KONTO_AUSZUG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KTO_KONTO_AUSZUG_SEQ"  MINVALUE 582 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 602 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_KZ_KENNZAHLEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_KZ_KENNZAHLEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LAND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LAND_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 341 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEHRGANG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEHRGANG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEX_BANK_KONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEX_BANK_KONTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEX_IMP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEX_IMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 191 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEX_KONTENBLATT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEX_KONTENBLATT_SEQ"  MINVALUE 2230129 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2249309 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEX_LONG_COMM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEX_LONG_COMM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEX_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2431 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LEX_SUSA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LEX_SUSA_SEQ"  MINVALUE 4313 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4733 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LOCATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LOCATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2081 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LOCATION_TYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LOCATION_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LOCATION_TYPE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LOCATION_TYPE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 421 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LOC_LOCATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LOC_LOCATION_SEQ"  MINVALUE 2063 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2103 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_LÖSUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_LÖSUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MASCH_KOMPONENTEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MASCH_KOMPONENTEN_SEQ"  MINVALUE 50 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 90 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MASCH_MATERIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MASCH_MATERIAL_SEQ"  MINVALUE 80 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MASCH_PROJ_FREMDLEISTUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MASCH_PROJ_INBETRIEBNAHM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MASCH_PROJ_MATERIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MASCH_PROJ_MATERIAL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MATCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MATCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MDT_MANDANT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MDT_MANDANT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MENGENEINHEIT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MENGENEINHEIT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_MIETVERTRAG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_MIETVERTRAG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_NIEDERSCHLAGSMENGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_NIEDERSCHLAGSMENGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 621 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_NIEDERSCHLAGSMENGE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_NIEDERSCHLAGSMENGE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_OFFENE_EINGANGSRECHNUNGEN_S
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_OFFENE_EINGANGSRECHNUNGEN_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_OFFENE_EINGANGSRECHNUNGEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_OFFENE_EINGANGSRECHNUNGEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ORGANISATIONSEINHEIT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ORGANISATIONSEINHEIT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1222 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ORT_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ORT_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 521 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PACKUNGSTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PACKUNGSTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PERSON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PERSON_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PLZ_ORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PLZ_ORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1481 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PROD_PRODUCT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PROD_PRODUCT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PROJEKT_ART_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PROJEKT_ART_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PROJEKT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PROJEKT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 781 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PROJEKT_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PROJEKT_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PROJ_PROJEKT_ANGEBOT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PROJ_PROJEKT_ANGEBOT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_PROJ_PROJEKT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_PROJ_PROJEKT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_QUELLENTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_QUELLENTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_RECHNUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_RECHNUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_RECHNUNG_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_RECHNUNG_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_RECHNUNGSTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_RECHNUNGSTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BARGELD_BELEG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BARGELD_BELEG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BELEGART_GRP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BELEGART_GRP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BELEG_ARTIKEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BELEG_ARTIKEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BELEG_INVENTAR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BELEG_INVENTAR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BELEG_LOCATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BELEG_LOCATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BEL_KONT_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BEL_KONT_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2841 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BEL_LEX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BEL_LEX_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3261 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_BEL_VERBRAUCHSMAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_BEL_VERBRAUCHSMAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_DB_OBJ_OBJECT_LIST_PART_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_GESCHAEFTSP_KONT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_GESCHAEFTSP_KONT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_IMP_BEL_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_IMP_BEL_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_IMP_BEL_BEL_SEQ_V
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_IMP_BEL_BEL_SEQ_V"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_IMP_BEL_BEL_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_IMP_BEL_BEL_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INP_BELEGE_BEL_TYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INVENTAR_ARTIKEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INVENTAR_ARTIKEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INVENTAR_BARZAHL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INVENTAR_BARZAHL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INVENTAR_ZAHLUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INVENTAR_ZAHLUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4081 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_INV_VERBRAUCHSMAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_INV_VERBRAUCHSMAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTAKT_KONTAKTTYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTAKT_KONTAKTTYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTAKTPERSON_ADRESSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTAKTPERSON_ADRESSE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONT_BUCH_IMP_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONT_BUCH_IMP_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONT_BUCH_IMP_BEL_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONT_BUCH_IMP_BEL_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONT_BUCH_KONT_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONT_BUCH_KONT_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONT_BUCH_KONT_BUCH_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONT_BUCH_KONT_BUCH_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1362 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONT_BUCH_LEX_BUCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONT_BUCH_LEX_BUCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTENPLAN_KTO_KTO_KAT_
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTENPLAN_KTO_KTO_KAT_"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTINENT_LAND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTINENT_LAND_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTINENT_LAND_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTINENT_LAND_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTINENT_LAND_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTINENT_LAND_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTO_AUSZUG_BILD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTO_AUSZUG_BILD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTO_AUSZUG_GIR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTO_AUSZUG_GIR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5841 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KONTO_AUSZUG_GIR_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KONTO_AUSZUG_GIR_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_KTO_KONTO_AUSZUG_GIR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR_SEQ"  MINVALUE 5969 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6009 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_LAGERORT_ARTIKEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_LAGERORT_ARTIKEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_LEX_KTO_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_LEX_KTO_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_LEX_KTO_BEL_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_LEX_KTO_BEL_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_LEX_LEX_BANKKONTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_LEX_LEX_BANKKONTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_LEX_LEX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_LEX_LEX_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_LEX_LEX_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_LEX_LEX_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_MASCH_BAND_STATION_MATERIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_SEQ"  MINVALUE 55 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 175 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_SEQ"  MINVALUE 63 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 243 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_SEQ"  MINVALUE 44 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 124 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_PROJEKT_LOCATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_PROJEKT_LOCATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 961 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_PROJEKT_ZAHLUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_PROJEKT_ZAHLUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1421 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_RECHNG_STUNDEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_RECHNG_STUNDEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_RECHNUNG_BELEG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_RECHNUNG_BELEG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_RECHNUNG_STUNDENZETTEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_RECHNUNG_STUNDENZETTEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_RECHNUNG_STUNDENZETTEL_1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_RECHNUNG_STUNDENZETTEL_1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_RECHNUNG_ZAHLUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_RECHNUNG_ZAHLUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_RECHNUNG_ZAHLUNG_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_RECHNUNG_ZAHLUNG_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_STEUER_LOHN_INP_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_STEUER_LOHN_INP_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_STEUER_LOHN_ZAHL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_STEUER_LOHN_ZAHL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_STEUER_MONAT_BEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_STEUER_MONAT_BEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_STEUER_MONAT_RECH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_STEUER_MONAT_RECH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_STEUER_SATZ_GÜLT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_STEUER_SATZ_GÜLT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_STUNDENZETTEL_BELEG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_STUNDENZETTEL_BELEG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_TXT_REPLACED_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_TXT_REPLACED_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_VERPFL_BEELG_SRC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_VERPFL_BEELG_SRC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 961 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_VERPFL_BELEGE_ORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_VERPFL_BELEGE_ORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_VERPFL_BELEG_ORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_VERPFL_BELEG_ORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_REL_VERPFL_BELEG_SRC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_REL_VERPFL_BELEG_SRC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_RV_AUSZUG_PAGE_DET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_RV_AUSZUG_PAGE_DET_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_RV_AUSZUG_PAGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_RV_AUSZUG_PAGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_RV_AUSZUG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_RV_AUSZUG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_SEPA_VORLAGEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_SEPA_VORLAGEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STD_GROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STD_GROUP_SEQ"  MINVALUE 643 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 823 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STD_GROUP_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STD_GROUP_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 661 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STD_SEQ"  MINVALUE 1322 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1622 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STD_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STD_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_JAHR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_JAHR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_JAHR_TODO_GRP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_JAHR_TODO_GRP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_JAHR_TODO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_JAHR_TODO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 341 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_KRANKENKASSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_KRANKENKASSE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_LOHN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_LOHN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_LOHN_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_LOHN_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_LOHNSTEUERKARTE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_LOHNSTEUERKARTE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_MONAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_MONAT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_MONAT_TODO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_MONAT_TODO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUERNUMMER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUERNUMMER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUERNUMMER_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUERNUMMER_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_SATZ_LEX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_SATZ_LEX_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUERSATZ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUERSATZ_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUERSATZ_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUERSATZ_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_VERPFL_MEHRAUFWD_DET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_VERPFL_MEHRAUFWD_DET_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEUER_VORANMLDG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEUER_VORANMLDG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STEU_STEUER_VORANMLDG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STEU_STEUER_VORANMLDG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STROMABLESUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STROMABLESUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STROMABLESUNG_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STROMABLESUNG_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_STUNDENZETTEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_STUNDENZETTEL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TEL_TELEFONKARTEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TEL_TELEFONKARTEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TEMP_BELEG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TEMP_BELEG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TERMINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TERMINE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TERMINE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TERMINE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TXT_REPLACE_CONTEXT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TXT_REPLACE_CONTEXT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TXT_REPLACED_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TXT_REPLACED_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_TXT_REPLACE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_TXT_REPLACE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 841 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_UMTAUSCHKURS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_UMTAUSCHKURS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_UNTERLAGEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_UNTERLAGEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_USER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_USER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERBRAUCHSMATERIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERBRAUCHSMATERIAL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERBRAUCHSMAT_TYP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERBRAUCHSMAT_TYP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERPFLEGUNGSMEHRAUFWAND_DET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_DET_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 541 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERPFLEGUNGSMEHRAUFWAND_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERPFLEGUNGSMEHRAUFWAND_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERTRAG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERTRAG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VER_VERTRAG_MIETE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VER_VERTRAG_MIETE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VER_VERTRAG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VER_VERTRAG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_VERWENDUNGSZWECK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_VERWENDUNGSZWECK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_WAEHRUNG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_WAEHRUNG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_WET_NIEDERSCHLAGSMENGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_WET_NIEDERSCHLAGSMENGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_WET_NIEDERSCHLAGSMENGE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_WET_NIEDERSCHLAGSMENGE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence T_ZAHLUNGSÜBERSICHTEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPANY"."T_ZAHLUNGSÜBERSICHTEN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table ADR_ADDRESS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ADR_ADDRESS" 
   (	"PK_ADR_ADDRESS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"STREET" VARCHAR2(4000 BYTE), 
	"STREET_NO" VARCHAR2(20 BYTE), 
	"ZIP_CODE" VARCHAR2(20 BYTE), 
	"FK_ADR_CITY" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ADR_CITY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ADR_CITY" 
   (	"PK_ADR_CITY" NUMBER, 
	"CITY" VARCHAR2(4000 BYTE), 
	"FK_ADR_COUNTRY" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ADR_COUNTRY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ADR_COUNTRY" 
   (	"PK_ADR_COUNTRY" NUMBER, 
	"COUNTRY" VARCHAR2(4000 BYTE), 
	"PHONE_CODE" VARCHAR2(20 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AHNENTAFEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."AHNENTAFEL" 
   (	"PK_AHNENTAFEL" NUMBER, 
	"LEV" NUMBER, 
	"NR_LEV" NUMBER, 
	"FK_ELTERN" NUMBER, 
	"FK_KIND" NUMBER, 
	"RSP" NUMBER, 
	"ANFANGSTAG" VARCHAR2(4000 CHAR), 
	"ENDTAG" VARCHAR2(4000 CHAR), 
	"FK_PERS" NUMBER, 
	"AUSFÜHRUNG" NUMBER, 
	"CREATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AHNENTAFEL_DISP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."AHNENTAFEL_DISP" 
   (	"AHNENTAFEL" CLOB, 
	"PK_AHNENTAFEL_DISP" NUMBER, 
	"FK_PERS" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("AHNENTAFEL") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table AIRORT_NR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."AIRORT_NR" 
   (	"COLUMN1" VARCHAR2(20 BYTE), 
	"COLUMN2" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AIRPORTS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."AIRPORTS" 
   (	"IATA" VARCHAR2(4000 BYTE), 
	"ICAO" VARCHAR2(4000 BYTE), 
	"FLUGHAFEN" VARCHAR2(4000 BYTE), 
	"ORT" VARCHAR2(4000 BYTE), 
	"REGION" VARCHAR2(4000 BYTE), 
	"LAND" VARCHAR2(4000 BYTE), 
	"BUCHSTABEN" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table APL_ENGINE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."APL_ENGINE_TYPE" 
   (	"PK_APL_ENGINE_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"ENGINE_TYPE" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table APL_MAINT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."APL_MAINT" 
   (	"PK_APL_MAINT" NUMBER, 
	"INSP" VARCHAR2(4000 BYTE), 
	"DATE_CALC" DATE, 
	"DATE_PLANNED" DATE, 
	"DATE_DONE" DATE, 
	"FK_APL_PLANE" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"PRICE_NET_PLANNED" NUMBER, 
	"PRICE_NET_FINAL" NUMBER, 
	"PRICE_BR_PLANNED" NUMBER, 
	"PRICE_TAX_PLANNED" NUMBER, 
	"PRICE_TAX_FINAL" NUMBER, 
	"PRICE_CURR" NUMBER, 
	"PRICED_BR_FINAL" NUMBER, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_APL_MAINT_PROGR" NUMBER, 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table APL_MAINT_PROGR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."APL_MAINT_PROGR" 
   (	"PK_APL_MAINT_PROGR" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"MAINT_PROGR" VARCHAR2(400 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table APL_PLANE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."APL_PLANE" 
   (	"PK_APL_PLANE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"PLANE_NO" VARCHAR2(20 BYTE), 
	"IMAGE" BLOB, 
	"DESCRIPTION" VARCHAR2(4000 CHAR), 
	"FK_APL_ENGINE_TYPE" NUMBER, 
	"CABIN_OV_13000_FT" VARCHAR2(4000 CHAR), 
	"BORD_00" VARCHAR2(4000 CHAR), 
	"BOARDING_OPPORTUNITY" NUMBER, 
	"CRUISING_SPEED_HG_20000_FT" NUMBER, 
	"CRUISING_SPEED_UNIT" VARCHAR2(4000 CHAR), 
	"WEIGHT_KERB_KG" NUMBER, 
	"WEIGHT_TAKEOFF_MAX_KG" NUMBER, 
	"PERMITTED_LOAD_KG" NUMBER, 
	"CNT_PASSENGERS_MAX" NUMBER, 
	"FUEL_TANK_SIZE_L" NUMBER, 
	"CONSUMPTION_L" NUMBER, 
	"RANGE_AVERAGE_FT" NUMBER, 
	"DIST_TAKE_OFF_FT" NUMBER, 
	"DIST_LANDING_FT" NUMBER, 
	"FK_APL_MAINT_PROGR" NUMBER, 
	"FK_APL_PLANE_MODELL" NUMBER, 
	"IMG_SRC" VARCHAR2(4000 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("IMAGE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table APL_PLANE_MODELL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."APL_PLANE_MODELL" 
   (	"PK_APL_PLANE_MODELL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"MODELL_NO" VARCHAR2(20 BYTE), 
	"FK_APL_PLANE_TYPE" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table APL_PLANE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."APL_PLANE_TYPE" 
   (	"PK_APL_PLANE_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"PLANE_TYPE" VARCHAR2(4000 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ARP_AIRPORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ARP_AIRPORT" 
   (	"PK_ARP_AIRPORT" NUMBER, 
	"AIRPORT" VARCHAR2(20 BYTE), 
	"DESCRIPTION" VARCHAR2(20 BYTE), 
	"FK_ADR_COUNTRY" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BAK_BANKACCOUNT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BAK_BANKACCOUNT" 
   (	"PK_BAK_BANKACCOUNT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"BANK" VARCHAR2(20 BYTE), 
	"IBAN" VARCHAR2(20 BYTE), 
	"FK_BAK_BANKACCOUNT_TYPE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BAK_BANKACCOUNT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BAK_BANKACCOUNT_TYPE" 
   (	"PK_BANKACCOUNT_TYPE" NUMBER, 
	"BANK_ACCOUNT_TYPE" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BAS_BASIC
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BAS_BASIC" 
   (	"PK_BAS_BASIC" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BAS_BASIC_GRP" NUMBER, 
	"BASIC_NAME_DE" VARCHAR2(20 BYTE), 
	"BASIC_VALUE" NUMBER, 
	"BASIC_NAME_EN" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BAS_BASIC_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BAS_BASIC_GRP" 
   (	"PK_BAS_BASIC_GRP" NUMBER, 
	"BASIS_GRP_NAME" VARCHAR2(400 BYTE), 
	"FK_MDT_MANDANT" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BEST_POS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BEST_POS" 
   (	"BEST_POST1" NUMBER, 
	"BEST_POST2" NUMBER, 
	"BEST_BESCHR" VARCHAR2(4000 CHAR), 
	"BEST_BESCHR1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BILDER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BILDER" 
   (	"PK_BILDER" NUMBER, 
	"FILECONTENT" BLOB, 
	"FILENAME" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"THUMBNAIL" BLOB, 
	"H_PX" NUMBER, 
	"W_PX" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("FILECONTENT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("THUMBNAIL") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table BILDER_TAB
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BILDER_TAB" 
   (	"ID" NUMBER(10,0), 
	"BILD" BLOB, 
	"THUMBNAIL" BLOB, 
	"BREITE_PX" NUMBER(5,0), 
	"HOEHE_PX" NUMBER(5,0), 
	"DATEINAME" VARCHAR2(4000 BYTE), 
	"DUMMY_BILD" NUMBER, 
	"KLASSIFIKATION_1" VARCHAR2(4000 BYTE), 
	"KLASSIFIKATION_2" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("THUMBNAIL") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table BOR_BORD_LOG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BOR_BORD_LOG" 
   (	"PK_BOR_BORD_LOG" NUMBER, 
	"BORD_LOG" VARCHAR2(400 BYTE), 
	"BORD_LOG_DATE" DATE, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_APL_PLANE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOR_BORD_LOG_ENTRY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BOR_BORD_LOG_ENTRY" 
   (	"PK_BOR_BORD_LOG_ENTRY" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"ENTRY_DATE" DATE, 
	"PIC" VARCHAR2(20 BYTE), 
	"T_O_TIME" DATE, 
	"LDG_TIME" DATE, 
	"CHARGES" VARCHAR2(20 BYTE), 
	"EDMA" VARCHAR2(20 BYTE), 
	"ARRIVAL" VARCHAR2(20 BYTE), 
	"FK_BOR_BORD_LOG_ENTRY_GRP" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"COST_ADD" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOR_BORD_LOG_ENTRY_ADD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BOR_BORD_LOG_ENTRY_ADD" 
   (	"PK_BOR_BORD_LOG_ENTRY_ADD" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"ADD_COST_NET" NUMBER, 
	"ADD_COST_TAX" NUMBER, 
	"ADD_COST_BR" NUMBER, 
	"ADD_COST_CURR" VARCHAR2(20 BYTE), 
	"FK_BOR_BORD_LOG_ENTRY" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOR_BORD_LOG_ENTRY_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BOR_BORD_LOG_ENTRY_GRP" 
   (	"PK_BOR_BORD_LOG_ENTRY_GRP" NUMBER, 
	"GROUP_NAME" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BOR_BORD_LOG" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOR_BORD_LOG_ENTRY_HOB_RPM
--------------------------------------------------------

  CREATE TABLE "COMPANY"."BOR_BORD_LOG_ENTRY_HOB_RPM" 
   (	"PK_BORD_LOG_ENTRY_HOB_RPM" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BOR_BORD_LOG_ENTRY" NUMBER, 
	"HOBBS" VARCHAR2(20 BYTE), 
	"RPM" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CON_CONTACT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."CON_CONTACT" 
   (	"PK_CON_CONTACT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_CON_CONTACT_TYPE" NUMBER, 
	"FK_ADR_ADDRESS" NUMBER, 
	"TITLE" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(20 BYTE), 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"EMAIL" VARCHAR2(4000 BYTE), 
	"COUNTRY_PREFIX" VARCHAR2(20 BYTE), 
	"PHONE_NO" VARCHAR2(20 BYTE), 
	"BIRTH_DAY" DATE, 
	"ACTIVE" NUMBER, 
	"ACTIVE_FROM" DATE, 
	"ACTIVE_TO" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"CONTACT_MAIN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."CON_CONTACT"."CONTACT_MAIN" IS 'Flag, Main Contact - is Single Person or the Main Contact of a Group or Company';
--------------------------------------------------------
--  DDL for Table CON_CONTACT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."CON_CONTACT_TYPE" 
   (	"PK_CON_CONTACT_TYPE" NUMBER, 
	"CONTACT_TYPE_EN" VARCHAR2(400 BYTE), 
	"CONTACT_TYPE_DE" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COST_COST_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."COST_COST_GRP" 
   (	"PK_COST_COST_GRP" NUMBER, 
	"COST_GRP_NAME" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DOC_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."DOC_DOCUMENT" 
   (	"PK_DOC_DOCUMENT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT_TYPE" NUMBER, 
	"FK_DOC_USAGE_TYPE" NUMBER, 
	"DOCUMENT_TITLE" VARCHAR2(20 BYTE), 
	"DOCUMENT" BLOB, 
	"VALID" NUMBER, 
	"VALID_UNTIL" DATE, 
	"DOCUMENT_NR" VARCHAR2(4000 BYTE), 
	"FK_CERT_TYPE" NUMBER, 
	"FK_LAN_PROF_LEVEL" NUMBER, 
	"LAN_PROF_LEVEL_VAL" NUMBER, 
	"DOC_EXISTS" NUMBER, 
	"FK_FI_CRI_E" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("DOCUMENT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

   COMMENT ON COLUMN "COMPANY"."DOC_DOCUMENT"."FK_DOC_DOCUMENT_TYPE" IS 'BORDBOOK, CERTIFIKATE, CONTRACT';
   COMMENT ON COLUMN "COMPANY"."DOC_DOCUMENT"."FK_DOC_USAGE_TYPE" IS 'e.g. PLANE, PILOT, AIRPORT';
   COMMENT ON COLUMN "COMPANY"."DOC_DOCUMENT"."FK_CERT_TYPE" IS 'e.g.: e';
   COMMENT ON COLUMN "COMPANY"."DOC_DOCUMENT"."FK_LAN_PROF_LEVEL" IS 'LAN: a-e';
   COMMENT ON COLUMN "COMPANY"."DOC_DOCUMENT"."LAN_PROF_LEVEL_VAL" IS '1-6';
--------------------------------------------------------
--  DDL for Table DOC_DOCUMENT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."DOC_DOCUMENT_TYPE" 
   (	"PK_DOC_DOCUMENT_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DOC_DOCUMENT_TYPE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DOC_USAGE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."DOC_USAGE_TYPE" 
   (	"PK_DOC_USAGE_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"USAGE_TYPE_EN" VARCHAR2(4000 BYTE), 
	"USAGE_TYPE_DE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ELTERN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ELTERN" 
   (	"PK_ELTERN" NUMBER(10,0), 
	"FK_ELTERN" NUMBER(10,0), 
	"FK_KIND" NUMBER(10,0), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FAMILIE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."FAMILIE" 
   (	"PK_FAMILIE" NUMBER(10,0), 
	"FAMILIE" VARCHAR2(255 CHAR), 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FAMILIE_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."FAMILIE_BILD" 
   (	"FK_BILD" NUMBER, 
	"FK_FAMILIE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FLI_FLIGHT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."FLI_FLIGHT" 
   (	"PK_FLI_FLIGHT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DEPARTURE" DATE, 
	"ARRIVAL" DATE, 
	"DEPARTURE_TIME" NUMBER, 
	"ARRIVAL_TIME" NUMBER, 
	"DURATION" DATE, 
	"ADDITIONAL_TIMESLOTS" DATE, 
	"FK_ADDITIONAL_TIMESLOTTYPE" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FLI_FLIGHT_COMMENTS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."FLI_FLIGHT_COMMENTS" 
   (	"PK_FLI_FLIGHT_COMMENTS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"COMM" CLOB, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFY_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_FLI_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("COMM") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table FLI_FLIGHT_DISCOUNT_REASONS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."FLI_FLIGHT_DISCOUNT_REASONS" 
   (	"PK_FLI_FLIGHT_DISCOUNT_REASONS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DISCOUNT_REASON" CLOB, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("DISCOUNT_REASON") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table FLI_FLIGHT_DISCOUNTS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."FLI_FLIGHT_DISCOUNTS" 
   (	"PK_FLI_FLIGHT_DISCOUNTS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DISCOUNT_VALUE" NUMBER, 
	"FK_DISCOUNT_REASON" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"HOURLY_RATE" NUMBER, 
	"HOURS" NUMBER, 
	"MINUTES" NUMBER, 
	"FK_FLIGHT_PHASE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GAL_GAIN_AND_LOSS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."GAL_GAIN_AND_LOSS" 
   (	"PK_GAL_GAIN_AND_LOSS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"VERSION" NUMBER, 
	"FIN_YEAR" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GESCHWISTER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."GESCHWISTER" 
   (	"PK_GESCHWISTER" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"FK_GESCHWISTER" NUMBER(10,0), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HAN_HANGAR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."HAN_HANGAR" 
   (	"PK_HAN_HANGAR" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	"FK_ADR_ADRESS" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_AIR_AIRPORTS_ALPHABET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_AIR_AIRPORTS_ALPHABET" 
   (	"SPALTE1" VARCHAR2(26 BYTE), 
	"SPALTE2" VARCHAR2(26 BYTE), 
	"SPALTE3" VARCHAR2(26 BYTE), 
	"SPALTE4" VARCHAR2(26 BYTE), 
	"SPALTE5" VARCHAR2(26 BYTE), 
	"SPALTE6" VARCHAR2(26 BYTE), 
	"SPALTE7" VARCHAR2(26 BYTE), 
	"SPALTE8" VARCHAR2(26 BYTE), 
	"SPALTE9" VARCHAR2(26 BYTE), 
	"SPALTE10" VARCHAR2(26 BYTE), 
	"SPALTE11" VARCHAR2(26 BYTE), 
	"SPALTE12" VARCHAR2(26 BYTE), 
	"SPALTE13" VARCHAR2(26 BYTE), 
	"SPALTE14" VARCHAR2(26 BYTE), 
	"SPALTE15" VARCHAR2(26 BYTE), 
	"SPALTE16" VARCHAR2(26 BYTE), 
	"SPALTE17" VARCHAR2(26 BYTE), 
	"SPALTE18" VARCHAR2(26 BYTE), 
	"SPALTE19" VARCHAR2(26 BYTE), 
	"SPALTE20" VARCHAR2(26 BYTE), 
	"SPALTE21" VARCHAR2(26 BYTE), 
	"SPALTE22" VARCHAR2(26 BYTE), 
	"SPALTE23" VARCHAR2(26 BYTE), 
	"SPALTE24" VARCHAR2(26 BYTE), 
	"SPALTE25" VARCHAR2(26 BYTE), 
	"SPALTE26" VARCHAR2(26 BYTE), 
	"SPALTE27" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_AIR_AIRPORTS_ARTIFICIAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_AIR_AIRPORTS_ARTIFICIAL" 
   (	"FLUGHAFEN" VARCHAR2(128 BYTE), 
	"STADT" VARCHAR2(128 BYTE), 
	"LAND" VARCHAR2(26 BYTE), 
	"BAUENDE" NUMBER(38,0), 
	"BETRIEBSDAUER_LINIENVERKEHR" VARCHAR2(128 BYTE), 
	"INVESTITIONSSUMME" VARCHAR2(26 BYTE), 
	"PASSAGIERE" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_AIR_AIRPORTS_INTERNATIONAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_AIR_AIRPORTS_INTERNATIONAL" 
   (	"RANG" VARCHAR2(128 BYTE), 
	"INTERNATIONAL" VARCHAR2(26 BYTE), 
	"NATIONAL" VARCHAR2(128 BYTE), 
	"GESAMT" VARCHAR2(128 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_BA_ALLG_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_ALLG_BEL" 
   (	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"LAND" VARCHAR2(26 BYTE), 
	"S1" VARCHAR2(26 BYTE), 
	"S2" VARCHAR2(26 BYTE), 
	"BETRAG" VARCHAR2(20 BYTE), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"S4" VARCHAR2(26 BYTE), 
	"STEUERSATZ" VARCHAR2(20 BYTE), 
	"S6" VARCHAR2(20 BYTE), 
	"STEUERNUMMER" VARCHAR2(128 BYTE), 
	"DATUM" VARCHAR2(26 BYTE), 
	"UHRZEIT" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" VARCHAR2(128 BYTE), 
	"ZAHLUNGSART" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(128 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(4000 BYTE), 
	"SONSTIGES2" VARCHAR2(4000 BYTE), 
	"S7" VARCHAR2(4000 BYTE), 
	"S8" VARCHAR2(4000 BYTE), 
	"S9" VARCHAR2(4000 BYTE), 
	"S10" VARCHAR2(4000 BYTE), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"PK_IMP_BA_ALLG_BEL" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"MERK" VARCHAR2(20 BYTE), 
	"WERT" NUMBER, 
	"FK_IMP_BA_ALLG_BEL1" NUMBER, 
	"ORT" VARCHAR2(26 BYTE), 
	"SONSTIGES3" VARCHAR2(4000 BYTE), 
	"SONSTIGES4" VARCHAR2(4000 BYTE), 
	"SONSTIGES5" VARCHAR2(4000 BYTE), 
	"SONSTIGES6" VARCHAR2(4000 BYTE), 
	"UMRECHNUNGSKURS" VARCHAR2(255 BYTE), 
	"MWST" NUMBER, 
	"DOK" BFILE, 
	"BILD" BLOB, 
	"BILD1" BLOB, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BILD1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table IMP_BA_BEL_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_BEL_DET" 
   (	"BELEGNUMMER" VARCHAR2(26 BYTE), 
	"GESCHAEFT" VARCHAR2(128 BYTE), 
	"DATUM" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(7,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"ARTIKEL" VARCHAR2(128 BYTE), 
	"ARTIKELNUMMER" NUMBER(9,0), 
	"BEMERKUNG" VARCHAR2(128 BYTE), 
	"SONSTIGES1" VARCHAR2(128 BYTE), 
	"SONSTIGES2" VARCHAR2(128 BYTE), 
	"SONSTIGES3" VARCHAR2(26 BYTE), 
	"SONSTIGES4" VARCHAR2(26 BYTE), 
	"SONSTIGES5" VARCHAR2(128 BYTE), 
	"SONSTIGES6" VARCHAR2(128 BYTE), 
	"SONSTIGES7" VARCHAR2(128 BYTE), 
	"SONSTIGES8" VARCHAR2(128 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"FK_IMP_BA_ALLG_BEL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_BA_BUSSGELDER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_BUSSGELDER" 
   (	"WEBSEITE" VARCHAR2(26 BYTE), 
	"ID" VARCHAR2(26 BYTE), 
	"CODE" VARCHAR2(26 BYTE), 
	"KENNZEICHEN" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(6,1), 
	"BELEGID" NUMBER(3,0), 
	"DATUM" VARCHAR2(26 BYTE), 
	"ORT" VARCHAR2(4000 BYTE), 
	"DATUM_VERGEHEN" VARCHAR2(4000 BYTE), 
	"KM_GEFAHREN" VARCHAR2(4000 BYTE), 
	"KM_SOLL" VARCHAR2(4000 BYTE), 
	"BUSSGELDSTELLE" VARCHAR2(4000 BYTE), 
	"IBAN" VARCHAR2(4000 BYTE), 
	"ID2" VARCHAR2(26 BYTE), 
	"ART" VARCHAR2(4000 BYTE), 
	"COLUMN1" VARCHAR2(4000 BYTE), 
	"SONSTIGE2" VARCHAR2(4000 BYTE), 
	"SONSTIGE3" VARCHAR2(4000 BYTE), 
	"RNR" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(20 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"VERWENDUNGSZWECK" VARCHAR2(4000 BYTE), 
	"PK_IMP_BA_BUSSGELDER" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"LAND" VARCHAR2(4000 BYTE), 
	"PUNKTE_VON" DATE, 
	"PUNKTE_BIS" DATE, 
	"PUNKTE" NUMBER, 
	"BILD" BLOB, 
	"FK_ABL_ORDNER_PAGE" NUMBER, 
	"KM_UEBERTR_ABS" NUMBER, 
	"KM_UEBERTR_ABZGL_MESSTOL" NUMBER, 
	"CODE_BUSSGELD" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table IMP_BA_COWORKING
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_COWORKING" 
   (	"ORT" VARCHAR2(128 BYTE), 
	"LAND" VARCHAR2(26 BYTE), 
	"ANZAHL_TAGE" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(4,0), 
	"WHRUNG" VARCHAR2(26 BYTE), 
	"RECHNUNGSNUMMER" NUMBER(9,0), 
	"DATUM" DATE, 
	"FIRMA" VARCHAR2(128 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"PK_IMP_BA_COWORKING" NUMBER, 
	"FK_ARBEITSTAG" NUMBER, 
	"FK_PROJEKT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_BA_GRENZBELEGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_GRENZBELEGE" 
   (	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"DATUM" VARCHAR2(4000 BYTE), 
	"UHRZEIT" VARCHAR2(4000 BYTE), 
	"ZWECK" VARCHAR2(4000 BYTE), 
	"COLUMN5" VARCHAR2(4000 BYTE), 
	"BETRAG" VARCHAR2(4000 BYTE), 
	"COLUMN7" VARCHAR2(4000 BYTE), 
	"COLUMN8" VARCHAR2(4000 BYTE), 
	"COLUMN9" VARCHAR2(4000 BYTE), 
	"COLUMN10" VARCHAR2(4000 BYTE), 
	"COLUMN11" VARCHAR2(4000 BYTE), 
	"COLUMN12" VARCHAR2(4000 BYTE), 
	"COLUMN13" VARCHAR2(4000 BYTE), 
	"COLUMN14" VARCHAR2(4000 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"PK_IMP_BA_GRENZBELEGE" NUMBER, 
	"FK_ARBEITSTAG" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"KENNZEICHEN" VARCHAR2(20 BYTE), 
	"FK_INV_INVENTAR" NUMBER, 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_BA_OEFFENTL_TICKETS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_OEFFENTL_TICKETS" 
   (	"VERKEHRSVERBUND" VARCHAR2(26 BYTE), 
	"DATUM" VARCHAR2(26 BYTE), 
	"UHRZEIT" VARCHAR2(26 BYTE), 
	"FAHRTENKARTE" VARCHAR2(128 BYTE), 
	"BETRAG" NUMBER(5,2), 
	"MWST" VARCHAR2(26 BYTE), 
	"ZAHLUNGSART" VARCHAR2(26 BYTE), 
	"BEMERKUNG" VARCHAR2(4000 BYTE), 
	"S1" VARCHAR2(4000 BYTE), 
	"S2" VARCHAR2(4000 BYTE), 
	"S3" VARCHAR2(4000 BYTE), 
	"WOCHENTAG" VARCHAR2(26 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(26 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"PK_IMP_BA_OEFFENTL_TICKETS" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"BILD" BLOB, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table IMP_BA_PARKTICKETS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_PARKTICKETS" 
   (	"NAME" VARCHAR2(128 BYTE), 
	"BELEGNR" VARCHAR2(128 BYTE), 
	"VON" VARCHAR2(4000 BYTE), 
	"BIS" VARCHAR2(26 BYTE), 
	"BARCODE" VARCHAR2(26 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"MWST" NUMBER(*,0), 
	"ZAHLUNGSART" VARCHAR2(26 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(26 BYTE), 
	"SONSTIGES1" VARCHAR2(128 BYTE), 
	"SONSTIGES2" VARCHAR2(128 BYTE), 
	"SONSTIGES3" VARCHAR2(26 BYTE), 
	"SONSTIGES4" VARCHAR2(26 BYTE), 
	"STEUERSATZ" VARCHAR2(26 BYTE), 
	"SONSTIGES6" VARCHAR2(26 BYTE), 
	"SONSTIGES7" VARCHAR2(26 BYTE), 
	"SONSTIGES8" VARCHAR2(4000 BYTE), 
	"SONSTIGES9" VARCHAR2(4000 BYTE), 
	"SONSTIGES10" VARCHAR2(4000 BYTE), 
	"SONSTIGES11" VARCHAR2(4000 BYTE), 
	"SONSTIGES12" VARCHAR2(4000 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"COLUMN1" VARCHAR2(20 BYTE), 
	"STEUERNUMMER" VARCHAR2(4000 BYTE), 
	"PK_IMP_BA_PARKTICKETS" NUMBER, 
	"CHECKED" NUMBER, 
	"LAND" VARCHAR2(20 BYTE), 
	"WAEHRUNG" VARCHAR2(20 BYTE), 
	"BILD" BLOB, 
	"KENNZEICHEN" VARCHAR2(20 BYTE), 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table IMP_BA_SONSTIGE_BELEGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_SONSTIGE_BELEGE" 
   (	"ART" VARCHAR2(4000 BYTE), 
	"FIRMA" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" VARCHAR2(4000 BYTE), 
	"DATUM" VARCHAR2(4000 BYTE), 
	"REFERENZNUMMER" VARCHAR2(4000 BYTE), 
	"ARTIKELNUMMER" VARCHAR2(4000 BYTE), 
	"BETRAG" VARCHAR2(4000 BYTE), 
	"STEUERNUMMER" VARCHAR2(4000 BYTE), 
	"S1" VARCHAR2(4000 BYTE), 
	"MWST" VARCHAR2(4000 BYTE), 
	"SENDUNGSNUMMER" VARCHAR2(4000 BYTE), 
	"GEWICHT" VARCHAR2(4000 BYTE), 
	"PK_IMP_BA_SONSTIGE_BELEGE" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_ARBEITSTAG" NUMBER, 
	"EINZELBETRÄGE" VARCHAR2(20 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_INVENTAR" NUMBER, 
	"FK_PROJEKT" NUMBER, 
	"WÄHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMP_BA_TANKSTELLE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_TANKSTELLE" 
   (	"TANKSTELLE" VARCHAR2(128 BYTE), 
	"ORT" VARCHAR2(4000 BYTE), 
	"LAND" VARCHAR2(4000 BYTE), 
	"TANKSTELLEN_NR" VARCHAR2(4000 BYTE), 
	"BELEG_NR" VARCHAR2(4000 BYTE), 
	"DATUM" VARCHAR2(4000 BYTE), 
	"ZAPFSAEULE" VARCHAR2(4000 BYTE), 
	"LITER" VARCHAR2(4000 BYTE), 
	"PREIS_PRO_LITER" VARCHAR2(4000 BYTE), 
	"EUR" VARCHAR2(4000 BYTE), 
	"KARTENZAHLUNG" VARCHAR2(4000 BYTE), 
	"MWST" VARCHAR2(4000 BYTE), 
	"MWST_BETRAG" VARCHAR2(26 BYTE), 
	"NETTO" VARCHAR2(20 BYTE), 
	"STEUERNR" VARCHAR2(128 BYTE), 
	"BEMERKUNGEN" VARCHAR2(128 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(26 BYTE), 
	"KENNZEICHEN" VARCHAR2(26 BYTE), 
	"BEMERKUNGEN2" VARCHAR2(128 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"WAEHRUNG" VARCHAR2(20 BYTE), 
	"PREIS_PRO_MENGE" VARCHAR2(20 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"PK_IMP_BA_TANKSTELLE" NUMBER, 
	"CHECKED" NUMBER, 
	"WERT" NUMBER, 
	"BILD" BLOB, 
	"AUTOWAESCHE" NUMBER(1,0) DEFAULT 0, 
	"VIGNETTE" NUMBER(1,0) DEFAULT 0, 
	"LEBENSMITTEL" NUMBER(1,0) DEFAULT 0, 
	"SONSTIGES" NUMBER(1,0) DEFAULT 0, 
	"AUTOERSATZTEILE" NUMBER(1,0) DEFAULT 0, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"FK_LOC_LOCATION" NUMBER, 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table IMP_BA_UNTERHALTUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_BA_UNTERHALTUNG" 
   (	"COLUMN1" VARCHAR2(4000 BYTE), 
	"COLUMN2" VARCHAR2(4000 BYTE), 
	"COLUMN3" VARCHAR2(4000 BYTE), 
	"COLUMN4" VARCHAR2(4000 BYTE), 
	"BILD" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table IMP_GEO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_GEO" 
   (	"T1" NUMBER, 
	"T2" BLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("T2") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table IMP_KRED_OV_OLD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."IMP_KRED_OV_OLD" 
   (	"ID" VARCHAR2(20 BYTE), 
	"Datum" DATE, 
	"Uhrzeit" DATE, 
	"Zeitzone" VARCHAR2(255 BYTE), 
	"Name" VARCHAR2(255 BYTE), 
	"Typ" VARCHAR2(255 BYTE), 
	"Status" VARCHAR2(255 BYTE), 
	"Währung" VARCHAR2(255 BYTE), 
	"Brutto" BINARY_DOUBLE, 
	"Gebühr" VARCHAR2(255 BYTE), 
	"Netto" VARCHAR2(255 BYTE), 
	"Absender" VARCHAR2(255 BYTE), 
	"Empfänger" VARCHAR2(255 BYTE), 
	"Transaktionscode" VARCHAR2(255 BYTE), 
	"Lieferadresse" VARCHAR2(255 BYTE), 
	"Adress-Status" VARCHAR2(255 BYTE), 
	"Artikelbezeichnung" VARCHAR2(255 BYTE), 
	"Artikelnummer" VARCHAR2(255 BYTE), 
	"Versand" VARCHAR2(255 BYTE), 
	"Versicherungsbetrag" VARCHAR2(255 BYTE), 
	"Umsatzsteuer" VARCHAR2(255 BYTE), 
	"Option 1 Name" VARCHAR2(255 BYTE), 
	"Option 1 Wert" VARCHAR2(255 BYTE), 
	"Option 2 Name" VARCHAR2(255 BYTE), 
	"Option 2 Wert" VARCHAR2(255 BYTE), 
	"Zugehöriger" VARCHAR2(255 BYTE), 
	"Rechnungsnummer" VARCHAR2(255 BYTE), 
	"Zollnummer" VARCHAR2(255 BYTE), 
	"Anzahl" VARCHAR2(255 BYTE), 
	"Empfangsnummer" VARCHAR2(255 BYTE), 
	"Guthaben" BINARY_DOUBLE, 
	"Adresszeile_1" VARCHAR2(255 BYTE), 
	"Adresszusatz" VARCHAR2(255 BYTE), 
	"Ort" VARCHAR2(255 BYTE), 
	"Bundesland" VARCHAR2(255 BYTE), 
	"PLZ" VARCHAR2(255 BYTE), 
	"Land" VARCHAR2(255 BYTE), 
	"Telefon" VARCHAR2(255 BYTE), 
	"Betreff" VARCHAR2(255 BYTE), 
	"Hinweis" VARCHAR2(255 BYTE), 
	"Ländervorwahl" VARCHAR2(255 BYTE), 
	"Auswirkung" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INV_INVOICE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."INV_INVOICE" 
   (	"PK_INV_INVOICE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"INVOICE_DATE" DATE, 
	"IN_OUT" NUMBER, 
	"RECIEPIENT" NUMBER, 
	"BRUT_VALUE" NUMBER, 
	"TAX" NUMBER, 
	"TAX_RATE" NUMBER, 
	"NET_VALUE" NUMBER, 
	"FK_INVOICE_TYPE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INV_INVOICE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."INV_INVOICE_TYPE" 
   (	"PK_INV_INVOICE_TYPE" NUMBER, 
	"INVOICE_TYPE" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."LAND" 
   (	"PK_LAND" NUMBER, 
	"LAND" VARCHAR2(255 BYTE), 
	"KURZBEZEICHNUNG" VARCHAR2(20 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LAN_LANDING
--------------------------------------------------------

  CREATE TABLE "COMPANY"."LAN_LANDING" 
   (	"PK_LAN_LANDING" NUMBER, 
	"MDT_MANDANT" NUMBER, 
	"FK_ARP_AIRPORT" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"PRICE_INVOICED" NUMBER, 
	"PRICE_PAYED" NUMBER, 
	"PRICE_CALCULATED" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LEBENSPARTNER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."LEBENSPARTNER" 
   (	"PK_LEBENSPARTNER" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"FK_LEBENSPARTNER" NUMBER(10,0), 
	"STATUS" VARCHAR2(255 CHAR), 
	"DATUM_STANDESAMTLICH" DATE, 
	"STANDESAMT" VARCHAR2(255 CHAR), 
	"DATUM_KIRCHLICH" DATE, 
	"KIRCHE" VARCHAR2(255 CHAR), 
	"FK_ORT" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LEBENSPARTNER_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."LEBENSPARTNER_BILD" 
   (	"FK_BILD" NUMBER, 
	"FK_LEBENSPARTNER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MDT_MANDANT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."MDT_MANDANT" 
   (	"PK_MDT_MANDANT" NUMBER, 
	"MANDANT" VARCHAR2(4000 BYTE), 
	"FK_ORG_ORG_UNIT" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORG_UNIT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ORG_UNIT" 
   (	"PK_ORG_UNIT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"COMPANY_NAME" VARCHAR2(4000 BYTE), 
	"ORG_UNIT_NAME" VARCHAR2(4000 BYTE), 
	"ACTIVE" NUMBER, 
	"ACTIVE_FROM" DATE, 
	"ACTIVE_TO" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_ORG_UNIT_TYPE" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORG_UNIT_CHECK_OUT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ORG_UNIT_CHECK_OUT" 
   (	"PK_ORG_UNIT_CHECK_OUT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_ORG_UNIT" NUMBER, 
	"CHECK_OUT_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORG_UNIT_REL_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ORG_UNIT_REL_TYPE" 
   (	"PK_ORG_UNIT_REL_TYPE" NUMBER, 
	"ORG_UNIT_TYPE_REL_NAME_DE" VARCHAR2(4000 BYTE), 
	"ORG_UNIT_TYPE_REL_NAME_EN" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORG_UNIT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ORG_UNIT_TYPE" 
   (	"PK_ORG_UNIT_TYPE" NUMBER, 
	"ORG_UNIT_TYPE_NAME_DE" VARCHAR2(4000 BYTE), 
	"ORG_UNIT_TYPE_NAME_EN" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."ORT" 
   (	"PK_ORT" NUMBER(10,0), 
	"ORT" VARCHAR2(255 CHAR), 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"ORTSNAMEN_ZUSATZ" VARCHAR2(255 BYTE), 
	"POSTLEITZAHL" VARCHAR2(20 BYTE), 
	"FK_LAND" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PAY_PAYMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PAY_PAYMENT" 
   (	"PK_PAY_PAYMENT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"VALUE" VARCHAR2(20 BYTE), 
	"FK_PAY_PAYMENT_TYPE" NUMBER, 
	"PAY_DATE" NUMBER, 
	"BOOKING_DATE" NUMBER, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFY_AT" DATE, 
	"FK_APL_PLANE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PAY_PAYMENT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PAY_PAYMENT_TYPE" 
   (	"PK_PAY_PAYMENT_TYPE" NUMBER, 
	"PAYMENT_TYPE" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PERSON
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON" 
   (	"PK_PERSON" NUMBER(10,0), 
	"NAME" VARCHAR2(255 CHAR), 
	"VORNAME" VARCHAR2(255 CHAR), 
	"GESCHLECHT" VARCHAR2(255 CHAR), 
	"GEBOREN_AM" DATE, 
	"GESTORBEN_AM" DATE, 
	"FK_GEBURTSORT" NUMBER(10,0), 
	"BESCHREIBUNG" CLOB, 
	"GEBURTSNAME" VARCHAR2(255 CHAR), 
	"TITEL" VARCHAR2(255 CHAR), 
	"ADELSTITEL" VARCHAR2(255 CHAR), 
	"FK_STERBEORT" NUMBER(10,0), 
	"RUFNAME" VARCHAR2(255 CHAR), 
	"NR_AHNENTAFEL" NUMBER(10,0), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BESCHREIBUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table PERSON_BERUF
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_BERUF" 
   (	"PK_PERSON_BERUF" NUMBER(10,0), 
	"BERUF" VARCHAR2(255 CHAR), 
	"FK_PERSON" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"REIHENFOLGE" NUMBER(10,0), 
	"VON" DATE, 
	"BIS" DATE, 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PERSON_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_BILD" 
   (	"FK_PERSON" NUMBER, 
	"FK_BILD" NUMBER, 
	"AKTUELL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PERSON_FAMILIE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_FAMILIE" 
   (	"PK_PERSON_FAMILIE" NUMBER(10,0), 
	"FK_FAMILIE" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"HERKUNFT" VARCHAR2(255 CHAR), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PERSON_KONTAKTDATEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_KONTAKTDATEN" 
   (	"PK_PERSON_KONTAKTDATEN" NUMBER, 
	"FK_PERSON" NUMBER, 
	"FK_KONTAKTDATENART" NUMBER, 
	"KONTAKTDATEN_1" VARCHAR2(4000 BYTE), 
	"KONTAKTDATEN_2" VARCHAR2(4000 BYTE), 
	"KONTAKTDATEN_3" VARCHAR2(4000 BYTE), 
	"KONTAKTDATEN_4" VARCHAR2(4000 BYTE), 
	"KONTAKTDATEN_5" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATION_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFY_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PERSON_OFFENE_PUNKTE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_OFFENE_PUNKTE" 
   (	"PK_PERSON_OFFENE_PUNKTE" NUMBER, 
	"FK_PERSON" NUMBER, 
	"OFFENE_PUNKTE" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("OFFENE_PUNKTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table PERSON_RELIGION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_RELIGION" 
   (	"PK_PERSON_RELIGION" NUMBER(10,0), 
	"RELIGION" VARCHAR2(255 CHAR), 
	"FK_PERSON" NUMBER(10,0), 
	"STATUS" VARCHAR2(255 CHAR), 
	"AUSGETRETEN_AM" DATE, 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PERSON_WOHNORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PERSON_WOHNORT" 
   (	"PK_PERSON_WOHNORT" NUMBER(10,0), 
	"FK_WOHNORT" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"REIHENFOLGE" NUMBER(10,0), 
	"VON" DATE, 
	"BIS" DATE, 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"STATUS" NUMBER, 
	"ADDRESS_ZUSATZ" VARCHAR2(4000 BYTE), 
	"HAUSNUMMER" VARCHAR2(20 BYTE), 
	"FK_STRASSE" NUMBER, 
	"POSTFACH" VARCHAR2(20 BYTE), 
	"FK_ADDRESSTYP" NUMBER DEFAULT 1, 
	"FK_PLZ_ORT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PLA_ENGINE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PLA_ENGINE_TYPE" 
   (	"PK_PLA_ENGINE_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"ENGINE_TYPE" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PLZ_ORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PLZ_ORT" 
   (	"PK_PLZ_ORT" NUMBER, 
	"PLZ" VARCHAR2(20 CHAR), 
	"ORT" VARCHAR2(4000 CHAR), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROJ1_ADDFRIEND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PROJ1_ADDFRIEND" 
   (	"FRIEND_ID" NUMBER, 
	"BLOCKED" NUMBER, 
	"REQ_STATUS" NUMBER, 
	"FRIEND_USER_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"BLOCKED_BY" NUMBER, 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROJ1_ADDFRIEND_RELATIONS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."PROJ1_ADDFRIEND_RELATIONS" 
   (	"ADDFRIEND_RELATION_ID" NUMBER, 
	"FRIEND_USER_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_AIRPORT_LOCATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_AIRPORT_LOCATION" 
   (	"PK_REL_AIRPORT_LOCATION" NUMBER, 
	"FK_ARP_AIRPORT" NUMBER, 
	"FK_LOC_LOCATION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_BORD_LOG_ENTRY_PAY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_BORD_LOG_ENTRY_PAY" 
   (	"PK_BORD_LOG_ENTRY_PAY" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BORD_LOG_ENTRY" NUMBER, 
	"FK_PAY_PAYMENT" NUMBER, 
	"ADDITIONAL_COSTS" NUMBER, 
	"CREDIT_NOTE" NUMBER, 
	"CREDIT_NOTE_CURRENCY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_CONTACT_ADDRESS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_CONTACT_ADDRESS" 
   (	"PK_REL_CONTACT_ADDRESS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_CON_CONTACT" NUMBER, 
	"FK_ADR_ADDRESS" NUMBER, 
	"FK_ADR_COUNTRY" NUMBER, 
	"PHONE_NO" VARCHAR2(4000 BYTE), 
	"EMAIL" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."REL_CONTACT_ADDRESS"."FK_ADR_COUNTRY" IS 'PHONE PREFIX';
--------------------------------------------------------
--  DDL for Table REL_CONTACT_BANKACCOUNT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_CONTACT_BANKACCOUNT" 
   (	"PK_CONTACT_BANKACCOUNT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BAK_BANKACCOUNT" NUMBER, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_DOC_CONTACT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_DOC_CONTACT" 
   (	"PK_REL_DOC_CONTACT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_DOC_FLIGHT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_DOC_FLIGHT" 
   (	"PK_REL_DOC_FLIGHT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_DOC_HANGAR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_DOC_HANGAR" 
   (	"PK_REL_DOC_HANGAR" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_HAN_HANGAR" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_DOC_PLANE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_DOC_PLANE" 
   (	"PK_REL_DOC_PLANE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_APL_PLANE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_DOC_TYPE_USAGE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_DOC_TYPE_USAGE_TYPE" 
   (	"PK_REL_DOC_TYPE_USAGE_TYPE" NUMBER, 
	"FK_DOC_DOCUMENT_TYPE" NUMBER, 
	"FK_DOC_USAGE_TYPE" NUMBER, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"REQUIRED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_INV_PL_FLI_CH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_INV_PL_FLI_CH" 
   (	"PK_INV_PL_FLI_CH" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_INV_INVOICE" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"FK_REL_PLANE_FLIGHT" NUMBER, 
	"FK_REL_PLANE_FLIGHT_CHARTERER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."REL_INV_PL_FLI_CH"."FK_CST_CUSTOMER" IS 'Charterer';
--------------------------------------------------------
--  DDL for Table REL_ORG_UNIT_CON
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_ORG_UNIT_CON" 
   (	"PK_ORG_UNIT_CON" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_ORG_UNIT" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_ORG_UNIT_CON_ORG_REL_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_ORG_UNIT_CON_ORG_REL_TYPE" 
   (	"PK_ORG_UNIT_CON_ORG_REL_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_ORG_UNIT_CONTACT" NUMBER, 
	"FK_ORG_UNIT_REL_TYPE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_PAY_PLANE_FLI_CH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_PAY_PLANE_FLI_CH" 
   (	"PK_PAY_PLANE_FLI_CH" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_PAY_PAYMENT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_REL_PLANE_FLIGHT_CHARTERER" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"FK_REL_PLANE_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_PLANE_FLIGHT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_PLANE_FLIGHT" 
   (	"PK_PLANE_FLIGHT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REL_PLANE_FLIGHT_CHARTERER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."REL_PLANE_FLIGHT_CHARTERER" 
   (	"PK_REL_PLANE_FLIGHT_CHARTERER" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_REL_PLANE_FLIGHT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."REL_PLANE_FLIGHT_CHARTERER"."FK_CST_CUSTOMER" IS 'CHARTERER';
--------------------------------------------------------
--  DDL for Table RES_RESERVATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."RES_RESERVATION" 
   (	"PK_RES_RESERVATION" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FROM_DATE" DATE, 
	"TO_DATE" DATE, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"FK_STATE" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_APL_PLANE" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SPARCHILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."SPARCHILD" 
   (	"ID" NUMBER(38,0), 
	"PARENT" NUMBER(38,0), 
	"CHILD" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SPARCHILD1
--------------------------------------------------------

  CREATE TABLE "COMPANY"."SPARCHILD1" 
   (	"ID" NUMBER(38,0), 
	"PARENT" NUMBER(38,0), 
	"CHILD" NUMBER(38,0), 
	"UNIT_ID" NUMBER(38,0), 
	"F2" VARCHAR2(26 BYTE), 
	"DUMMY" VARCHAR2(26 BYTE), 
	"BEZEICHNUNG" VARCHAR2(128 BYTE), 
	"UNIT_PARENT" VARCHAR2(26 BYTE), 
	"MGR" VARCHAR2(26 BYTE), 
	"OLD" VARCHAR2(20 BYTE), 
	"ORG_LEVEL" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STD_PARAM
--------------------------------------------------------

  CREATE TABLE "COMPANY"."STD_PARAM" 
   (	"PK_STD_PARAM" NUMBER, 
	"PARAM_NAME" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STD_PARAM_ATTR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."STD_PARAM_ATTR" 
   (	"PK_STD_PARAM_ATTR" NUMBER, 
	"FK_PARAM" NUMBER, 
	"ATTR_NAME" VARCHAR2(4000 BYTE), 
	"ATTR_VALUE" NUMBER, 
	"ATTR_DISPLAYNAME" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"SORT" NUMBER, 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STRASSE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."STRASSE" 
   (	"PK_STRASSE" NUMBER, 
	"STRASSE" VARCHAR2(255 BYTE), 
	"TRANSFER_DATE" DATE, 
	"FLG_TRANSFERED" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ABL_ORDNER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ABL_ORDNER" 
   (	"PK_ABL_ORDNER" NUMBER, 
	"JAHR" NUMBER, 
	"ORDNER_NAME" VARCHAR2(4000 BYTE), 
	"COLUMN1" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ABL_ORDNER_PAGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ABL_ORDNER_PAGE" 
   (	"PK_ABL_ORDNER_PAGE" NUMBER, 
	"FK_ABL_ORDNER" NUMBER, 
	"PAGE_NUMBER" NUMBER, 
	"DESCR" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ABR_EN_HEIZUNGSABLESUNG_DETAILS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABLESUNG_DETAILS" 
   (	"PK_ABR_HEIZUNGSABLESUNG" NUMBER, 
	"FK_ABR_HEIZUNGSABRECHNUNG" NUMBER, 
	"ABLESETERMIN" DATE, 
	"JAHR" NUMBER, 
	"LFD_NR" NUMBER, 
	"RAUM" VARCHAR2(20 BYTE), 
	"RAUM_LONG" VARCHAR2(4000 BYTE), 
	"GERAETETYP" VARCHAR2(20 BYTE), 
	"GERAETETYP_LONG" VARCHAR2(4000 BYTE), 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"GERÄTE_NR" NUMBER, 
	"EINHEITEN" VARCHAR2(20 BYTE), 
	"MESSGRÖSSE" VARCHAR2(20 BYTE), 
	"ABLESEWERT" VARCHAR2(20 BYTE), 
	"BEMERKUNG" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ABR_EN_HEIZUNGSABRECHNUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG" 
   (	"NR" VARCHAR2(20 BYTE), 
	"LIEGENSCHAFTSNUTZER" VARCHAR2(4000 BYTE), 
	"ABRECHNUNGSDATUM" VARCHAR2(20 BYTE), 
	"ABRECHNUNGSZEITRAUM" VARCHAR2(4000 BYTE), 
	"SUMME_VORAUSZAHL" VARCHAR2(20 BYTE), 
	"VORAUSZAHLUNGEN" VARCHAR2(20 BYTE), 
	"NACHZAHLUNGSBETRAG" VARCHAR2(20 BYTE), 
	"ERLEDIGT_AM" VARCHAR2(20 BYTE), 
	"TEXT" VARCHAR2(4000 BYTE), 
	"BESUCHSTERMIN" VARCHAR2(4000 BYTE), 
	"LIEGENSCHAFTSNUMMER" VARCHAR2(4000 BYTE), 
	"AUFTRAGSNUMMER" VARCHAR2(4000 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(20 BYTE), 
	"STEUERNUMMER" VARCHAR2(4000 BYTE), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"WIEDERHOLUNG" VARCHAR2(20 BYTE), 
	"PK_ABR_EN_HEIZUNGSABRECHNUNG" NUMBER, 
	"IBAN" VARCHAR2(4000 BYTE), 
	"BRIEFDATUM" DATE, 
	"BANK" VARCHAR2(20 BYTE), 
	"AN" VARCHAR2(4000 BYTE), 
	"BILD1" BLOB, 
	"BILD2" BLOB, 
	"BILD3" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BILD2") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BILD3") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

   COMMENT ON COLUMN "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG"."LIEGENSCHAFTSNUTZER" IS 'Liegenschaftsnutzer
Liegenschaftsnutzer
';
--------------------------------------------------------
--  DDL for Table T_ABR_EN_STROMABLESUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ABR_EN_STROMABLESUNG" 
   (	"PK_ABR_EN_STROMABLESUNG" NUMBER, 
	"ABLESEWERT" NUMBER, 
	"ABLESEDATUM" DATE, 
	"TERMIN" DATE, 
	"VERTRAGSKONTO" VARCHAR2(20 BYTE), 
	"ZÄHLER" NUMBER, 
	"ZÄHLERVERSION" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_ADRESSE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_ADRESSE" 
   (	"PK_ADR_ADRESSE" NUMBER, 
	"STRASSE" VARCHAR2(4000 CHAR), 
	"HSNR" VARCHAR2(4000 CHAR), 
	"BESCHREIBUNG" VARCHAR2(4000 CHAR), 
	"FK_ADR_PLZ_ORT" NUMBER, 
	"POSTFACH" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"COMM" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_ADRESSE_SCHNELL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_ADRESSE_SCHNELL" 
   (	"PK_ADR_ADRESSE_SCHNELL" NUMBER, 
	"STRASSE" VARCHAR2(4000 BYTE), 
	"HAUSNUMMER" VARCHAR2(4000 BYTE), 
	"PLZ" VARCHAR2(4000 BYTE), 
	"ORT" VARCHAR2(4000 BYTE), 
	"PLZ_ORT" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"ADRESSE" CLOB, 
	"CREATED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("ADRESSE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_ADR_KONTINENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_KONTINENT" 
   (	"PK_ADR_KONTINENT" NUMBER, 
	"KONTINENT" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_LAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_LAND" 
   (	"PK_ADR_LAND" NUMBER, 
	"LAND" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"PHONE_CODE" VARCHAR2(20 BYTE), 
	"COUNTRY" VARCHAR2(4000 CHAR), 
	"COUNTRY_GER" VARCHAR2(4000 CHAR), 
	"COUNTRY_FR" VARCHAR2(4000 CHAR), 
	"COUNTRY_RU" VARCHAR2(4000 CHAR), 
	"COUNTRY_SHORT" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_ORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_ORT" 
   (	"PK_ADR_ORT" NUMBER(30,10), 
	"ORT" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_ADR_LAND" NUMBER(30,10), 
	"ORT_2" VARCHAR2(4000 BYTE), 
	"KOORDINATEN" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_ORT_KOORDINATEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_ORT_KOORDINATEN" 
   (	"KOORDINATEN" VARCHAR2(26 BYTE), 
	"ORT" VARCHAR2(128 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_PLZ_ORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_PLZ_ORT" 
   (	"PK_ADR_PLZ_ORT" NUMBER(30,10), 
	"PLZ" VARCHAR2(255 BYTE), 
	"OT" VARCHAR2(255 BYTE), 
	"FK_ADR_ORT" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"ZENTRUM" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_PLZ_ORT_BUNDESLAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_PLZ_ORT_BUNDESLAND" 
   (	"BUNDESLAND" VARCHAR2(26 BYTE), 
	"PLZ" NUMBER(38,0), 
	"ORT" VARCHAR2(128 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ADR_REGION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ADR_REGION" 
   (	"T_ADR_REGION" NUMBER, 
	"REGION" VARCHAR2(4000 BYTE), 
	"FK_ADR_LAND" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_AHN_AHNENTAFEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_AHN_AHNENTAFEL" 
   (	"ID" NUMBER, 
	"LEV" NUMBER, 
	"NR_LEV" NUMBER, 
	"FK_ELTERN" NUMBER, 
	"FK_KIND" NUMBER, 
	"RSP" NUMBER, 
	"ANFANGSTAG" VARCHAR2(20 BYTE), 
	"ENDTAG" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_AHN_FAMILIE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_AHN_FAMILIE" 
   (	"PK_FAMILIE" NUMBER(10,0), 
	"FAMILIE" VARCHAR2(255 CHAR), 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_AHN_PERSON_STAMM
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_AHN_PERSON_STAMM" 
   (	"PK_PERSON" NUMBER(10,0), 
	"NAME" VARCHAR2(255 CHAR), 
	"VORNAME" VARCHAR2(255 CHAR), 
	"GESCHLECHT" VARCHAR2(255 CHAR), 
	"GEBOREN_AM" DATE, 
	"GESTORBEN_AM" DATE, 
	"FK_GEBURTSORT" NUMBER(10,0), 
	"BESCHREIBUNG" CLOB, 
	"GEBURTSNAME" VARCHAR2(255 CHAR), 
	"TITEL" VARCHAR2(255 CHAR), 
	"ADELSTITEL" VARCHAR2(255 CHAR), 
	"FK_STERBEORT" NUMBER(10,0), 
	"RUFNAME" VARCHAR2(255 CHAR), 
	"NR_AHNENTAFEL" NUMBER(10,0), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("BESCHREIBUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_BAS_BAS_FARBE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_BAS_FARBE" 
   (	"PK_FARBE" NUMBER(30,10), 
	"FARBE" VARCHAR2(255 BYTE), 
	"FK_HAUPTFARBE" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_BAS_MENGENEINHEIT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_BAS_MENGENEINHEIT" 
   (	"PK_MENGENEINHEIT" NUMBER(30,10), 
	"MENGENEINHEIT" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_BEL_BELEGART
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_BEL_BELEGART" 
   (	"PK_BAS_BEL_BELEGART" NUMBER(30,10), 
	"BELEGART" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_BEL_BELEGART_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_BEL_BELEGART_GRP" 
   (	"PK_BAS_BEL_BELEGART_GRP" NUMBER, 
	"BELEGART_GRP" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"FK_BAS_BEL_BELEGART_M_GRP" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_DOC_DOCUMENT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_DOC_DOCUMENT_TYPE" 
   (	"PK_DOC_DOCUMENT_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DOC_DOCUMENT_TYPE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_FLI_APL_PLANE_MODELL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_FLI_APL_PLANE_MODELL" 
   (	"PK_APL_PLANE_MODELL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"MODELL_NO" VARCHAR2(20 BYTE), 
	"FK_APL_PLANE_TYPE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_INV_INVENTARTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_INV_INVENTARTYP" 
   (	"PK_BAS_INV_INVENTARTYP" NUMBER(30,10), 
	"INVENTARTYP" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"HAUPT_INV_TYP" NUMBER(30,10), 
	"STD_ABSCHREIBUNGSDAUER" NUMBER(30,10), 
	"MIN_BETRAG_ABSCHR" NUMBER(30,10), 
	"MAX_BETRAG_ABSCHR" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_KAL_ARBEITSTAGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_KAL_ARBEITSTAGE" 
   (	"PK_BAS_KAL_ARBEITSTAGE" NUMBER, 
	"DATUM" DATE, 
	"FK_STD_KAL_ARBEITSTAG" NUMBER, 
	"FK_STD_KAL_WOCHENENDE" NUMBER, 
	"FK_STD_KAL_FEIERTAG" NUMBER, 
	"FEIERTAG" VARCHAR2(4000 CHAR), 
	"TAG" NUMBER, 
	"MONAT" NUMBER, 
	"JAHR" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"WOCHENTAG" VARCHAR2(4000 BYTE), 
	"KALENDERWOCHE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_KAT_IMMO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_KAT_IMMO" 
   (	"PK_BAS_KAT_IMMO" NUMBER, 
	"KATEGORIE" VARCHAR2(4000 BYTE), 
	"FK_STD_EINNAHMEN_AUSGABEN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_KAT_KATEGORIE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_KAT_KATEGORIE" 
   (	"PK_BAS_KAT_KATEGORIE" NUMBER, 
	"KATEGORIE" VARCHAR2(255 BYTE), 
	"NEU_ALT" VARCHAR2(255 BYTE), 
	"FK_BAS_KAT_OBERKATEGORIE" VARCHAR2(20 BYTE), 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"CREATION_DATE" DATE, 
	"MODIFY_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_BY" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_KAT_OBERKATEGORIE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_KAT_OBERKATEGORIE" 
   (	"ID" VARCHAR2(255 BYTE), 
	"Oberkategorie" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_KON_GESCHAEFTSPARTNERTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_KON_GESCHAEFTSPARTNERTYP" 
   (	"PK_BAS_KON_GESCHAEFTSPARTNERTYP" NUMBER(30,10), 
	"GESCHAEFTSPARTNERTYP" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_KON_KONTAKTTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_KON_KONTAKTTYP" 
   (	"PK_KONTAKTTYP" NUMBER(30,10), 
	"KONTAKTTYP" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_LOC_LOCATION_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_LOC_LOCATION_TYPE" 
   (	"PK_BAS_LOC_LOCATION_TYPE" NUMBER(30,10), 
	"LOCATION_TYPE" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_MON_UMTAUSCHKURS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_MON_UMTAUSCHKURS" 
   (	"PK_T_UMTAUSCHKURS" NUMBER, 
	"KURS" NUMBER, 
	"DAT" DATE, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_MON_WAEHRUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_MON_WAEHRUNG" 
   (	"PK_BAS_MON_WAEHRUNG" NUMBER, 
	"WAEHRUNG" VARCHAR2(20 BYTE), 
	"WAEHRUNG_LANG" VARCHAR2(20 BYTE), 
	"COMM" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_ORG_ORG_UNIT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_ORG_ORG_UNIT" 
   (	"PK_ORGANISATIONSEINHEIT" NUMBER, 
	"ORGANISATIONSEINHEIT" VARCHAR2(4000 CHAR), 
	"FK_PARENT_ORG_UNIT" NUMBER, 
	"FK_GESCHAEFTSPARTNER" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_PROJ_PROJEKT_ART_OLD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_PROJ_PROJEKT_ART_OLD" 
   (	"PK_BAS_PROJ_PROJEKT_ART" NUMBER, 
	"PROJEKT_ART" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"PROJ_ART_COL" VARCHAR2(20 BYTE), 
	"PROJ_ART_SORT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_STEU_STEUER_SATZ
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_STEU_STEUER_SATZ" 
   (	"PK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"STEUERSATZ" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_ADR_LAND" NUMBER(30,10), 
	"DESCR" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_WH_ART_ARTIKELBESTANDTEILTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBESTANDTEILTYP" 
   (	"PK_BAS_WH_ART_ARTIKELBESTTYP" NUMBER, 
	"ARTIKELBESTANDTEILTYP" VARCHAR2(4000 CHAR), 
	"FK_BAS_WH_ART_ARTIKELTYP" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_WH_ART_ARTIKELBUENDELUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBUENDELUNG" 
   (	"PK_BAS_WH_ART_ARTIKELBUENDELUNG" NUMBER(30,10), 
	"BUENDELUNG" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_WH_ART_ARTIKELTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELTYP" 
   (	"PK_BAS_WH_ART_ARTIKELTYP" NUMBER(30,10), 
	"ARTIKELTYP" VARCHAR2(255 BYTE), 
	"FK_BAS_WH_ART_ARTIKELHAUPTTYP" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BAS_WH_PACKUNGSTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BAS_WH_PACKUNGSTYP" 
   (	"PK_PACKKUNGSTYP" NUMBER, 
	"PACKUNGSTYP" VARCHAR2(4000 CHAR), 
	"FK_HAUPTPACKUNGSTYP" NUMBER, 
	"FK_BUENDELUNG_1" NUMBER, 
	"FK_BUENDELUNG_2" NUMBER, 
	"FK_BUENDELUNG_3" NUMBER, 
	"FK_BUENDELUNG_4" NUMBER, 
	"FK_BUENDELUNG_5" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BEI_KK_KRANKENKASSE_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BEI_KK_KRANKENKASSE_DET" 
   (	"DATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(26 BYTE), 
	"VON" VARCHAR2(26 BYTE), 
	"BIS" VARCHAR2(26 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"GEZAHLTER_BETRAG" NUMBER, 
	"KRANKENKASSE" VARCHAR2(26 BYTE), 
	"BEMERKUNG" VARCHAR2(4000 BYTE), 
	"SUMME" NUMBER, 
	"PROJEKTBEMERKUNG" VARCHAR2(26 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"PK_BEI_KK_KRANKENKASSE_DET" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"VERWENDUNGSZWECK" VARCHAR2(4000 BYTE), 
	"IBAN" VARCHAR2(20 BYTE), 
	"WIEDERHOLUNG" VARCHAR2(20 BYTE), 
	"BILD" BLOB, 
	"BILD1" BLOB, 
	"BETRAG1" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_KON_KRANKENKASSE" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BILD1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_BEL_BELEG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BEL_BELEG" 
   (	"PK_BEL_BELEG" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"FK_BAS_BEL_BELEGART" NUMBER(30,10), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER(30,10), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER(30,10), 
	"FK_PROJ_PROJEKT" NUMBER(30,10), 
	"FK_LEHR_LEHRGANG" NUMBER(30,10), 
	"FK_WH_WAREN_BEWEGUNG" NUMBER(30,10), 
	"BELEG" VARCHAR2(4000 BYTE), 
	"BETRAG_BRUTTO" NUMBER(30,10), 
	"DATUM" TIMESTAMP (6), 
	"VON" TIMESTAMP (6), 
	"BIS" TIMESTAMP (6), 
	"AZ_O_PAUSE" NUMBER(30,10), 
	"AZ_M_PAUSE" NUMBER(30,10), 
	"ANWESENHEITSZEIT" NUMBER(30,10), 
	"PARKZEIT" NUMBER(30,10), 
	"AZ_MANUELL_GEPFLEGT" NUMBER(30,10), 
	"KOMMENTAR" VARCHAR2(4000 BYTE), 
	"BETRAG_NETTO" NUMBER(30,10), 
	"FK_IMP_BEL_NR" NUMBER(30,10), 
	"FK_IMP_NO" NUMBER(30,10), 
	"EXT_RENR" VARCHAR2(255 BYTE), 
	"EXT_AUFTRAGSNR" VARCHAR2(255 BYTE), 
	"EXT_LIEFERSCHEINNR" VARCHAR2(255 BYTE), 
	"EXT_LEISTUNGSDATUM" VARCHAR2(255 BYTE), 
	"EXT_RECHNUNGSDATUM" VARCHAR2(255 BYTE), 
	"EXT_AUFTRAGSDATUM" VARCHAR2(255 BYTE), 
	"FK_STD_RE_OFFEN" NUMBER(30,10), 
	"FK_STD_STEU_VORSTEUERRELEVANT" NUMBER(30,10), 
	"FK_STD_STEU_VORSTEUERPFLEGE" NUMBER(30,10), 
	"FK_STD_RE_RECHNUNGSERSTELLUNG" NUMBER(30,10), 
	"FK_STD_RE_RECHNUNG_ERSTELLT" NUMBER(30,10), 
	"FK_STD_KTO_BANKBELEG" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"MWST" NUMBER(30,10), 
	"FK_STD_WH_LIEFERART" NUMBER(30,10), 
	"FK_STD_STEU_EINKOMMENSTEUERRELEVANT" NUMBER(30,10), 
	"FK_STD_STEU_UNTERNEHMENSSTEUERRELEVANT" NUMBER(30,10), 
	"FK_WH_WAREN_BESTELLNR" VARCHAR2(255 BYTE), 
	"FK_STD_WH_BESTELLTYP" NUMBER(30,10), 
	"FK_STD_ABR_ABRECHNUNGSZEITRAUM" NUMBER(30,10), 
	"FK_BAS_MON_FREMDWAEHRUNG" NUMBER(30,10), 
	"FRMDW_BETRAG_NETTO" NUMBER(30,10), 
	"FRMDW_STSATZ" NUMBER(30,10), 
	"FRMDW_MWST" NUMBER(30,10), 
	"FRMDW_BETRAG_BRUTTO" NUMBER(30,10), 
	"BUCHUNGSTAG" TIMESTAMP (6), 
	"FK_KTO_BANKKONTO" NUMBER(30,10), 
	"KUMULIERTER_BETRAG_NEG" NUMBER(30,10), 
	"KUMULIERTER_BETRAG" NUMBER(30,10), 
	"ENDBETRAG" NUMBER(30,10), 
	"STARTBETRAG" NUMBER(30,10), 
	"BETRAG_NEG" NUMBER(30,10), 
	"FK_BAS_MON_BELEGWAEHRUNG" NUMBER(30,10), 
	"FK_STD_MON_UMSATZART" NUMBER(30,10), 
	"EINZELBETRAG_NEG" NUMBER(30,10), 
	"FK_MAIN_BELEG" NUMBER(30,10), 
	"FK_STD_BEL_FEHLEND" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BEL_BELEGPOSITION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BEL_BELEGPOSITION" 
   (	"PK_BEL_BELEGPOSITION" NUMBER(30,10), 
	"FK_BEL_BELEG" NUMBER(30,10), 
	"POSITION" VARCHAR2(255 BYTE), 
	"ANZAHL" NUMBER(30,10), 
	"PREIS_BRUTTO" NUMBER(30,10), 
	"LITER" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_BAS_STEU_MWST_SATZ" NUMBER(30,10), 
	"MWST" NUMBER(30,10), 
	"PREIS_NETTO" NUMBER(30,10), 
	"FK_BAS_WH_ART_ARTIKELBESTANDTEILTYP" NUMBER(30,10), 
	"FK_BAS_WH_ART_ARTIKELTYP" NUMBER(30,10), 
	"FRMDW_BETRAG_NETTO" NUMBER(30,10), 
	"FRMDW_STSTZ" NUMBER(30,10), 
	"FRMDW_MWST" NUMBER(30,10), 
	"FRMDW_BETRAG_BRUTTO" NUMBER(30,10), 
	"FK_BAS_MON_FREMDWAEHRUNG" NUMBER(30,10), 
	"PREIS_EINZEL" NUMBER(30,10), 
	"RELEVANT_MWST" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BEL_BELEGSEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BEL_BELEGSEL" 
   (	"PK_BEL_BELEGSEL" NUMBER, 
	"STRING" VARCHAR2(4000 BYTE), 
	"FK_BAS_BEL_BELEGART" NUMBER, 
	"VALID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BILD_BILDER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BILD_BILDER" 
   (	"PK_BILD_BILDER" NUMBER, 
	"FILECONTENT" BLOB, 
	"FILENAME" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"CREATION_DATE" DATE, 
	"THUMBNAIL" BLOB, 
	"H_PX" NUMBER, 
	"W_PX" NUMBER, 
	"DUMMY_BILD" NUMBER, 
	"FK_STD_KLASSIFIKATION1" NUMBER, 
	"FK_STD_KLASSIFIKATION2" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("FILECONTENT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("THUMBNAIL") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_BOOK_BOOKING
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BOOK_BOOKING" 
   (	"PK_RES_RESERVATION" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FROM_DATE" DATE, 
	"TO_DATE" DATE, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"FK_STATE" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_APL_PLANE" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BOOK_RESERVATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BOOK_RESERVATION" 
   (	"PK_RES_RESERVATION" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FROM_DATE" DATE, 
	"TO_DATE" DATE, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"FK_STATE" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_APL_PLANE" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_BUCH_BUCH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_BUCH_BUCH" 
   (	"PK_BUCH_BUCH" NUMBER(30,10), 
	"ERSCHEINUNGSJAHR" NUMBER(30,10), 
	"TITEL" VARCHAR2(255 BYTE), 
	"ISBN" VARCHAR2(255 BYTE), 
	"AUFLAGE" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_LEHR_LEHRGANG" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CALC_MATCH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CALC_MATCH" 
   (	"PK_MATCH" NUMBER, 
	"KRIT" VARCHAR2(4000 BYTE), 
	"FK_KEY" NUMBER, 
	"BESCHREIBUNG" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CAR_AUTO_ERSATZTEILE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CAR_AUTO_ERSATZTEILE" 
   (	"GESCHAEFT" VARCHAR2(128 BYTE), 
	"LAND" VARCHAR2(26 BYTE), 
	"STATION_NR" NUMBER(11,0), 
	"STEUER_NR" VARCHAR2(26 BYTE), 
	"DATUM_UHRZEIT" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(7,2), 
	"ARTIKEL" VARCHAR2(128 BYTE), 
	"STEUERSATZ" VARCHAR2(26 BYTE), 
	"GROESSE" VARCHAR2(4000 BYTE), 
	"STEUERRELEVANZ" VARCHAR2(4000 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(4000 BYTE), 
	"KENNZEICHEN" VARCHAR2(4000 BYTE), 
	"KUNDENNUMMER" VARCHAR2(4000 BYTE), 
	"SONSTIGES1" VARCHAR2(4000 BYTE), 
	"SONSTIGES2" VARCHAR2(4000 BYTE), 
	"SONSTIGES3" VARCHAR2(4000 BYTE), 
	"SONSTIGES4" VARCHAR2(4000 BYTE), 
	"RNR" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"ORT" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" VARCHAR2(20 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"PK_CAR_AUTO_ERSATZTEILE" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CAR_AUTO_VERMIETUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CAR_AUTO_VERMIETUNG" 
   (	"LAND" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(7,2), 
	"WOCHEN" VARCHAR2(26 BYTE), 
	"BETRAG_PRO_TAG" NUMBER(7,2), 
	"TAGE" VARCHAR2(26 BYTE), 
	"NAVI" NUMBER(7,2), 
	"STEUER" NUMBER(4,0), 
	"GPS" VARCHAR2(26 BYTE), 
	"BETRAG_GESAMT" NUMBER(8,2), 
	"GESAMT" VARCHAR2(26 BYTE), 
	"ANZAHL_TAGE" NUMBER(4,0), 
	"BEMERKUNG" VARCHAR2(4000 BYTE), 
	"CONCESSION_FEE_RECOVERY" NUMBER(7,2), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"MWST_SATZ" NUMBER, 
	"DATUM" DATE, 
	"SONSTIGES" VARCHAR2(4000 BYTE), 
	"ZAHLUNGSART" VARCHAR2(20 BYTE), 
	"PK_CAR_AUTO_VERMIETUNG" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CAR_AUTO_VERSICHERUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG" 
   (	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"NUMMERNBEZ" VARCHAR2(26 BYTE), 
	"NUMMER" VARCHAR2(26 BYTE), 
	"VERTRAG" VARCHAR2(128 BYTE), 
	"DATUM" VARCHAR2(26 BYTE), 
	"TELEFONNUMMER" VARCHAR2(26 BYTE), 
	"TYP" VARCHAR2(1024 BYTE), 
	"S1" VARCHAR2(26 BYTE), 
	"KM_GRENZE" VARCHAR2(26 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"BETRAG_MWST" VARCHAR2(26 BYTE), 
	"AUSLANDSVERSICHERUNG" NUMBER(4,1), 
	"BETRAG_GESAMT" VARCHAR2(26 BYTE), 
	"FAHRZEUG" VARCHAR2(26 BYTE), 
	"SCHADENFREIHEITSKLASSE" VARCHAR2(128 BYTE), 
	"SCHADENFREIHEITSKLASSE1" VARCHAR2(128 BYTE), 
	"ZEITRAUM" VARCHAR2(26 BYTE), 
	"DATUM2" VARCHAR2(26 BYTE), 
	"ZULASSUNG" VARCHAR2(128 BYTE), 
	"DATUM3" VARCHAR2(26 BYTE), 
	"SCHLUESSEL" NUMBER(5,0), 
	"TYP_SCHLUESSELNR" VARCHAR2(26 BYTE), 
	"LEISTUNG_KW" NUMBER(5,0), 
	"HUBRAUM_CCM" NUMBER(6,0), 
	"ERSTZULASSUNG" VARCHAR2(26 BYTE), 
	"FINANZIERT" VARCHAR2(26 BYTE), 
	"GEWERBLICH" VARCHAR2(26 BYTE), 
	"ERSTZULASSUNG2" VARCHAR2(26 BYTE), 
	"ZULASSUNG2" VARCHAR2(128 BYTE), 
	"RECHTSCHUTZ" VARCHAR2(128 BYTE), 
	"KM_STAND" VARCHAR2(128 BYTE), 
	"PERSONEN_MINDESTALTER" VARCHAR2(128 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"BEMERKUNGEN" VARCHAR2(4000 BYTE), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FAHRGESTELLNR" VARCHAR2(4000 BYTE), 
	"KENNZEICHEN" VARCHAR2(20 BYTE), 
	"WIEDERHOLUNG" VARCHAR2(20 BYTE), 
	"ZAHLWEISE" VARCHAR2(100 BYTE), 
	"PK_CAR_AUTO_VERSICHERUNG" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CAR_AUTO_VERSICHERUNG_POS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG_POS" 
   (	"PK_CAR_AUTO_VERSICHERUNG_POS" NUMBER, 
	"FK_CAR_AUTO_VERSICHERUNG" NUMBER, 
	"TYP" VARCHAR2(4000 BYTE), 
	"TEXT" CLOB, 
	"BETRAG" NUMBER, 
	"HAUPTMERKMAL" VARCHAR2(4000 BYTE), 
	"SCHADENFREIHEITSKLASSE" NUMBER, 
	"BEITRAGSBEMESSUNGSSATZ_PROZ" NUMBER, 
	"BUCHUNGSTEXT_HAUPT" VARCHAR2(4000 BYTE), 
	"BUCHUNGSTEXT_NEBEN" VARCHAR2(4000 BYTE), 
	"TEILBETRAG" NUMBER, 
	"BUCHUNGSTAG" DATE, 
	"ZEITRAUM_VON" DATE, 
	"ZEITRAUM_BIS" DATE, 
	"BELASTUNG" NUMBER, 
	"GUTSCHRIFT" NUMBER, 
	"POSITION" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TEXT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_CLOB
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CLOB" 
   (	"FLD_CLOB" CLOB, 
	"DATUM" DATE, 
	"VIEW_NAME1" VARCHAR2(4000 CHAR), 
	"FK_TXT_REPLACE_CONTEXT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FLD_CLOB") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_COMP_COMPANY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_COMP_COMPANY" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CONTR_DUPLIKAT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CONTR_DUPLIKAT" 
   (	"PK_DUPLIKAT" NUMBER, 
	"FK_DUPLIKAT_CHECK" NUMBER, 
	"FK_DUPL_TYPE" NUMBER, 
	"FK_DUPL_STATE" NUMBER, 
	"FK_INP_BELEG_ALL1" NUMBER, 
	"FK_INP_BELEG_ALL2" NUMBER, 
	"FK_RELATION1_LEX" VARCHAR2(4000 BYTE), 
	"FK_RELATION2_LEX" VARCHAR2(4000 BYTE), 
	"FK_MAIN_KEY1" NUMBER, 
	"FK_MAIN_KEY2" NUMBER, 
	"FK_RELATION1_KTBL" NUMBER, 
	"FK_RELATION2_KTBL" NUMBER, 
	"DATUM_OK" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CONTR_DUPLIKAT_CHECK
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK" 
   (	"PK_DUPLIKAT_CHECK" NUMBER, 
	"JAHR" NUMBER, 
	"FK_DUPLIKAT_TYPE" NUMBER, 
	"FK_DUPLIKAT_CHECK_STATUS" NUMBER, 
	"DATUM_OK" DATE, 
	"CREATION_DATE" DATE, 
	"FK_OBJEKT_1" NUMBER, 
	"FK_OBJEKT_2" NUMBER, 
	"FK_OBJEKT_3" NUMBER, 
	"FK_OBJEKT_4" NUMBER, 
	"FK_OBJEKT_5" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CONTR_DUPLIKAT_CHECK_KONTR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK_KONTR" 
   (	"PK_DUPLIKAT_CHECK_KONTROLLE" NUMBER, 
	"JAHR" NUMBER, 
	"FK_DUPLKAT_TYPE" NUMBER, 
	"FK_DUPLIKAT_CHECK_STATUS" NUMBER, 
	"DATUM_OK" DATE, 
	"CREATION_DATE" DATE, 
	"FK_STEUER_MONAT" NUMBER, 
	"FK_OBJEKT_1" NUMBER, 
	"FK_OBJEKT_2" NUMBER, 
	"FK_OBJEKT_3" NUMBER, 
	"FK_OBJEKT_4" NUMBER, 
	"FK_OBJEKT_5" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CONTR_KATEGORIE_ZAHLUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CONTR_KATEGORIE_ZAHLUNG" 
   (	"PK_CONTR_KATEGORIE_ZAHLUNG" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_STD_CONTR_STATUS" NUMBER, 
	"KONTROLLZWECK" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CONTR_KONTROLLE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_CONTR_KONTROLLE" 
   (	"PK_CONTR_KONTROLLE" NUMBER, 
	"JAHR" NUMBER, 
	"KONTO" NUMBER, 
	"FINALISIERUNGSDATUM" DATE, 
	"FINAL_CNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_COST_COST_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_COST_COST_GRP" 
   (	"PK_COST_COST_GRP" NUMBER, 
	"COST_GRP_NAME" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_COST_GAIN_AND_LOSS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_COST_GAIN_AND_LOSS" 
   (	"PK_GAL_GAIN_AND_LOSS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"VERSION" NUMBER, 
	"FIN_YEAR" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_APPLICATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_APPLICATION" 
   (	"PK_DB_APPLICATION" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_CONTAINER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_CONTAINER" 
   (	"PK_DB_CONTAINER" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"DESCR" VARCHAR2(255 CHAR), 
	"COMM" VARCHAR2(255 CHAR), 
	"NUMMER" NUMBER, 
	"RUN_CONFIG" VARCHAR2(4000 CHAR), 
	"FK_DB_SERVER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_DATENBANK
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_DATENBANK" 
   (	"PK_DB_DATENBANK" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"COMM" VARCHAR2(4000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"FK_DB_SERVER" NUMBER, 
	"CONNECTION_STRING" VARCHAR2(4000 CHAR), 
	"VERSION" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_OBJ_OBJECT_LIST
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_OBJ_OBJECT_LIST" 
   (	"PK_DB_OBJ_OBJECT_LIST" NUMBER, 
	"OBJECT_TYPE" VARCHAR2(4000 BYTE), 
	"FK_STD_DB_PART" NUMBER, 
	"OBJECT_NAME" VARCHAR2(4000 BYTE), 
	"OBJECT_NAME_RPEV" VARCHAR2(4000 BYTE), 
	"FK_STD_DB_OBJ_STATUS" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR), 
	"CREATE_AT" DATE DEFAULT sysdate, 
	"FLG_NEU" NUMBER, 
	"PAGE_ID" NUMBER, 
	"APPLICATION_ID" NUMBER, 
	"WORKSPACE_ID" NUMBER, 
	"FK_STD_APEX_OBJ_STATUS" NUMBER, 
	"PAGE_NAME" VARCHAR2(4000 CHAR), 
	"PAGE_GROUP" VARCHAR2(4000 CHAR), 
	"PAGE_MODE" VARCHAR2(4000 CHAR), 
	"COLUMN_NAME" VARCHAR2(4000 CHAR), 
	"DATA_TYPE" VARCHAR2(4000 CHAR), 
	"DATA_LENGTH" NUMBER, 
	"DATA_PRECISION" NUMBER, 
	"NULLABLE" VARCHAR2(20 BYTE), 
	"COLUMN_ID" NUMBER, 
	"DATA_DEFAULT" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(4000 CHAR), 
	"LAST_UPDATED_ON" DATE, 
	"PAGE_COMMENT" VARCHAR2(4000 CHAR), 
	"FK_KON_REWORKED_BY" NUMBER, 
	"REWORKED_ON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_RENAME
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_RENAME" 
   (	"PK_DB_RENAME" NUMBER, 
	"TABLE_NAME" VARCHAR2(4000 BYTE), 
	"COLUMN_NAME" VARCHAR2(4000 BYTE), 
	"TABLE_NAME_NEW" VARCHAR2(4000 BYTE), 
	"COLUMN_NAME_NEW" VARCHAR2(4000 BYTE), 
	"COMM" CLOB, 
	"CHANGE_DATUM" DATE, 
	"CREATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("COMM") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_DB_SERVER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_SERVER" 
   (	"PK_DB_SERVER" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"SERVER_NAME" VARCHAR2(4000 CHAR), 
	"IP_ADDR_V4" VARCHAR2(4000 CHAR), 
	"IP_ADDR_V6" VARCHAR2(4000 CHAR), 
	"MAC" VARCHAR2(4000 CHAR), 
	"FLG_STD_SERV_OWN" NUMBER, 
	"FK_INT_INTERNET_APP" NUMBER, 
	"FK_LOC_LOCATION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_TAB_TABLE_CONTENT_COUNT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT" 
   (	"PK_DB_TAB_TABLE_CONTENT_COUNT" NUMBER, 
	"DATUM" DATE, 
	"TABLE_NAME" VARCHAR2(4000 BYTE), 
	"CNT" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"DATUM_CHECK_OK" NUMBER, 
	"FK_STD_DB_CHECK_STATUS" NUMBER, 
	"FK_STD_DB_NEED_BUILT" NUMBER, 
	"FK_STD_DB_NEED_REGULARLY_UPD" NUMBER, 
	"OBJECT_TYPE" VARCHAR2(4000 CHAR), 
	"OBJECT_STATUS_OLD" VARCHAR2(4000 CHAR), 
	"TABLE_NAME_NEW" VARCHAR2(4000 CHAR), 
	"TABLE_NAME_OLD" VARCHAR2(4000 CHAR), 
	"MODUL" VARCHAR2(4000 CHAR), 
	"FK_STD_DB_DATA_TRANSFERED" NUMBER, 
	"RE_IMP_NR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_TAB_TABLE_CONTENT_COUNT_CNT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT" 
   (	"PK_DB_TAB_TABLE_CONTENT_COUNT_CNT" NUMBER, 
	"FK_DB_TAB_TABLE_CONTENT_COUNT" NUMBER, 
	"FK_DB_TAB_TABLE_CONTENT_COUNT_LOAD" NUMBER, 
	"CNT" VARCHAR2(20 BYTE), 
	"LOAD_DT" DATE, 
	"CREATED_AT" DATE, 
	"COMM" VARCHAR2(4000 BYTE), 
	"CONNECTION_STR" VARCHAR2(4000 CHAR), 
	"DATUM_OK" DATE, 
	"FK_STD_DB_TAB_STATUS" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_TAB_TABLE_CONTENT_COUNT_LOAD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD" 
   (	"PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD" NUMBER, 
	"DESCR" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"LOAD_DT" DATE, 
	"CREATED_AT" DATE, 
	"CONNECTION_STR" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_TXT_REPLACE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_TXT_REPLACE" 
   (	"PK_DB_TXT_REPLACE" NUMBER, 
	"SUCHEN" VARCHAR2(4000 BYTE), 
	"ERSETZEN" VARCHAR2(4000 BYTE), 
	"CONTEXT" VARCHAR2(4000 BYTE), 
	"DATUM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DB_TXT_REPLACE_CONTEXT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_TXT_REPLACE_CONTEXT" 
   (	"PK_DB_TXT_REPLACE_CONTEXT" NUMBER, 
	"FK_DB_TXT_REPLACE" VARCHAR2(4000 BYTE), 
	"FROM_TXT" CLOB, 
	"TO_TXT" CLOB, 
	"DATUM" DATE, 
	"CONTEXT" VARCHAR2(4000 BYTE), 
	"CONTEXT_TYPE" VARCHAR2(4000 BYTE), 
	"FK_DB_TXT_REPLACE_CONTEXT_PREVIOUS" NUMBER, 
	"VIEW_HEADER_OLD" CLOB, 
	"VIEW_HEADER_NEW" CLOB, 
	"VIEW_SQL_OLD" CLOB, 
	"VIEW_SQL_NEW" CLOB, 
	"FK_STD_APX_APEX_APPLICATION" NUMBER, 
	"FK_APEX_PAGE" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"FK_STD_APX_APEX_WORKSPACE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FROM_TXT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("TO_TXT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("VIEW_HEADER_OLD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("VIEW_HEADER_NEW") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("VIEW_SQL_OLD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("VIEW_SQL_NEW") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_DB_TXT_REPLACE_LOG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DB_TXT_REPLACE_LOG" 
   (	"PK_DB_TXT_REPLACE_LOG" NUMBER, 
	"FK_DB_TXT_REPLACE" VARCHAR2(4000 BYTE), 
	"FROM_TXT" CLOB, 
	"TO_TXT" CLOB, 
	"DATUM" DATE, 
	"CONTEXT" VARCHAR2(4000 BYTE), 
	"CONTEXT_TYPE" VARCHAR2(255 BYTE), 
	"FK_DB_TXT_REPLACE_CONTEXT_PREVIOUS" NUMBER, 
	"VIEW_HEADER" CLOB, 
	"VIEW_SQL" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FROM_TXT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("TO_TXT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("VIEW_HEADER") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("VIEW_SQL") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_DOC_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DOC_DOCUMENT" 
   (	"PK_DOC_DOCUMENT" NUMBER, 
	"DOCUMENT_TYPE" VARCHAR2(4000 BYTE), 
	"DOCUMENT_NR" VARCHAR2(4000 BYTE), 
	"AUSSTELLUNGSDATUM" DATE, 
	"ABLAUFDATUM" DATE, 
	"AUSSTELLUNGSBEHOERDE" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE DEFAULT SYSDATE, 
	"COMM" VARCHAR2(4000 BYTE), 
	"FUEHRERSCHEINKLASSEN" VARCHAR2(4000 BYTE), 
	"FUEHRERSCHEINKLASSEN1" VARCHAR2(4000 BYTE), 
	"FK_DOC_DOCUMENT_TYPE" VARCHAR2(20 BYTE), 
	"FK_STD_VERW_VERWENDUNGSZWECK" VARCHAR2(20 BYTE), 
	"VALID" NUMBER, 
	"FK_KAL_VALID_FROM" NUMBER, 
	"FK_KAL_VALID_TO" NUMBER, 
	"FK_CERT_TYPE" NUMBER, 
	"FK_LAN_PROF_LEVEL" NUMBER, 
	"LAN_PROF_LEVEL_VAL" NUMBER, 
	"DOC_EXISTS" NUMBER, 
	"FK_FI_CRI_E" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DOC_USAGE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_DOC_USAGE_TYPE" 
   (	"PK_DOC_USAGE_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"USAGE_TYPE_EN" VARCHAR2(4000 BYTE), 
	"USAGE_TYPE_DE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TEMP_ERG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."TEMP_ERG" 
   (	"TABLE_NAME" VARCHAR2(255 BYTE), 
	"TABLESPACE_NAME" VARCHAR2(255 BYTE), 
	"CLUSTER_NAME" VARCHAR2(255 BYTE), 
	"IOT_NAME" VARCHAR2(255 BYTE), 
	"STATUS" VARCHAR2(255 BYTE), 
	"PCT_FREE" NUMBER(30,10), 
	"PCT_USED" NUMBER(30,10), 
	"INI_TRANS" NUMBER(30,10), 
	"MAX_TRANS" NUMBER(30,10), 
	"INITIAL_EXTENT" NUMBER(30,10), 
	"NEXT_EXTENT" NUMBER(30,10), 
	"MIN_EXTENTS" NUMBER(30,10), 
	"MAX_EXTENTS" NUMBER(30,10), 
	"PCT_INCREASE" NUMBER(30,10), 
	"FREELISTS" NUMBER(30,10), 
	"FREELIST_GROUPS" NUMBER(30,10), 
	"LOGGING" VARCHAR2(255 BYTE), 
	"BACKED_UP" VARCHAR2(255 BYTE), 
	"NUM_ROWS" NUMBER(30,10), 
	"BLOCKS" NUMBER(30,10), 
	"EMPTY_BLOCKS" NUMBER(30,10), 
	"AVG_SPACE" NUMBER(30,10), 
	"CHAIN_CNT" NUMBER(30,10), 
	"AVG_ROW_LEN" NUMBER(30,10), 
	"AVG_SPACE_FREELIST_BLOCKS" NUMBER(30,10), 
	"NUM_FREELIST_BLOCKS" NUMBER(30,10), 
	"DEGREE" VARCHAR2(255 BYTE), 
	"INSTANCES" VARCHAR2(255 BYTE), 
	"CACHE" VARCHAR2(255 BYTE), 
	"TABLE_LOCK" VARCHAR2(255 BYTE), 
	"SAMPLE_SIZE" NUMBER(30,10), 
	"LAST_ANALYZED" TIMESTAMP (6), 
	"PARTITIONED" VARCHAR2(255 BYTE), 
	"IOT_TYPE" VARCHAR2(255 BYTE), 
	"TEMPORARY" VARCHAR2(255 BYTE), 
	"SECONDARY" VARCHAR2(255 BYTE), 
	"NESTED" VARCHAR2(255 BYTE), 
	"BUFFER_POOL" VARCHAR2(255 BYTE), 
	"FLASH_CACHE" VARCHAR2(255 BYTE), 
	"CELL_FLASH_CACHE" VARCHAR2(255 BYTE), 
	"ROW_MOVEMENT" VARCHAR2(255 BYTE), 
	"GLOBAL_STATS" VARCHAR2(255 BYTE), 
	"USER_STATS" VARCHAR2(255 BYTE), 
	"DURATION" VARCHAR2(255 BYTE), 
	"SKIP_CORRUPT" VARCHAR2(255 BYTE), 
	"MONITORING" VARCHAR2(255 BYTE), 
	"CLUSTER_OWNER" VARCHAR2(255 BYTE), 
	"DEPENDENCIES" VARCHAR2(255 BYTE), 
	"COMPRESSION" VARCHAR2(255 BYTE), 
	"COMPRESS_FOR" VARCHAR2(255 BYTE), 
	"DROPPED" VARCHAR2(255 BYTE), 
	"READ_ONLY" VARCHAR2(255 BYTE), 
	"SEGMENT_CREATED" VARCHAR2(255 BYTE), 
	"RESULT_CACHE" VARCHAR2(255 BYTE), 
	"CLUSTERING" VARCHAR2(255 BYTE), 
	"ACTIVITY_TRACKING" VARCHAR2(255 BYTE), 
	"DML_TIMESTAMP" VARCHAR2(255 BYTE), 
	"HAS_IDENTITY" VARCHAR2(255 BYTE), 
	"CONTAINER_DATA" VARCHAR2(255 BYTE), 
	"INMEMORY" VARCHAR2(255 BYTE), 
	"INMEMORY_PRIORITY" VARCHAR2(255 BYTE), 
	"INMEMORY_DISTRIBUTE" VARCHAR2(255 BYTE), 
	"INMEMORY_COMPRESSION" VARCHAR2(255 BYTE), 
	"INMEMORY_DUPLICATE" VARCHAR2(255 BYTE), 
	"DEFAULT_COLLATION" VARCHAR2(255 BYTE), 
	"DUPLICATED" VARCHAR2(255 BYTE), 
	"SHARDED" VARCHAR2(255 BYTE), 
	"EXTERNAL" VARCHAR2(255 BYTE), 
	"CELLMEMORY" VARCHAR2(255 BYTE), 
	"CONTAINERS_DEFAULT" VARCHAR2(255 BYTE), 
	"CONTAINER_MAP" VARCHAR2(255 BYTE), 
	"EXTENDED_DATA_LINK" VARCHAR2(255 BYTE), 
	"EXTENDED_DATA_LINK_MAP" VARCHAR2(255 BYTE), 
	"INMEMORY_SERVICE" VARCHAR2(255 BYTE), 
	"INMEMORY_SERVICE_NAME" VARCHAR2(255 BYTE), 
	"CONTAINER_MAP_OBJECT" VARCHAR2(255 BYTE), 
	"MEMOPTIMIZE_READ" VARCHAR2(255 BYTE), 
	"MEMOPTIMIZE_WRITE" VARCHAR2(255 BYTE), 
	"HAS_SENSITIVE_COLUMN" VARCHAR2(255 BYTE), 
	"TABLE_NAME (#1)" VARCHAR2(255 BYTE), 
	"TABLESPACE_NAME (#1)" VARCHAR2(255 BYTE), 
	"CLUSTER_NAME (#1)" VARCHAR2(255 BYTE), 
	"IOT_NAME (#1)" VARCHAR2(255 BYTE), 
	"STATUS (#1)" VARCHAR2(255 BYTE), 
	"PCT_FREE (#1)" NUMBER(30,10), 
	"PCT_USED (#1)" NUMBER(30,10), 
	"INI_TRANS (#1)" NUMBER(30,10), 
	"MAX_TRANS (#1)" NUMBER(30,10), 
	"INITIAL_EXTENT (#1)" NUMBER(30,10), 
	"NEXT_EXTENT (#1)" NUMBER(30,10), 
	"MIN_EXTENTS (#1)" NUMBER(30,10), 
	"MAX_EXTENTS (#1)" NUMBER(30,10), 
	"PCT_INCREASE (#1)" NUMBER(30,10), 
	"FREELISTS (#1)" NUMBER(30,10), 
	"FREELIST_GROUPS (#1)" NUMBER(30,10), 
	"LOGGING (#1)" VARCHAR2(255 BYTE), 
	"BACKED_UP (#1)" VARCHAR2(255 BYTE), 
	"NUM_ROWS (#1)" NUMBER(30,10), 
	"BLOCKS (#1)" NUMBER(30,10), 
	"EMPTY_BLOCKS (#1)" NUMBER(30,10), 
	"AVG_SPACE (#1)" NUMBER(30,10), 
	"CHAIN_CNT (#1)" NUMBER(30,10), 
	"AVG_ROW_LEN (#1)" NUMBER(30,10), 
	"AVG_SPACE_FREELIST_BLOCKS (#1)" NUMBER(30,10), 
	"NUM_FREELIST_BLOCKS (#1)" NUMBER(30,10), 
	"DEGREE (#1)" VARCHAR2(255 BYTE), 
	"INSTANCES (#1)" VARCHAR2(255 BYTE), 
	"CACHE (#1)" VARCHAR2(255 BYTE), 
	"TABLE_LOCK (#1)" VARCHAR2(255 BYTE), 
	"SAMPLE_SIZE (#1)" NUMBER(30,10), 
	"LAST_ANALYZED (#1)" TIMESTAMP (6), 
	"PARTITIONED (#1)" VARCHAR2(255 BYTE), 
	"IOT_TYPE (#1)" VARCHAR2(255 BYTE), 
	"TEMPORARY (#1)" VARCHAR2(255 BYTE), 
	"SECONDARY (#1)" VARCHAR2(255 BYTE), 
	"NESTED (#1)" VARCHAR2(255 BYTE), 
	"BUFFER_POOL (#1)" VARCHAR2(255 BYTE), 
	"FLASH_CACHE (#1)" VARCHAR2(255 BYTE), 
	"CELL_FLASH_CACHE (#1)" VARCHAR2(255 BYTE), 
	"ROW_MOVEMENT (#1)" VARCHAR2(255 BYTE), 
	"GLOBAL_STATS (#1)" VARCHAR2(255 BYTE), 
	"USER_STATS (#1)" VARCHAR2(255 BYTE), 
	"DURATION (#1)" VARCHAR2(255 BYTE), 
	"SKIP_CORRUPT (#1)" VARCHAR2(255 BYTE), 
	"MONITORING (#1)" VARCHAR2(255 BYTE), 
	"CLUSTER_OWNER (#1)" VARCHAR2(255 BYTE), 
	"DEPENDENCIES (#1)" VARCHAR2(255 BYTE), 
	"COMPRESSION (#1)" VARCHAR2(255 BYTE), 
	"COMPRESS_FOR (#1)" VARCHAR2(255 BYTE), 
	"DROPPED (#1)" VARCHAR2(255 BYTE), 
	"READ_ONLY (#1)" VARCHAR2(255 BYTE), 
	"SEGMENT_CREATED (#1)" VARCHAR2(255 BYTE), 
	"RESULT_CACHE (#1)" VARCHAR2(255 BYTE), 
	"CLUSTERING (#1)" VARCHAR2(255 BYTE), 
	"ACTIVITY_TRACKING (#1)" VARCHAR2(255 BYTE), 
	"DML_TIMESTAMP (#1)" VARCHAR2(255 BYTE), 
	"HAS_IDENTITY (#1)" VARCHAR2(255 BYTE), 
	"CONTAINER_DATA (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY_PRIORITY (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY_DISTRIBUTE (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY_COMPRESSION (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY_DUPLICATE (#1)" VARCHAR2(255 BYTE), 
	"DEFAULT_COLLATION (#1)" VARCHAR2(255 BYTE), 
	"DUPLICATED (#1)" VARCHAR2(255 BYTE), 
	"SHARDED (#1)" VARCHAR2(255 BYTE), 
	"EXTERNAL (#1)" VARCHAR2(255 BYTE), 
	"CELLMEMORY (#1)" VARCHAR2(255 BYTE), 
	"CONTAINERS_DEFAULT (#1)" VARCHAR2(255 BYTE), 
	"CONTAINER_MAP (#1)" VARCHAR2(255 BYTE), 
	"EXTENDED_DATA_LINK (#1)" VARCHAR2(255 BYTE), 
	"EXTENDED_DATA_LINK_MAP (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY_SERVICE (#1)" VARCHAR2(255 BYTE), 
	"INMEMORY_SERVICE_NAME (#1)" VARCHAR2(255 BYTE), 
	"CONTAINER_MAP_OBJECT (#1)" VARCHAR2(255 BYTE), 
	"MEMOPTIMIZE_READ (#1)" VARCHAR2(255 BYTE), 
	"MEMOPTIMIZE_WRITE (#1)" VARCHAR2(255 BYTE), 
	"HAS_SENSITIVE_COLUMN (#1)" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ERF_BEL_KOMP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ERF_BEL_KOMP" 
   (	"NR" NUMBER, 
	"MIETVERTRAGSNUMMER" VARCHAR2(20 BYTE), 
	"RECHNUNGSNUMMER" VARCHAR2(20 BYTE), 
	"EFFEKTIVE_MIETDAUER" VARCHAR2(20 BYTE), 
	"VON_DATUM" DATE, 
	"BIS_DATUM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ERF_BEL_KOMP_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ERF_BEL_KOMP_DET" 
   (	"NR" VARCHAR2(4000 BYTE), 
	"FK_ERF_BEL_KOMP" VARCHAR2(4000 BYTE), 
	"POS" VARCHAR2(4000 BYTE), 
	"EINHEITEN" VARCHAR2(4000 BYTE), 
	"NETTOBETRAG" VARCHAR2(4000 BYTE), 
	"MWST_SATZ" VARCHAR2(4000 BYTE), 
	"MWST" VARCHAR2(4000 BYTE), 
	"BRUTTOBETRAG" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ERF_BEL_KRANKENKASSE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ERF_BEL_KRANKENKASSE" 
   (	"NR" VARCHAR2(20 BYTE), 
	"DATUM" VARCHAR2(20 BYTE), 
	"TYP" VARCHAR2(20 BYTE), 
	"DATUM1" VARCHAR2(20 BYTE), 
	"IBAN" VARCHAR2(4000 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(4000 BYTE), 
	"OFFENER_BETRAG" VARCHAR2(20 BYTE), 
	"BEITRAG" VARCHAR2(20 BYTE), 
	"SÄUMNISZUSCHLAG" VARCHAR2(20 BYTE), 
	"MAHNKOSTEN" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TEST
--------------------------------------------------------

  CREATE TABLE "COMPANY"."TEST" 
   (	"INHALTE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_AIR_AIRPORTS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_AIR_AIRPORTS" 
   (	"IATA" VARCHAR2(128 BYTE), 
	"ICAO" VARCHAR2(4000 BYTE), 
	"FLUGHAFEN" VARCHAR2(4000 BYTE), 
	"ORT" VARCHAR2(4000 BYTE), 
	"REGION" VARCHAR2(4000 BYTE), 
	"LAND" VARCHAR2(128 BYTE), 
	"PK_FLI_AIR_AIRPORTS" NUMBER, 
	"FK_ADR_ORT" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"FK_STD_FLI_AIR_AIRPORT_TYPE" NUMBER, 
	"CREATED_ON" DATE, 
	"LETTERS" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_FLI_AIR_AIRPORTS"."FK_STD_FLI_AIR_AIRPORT_TYPE" IS '1 = Verkehrsflughafen, 2 = kein Verkehrsflughafen, 3 = künstlicher Flughafen';
--------------------------------------------------------
--  DDL for Table T_FLI_AIR_HANGAR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_AIR_HANGAR" 
   (	"PK_HAN_HANGAR" NUMBER, 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	"FK_ADR_ADRESS" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_APL_MAINT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_APL_MAINT" 
   (	"PK_APL_MAINT" NUMBER, 
	"INSP" VARCHAR2(4000 BYTE), 
	"DATE_CALC" DATE, 
	"DATE_PLANNED" DATE, 
	"DATE_DONE" DATE, 
	"FK_APL_PLANE" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"PRICE_NET_PLANNED" NUMBER, 
	"PRICE_NET_FINAL" NUMBER, 
	"PRICE_BR_PLANNED" NUMBER, 
	"PRICE_TAX_PLANNED" NUMBER, 
	"PRICE_TAX_FINAL" NUMBER, 
	"PRICE_CURR" NUMBER, 
	"PRICED_BR_FINAL" NUMBER, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_APL_MAINT_PROGR" NUMBER, 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_APL_MAINT_PROGR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_APL_MAINT_PROGR" 
   (	"PK_APL_MAINT_PROGR" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"MAINT_PROGR" VARCHAR2(400 BYTE), 
	"CREATED_ON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_APL_PLANE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_APL_PLANE" 
   (	"PK_FLI_APL_PLANE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"PLANE_NO" VARCHAR2(20 BYTE), 
	"IMAGE" BLOB, 
	"DESCRIPTION" VARCHAR2(4000 CHAR), 
	"FK_APL_ENGINE_TYPE" NUMBER, 
	"CABIN_OV_13000_FT" VARCHAR2(4000 CHAR), 
	"BORD_00" VARCHAR2(4000 CHAR), 
	"BOARDING_OPPORTUNITY" NUMBER, 
	"CRUISING_SPEED_HG_20000_FT" NUMBER, 
	"CRUISING_SPEED_UNIT" VARCHAR2(4000 CHAR), 
	"WEIGHT_KERB_KG" NUMBER, 
	"WEIGHT_TAKEOFF_MAX_KG" NUMBER, 
	"PERMITTED_LOAD_KG" NUMBER, 
	"CNT_PASSENGERS_MAX" NUMBER, 
	"FUEL_TANK_SIZE_L" NUMBER, 
	"CONSUMPTION_L" NUMBER, 
	"RANGE_AVERAGE_FT" NUMBER, 
	"DIST_TAKE_OFF_FT" NUMBER, 
	"DIST_LANDING_FT" NUMBER, 
	"FK_APL_MAINT_PROGR" NUMBER, 
	"FK_APL_PLANE_MODELL" NUMBER, 
	"IMG_SRC" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("IMAGE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_FLI_APL_PLANE_ENGINE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_APL_PLANE_ENGINE" 
   (	"PK_PLA_ENGINE_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"ENGINE_TYPE" VARCHAR2(400 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_APL_PLANE_ENGINE_MODELL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_APL_PLANE_ENGINE_MODELL" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_BOR_BORD_LOG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_BOR_BORD_LOG" 
   (	"PK_BOR_BORD_LOG" NUMBER, 
	"BORD_LOG" VARCHAR2(400 BYTE), 
	"BORD_LOG_DATE" DATE, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"CNT_LANDINGS_BEGIN" NUMBER, 
	"CNT_FLIGHT_HOURS_BEGIN" NUMBER, 
	"CNT_LANDINGS_END" NUMBER, 
	"CNT_FLIGHT_HOURS_END" NUMBER, 
	"BEGIN_DATE" DATE, 
	"END_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_BOR_BORD_LOG_ENTRY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY" 
   (	"PK_BOR_BORD_LOG_ENTRY" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"ENTRY_DATE" DATE, 
	"PIC" VARCHAR2(20 BYTE), 
	"T_O_TIME" DATE, 
	"LDG_TIME" DATE, 
	"CHARGES" VARCHAR2(20 BYTE), 
	"EDMA" VARCHAR2(20 BYTE), 
	"ARRIVAL" VARCHAR2(20 BYTE), 
	"FK_BOR_BORD_LOG_ENTRY_GRP" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"COST_ADD" NUMBER, 
	"CHARTER_NO" NUMBER, 
	"FK_BOR_BORD_LOG" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_BOR_BORD_LOG_ENTRY_ADD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY_ADD" 
   (	"PK_BOR_BORD_LOG_ENTRY_ADD" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"ADD_COST_NET" NUMBER, 
	"ADD_COST_TAX" NUMBER, 
	"ADD_COST_BR" NUMBER, 
	"ADD_COST_CURR" VARCHAR2(20 BYTE), 
	"FK_BOR_BORD_LOG_ENTRY" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_BOR_BORD_LOG_ENTRY_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY_GRP" 
   (	"PK_BOR_BORD_LOG_ENTRY_GRP" NUMBER, 
	"GROUP_NAME" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BOR_BORD_LOG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_BOR_BORD_LOG_ENTRY_HOB_RPM
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_BOR_BORD_LOG_ENTRY_HOB_RPM" 
   (	"PK_BORD_LOG_ENTRY_HOB_RPM" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BOR_BORD_LOG_ENTRY" NUMBER, 
	"HOBBS" VARCHAR2(20 BYTE), 
	"RPM" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_FLI_FLIGHT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_FLI_FLIGHT" 
   (	"PK_FLI_FLIGHT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DEPARTURE" DATE, 
	"ARRIVAL" DATE, 
	"DEPARTURE_TIME" NUMBER, 
	"ARRIVAL_TIME" NUMBER, 
	"DURATION" DATE, 
	"ADDITIONAL_TIMESLOTS" DATE, 
	"FK_ADDITIONAL_TIMESLOTTYPE" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_STD_FLI_HISTORY" NUMBER, 
	"CREATED_ON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_FLI_FLIGHT_COMMENTS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_FLI_FLIGHT_COMMENTS" 
   (	"PK_FLI_FLIGHT_COMMENTS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"COMM" CLOB, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFY_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_FLI_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("COMM") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_FLI_FLI_FLIGHT_DISCOUNT_REASONS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_FLI_FLIGHT_DISCOUNT_REASONS" 
   (	"PK_FLI_FLIGHT_DISCOUNT_REASONS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DISCOUNT_REASON" CLOB, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("DISCOUNT_REASON") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_FLI_FLI_FLIGHT_DISCOUNTS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_FLI_FLIGHT_DISCOUNTS" 
   (	"PK_FLI_FLIGHT_DISCOUNTS" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"DISCOUNT_VALUE" NUMBER, 
	"FK_DISCOUNT_REASON" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"HOURLY_RATE" NUMBER, 
	"HOURS" NUMBER, 
	"MINUTES" NUMBER, 
	"FK_FLIGHT_PHASE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_FLI_FLIGHT_STEPS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_FLI_FLIGHT_STEPS" 
   (	"PK_FLI_FLIGHT_STEPS" NUMBER, 
	"FK_AIR_AIRPORT_FROM" NUMBER, 
	"COLUMN1" NUMBER, 
	"PRICE_ESTIMATED" NUMBER, 
	"COLUMN2" VARCHAR2(20 BYTE), 
	"PRICE_INVOICED" NUMBER, 
	"PRICE_PAYMENT" NUMBER, 
	"PRICE_CALCULATED" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_FLI_FLIGHT_START_LANDING
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_FLI_FLIGHT_START_LANDING" 
   (	"PK_LAN_LANDING" NUMBER, 
	"MDT_MANDANT" NUMBER, 
	"FK_ARP_AIRPORT" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"PRICE_INVOICED" NUMBER, 
	"PRICE_PAYED" NUMBER, 
	"PRICE_CALCULATED" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMMO_OBJEKT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMMO_OBJEKT" 
   (	"T_IMMO_OBJEKT" NUMBER, 
	"FK_STD_IMMO_OBJEKT_TYP" NUMBER, 
	"QM" VARCHAR2(20 BYTE), 
	"QM_NUTZFLÄCHE" VARCHAR2(20 BYTE), 
	"QM_AUSSENBEREICH" VARCHAR2(20 BYTE), 
	"KAUFPREIS_PRO_QM" NUMBER, 
	"DESCR_KAUFPREIS_PRO_QM" VARCHAR2(20 BYTE), 
	"KAUFPREIS" NUMBER, 
	"DESCR_KAUFPREIS" VARCHAR2(20 BYTE), 
	"KAUFNEBENKOSTEN" NUMBER, 
	"MIETKOSTEN_PRO_QM" VARCHAR2(20 BYTE), 
	"GESAMTMIETKOSTEN" VARCHAR2(20 BYTE), 
	"COLUMN2" NUMBER, 
	"COLUMN3" NUMBER, 
	"FK_KON_VERKAEUFER" NUMBER, 
	"COLUMN1" VARCHAR2(20 BYTE), 
	"FK_ADR_LOCATION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_ADR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_ADR" 
   (	"ID" NUMBER, 
	"ADR" VARCHAR2(4000 BYTE), 
	"ERG" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_BEL" 
   (	"ID" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"FK_BELEGART" NUMBER(30,10), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER(30,10), 
	"FK_ARBEITSTAG" NUMBER(30,10), 
	"FK_PROJEKT" NUMBER(30,10), 
	"FK_LEHRGANG" NUMBER(30,10), 
	"FK_EINKAUF" NUMBER(30,10), 
	"BELEG" VARCHAR2(255 BYTE), 
	"BETRAG_BRUTTO" VARCHAR2(255 BYTE), 
	"DATUM" VARCHAR2(255 BYTE), 
	"VON" VARCHAR2(255 BYTE), 
	"BIS" VARCHAR2(255 BYTE), 
	"AZ_O_PAUSE" VARCHAR2(255 BYTE), 
	"AZ_M_PAUSE" VARCHAR2(255 BYTE), 
	"ANWESENHEITSZEIT" VARCHAR2(255 BYTE), 
	"PARKZEIT" VARCHAR2(255 BYTE), 
	"AZ_MANUELL_GEPFLEGT" VARCHAR2(255 BYTE), 
	"KOMMENTAR" VARCHAR2(255 BYTE), 
	"BETRAG_NETTO" NUMBER(30,10), 
	"MWST" NUMBER(30,10), 
	"FK_IMP_BEL_NR" NUMBER(30,10), 
	"FK_IMP_NO" NUMBER(30,10), 
	"EXT_RENR" VARCHAR2(255 BYTE), 
	"EXT_AUFTRAGSNR" VARCHAR2(255 BYTE), 
	"EXT_LIEFERSCHEINNR" VARCHAR2(255 BYTE), 
	"EXT_LEISTUNGSDATUM" VARCHAR2(255 BYTE), 
	"EXT_RECHNUNGSDATUM" VARCHAR2(255 BYTE), 
	"EXT_AUFTRAGSDATUM" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_HOTEL_BOOKING
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_HOTEL_BOOKING" 
   (	"ZEITRAUM" VARCHAR2(128 BYTE), 
	"HOTEL" VARCHAR2(128 BYTE), 
	"ORT" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(38,2), 
	"SEITE" VARCHAR2(26 BYTE), 
	"JAHR" NUMBER, 
	"FK_VON" NUMBER, 
	"FK_BIS" NUMBER, 
	"ID" NUMBER, 
	"FK_LOCATION" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"OK_DATUM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_INP_BELEGE_ALL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_INP_BELEGE_ALL" 
   (	"PK_IMP_INP_BELEGE_ALL" NUMBER, 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_STD_KTO_ZAHLUNGSART" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"BELEGNUMMER" VARCHAR2(128 BYTE), 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"FK_ADR_LAND" NUMBER, 
	"FK_ADR_CITY" NUMBER, 
	"BEL_DATUM" DATE, 
	"VON" DATE, 
	"BIS" DATE, 
	"NETTO_BETRAG" NUMBER, 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER, 
	"MWST_BETRAG" NUMBER, 
	"BRUTTO_BETRAG" NUMBER, 
	"FK_BAS_MON_WAEHRUNG" NUMBER, 
	"STEUERNUMMER" VARCHAR2(4000 BYTE), 
	"FK_BAS_MON_UMRECHNUNGSKURS" NUMBER, 
	"COMM_REST_BELEG" CLOB, 
	"COMM_TEL_BELEG" CLOB, 
	"COMM_PRODUKTE" CLOB, 
	"COMM_BEGRUENDUNG" CLOB, 
	"COMM_SONSTIGES" CLOB, 
	"BELEG" BLOB, 
	"ZAHLUNGSBELEG" BLOB, 
	"LITER" NUMBER, 
	"ZAPFSAEULE" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"PERSOENLICH_VOR_ORT" NUMBER, 
	"BELEG_UHRZEIT" DATE, 
	"VON_UHRZEIT" DATE, 
	"BIS_UHRZEIT" DATE, 
	"FK_BAS_KAL_VON_ARBEITSTAG" NUMBER, 
	"FK_BAS_KAL_BIS_ARBEITSTAG" NUMBER, 
	"COMM_ADRESSE" VARCHAR2(4000 BYTE), 
	"TANKSTELLEN_NR" VARCHAR2(4000 BYTE), 
	"BRUTTO_BETRAG_INCL_TRINKG" NUMBER, 
	"COMM_PARKTICKET" CLOB, 
	"FRMDW_NETTO_BETRAG" NUMBER, 
	"FK_BAS_MON_FRMDW" NUMBER, 
	"FK_BAS_MON_FRMDW_MWST_SATZ" NUMBER, 
	"FRMDW_MWST_BETRAG" NUMBER, 
	"FRMDW_BRUTTO_BETRAG" NUMBER, 
	"FRMDW_BRUTTO_INCL_TRINKG" NUMBER, 
	"MWST_BETRAG_EUR" NUMBER, 
	"BRUTTO_BETRAG_EUR" NUMBER, 
	"BRUTTO_INCL_TRINKG_EUR" NUMBER, 
	"NETTO_BETRAG_EUR" NUMBER, 
	"PREIS_PRO_MENGE" NUMBER, 
	"MENGENEINHEIT" NUMBER, 
	"LA_DATUM" DATE, 
	"FK_LA_KONTO" NUMBER, 
	"FK_LA_WDH" NUMBER, 
	"FK_STD_INP_ZAHLUNGSSTATUS" NUMBER, 
	"COMM_VERGEHEN" CLOB, 
	"VERG_BEHOERDE" VARCHAR2(4000 BYTE), 
	"CNT_PUNKTE" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE), 
	"FK_ABL_ORDNER_PAGE" NUMBER, 
	"CNT_PUNKTE_GESCHAETZT" NUMBER, 
	"PUNKTE_VON" DATE, 
	"PUNKTE_BIS" DATE, 
	"FK_LOC_LOCATION_VERG" NUMBER, 
	"FK_IMP_BA_BEL_OLD" NUMBER, 
	"GESCHW_IST" NUMBER, 
	"GESCHW_SOLL" NUMBER, 
	"GESCHW_UEBER_GRZ" NUMBER, 
	"GESCHW_UEBER_GRZ_ABZGL_MESSTOL" NUMBER, 
	"CODE_BUSSGELD" VARCHAR2(4000 BYTE), 
	"DESCR_BUSSGELD" VARCHAR2(4000 BYTE), 
	"GEZAHLT_AM" DATE, 
	"WEBSEITE" VARCHAR2(4000 BYTE), 
	"KUNDENNUMMER" VARCHAR2(4000 BYTE), 
	"FK_REAL_BELEG_EXIST" NUMBER, 
	"FK_CALC_STATE" NUMBER, 
	"FK_CALC_STATE_EUR" NUMBER, 
	"FK_CALC_STATE_FRMDW" NUMBER, 
	"FK_STD_INP_STATUS" NUMBER, 
	"DATUM_VERGEHEN" DATE, 
	"CREATE_AT" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"MODIFY_AT" DATE, 
	"MODIFY_BY" DATE, 
	"DATUM_ORT_OK" DATE, 
	"DATUM_ADDRESSE_OK" DATE, 
	"DATUM_BUSSGELD_OK" DATE, 
	"DATUM_BELEG_POS_OK" DATE, 
	"DATUM_BUCHUNG_OK" DATE, 
	"DATUM_VERPFL_BEL_OK" DATE, 
	"FK_INT_INTERNET_APP" NUMBER, 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FK_KON_GESCHAEFTSPARTNER" NUMBER, 
	"DUMMY" NUMBER, 
	"STORNIERT" NUMBER, 
	"FK_ADR_ADRESSE_SCHNELL" NUMBER, 
	"FK_LEX_RELATION_SRC" VARCHAR2(4000 BYTE), 
	"FK_MAIN_KEY_SRC" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("COMM_REST_BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("COMM_TEL_BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("COMM_PRODUKTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("COMM_BEGRUENDUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("COMM_SONSTIGES") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ZAHLUNGSBELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("COMM_PARKTICKET") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("COMM_VERGEHEN") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_IMP_KON_KONTAKTDATEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KON_KONTAKTDATEN" 
   (	"NAME" VARCHAR2(128 BYTE), 
	"ADRESSE" VARCHAR2(128 BYTE), 
	"TELEFONNUMMER" VARCHAR2(26 BYTE), 
	"FAX" VARCHAR2(4000 BYTE), 
	"EMAIL" VARCHAR2(4000 BYTE), 
	"S1" VARCHAR2(4000 BYTE), 
	"ORT" VARCHAR2(4000 BYTE), 
	"TELEFON" VARCHAR2(4000 BYTE), 
	"GESCHÄFT" VARCHAR2(4000 BYTE), 
	"VORGANGSNR" VARCHAR2(4000 BYTE), 
	"COLUMN1" VARCHAR2(4000 BYTE), 
	"EMAIL2" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_BANK2
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_BANK2" 
   (	"BUCHUNGSTAG" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(10 BYTE), 
	"UNTERNEHMEN" VARCHAR2(40 BYTE), 
	"BETRAG" NUMBER(6,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"BETRAG_URSPRUNG" NUMBER(9,2), 
	"WAEHRUNGURSPRUNG" VARCHAR2(26 BYTE), 
	"BELASTETE_KREDITKARTE" NUMBER(18,0), 
	"RNR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_BANK3
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_BANK3" 
   (	"NR" VARCHAR2(26 BYTE), 
	"BUCHUNGSTAG" VARCHAR2(10 BYTE), 
	"WERTSTELLUNG" VARCHAR2(10 BYTE), 
	"UMSATZART" VARCHAR2(21 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"BETRAG" VARCHAR2(8 BYTE), 
	"WÄHRUNG" VARCHAR2(3 BYTE), 
	"AUFTRAGGEBERKONTO" VARCHAR2(10 BYTE), 
	"BANKLEITZAHL_AUFTRAGGEBERKONTO" VARCHAR2(11 BYTE), 
	"IBAN_AUFTRAGGEBERKONTO" VARCHAR2(22 BYTE), 
	"SPALTE11" VARCHAR2(1 BYTE), 
	"ENDBETRAG" VARCHAR2(4000 BYTE), 
	"EINZELBETRAG_NEGIERT" VARCHAR2(8 BYTE), 
	"KUMULIERTER_BETRAG_NEGATIV" VARCHAR2(4000 BYTE), 
	"STARTBETRAG" VARCHAR2(4000 BYTE), 
	"KUMULIERTER_BETRAG" VARCHAR2(4000 BYTE), 
	"RNR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_BANK4
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_BANK4" 
   (	"BUCHUNGSTAG" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(10 BYTE), 
	"UNTERNEHMEN" VARCHAR2(40 BYTE), 
	"BETRAG" NUMBER(6,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"BETRAG_URSPRUNG" NUMBER(9,2), 
	"WAEHRUNGURSPRUNG" VARCHAR2(26 BYTE), 
	"BELASTETE_KREDITKARTE" NUMBER(18,0), 
	"RNR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_BANK5
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_BANK5" 
   (	"NR" VARCHAR2(26 BYTE), 
	"BUCHUNGSTAG" VARCHAR2(10 BYTE), 
	"WERTSTELLUNG" VARCHAR2(10 BYTE), 
	"UMSATZART" VARCHAR2(21 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"BETRAG" VARCHAR2(8 BYTE), 
	"WÄHRUNG" VARCHAR2(3 BYTE), 
	"AUFTRAGGEBERKONTO" VARCHAR2(10 BYTE), 
	"BANKLEITZAHL_AUFTRAGGEBERKONTO" VARCHAR2(11 BYTE), 
	"IBAN_AUFTRAGGEBERKONTO" VARCHAR2(22 BYTE), 
	"SPALTE11" VARCHAR2(1 BYTE), 
	"ENDBETRAG" VARCHAR2(4000 BYTE), 
	"EINZELBETRAG_NEGIERT" VARCHAR2(8 BYTE), 
	"KUMULIERTER_BETRAG_NEGATIV" VARCHAR2(4000 BYTE), 
	"STARTBETRAG" VARCHAR2(4000 BYTE), 
	"KUMULIERTER_BETRAG" VARCHAR2(4000 BYTE), 
	"RNR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_BANK6
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_BANK6" 
   (	"BUCHUNGSTAG" VARCHAR2(26 BYTE), 
	"WERTSTELLUNG" VARCHAR2(26 BYTE), 
	"UMSATZART" VARCHAR2(26 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(1024 BYTE), 
	"BETRAG" NUMBER(9,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"AUFTRAGGEBERKONTO" NUMBER(11,0), 
	"BANKLEITZAHL" NUMBER(10,0), 
	"IBAN" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_BANK7
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_BANK7" 
   (	"BUCHUNGSTAG" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(26 BYTE), 
	"UNTERNEHMEN" VARCHAR2(128 BYTE), 
	"BETRAG" NUMBER(8,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"BETRAG_UR" NUMBER(8,2), 
	"WAEHRUNG_UR" VARCHAR2(26 BYTE), 
	"KREDITKARTE" NUMBER(18,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_GIR_KTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_GIR_KTO" 
   (	"BUCHUNGSTAG" VARCHAR2(26 BYTE), 
	"WERTSTELLUNG" VARCHAR2(26 BYTE), 
	"UMSATZART" VARCHAR2(26 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(1024 BYTE), 
	"BETRAG" NUMBER(38,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"AUFTRAGGEBERKONTO" NUMBER(38,0), 
	"BANKLEITZAHL" NUMBER(38,0), 
	"IBAN" VARCHAR2(26 BYTE), 
	"KATEGORIE" VARCHAR2(128 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_GIR_NORIS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_GIR_NORIS" 
   (	"BUCHUNGSTAG" VARCHAR2(26 BYTE), 
	"WERT" VARCHAR2(26 BYTE), 
	"UMSATZART" VARCHAR2(26 BYTE), 
	"BEGÜNSTIGTER" VARCHAR2(128 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(128 BYTE), 
	"IBAN" VARCHAR2(26 BYTE), 
	"BIC" VARCHAR2(26 BYTE), 
	"KUNDENREFERENZ" VARCHAR2(128 BYTE), 
	"MANDATSREFERENZ" VARCHAR2(128 BYTE), 
	"GLÄUBIGER" VARCHAR2(26 BYTE), 
	"FREMDEGEBÜHREN" VARCHAR2(26 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"ABWEICHENDEREMPFÄNGER" VARCHAR2(26 BYTE), 
	"ANZAHLAUFTRÄGE" VARCHAR2(26 BYTE), 
	"ANZAHLSCHECKS" VARCHAR2(26 BYTE), 
	"SOLL" NUMBER(38,2), 
	"HABEN" NUMBER(38,2), 
	"WÄHRUNG" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_GIR_POST
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_GIR_POST" 
   (	"BUCHUNGSDATUM" VARCHAR2(26 BYTE), 
	"WERTSTELLUNG" VARCHAR2(26 BYTE), 
	"UMSATZART" VARCHAR2(26 BYTE), 
	"BUCHUNGSDETAILS" VARCHAR2(1024 BYTE), 
	"AUFTRAGGEBER" VARCHAR2(26 BYTE), 
	"EMPFAENGER" VARCHAR2(128 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"SALDO" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_ING_DIBA
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_ING_DIBA" 
   (	"BUCHUNG" VARCHAR2(26 BYTE), 
	"VALUTA" VARCHAR2(26 BYTE), 
	"AUFTRAGGEBER" VARCHAR2(128 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(26 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(256 BYTE), 
	"SALDO" NUMBER(38,2), 
	"WÄHRUNG" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(38,2), 
	"WÄHRUNG2" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_KRED
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_KRED" 
   (	"NR" NUMBER(30,10), 
	"WERTSTELLUNGSDATUM" TIMESTAMP (6), 
	"BELEGDATUM" TIMESTAMP (6), 
	"BESCHREIBUNG" VARCHAR2(255 BYTE), 
	"BETRAG" NUMBER(30,10), 
	"DETAIL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_PAY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_PAY" 
   (	"DATUM" VARCHAR2(4000 BYTE), 
	"UHRZEIT" VARCHAR2(4000 BYTE), 
	"ZEITZONE" VARCHAR2(26 BYTE), 
	"NAME" VARCHAR2(128 BYTE), 
	"TYP" VARCHAR2(128 BYTE), 
	"STATUS" VARCHAR2(26 BYTE), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"BRUTTO" NUMBER(38,2), 
	"GEBUEHR" NUMBER(38,0), 
	"NETTO" NUMBER(38,2), 
	"ABSENDER" VARCHAR2(26 BYTE), 
	"EMPFAENGER" VARCHAR2(128 BYTE), 
	"TRANSAKTIONSCODE" VARCHAR2(26 BYTE), 
	"LIEFERADRESSE" VARCHAR2(128 BYTE), 
	"ADRESSSTATUS" VARCHAR2(26 BYTE), 
	"ARTIKELBEZEICHNUNG" VARCHAR2(128 BYTE), 
	"ARTIKELNUMMER" VARCHAR2(26 BYTE), 
	"VERSANDGEBUEHR" NUMBER(38,2), 
	"VERSICHERUNGSBETRAG" VARCHAR2(26 BYTE), 
	"UMSATZSTEUER" NUMBER(38,2), 
	"OPTION1NAME" VARCHAR2(26 BYTE), 
	"OPTION1WERT" VARCHAR2(26 BYTE), 
	"OPTION2NAME" VARCHAR2(26 BYTE), 
	"OPTION2WERT" VARCHAR2(26 BYTE), 
	"TRANS" VARCHAR2(26 BYTE), 
	"RECHNUNGSNUMMER" VARCHAR2(128 BYTE), 
	"ZOLLNUMMER" VARCHAR2(128 BYTE), 
	"ANZAHL" NUMBER(38,0), 
	"EMPFANGSNUMMER" VARCHAR2(26 BYTE), 
	"GUTHABEN" NUMBER(38,2), 
	"ADRESSZEILE1" VARCHAR2(26 BYTE), 
	"ADRESSZUSATZ" NUMBER(38,0), 
	"ORT" VARCHAR2(26 BYTE), 
	"BUNDESLAND" VARCHAR2(26 BYTE), 
	"PLZ" NUMBER(38,0), 
	"LAND" VARCHAR2(26 BYTE), 
	"TELEFON" VARCHAR2(26 BYTE), 
	"BETREFF" VARCHAR2(128 BYTE), 
	"HINWEIS" VARCHAR2(26 BYTE), 
	"VORWAHL" VARCHAR2(26 BYTE), 
	"GUTHABEN1" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_KTO_062017
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_KTO_062017" 
   (	"DATUM" TIMESTAMP (6), 
	"BELEG" VARCHAR2(255 BYTE), 
	"KOMMENTAR1" VARCHAR2(255 BYTE), 
	"KOMMENTAR2" VARCHAR2(255 BYTE), 
	"KOMMENTAR3" VARCHAR2(255 BYTE), 
	"KOMMENTAR4" VARCHAR2(255 BYTE), 
	"BRUTTO_BETRAG" NUMBER(30,10), 
	"KOMMENTAR6" VARCHAR2(255 BYTE), 
	"KOMMENTAR7" VARCHAR2(255 BYTE), 
	"KOMMENTAR8" VARCHAR2(255 BYTE), 
	"KOMMENTAR9" VARCHAR2(255 BYTE), 
	"KOMMENTAR10" VARCHAR2(255 BYTE), 
	"KOMMENTAR11" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX" 
   (	"BELEGDATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSDATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSPERIODE" NUMBER(3,0), 
	"BELEGNUMMERNKREIS" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" NUMBER(5,0), 
	"BUCHUNGSTEXT" VARCHAR2(128 BYTE), 
	"BUCHUNGSBETRAG" NUMBER(9,2), 
	"SOLLKONTO" NUMBER(6,0), 
	"HABENKONTO" NUMBER(6,0), 
	"STEUERSCHLÜSSEL" NUMBER(3,0), 
	"KOSTENSTELLE" VARCHAR2(26 BYTE), 
	"KOSTENTRÄGER" VARCHAR2(26 BYTE), 
	"BUCHUNGSBETRAG_EURO" NUMBER(9,2), 
	"WÄHRUNG" VARCHAR2(26 BYTE), 
	"ZUSATZANGABEN" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_EXP_ACII
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_EXP_ACII" 
   (	"BELEGDATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSDATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSPERIODE" NUMBER(38,0), 
	"BELEGNUMMERNKREIS" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(128 BYTE), 
	"BUCHUNGSBETRAG" NUMBER(38,2), 
	"SOLLKONTO" NUMBER(38,0), 
	"HABENKONTO" NUMBER(38,0), 
	"STEUERSCHLÜSSEL" NUMBER(38,0), 
	"KOSTENSTELLE" VARCHAR2(26 BYTE), 
	"KOSTENTRÄGER" VARCHAR2(26 BYTE), 
	"ZUSATZANGABEN" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_KONTENBLATT_2017
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2017" 
   (	"BUCHUNGSNUMMER" NUMBER(38,0), 
	"KONTONUMMER" NUMBER(38,0), 
	"KONTOBEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"BELEGDATUM" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"KTR" VARCHAR2(4000 BYTE), 
	"KST" VARCHAR2(4000 BYTE), 
	"GEGENKONTO" NUMBER(38,0), 
	"SOLLBETRAG_EUR" NUMBER(38,2), 
	"HABENBETRAG_EUR" NUMBER(38,2), 
	"USTKONTO" NUMBER(38,0), 
	"UST" NUMBER(38,0), 
	"SPLIT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_KONTENBLATT_2018_1
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2018_1" 
   (	"BUCHUNGSNUMMER" NUMBER(38,0), 
	"KONTONUMMER" NUMBER(38,0), 
	"KONTOBEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"BELEGDATUM" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"KTR" VARCHAR2(4000 BYTE), 
	"KST" VARCHAR2(4000 BYTE), 
	"GEGENKONTO" NUMBER(38,0), 
	"SOLLBETRAG_EUR" NUMBER(38,2), 
	"HABENBETRAG_EUR" NUMBER(38,2), 
	"USTKONTO" NUMBER(38,0), 
	"UST" NUMBER(38,0), 
	"SPLIT" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_KONTENBLATT_2018_2
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2018_2" 
   (	"BUCHUNGSNUMMER" NUMBER(38,0), 
	"KONTONUMMER" NUMBER(38,0), 
	"KONTOBEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"BELEGDATUM" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"KTR" VARCHAR2(4000 BYTE), 
	"KST" VARCHAR2(4000 BYTE), 
	"GEGENKONTO" NUMBER(38,0), 
	"SOLLBETRAG_EUR" NUMBER(38,2), 
	"HABENBETRAG_EUR" NUMBER(38,2), 
	"USTKONTO" NUMBER(38,0), 
	"UST" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_KONTENBLATT_2019
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2019" 
   (	"BUCHUNGSNUMMER" NUMBER(38,0), 
	"KONTONUMMER" NUMBER(38,0), 
	"KONTOBEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"BELEGDATUM" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"KTR" VARCHAR2(4000 BYTE), 
	"KST" VARCHAR2(4000 BYTE), 
	"GEGENKONTO" NUMBER(38,0), 
	"SOLLBETRAG_EUR" NUMBER(38,2), 
	"HABENBETRAG_EUR" NUMBER(38,2), 
	"USTKONTO" NUMBER(38,0), 
	"UST" NUMBER(38,0), 
	"SPLIT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_KONTENBLATT_2020
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_KONTENBLATT_2020" 
   (	"BUCHUNGSNUMMER" NUMBER(38,0), 
	"KONTONUMMER" NUMBER(38,0), 
	"KONTOBEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"BELEGDATUM" VARCHAR2(4000 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"KTR" VARCHAR2(4000 BYTE), 
	"KST" VARCHAR2(4000 BYTE), 
	"GEGENKONTO" NUMBER(38,0), 
	"SOLLBETRAG_EUR" VARCHAR2(4000 BYTE), 
	"HABENBETRAG_EUR" VARCHAR2(4000 BYTE), 
	"USTKONTO" NUMBER(38,0), 
	"UST" NUMBER(38,0), 
	"SPLIT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_LONG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_LONG" 
   (	"BELEGDAT" VARCHAR2(26 BYTE), 
	"PERIODE" NUMBER(38,0), 
	"BELEGNR" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(128 BYTE), 
	"BETRAG" NUMBER(38,2), 
	"WHRG" VARCHAR2(26 BYTE), 
	"SOLLKTO" NUMBER(38,0), 
	"HABENKTO" NUMBER(38,0), 
	"ABSCHLUSS" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(26 BYTE), 
	"BENUTZER" VARCHAR2(26 BYTE), 
	"BETRAGDM" NUMBER(38,2), 
	"BETRAGEUR" NUMBER(38,2), 
	"BUCHDAT" VARCHAR2(26 BYTE), 
	"NR" NUMBER(38,0), 
	"HABENDM" NUMBER(38,2), 
	"HABENEUR" NUMBER(38,2), 
	"HABEN" NUMBER(38,2), 
	"JOUR_DAT" VARCHAR2(26 BYTE), 
	"KST" VARCHAR2(26 BYTE), 
	"KTR" VARCHAR2(26 BYTE), 
	"NOTIZ" VARCHAR2(26 BYTE), 
	"RELATION" VARCHAR2(26 BYTE), 
	"SOLLDM" NUMBER(38,2), 
	"SOLLEUR" NUMBER(38,2), 
	"SOLL" NUMBER(38,2), 
	"SPERRE" VARCHAR2(26 BYTE), 
	"STAPEL" VARCHAR2(26 BYTE), 
	"STATUS" VARCHAR2(26 BYTE), 
	"STATUS_DAT" VARCHAR2(26 BYTE), 
	"UST_H_DM" VARCHAR2(26 BYTE), 
	"UST_H_EUR" VARCHAR2(26 BYTE), 
	"UST_HABEN" VARCHAR2(26 BYTE), 
	"UST_S_DM" NUMBER(38,2), 
	"UST_S_EUR" NUMBER(38,2), 
	"UST_SOLL" NUMBER(38,2), 
	"UST_DM" NUMBER(38,2), 
	"UST_EUR" NUMBER(38,2), 
	"UST" NUMBER(38,2), 
	"UST_KTO" NUMBER(38,0), 
	"UST_KTO_H" VARCHAR2(26 BYTE), 
	"UST_KTO_S" NUMBER(38,0), 
	"UST_PROZ" NUMBER(38,0), 
	"UST_TEXT" VARCHAR2(26 BYTE), 
	"ZUSATZANG" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_RE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_RE" 
   (	"PK_IMP_RE_LEXWARE" NUMBER, 
	"FK_RECHNUNGSDATUM" NUMBER, 
	"RECHNUNGSDATUM" DATE, 
	"JAHR" NUMBER, 
	"RECHNUNGSNUMMER" NUMBER, 
	"DESCR" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATE_AT" DATE DEFAULT SYSDATE, 
	"FK_MAIN_KEY_ZAHLUNG" NUMBER, 
	"LIZENZNUMMER" VARCHAR2(4000 BYTE), 
	"PRODUKT" NUMBER, 
	"RECHNUNGSBETRAG" NUMBER, 
	"ZAHLUNG" NUMBER, 
	"ZAHLUNGSBETRAG" NUMBER, 
	"ZAHLUNGSDATUM" DATE, 
	"FK_ZAHLUNGSDATUM" NUMBER, 
	"ZAHLUNGSKOMMENTAR" VARCHAR2(4000 BYTE), 
	"ZAHLUNGSSTATUS" VARCHAR2(4000 BYTE), 
	"FK_STD_LEX_ZAHLUNGSSTATUS" NUMBER, 
	"RECHNUNGSKORREKTUR" NUMBER, 
	"RECHNUNGSKORREKTURDATUM" DATE, 
	"FK_RECHNUNGSKORREKTURDATUM" NUMBER, 
	"RECHNUNGSKORREKTURKOMMENTAR" VARCHAR2(4000 BYTE), 
	"RECHNUNGSKORREKTURBETRAG" NUMBER, 
	"FK_INVENTAR" NUMBER, 
	"RECHNUNG" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("RECHNUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_IMP_LEX_TEST
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LEX_TEST" 
   (	"BELEGDAT" VARCHAR2(26 BYTE), 
	"PERIODE" NUMBER(38,0), 
	"BELEGNR" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(128 BYTE), 
	"BETRAG" NUMBER(38,0), 
	"WHRG" VARCHAR2(26 BYTE), 
	"SOLLKTO" NUMBER(38,0), 
	"HABENKTO" NUMBER(38,0), 
	"ABSCHLUSS" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(26 BYTE), 
	"BENUTZER" VARCHAR2(26 BYTE), 
	"BETRAGDM" NUMBER(38,2), 
	"BETRAGEUR" NUMBER(38,0), 
	"BUCHDAT" VARCHAR2(26 BYTE), 
	"NR" NUMBER(38,0), 
	"HABENDM" NUMBER(38,2), 
	"HABENEUR" NUMBER(38,0), 
	"HABEN" NUMBER(38,0), 
	"JOUR_DAT" VARCHAR2(26 BYTE), 
	"KST" VARCHAR2(26 BYTE), 
	"KTR" VARCHAR2(26 BYTE), 
	"NOTIZ" VARCHAR2(26 BYTE), 
	"RELATION" VARCHAR2(26 BYTE), 
	"SOLLDM" NUMBER(38,2), 
	"SOLLEUR" NUMBER(38,2), 
	"SOLL" NUMBER(38,2), 
	"SPERRE" VARCHAR2(26 BYTE), 
	"STAPEL" VARCHAR2(26 BYTE), 
	"STATUS" VARCHAR2(26 BYTE), 
	"STATUS_DAT" VARCHAR2(26 BYTE), 
	"UST_H_DM" VARCHAR2(26 BYTE), 
	"UST_H_EUR" VARCHAR2(26 BYTE), 
	"UST_HABEN" VARCHAR2(26 BYTE), 
	"UST_S_DM" NUMBER(38,1), 
	"UST_S_EUR" NUMBER(38,2), 
	"UST_SOLL" NUMBER(38,2), 
	"UST_DM" NUMBER(38,1), 
	"UST_EUR" NUMBER(38,2), 
	"UST" NUMBER(38,2), 
	"UST_KTO" NUMBER(38,0), 
	"UST_KTO_H" VARCHAR2(26 BYTE), 
	"UST_KTO_S" NUMBER(38,0), 
	"UST_PROZ" NUMBER(38,0), 
	"UST_TEXT" VARCHAR2(26 BYTE), 
	"ZUSATZANG" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LIST
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LIST" 
   (	"NR" VARCHAR2(26 BYTE), 
	"LISTENNR" NUMBER(3,0), 
	"FORTL_NR" NUMBER(5,0), 
	"R" NUMBER(8,0), 
	"DATUM" DATE, 
	"FK_KONTO" NUMBER, 
	"BEN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_LOG_LOAD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_LOG_LOAD" 
   (	"PK_IMP_LOG_LOAD" NUMBER, 
	"TABLE_NAME" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"LOAD_DATE" DATE, 
	"FK_DB_OBJ_OBJECT_LIST" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_CONGSTAR_RECH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_CONGSTAR_RECH" 
   (	"T_IMP_TEL_CONGSTAR_RECH" NUMBER, 
	"RECHNUNGSNUMMER" VARCHAR2(20 BYTE), 
	"KUNDENNUMMER" VARCHAR2(20 BYTE), 
	"DATUM" VARCHAR2(20 BYTE), 
	"BETRAG" VARCHAR2(20 BYTE), 
	"PERSON" VARCHAR2(20 BYTE), 
	"LOAD_DATE" VARCHAR2(20 BYTE), 
	"HANDYNUMMER" VARCHAR2(20 BYTE), 
	"TARIF" VARCHAR2(20 BYTE), 
	"VERTRAGSSTATUS" VARCHAR2(20 BYTE), 
	"VERTRAGSNUMMER" VARCHAR2(20 BYTE), 
	"VERTRAGSSTATUS_DETAIL" VARCHAR2(20 BYTE), 
	"BENUTZER" VARCHAR2(4000 BYTE), 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_CONGSTAR_RECH_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_CONGSTAR_RECH_DET" 
   (	"DATUM" NUMBER(38,0), 
	"EINHEIT" VARCHAR2(26 BYTE), 
	"MINUTEN" VARCHAR2(26 BYTE), 
	"EINHEIT2" VARCHAR2(26 BYTE), 
	"TYP1" VARCHAR2(26 BYTE), 
	"TYP2" VARCHAR2(26 BYTE), 
	"TYPGESAMT" VARCHAR2(26 BYTE), 
	"BETRAG" NUMBER(38,5), 
	"SEKUNDEN" NUMBER(38,0), 
	"BENUTZER" VARCHAR2(26 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_MOBILCOM_RECH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH" 
   (	"ZAEHLER" NUMBER(4,0), 
	"RECHNUNGSNUMMER" VARCHAR2(26 BYTE), 
	"RECHNUNGSDATUM" NUMBER(10,0), 
	"ABRECHNUNGSMONAT" VARCHAR2(26 BYTE), 
	"KUNDENNUMMER" NUMBER(10,0), 
	"RUFNUMMER" VARCHAR2(26 BYTE), 
	"SIMNUMMER" NUMBER(21,0), 
	"BENUTZER" VARCHAR2(26 BYTE), 
	"KOSTENSTELLE" VARCHAR2(26 BYTE), 
	"ZUSATZINFO" VARCHAR2(26 BYTE), 
	"KATEGORIE" VARCHAR2(128 BYTE), 
	"DATUMVON" VARCHAR2(26 BYTE), 
	"DATUMBIS" VARCHAR2(26 BYTE), 
	"MWSTSATZ" NUMBER(4,0), 
	"NETTO_BETRAG" NUMBER(8,4), 
	"PK_IMP_TEL_MOBILCOM_RECH" NUMBER, 
	"BRUTTO_BETRAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"MWST" NUMBER, 
	"VERTRAGSNUMMER" VARCHAR2(4000 CHAR), 
	"FK_BAS_KAL_RECHNUNGSDATUM" NUMBER, 
	"FK_BAS_KAL_DATUM_DETAIL_OK" NUMBER, 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_MOBILCOM_RECH_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET" 
   (	"ZAEHLER" NUMBER(4,0), 
	"RECHNUNGSNUMMER" VARCHAR2(26 BYTE), 
	"RECHNUNGSDATUM" VARCHAR2(20 BYTE), 
	"ABRECHNUNGSMONAT" VARCHAR2(26 BYTE), 
	"KUNDENNUMMER" NUMBER(10,0), 
	"RUFNUMMER" VARCHAR2(26 BYTE), 
	"SIMNUMMER" NUMBER(21,0), 
	"BENUTZER" VARCHAR2(26 BYTE), 
	"KOSTENSTELLE" VARCHAR2(26 BYTE), 
	"ZUSATZINFO" VARCHAR2(26 BYTE), 
	"KATEGORIE" VARCHAR2(128 BYTE), 
	"DETAIL" VARCHAR2(128 BYTE), 
	"DATUMVON" VARCHAR2(26 BYTE), 
	"DATUMBIS" VARCHAR2(26 BYTE), 
	"MENGE" NUMBER(5,0), 
	"MWSTSATZ" NUMBER(4,0), 
	"BETRAG" NUMBER(8,4), 
	"PK_IMP_TEL_MOBILCOM_RECH_DET" NUMBER, 
	"FK_IMP_TEL_MOBILCOM_RECH" NUMBER, 
	"KATEGORIE_HAUPT" VARCHAR2(4000 CHAR), 
	"FK_TEL_TELEEFONKARTE" NUMBER, 
	"FK_TEL_TELEEFONKARTEN" NUMBER, 
	"FK_TEL_TELEFONKARTEN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_MOBILCOM_RECH_OV
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_OV" 
   (	"Monat" VARCHAR2(255 BYTE), 
	"Rechnungsnummer" VARCHAR2(255 BYTE), 
	"Netto" VARCHAR2(255 BYTE), 
	"Mwst" VARCHAR2(255 BYTE), 
	"Brutto" VARCHAR2(255 BYTE), 
	"PK_IMP_TEL_MOBILCOM_RECH_OV" VARCHAR2(20 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"BELEG" BLOB, 
	"MIMETYPE" VARCHAR2(20 BYTE), 
	"RECHNUNGSDATUM" DATE, 
	"FK_BAS_KAL_RECHNUNGSDATUM" NUMBER, 
	"FK_IMP_TEL_BEL" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_LEX_BUCHUNG" VARCHAR2(20 BYTE), 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_O2
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_O2" 
   (	"PK_IMP_TEL_O2" NUMBER(4,0), 
	"BANKVERBINDUNG" VARCHAR2(256 BYTE), 
	"JAHR" NUMBER(6,0), 
	"RECHNUNGSNUMMER" VARCHAR2(26 BYTE), 
	"RECHNUNGSDATUM" VARCHAR2(26 BYTE), 
	"VON" VARCHAR2(26 BYTE), 
	"TR" VARCHAR2(26 BYTE), 
	"BIS" NUMBER(10,0), 
	"FAELLIG_AM" NUMBER(10,0), 
	"BETRAG" NUMBER(6,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"OFFENER_BETRAG" NUMBER(3,0), 
	"WAEHRUNG1" VARCHAR2(26 BYTE), 
	"BEGLICHEN_AM" NUMBER(10,0), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_IMP_TEL_BEL" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_IMP_TEL_VODAFONE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_IMP_TEL_VODAFONE" 
   (	"DATUM" VARCHAR2(26 BYTE), 
	"BEZEICHNUNG" VARCHAR2(128 BYTE), 
	"BETRAG" NUMBER(6,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_RE_RECHNUNG" NUMBER, 
	"PK_IMP_TEL_VODAFONE" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_IMP_TEL_BEL" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_INP_BELEGE_ALL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INP_BELEGE_ALL" 
   (	"PK_INP_BELEGE_ALL" NUMBER, 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_STD_KTO_ZAHLUNGSART" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"BELEGNUMMER" VARCHAR2(128 BYTE), 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"FK_ADR_LAND" NUMBER, 
	"FK_ADR_CITY" NUMBER, 
	"BEL_DATUM" DATE, 
	"VON" DATE, 
	"BIS" DATE, 
	"NETTO_BETRAG" NUMBER, 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER, 
	"MWST_BETRAG" NUMBER, 
	"BRUTTO_BETRAG" NUMBER, 
	"FK_BAS_MON_WAEHRUNG" NUMBER, 
	"STEUERNUMMER" VARCHAR2(4000 BYTE), 
	"FK_BAS_MON_UMRECHNUNGSKURS" NUMBER, 
	"COMM_REST_BELEG" CLOB, 
	"COMM_TEL_BELEG" CLOB, 
	"COMM_PRODUKTE" CLOB, 
	"COMM_BEGRUENDUNG" CLOB, 
	"COMM_SONSTIGES" CLOB, 
	"BELEG" BLOB, 
	"ZAHLUNGSBELEG" BLOB, 
	"LITER" NUMBER, 
	"ZAPFSAEULE" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"PERSOENLICH_VOR_ORT" NUMBER, 
	"BELEG_UHRZEIT" DATE, 
	"VON_UHRZEIT" DATE, 
	"BIS_UHRZEIT" DATE, 
	"FK_BAS_KAL_VON_ARBEITSTAG" NUMBER, 
	"FK_BAS_KAL_BIS_ARBEITSTAG" NUMBER, 
	"COMM_ADRESSE" VARCHAR2(4000 BYTE), 
	"TANKSTELLEN_NR" VARCHAR2(4000 BYTE), 
	"BRUTTO_BETRAG_INCL_TRINKG" NUMBER, 
	"COMM_PARKTICKET" CLOB, 
	"FRMDW_NETTO_BETRAG" NUMBER, 
	"FK_BAS_MON_FRMDW" NUMBER, 
	"FK_BAS_MON_FRMDW_MWST_SATZ" NUMBER, 
	"FRMDW_MWST_BETRAG" NUMBER, 
	"FRMDW_BRUTTO_BETRAG" NUMBER, 
	"FRMDW_BRUTTO_INCL_TRINKG" NUMBER, 
	"MWST_BETRAG_EUR" NUMBER, 
	"BRUTTO_BETRAG_EUR" NUMBER, 
	"BRUTTO_INCL_TRINKG_EUR" NUMBER, 
	"NETTO_BETRAG_EUR" NUMBER, 
	"PREIS_PRO_MENGE" NUMBER, 
	"MENGENEINHEIT" NUMBER, 
	"LA_DATUM" DATE, 
	"FK_LA_KONTO" NUMBER, 
	"FK_LA_WDH" NUMBER, 
	"FK_STD_INP_ZAHLUNGSSTATUS" NUMBER, 
	"COMM_VERGEHEN" CLOB, 
	"VERG_BEHOERDE" VARCHAR2(4000 BYTE), 
	"VERG_CNT_PUNKTE" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE), 
	"FK_ABL_ORDNER_PAGE" NUMBER, 
	"VERG_CNT_PUNKTE_GESCHAETZT" NUMBER, 
	"VERG_PUNKTE_VON" DATE, 
	"VERG_PUNKTE_BIS" DATE, 
	"FK_LOC_LOCATION_VERG" NUMBER, 
	"FK_IMP_BA_BEL_OLD" NUMBER, 
	"VERG_GESCHW_IST" NUMBER, 
	"VERG_GESCHW_SOLL" NUMBER, 
	"VERG_GESCHW_UEBER_GRZ" NUMBER, 
	"VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL" NUMBER, 
	"VERG_CODE_BUSSGELD" VARCHAR2(4000 BYTE), 
	"VERG_DESCR_BUSSGELD" VARCHAR2(4000 BYTE), 
	"GEZAHLT_AM" DATE, 
	"WEBSEITE" VARCHAR2(4000 BYTE), 
	"KUNDENNUMMER" VARCHAR2(4000 BYTE), 
	"FK_REAL_BELEG_EXIST" NUMBER DEFAULT 1, 
	"FK_CALC_STATE" NUMBER, 
	"FK_CALC_STATE_EUR" NUMBER, 
	"FK_CALC_STATE_FRMDW" NUMBER, 
	"FK_STD_INP_STATUS" NUMBER, 
	"DATUM_VERGEHEN" DATE, 
	"CREATE_AT" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"MODIFY_AT" DATE, 
	"MODIFY_BY" DATE, 
	"DATUM_ORT_OK" DATE, 
	"DATUM_ADDRESSE_OK" DATE, 
	"DATUM_BUSSGELD_OK" DATE, 
	"DATUM_BELEG_POS_OK" DATE, 
	"DATUM_BUCHUNG_OK" DATE, 
	"DATUM_VERPFL_BEL_OK" DATE, 
	"FK_INT_INTERNET_APP" NUMBER, 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FK_KON_GESCHAEFTSPARTNER" NUMBER, 
	"DUMMY" NUMBER, 
	"STORNIERT" NUMBER, 
	"FK_ADR_ADRESSE_SCHNELL" NUMBER, 
	"FK_LEX_RELATION_SRC" VARCHAR2(4000 BYTE), 
	"FK_MAIN_KEY_SRC" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE, 
	"VERG_DATUM_RECHTSKRAFT" DATE, 
	"VERG_DATUM_TILGUNG" DATE, 
	"VERG_NUMMER_FLENS" NUMBER, 
	"VERG_AKTENZEICHEN" VARCHAR2(4000 BYTE), 
	"VERG_TATBESTANDSNUMMER" NUMBER, 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("COMM_REST_BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_TEL_BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_PRODUKTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_BEGRUENDUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_SONSTIGES") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("ZAHLUNGSBELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_PARKTICKET") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_VERGEHEN") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

   COMMENT ON COLUMN "COMPANY"."T_INP_BELEGE_ALL"."LA_DATUM" IS 'Lastschrift';
   COMMENT ON COLUMN "COMPANY"."T_INP_BELEGE_ALL"."FK_LA_WDH" IS 'Wiederholung';
--------------------------------------------------------
--  DDL for Table T_INP_BELEGE_POS_ALL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INP_BELEGE_POS_ALL" 
   (	"PK_INP_BELEGE_POS_ALL" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_STD_KTO_ZAHLUNGSART" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"BELEGNUMMER" VARCHAR2(128 BYTE), 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"FK_ADR_LAND" NUMBER, 
	"FK_ADR_CITY" NUMBER, 
	"BEL_DATUM" DATE, 
	"VON" DATE, 
	"BIS" DATE, 
	"NETTO_BETRAG" NUMBER, 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER, 
	"MWST_BETRAG" NUMBER, 
	"BRUTTO_BETRAG" NUMBER, 
	"FK_BAS_MON_WAEHRUNG" NUMBER, 
	"STEUERNUMMER" VARCHAR2(128 BYTE), 
	"UMRECHNUNGSKURS" VARCHAR2(255 BYTE), 
	"COMM_REST_BELEG" CLOB, 
	"COMM_TEL_BELEG" CLOB, 
	"COMM_PRODUKTE" CLOB, 
	"COMM_BEGRUENDUNG" CLOB, 
	"COMM_SONSTIGES" CLOB, 
	"BELEG" BLOB, 
	"ZAHLUNGSBELEG" BLOB, 
	"LITER" NUMBER, 
	"ZAPFSAEULE" NUMBER, 
	"FK_CALC_STATE" NUMBER, 
	"FK_CALC_STATE_EUR" NUMBER, 
	"FK_CALC_STATE_FRMDW" NUMBER, 
	"FRMDW_NETTO_BETRAG" NUMBER, 
	"FK_BAS_MON_FRMDW" NUMBER, 
	"FK_BAS_MON_FRMDW_MWST_SATZ" NUMBER, 
	"FRMDW_MWST_BETRAG" NUMBER, 
	"FRMDW_BRUTTO_BETRAG" NUMBER, 
	"FRMDW_BRUTTO_INCL_TRINKG" NUMBER, 
	"DATUM_OK_BUCH" DATE, 
	"FK_LOC_LOCATION" NUMBER, 
	"PERSOENLICH_VOR_ORT" NUMBER DEFAULT 0, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("COMM_REST_BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_TEL_BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_PRODUKTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_BEGRUENDUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("COMM_SONSTIGES") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("ZAHLUNGSBELEG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_INT_INTERNETPORTAL_APP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INT_INTERNETPORTAL_APP" 
   (	"PK_INT_INTERNETPORTAL_APP" NUMBER, 
	"WEBSEITE" VARCHAR2(4000 BYTE), 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"FK_INT_APP_TYPE" NUMBER, 
	"FK_TYPE" NUMBER, 
	"EMAIL" VARCHAR2(4000 CHAR), 
	"TELEFONNR" VARCHAR2(4000 CHAR), 
	"BENUTZERNAME" VARCHAR2(4000 CHAR), 
	"KENNWORT" VARCHAR2(4000 CHAR), 
	"RECHNUNGSUEBERSICHT" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR), 
	"CREATE_AT" DATE, 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_INT_INTERNETPORTAL_APP"."FK_TYPE" IS 'Bestellseite / Job';
--------------------------------------------------------
--  DDL for Table T_INV_ANL_RESTBUCHWERT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INV_ANL_RESTBUCHWERT" 
   (	"T_INV_RESTBUCHWERT" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"RESTBUCHWERT" NUMBER, 
	"JAHR" NUMBER, 
	"DATUM" DATE, 
	"CREATED_AT" DATE, 
	"COMM" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_INV_INVENTARE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INV_INVENTARE" 
   (	"PK_INV_INVENTAR" NUMBER(30,10), 
	"INVENTAR" VARCHAR2(255 BYTE), 
	"ANSCHAFFUNGSDATUM" TIMESTAMP (6), 
	"ANSCHAFFUNGSJAHR" NUMBER(30,10), 
	"ABSCHREIBUNGSDAUER" NUMBER(30,10), 
	"RESTBUCHWERT_2018" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"PREIS_NETTO" NUMBER(30,10), 
	"MWST" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"PREIS_BRUTTO" NUMBER(30,10), 
	"COMM" VARCHAR2(4000 CHAR), 
	"LIZENZNUMMER" VARCHAR2(255 BYTE), 
	"ANFORDERUNGSCODE" VARCHAR2(255 BYTE), 
	"FK_BAS_INV_INVENTARTYP" NUMBER(30,10), 
	"KFZ_KENNZEICHEN" VARCHAR2(255 BYTE), 
	"FAHRGESTELLNR" VARCHAR2(255 BYTE), 
	"BEMERKUNGEN" VARCHAR2(255 BYTE), 
	"BILD" VARCHAR2(255 BYTE), 
	"ABGANGSJAHR" NUMBER(30,10), 
	"ABGANGSDATUM" TIMESTAMP (6), 
	"ABGANGSWERT" NUMBER(30,10), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER(30,10), 
	"GWG" NUMBER(30,10), 
	"RESTBUCHWERT_2017" NUMBER(30,10), 
	"ABGANGSGRUND" VARCHAR2(255 BYTE), 
	"MAC_ADRESSE" VARCHAR2(255 BYTE), 
	"SERIENNUMMER" VARCHAR2(255 BYTE), 
	"GERAETENAME" VARCHAR2(255 BYTE), 
	"OK" VARCHAR2(255 BYTE), 
	"OK_BEMERKUNGEN" VARCHAR2(255 BYTE), 
	"RESTBUCHWERT_2019" NUMBER(30,10), 
	"INV_BILD" BLOB, 
	"ANSCHAFFUNGSWERT" NUMBER, 
	"RESTBUCHWERT_2020" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("INV_BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_INV_KOMP_KOMPONENTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INV_KOMP_KOMPONENTEN" 
   (	"PK_INV_KOMPONENTEN" NUMBER(30,10), 
	"FK_INV_KOMPONENTEN_TYP" NUMBER(30,10), 
	"FK_KON_HERSTELLER" NUMBER(30,10), 
	"FK_KON_LIEFERANT" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"SNO" VARCHAR2(255 BYTE), 
	"MAC_ADDR" VARCHAR2(255 BYTE), 
	"BESCHAFFUNGSDATUM" TIMESTAMP (6), 
	"IMEI_NR" VARCHAR2(255 BYTE), 
	"PREIS_NETTO" NUMBER(30,10), 
	"PREIS_BRUTTO" NUMBER(30,10), 
	"ABSCHREIBUNGSDAUER" NUMBER(30,10), 
	"RESTBUCHWERT" NUMBER(30,10), 
	"FREMDARTIKELNR" VARCHAR2(255 BYTE), 
	"MWST" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"KOMPONENTENBEZEICHNUNG" VARCHAR2(255 BYTE), 
	"COMM" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_INV_SUB_ELEKTRONIK
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_INV_SUB_ELEKTRONIK" 
   (	"BEZEICHNUNG" VARCHAR2(128 BYTE), 
	"BELEGNUMMER" VARCHAR2(4000 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"MWST_PROZ" VARCHAR2(26 BYTE), 
	"VERTRAGSNUMMER" VARCHAR2(20 BYTE), 
	"DATUM" VARCHAR2(20 BYTE), 
	"KUNDENNUMMER" VARCHAR2(20 BYTE), 
	"DATUM2" VARCHAR2(26 BYTE), 
	"ORT" VARCHAR2(26 BYTE), 
	"GESCHAEFT" VARCHAR2(128 BYTE), 
	"GERAET" VARCHAR2(128 BYTE), 
	"COLUMN1" VARCHAR2(4000 BYTE), 
	"MWST_SATZ" VARCHAR2(4000 BYTE), 
	"MWST_BETRAG" VARCHAR2(4000 BYTE), 
	"SONSTIGES2" VARCHAR2(4000 BYTE), 
	"NUMMERNART" VARCHAR2(4000 BYTE), 
	"NUMMER" VARCHAR2(4000 BYTE), 
	"ORT_DATUM" VARCHAR2(4000 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"PK_INV_SUB_ELEKTRONIK" NUMBER, 
	"FK_BAS_ARBEITSTAG" NUMBER, 
	"BILD" BLOB, 
	"FK_INV_INVENTAR" NUMBER, 
	"HARDWARE_SOFTWARE" VARCHAR2(20 BYTE), 
	"OK" VARCHAR2(20 BYTE), 
	"OK_BEMERKUNGEN" VARCHAR2(4000 BYTE), 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

   COMMENT ON COLUMN "COMPANY"."T_INV_SUB_ELEKTRONIK"."PK_INV_SUB_ELEKTRONIK" IS 'fortlaufende Belegnummer';
--------------------------------------------------------
--  DDL for Table T_KAL_TERMINE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KAL_TERMINE" 
   (	"PK_KAL_TERMIN" NUMBER, 
	"DATUM" DATE, 
	"DESCR" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE DEFAULT sysdate, 
	"WDH" VARCHAR2(4000 BYTE), 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_PROJ_STUNDENZETTEL" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"FK_ADR_LAND" NUMBER, 
	"FK_ADR_ORT" NUMBER, 
	"FK_ADR_PLZ_ORT" NUMBER, 
	"FK_ADR_ADRESSE_SCHNELL" NUMBER, 
	"FK_STD_KAL_STATUS" NUMBER, 
	"FK_STD_KAL_TERMIN_TYP" NUMBER, 
	"DATUM_NEXT" DATE, 
	"WDH1" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KON_GESCHAEFTSPARTNER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KON_GESCHAEFTSPARTNER" 
   (	"PK_KON_GESCHAEFTSPARTNER" NUMBER(30,10), 
	"GESCHAEFTSPARTNER" VARCHAR2(255 BYTE), 
	"FK_BAS_KON_GESCHAEFTSPARTNERTYP" NUMBER(30,10), 
	"UNTERNEHMENSBEZEICHNUNG" VARCHAR2(255 BYTE), 
	"PERSONALNUMMER" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KON_KONTAKT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KON_KONTAKT" 
   (	"PK_KON_KONTAKT" NUMBER(30,10), 
	"EMAIL" VARCHAR2(255 BYTE), 
	"FESTNETZNUMMER" VARCHAR2(255 BYTE), 
	"MOBILNUMMER" VARCHAR2(255 BYTE), 
	"WEBSEITE" VARCHAR2(255 BYTE), 
	"FAX" VARCHAR2(255 BYTE), 
	"BESCHREIBUNG" VARCHAR2(255 BYTE), 
	"HR_EINTRAG" VARCHAR2(255 BYTE), 
	"WEEE_REG_NR" VARCHAR2(255 BYTE), 
	"STEUERNUMMER" VARCHAR2(255 BYTE), 
	"UST_IDNR" VARCHAR2(255 BYTE), 
	"STEUERNR_ALT" VARCHAR2(255 BYTE), 
	"IDENTIFIKATIONSNUMMER" VARCHAR2(255 BYTE), 
	"GÜLTIG_AB_UST_ID" TIMESTAMP (6), 
	"KZ" VARCHAR2(255 BYTE), 
	"GLAEUBIGER_ID" VARCHAR2(255 BYTE), 
	"KOMMENTAR" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"COUNTRY_PREFIX_MOBILFUNKNUMMER" VARCHAR2(20 BYTE), 
	"COUNTRY_PREFIX_FESTNETZNUMMER" VARCHAR2(20 BYTE), 
	"COUNTRY_PREFIX_FAX" VARCHAR2(20 BYTE), 
	"ACTIVE" NUMBER, 
	"ACTIVE_FROM" DATE, 
	"ACTIVE_TO" DATE, 
	"FK_STD_KONTAKT_TYPE" NUMBER, 
	"FK_ADR_LOCATION" NUMBER, 
	"FK_KON_KONTAKT_HAUPT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KON_PERSON
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KON_PERSON" 
   (	"PK_KON_PERSON" NUMBER(30,10), 
	"NACHNAME" VARCHAR2(255 BYTE), 
	"VORNAME" VARCHAR2(255 BYTE), 
	"BEMERKUNG" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"BIRTH_DAY" DATE, 
	"STERBEDATUM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KON_PERSON_OFFENE_PUNKTE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KON_PERSON_OFFENE_PUNKTE" 
   (	"PK_PERSON_OFFENE_PUNKTE" NUMBER, 
	"FK_PERSON" NUMBER, 
	"OFFENE_PUNKTE" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("OFFENE_PUNKTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_KTO_BANK
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_BANK" 
   (	"PK_KTO_BANK" NUMBER(30,10), 
	"BANK" VARCHAR2(255 BYTE), 
	"FK_ADR_ORT" NUMBER(30,10), 
	"FK_KTO_HAUPTBANK" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_BANKKONTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_BANKKONTO" 
   (	"PK_KTO_BANKKONTO" NUMBER(30,10), 
	"FK_KTO_BANK" NUMBER(30,10), 
	"IBAN" VARCHAR2(255 BYTE), 
	"BIC" VARCHAR2(255 BYTE), 
	"KONTONR" VARCHAR2(255 BYTE), 
	"BLZ" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"KREDITKARTENNR" VARCHAR2(255 BYTE), 
	"BEZ" VARCHAR2(255 BYTE), 
	"FK_STD_KTO_KONTOTYP" NUMBER(30,10), 
	"KREDITLINIE" NUMBER(30,10), 
	"EROEFFUNGSDATUM" TIMESTAMP (6), 
	"SCHLUSSDATUM" TIMESTAMP (6), 
	"ZUGANG" VARCHAR2(255 BYTE), 
	"PIN" VARCHAR2(255 BYTE), 
	"DIBA_KEY" NUMBER(30,10), 
	"TELEBANKING_PIN" NUMBER(30,10), 
	"BEMERKUNGEN" VARCHAR2(255 BYTE), 
	"KARTENSPERRUNG" VARCHAR2(255 BYTE), 
	"VALID" NUMBER(30,10), 
	"VALID_FROM" TIMESTAMP (6), 
	"VALID_TO" TIMESTAMP (6), 
	"GLAEUBIGER_ID" VARCHAR2(4000 BYTE), 
	"MANDATSREFERENZ_SEPA" VARCHAR2(4000 BYTE), 
	"FK_LASTSCHRIFT_KTO_VON" NUMBER, 
	"FK_KON_OWNER1" NUMBER, 
	"FK_KON_OWNER2" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_DOWNLOAD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_DOWNLOAD" 
   (	"ID" VARCHAR2(255 BYTE), 
	"FK_Paypal" VARCHAR2(255 BYTE), 
	"DL_Number" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_GIROKONTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_GIROKONTO" 
   (	"ID" NUMBER(30,10), 
	"Buchungstag" TIMESTAMP (6), 
	"Wertstellung" TIMESTAMP (6), 
	"Umsatzart" VARCHAR2(255 BYTE), 
	"Buchungstext" VARCHAR2(4000 BYTE), 
	"Betrag" NUMBER, 
	"WAEHRUNG" VARCHAR2(255 BYTE), 
	"Auftraggeberkonto" VARCHAR2(255 BYTE), 
	"Bankleitzahl Auftraggeberkonto" VARCHAR2(255 BYTE), 
	"IBAN_AUFTRAGGEBERKONTO" VARCHAR2(255 BYTE), 
	"KATEGORIE" VARCHAR2(255 BYTE), 
	"F12" VARCHAR2(255 BYTE), 
	"F13" VARCHAR2(255 BYTE), 
	"alt_ID" VARCHAR2(255 BYTE), 
	"FK_BAS_KAT_KATEGORIE" NUMBER(30,10), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER(30,10), 
	"FK_STD_KTO_KONTOTYP" NUMBER(30,10), 
	"Bemerkungen" VARCHAR2(255 BYTE), 
	"FK_MAIN_KEY" NUMBER(30,10), 
	"FK_BAS_KAL_BUCHUNGSTAG" NUMBER(30,10), 
	"FK_BAS_KAL_WERTSTELLUNG" NUMBER(30,10), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"FK_KTO_BANKKONTO" NUMBER(30,10), 
	"KONTOSTAND" NUMBER(30,10), 
	"WIEDERHOLUNG" VARCHAR2(255 BYTE), 
	"NAECHSTE_ZAHLUNG" TIMESTAMP (6), 
	"FK_BUCHUNG_STEUER" NUMBER(30,10), 
	"FK_KTO_VORGANG" NUMBER(30,10), 
	"FK_LOC_LOCATION" NUMBER(30,10), 
	"EMPFAENGER" VARCHAR2(255 BYTE), 
	"SALDO" NUMBER(30,10), 
	"KONTONUMMER" VARCHAR2(255 BYTE), 
	"AUFTRAGGEBER" VARCHAR2(255 BYTE), 
	"FK_KON_AUFTRAGGEBER" NUMBER, 
	"FK_KON_EMPFAENGER" NUMBER, 
	"BUCHUNGSTAG_DT" DATE, 
	"WERTSTELLUNG_DT" DATE, 
	"BUCHUNGSTAG_VAR" VARCHAR2(20 BYTE), 
	"WERTSTELLUNG_VAR" VARCHAR2(20 BYTE), 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FLG_KREDITKARTENBUCHUNG" NUMBER DEFAULT 0, 
	"LOAD_DATE" DATE, 
	"DATUM_LEX_BUCHUNG_OK" DATE, 
	"FK_EIN_AUS" NUMBER, 
	"BEGUENSTIGTER" VARCHAR2(4000 CHAR), 
	"IBAN_ZUSATZ" VARCHAR2(255 CHAR), 
	"BIC" VARCHAR2(255 CHAR), 
	"MANDATSREFERENZ" VARCHAR2(255 CHAR), 
	"GLAEUBIGER" VARCHAR2(255 CHAR), 
	"FREMDGEBUEHREN" NUMBER, 
	"ABWEICHENDEREMPFAENGER" VARCHAR2(255 CHAR), 
	"ANZAHLAUFTRAEGE" NUMBER, 
	"ANZAHLSCHECKS" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_KAS_KASSE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_KAS_KASSE" 
   (	"PK_KTO_KAS_KASSE" NUMBER, 
	"FK_STD_KTO_KONTOTYP" NUMBER DEFAULT 6, 
	"FK_EIN_AUS" NUMBER DEFAULT 2, 
	"DATUM" DATE, 
	"BETRAG" NUMBER, 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"COMM" CLOB, 
	"JAHR" NUMBER, 
	"CREATION_DATE" DATE DEFAULT sysdate, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_KTO_BANKKONTO" NUMBER DEFAULT 61, 
	"FREMDWAEHRUNGSBETRAG" NUMBER, 
	"FK_BAS_MON_FREMDWAEHRUNG" VARCHAR2(255 BYTE), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"FK_MAIN_KEY_BANKKONTO" NUMBER, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_STEU_STEUER_VORANMELDG" NUMBER, 
	"DATUM_STEUERB_UEBERG" DATE, 
	"DATUM_FINANZAMT_UEBERG" DATE, 
	"GESAMT_BETRAG" NUMBER, 
	"GEBUEHREN" NUMBER, 
	"DATUM_LEX_BUCHUNG_OK" DATE, 
	"DATUM_VAR" VARCHAR2(500 BYTE), 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("COMM") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_KTO_KONTO_AUSZUG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_KONTO_AUSZUG" 
   (	"PK_KTO_KONTO_AUSZUG" NUMBER, 
	"FK_KTO_BANKKONTO" NUMBER, 
	"FK_KTO_KONTO_AUSZUG" NUMBER, 
	"JAHR" NUMBER, 
	"MONAT" NUMBER, 
	"ANFANGSDATUM" DATE, 
	"ENDDATUM" DATE, 
	"ABHOLDATUM" DATE, 
	"FK_BEL_BELEG" NUMBER, 
	"KOMMENTAR" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"ANFANGSBETRAG" NUMBER, 
	"ENDBETRAG" NUMBER, 
	"FK_BAS_KAL_ABHOLDATUM" NUMBER, 
	"FK_BAS_KAL_ANFANGSDATUM" NUMBER, 
	"FK_BAS_KAL_ENDDATUM" NUMBER, 
	"DATUM_OK" DATE, 
	"FK_STD_KONTO_AUSZUG_TYPE" NUMBER, 
	"BETRAG_VORJAHR" NUMBER, 
	"DATUM_OK_VORJAHR" DATE, 
	"BETRAG_AKTUELLES_JAHR" NUMBER, 
	"DATUM_OK_AKTUELLES_JAHR" DATE, 
	"BETRAG_FOLGEJAHR" NUMBER, 
	"DATUM_OK_FOLGEJAHR" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_KONTO_BUCH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_KONTO_BUCH" 
   (	"PK_KTO_KONTO_BUCH" VARCHAR2(20 BYTE), 
	"FK_KTO_BANKKONTO" NUMBER, 
	"Buchungstag" DATE, 
	"Wertstellung" DATE, 
	"Umsatzart" VARCHAR2(255 BYTE), 
	"Buchungstext" CLOB, 
	"BETRAG" BINARY_DOUBLE, 
	"WAEHRUNG" VARCHAR2(255 BYTE), 
	"Auftraggeberkonto" BINARY_DOUBLE, 
	"Bankleitzahl Auftraggeberkonto" BINARY_DOUBLE, 
	"IBAN Auftraggeberkonto" VARCHAR2(255 BYTE), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_STD_KTO_KONTOTYP" NUMBER, 
	"FK_BAS_KAT_KONTO_BUCH" NUMBER, 
	"Bemerkungen" VARCHAR2(255 BYTE), 
	"LFD_SUMME" NUMBER, 
	"Beleg" DATE, 
	"Unternehmen" VARCHAR2(255 BYTE), 
	"Betrag Ursprung" BINARY_DOUBLE, 
	"WAEHRUNG_URSPRUNG" VARCHAR2(255 BYTE), 
	"Belastete Kreditkarte" BINARY_DOUBLE, 
	"Kategorie" VARCHAR2(255 BYTE), 
	"Wertstellungsmonat" BINARY_DOUBLE, 
	"Datum" DATE, 
	"Uhrzeit" DATE, 
	"Zeitzone" VARCHAR2(255 BYTE), 
	"Name" VARCHAR2(255 BYTE), 
	"Typ" VARCHAR2(255 BYTE), 
	"Status" VARCHAR2(255 BYTE), 
	"Brutto" BINARY_DOUBLE, 
	"GEBUEHR" VARCHAR2(20 BYTE), 
	"Netto" BINARY_DOUBLE, 
	"Absender_Email" VARCHAR2(255 BYTE), 
	"EMPFAENGER_EMAIL" VARCHAR2(255 BYTE), 
	"Transaktionscode" VARCHAR2(255 BYTE), 
	"Lieferadresse" VARCHAR2(255 BYTE), 
	"Adress-Status" VARCHAR2(255 BYTE), 
	"Artikelbezeichnung" VARCHAR2(255 BYTE), 
	"Artikelnummer" VARCHAR2(255 BYTE), 
	"Versand_Bearbeitungsgeb" VARCHAR2(255 BYTE), 
	"Versicherungsbetrag" VARCHAR2(255 BYTE), 
	"Umsatzsteuer" VARCHAR2(255 BYTE), 
	"Option 1 Name" VARCHAR2(255 BYTE), 
	"Option 1 Wert" VARCHAR2(255 BYTE), 
	"Option 2 Name" VARCHAR2(255 BYTE), 
	"Option 2 Wert" VARCHAR2(255 BYTE), 
	"ZUGEHOERIGER_TRANSAKTIONSCODE" VARCHAR2(255 BYTE), 
	"Rechnungsnummer" VARCHAR2(255 BYTE), 
	"Zollnummer" VARCHAR2(255 BYTE), 
	"Anzahl" VARCHAR2(20 BYTE), 
	"Empfangsnummer" VARCHAR2(255 BYTE), 
	"Guthaben" BINARY_DOUBLE, 
	"Adresszeile 1" VARCHAR2(255 BYTE), 
	"Adresszusatz" VARCHAR2(255 BYTE), 
	"Ort" VARCHAR2(255 BYTE), 
	"Bundesland" VARCHAR2(255 BYTE), 
	"PLZ" VARCHAR2(255 BYTE), 
	"Land" VARCHAR2(255 BYTE), 
	"Telefon" VARCHAR2(255 BYTE), 
	"Betreff" VARCHAR2(255 BYTE), 
	"Hinweis" VARCHAR2(255 BYTE), 
	"LAENDERVORWAHL" VARCHAR2(255 BYTE), 
	"Auswirkung_Guthaben" VARCHAR2(255 BYTE), 
	"OLD_ID" NUMBER, 
	"FK_STD_KTO_SRC" VARCHAR2(20 BYTE), 
	"FK_BAS_KAL_ARBEITSTAG_BUCH" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG_WERTST" NUMBER, 
	"FK_KTO_KONTO_AUSZUG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("Buchungstext") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_KTO_KREDITKARTE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_KREDITKARTE" 
   (	"ID" NUMBER, 
	"Buchungstag" DATE, 
	"Beleg" DATE, 
	"Unternehmen" VARCHAR2(255 BYTE), 
	"Betrag" NUMBER, 
	"WAEHRUNG" VARCHAR2(255 BYTE), 
	"Betrag Ursprung" NUMBER, 
	"WAEHRUNG_URSPRUNG" VARCHAR2(255 BYTE), 
	"Belastete Kreditkarte" NUMBER, 
	"KATEGORIE" VARCHAR2(255 BYTE), 
	"Wertstellungsmonat" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_STD_KTO_KONTOTYP" NUMBER, 
	"Dummy" VARCHAR2(5 BYTE), 
	"Referenz" VARCHAR2(20 BYTE), 
	"FK_MAIN_BELEG" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_BAS_KAL_BUCHUNGSTAG" NUMBER, 
	"FK_BEL_BELEG" NUMBER, 
	"BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FK_KTO_BANKKONTO" NUMBER, 
	"KONTOSTAND" NUMBER, 
	"WIEDERHOLUNG" VARCHAR2(20 BYTE), 
	"NAECHSTE_ZAHLUNG" DATE, 
	"FK_BUCHUNG_STEUER" NUMBER, 
	"FK_KTO_VORGANG" NUMBER, 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"DUPL_DATUM_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"DATUM_LEX_BUCHUNG_OK" DATE, 
	"FK_EIN_AUS" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_PAYPAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_PAYPAL" 
   (	"ID" NUMBER(30,10), 
	"Datum" TIMESTAMP (6), 
	"Uhrzeit" TIMESTAMP (6), 
	"Zeitzone" VARCHAR2(4000 BYTE), 
	"Name" VARCHAR2(4000 BYTE), 
	"Typ" VARCHAR2(4000 BYTE), 
	"Status" VARCHAR2(4000 BYTE), 
	"WAEHRUNG" VARCHAR2(4000 BYTE), 
	"Brutto" NUMBER, 
	"GEBUEHR" NUMBER, 
	"Netto" NUMBER, 
	"Absender_Email" VARCHAR2(4000 BYTE), 
	"EMPFAENGER_EMAIL" VARCHAR2(4000 BYTE), 
	"Transaktionscode" VARCHAR2(4000 BYTE), 
	"Lieferadresse" VARCHAR2(4000 BYTE), 
	"Adress-Status" VARCHAR2(4000 BYTE), 
	"Artikelbezeichnung" VARCHAR2(4000 BYTE), 
	"Artikelnummer" VARCHAR2(4000 BYTE), 
	"Versand_Bearbeitungsgeb" VARCHAR2(4000 BYTE), 
	"Versicherungsbetrag" VARCHAR2(4000 BYTE), 
	"Umsatzsteuer" VARCHAR2(4000 BYTE), 
	"Option 1 Name" VARCHAR2(4000 BYTE), 
	"Option 1 Wert" VARCHAR2(4000 BYTE), 
	"Option 2 Name" VARCHAR2(4000 BYTE), 
	"Option 2 Wert" VARCHAR2(4000 BYTE), 
	"ZUGEHOERIGER_TRANSAKTIONSCODE" VARCHAR2(4000 BYTE), 
	"Rechnungsnummer" VARCHAR2(4000 BYTE), 
	"Zollnummer" VARCHAR2(4000 BYTE), 
	"Anzahl" VARCHAR2(4000 BYTE), 
	"Empfangsnummer" VARCHAR2(4000 BYTE), 
	"Guthaben" VARCHAR2(4000 BYTE), 
	"Adresszeile 1" VARCHAR2(4000 BYTE), 
	"Adresszusatz" VARCHAR2(4000 BYTE), 
	"Ort" VARCHAR2(4000 BYTE), 
	"Bundesland" VARCHAR2(4000 BYTE), 
	"PLZ" VARCHAR2(4000 BYTE), 
	"Land" VARCHAR2(4000 BYTE), 
	"Telefon" VARCHAR2(4000 BYTE), 
	"Betreff" VARCHAR2(4000 BYTE), 
	"Hinweis" VARCHAR2(4000 BYTE), 
	"LAENDERVORWAHL" VARCHAR2(4000 BYTE), 
	"Auswirkung_Guthaben" VARCHAR2(4000 BYTE), 
	"FK_BAS_KAT_KATEGORIE" NUMBER(30,10), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER(30,10), 
	"FK_STD_KTO_KONTOTYP" NUMBER(30,10), 
	"FK_KTO_VORGANG" NUMBER(30,10), 
	"FK_MAIN_KEY" NUMBER(30,10), 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER(30,10), 
	"FK_ZUORD_ERL" NUMBER(30,10), 
	"FK_BEL_BELEG" NUMBER(30,10), 
	"WIEDERHOLUNG" VARCHAR2(255 BYTE), 
	"NAECHSTE_ZAHLUNG" TIMESTAMP (6), 
	"FK_BUCHUNG_STEUER" NUMBER(30,10), 
	"FK_KTO_BANKKONTO" NUMBER, 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"DUPL_DATUM_OK" DATE, 
	"DUPL_BERMERKUNG" VARCHAR2(4000 BYTE), 
	"DATUM_LEX_BUCHUNG_OK" DATE, 
	"FK_EIN_AUS" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_PP_VORGANG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_PP_VORGANG" 
   (	"ID" VARCHAR2(255 BYTE), 
	"Bezeichnung" VARCHAR2(255 BYTE), 
	"Geschäftspartner" VARCHAR2(255 BYTE), 
	"Betrag" VARCHAR2(255 BYTE), 
	"Betrag_Fremdwährung" VARCHAR2(255 BYTE), 
	"Fremdwährung" VARCHAR2(255 BYTE), 
	"Rechnungsnummer" VARCHAR2(255 BYTE), 
	"Abschlusstyp" VARCHAR2(255 BYTE), 
	"Abschlussstatus" VARCHAR2(255 BYTE), 
	"Abschlussdatum" TIMESTAMP (6), 
	"Abschlusszeit" TIMESTAMP (6), 
	"OK" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_PP_VORGANG_DOWNLOAD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_PP_VORGANG_DOWNLOAD" 
   (	"ID" VARCHAR2(255 BYTE), 
	"FK_Download" VARCHAR2(255 BYTE), 
	"FK_KTO_PP_VORGANG" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_SEPA_VORLAGEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_SEPA_VORLAGEN" 
   (	"TYP" VARCHAR2(26 BYTE), 
	"EMPFAENGERNAME" VARCHAR2(128 BYTE), 
	"BETRAG" NUMBER(38,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(256 BYTE), 
	"IBAN" VARCHAR2(26 BYTE), 
	"ID" NUMBER, 
	"JAHR" NUMBER, 
	"FK_ADR_LAND" NUMBER, 
	"CREATION_DATE" DATE DEFAULT Sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_KTO_TAGESGELDKONTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KTO_TAGESGELDKONTO" 
   (	"ID" NUMBER, 
	"Buchungstag" DATE, 
	"Wertstellung" DATE, 
	"Umsatzart" VARCHAR2(255 BYTE), 
	"Buchungstext" CLOB, 
	"Betrag" NUMBER, 
	"WAEHRUNG" VARCHAR2(255 BYTE), 
	"Auftraggeberkonto" NUMBER, 
	"Bankleitzahl Auftraggeberkonto" VARCHAR2(4000 BYTE), 
	"IBAN Auftraggeberkonto" VARCHAR2(255 BYTE), 
	"KATEGORIE" VARCHAR2(255 BYTE), 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_BAS_KAL_BUCHUNGSTAG" NUMBER, 
	"FK_BAS_KAL_WERTSTELLUNG" NUMBER, 
	"FK_BAS_KTO_KONTOTYP" NUMBER, 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"KONTOSTAND" NUMBER, 
	"WIEDERHOLUNG" VARCHAR2(20 BYTE), 
	"NAECHSTE_ZAHLUNG" DATE, 
	"FK_BUCHUNG_STEUER" NUMBER, 
	"FK_KTO_BANKKONTO" NUMBER, 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"DATUM_LEX_BUCHUNG_OK" DATE, 
	"FK_EIN_AUS" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"FK_STD_CONTR_STATUS_VERW" NUMBER, 
	"DATUM_STATUS_VERW" DATE, 
	"DATUM_STATUS_KAT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("Buchungstext") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_KZ_KENNZAHLEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_KZ_KENNZAHLEN" 
   (	"PK_KZ_KENNZAHLEN" NUMBER, 
	"KENNZAHL" VARCHAR2(4000 BYTE), 
	"DESCR" VARCHAR2(4000 BYTE), 
	"DESCR_CALC" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"DATUM" DATE, 
	"FK_STD_KENNZAHLTYP" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEHR_EINSENDEAUFGABE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEHR_EINSENDEAUFGABE" 
   (	"PK_LEHR_EINSENDEAUFGABE" NUMBER(30,10), 
	"EINSENDEAUFGABE" VARCHAR2(255 BYTE), 
	"FK_LEHR_LEHRGANG" NUMBER(30,10), 
	"FK_BUCH_BUCH" NUMBER(30,10), 
	"EINGESENDET_AM" TIMESTAMP (6), 
	"NOTE" VARCHAR2(255 BYTE), 
	"BEWERTET_AM" TIMESTAMP (6), 
	"FK_KON_TUTOR" NUMBER(30,10), 
	"FK_STD_LEHR_EINSENDEAUFGABEN_STATUS" NUMBER(30,10), 
	"FK_KON_LEHR_LEHRGANGSLEITER" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"PUNKTE_GES" NUMBER(30,10), 
	"PUNKTE_ERR" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEHR_FRAGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEHR_FRAGE" 
   (	"PK_LEHR_FRAGE" NUMBER, 
	"FK_LEHR_EINSENDEAUFGABE" NUMBER, 
	"FRAGENNR" NUMBER, 
	"FRAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEHR_LEHRGANG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEHR_LEHRGANG" 
   (	"PK_LEHR_LEHRGANG" NUMBER(30,10), 
	"LEHRGANG" VARCHAR2(255 BYTE), 
	"LEHRGANGSNUMMER" NUMBER(30,10), 
	"FK_LEHR_UNIVERSITÄT" NUMBER(30,10), 
	"FK_LEHR_LEHRGANGSLEITER" NUMBER(30,10), 
	"MTL_STUDIENGEBÜHR" NUMBER(30,10), 
	"LEHRGANGSDAUER_SOLL" NUMBER(30,10), 
	"BETRAG_GESAMT_SOLL" NUMBER(30,10), 
	"BEGINN" TIMESTAMP (6), 
	"ENDE" TIMESTAMP (6), 
	"BENUTZERKENNUNG" VARCHAR2(255 BYTE), 
	"PASSWORT" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"ZERTIFIZIERUNG" NUMBER(30,10), 
	"ZERTIFIZIERUNG_ABGESCHLOSSEN" NUMBER(30,10), 
	"ABGESCHLOSSEN" NUMBER(30,10), 
	"FK_PROJ_PROJEKT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEHR_LOESUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEHR_LOESUNG" 
   (	"PK_LEHR_LOESUNG" NUMBER, 
	"LOES_NR" VARCHAR2(4000 CHAR), 
	"LOESUNG" VARCHAR2(4000 CHAR), 
	"LOESUNG_CLOB" CLOB, 
	"KORR" NUMBER, 
	"EIG_ANTW" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("LOESUNG_CLOB") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_LEX
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX" 
   (	"BELEGDATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSDATUM" VARCHAR2(26 BYTE), 
	"BUCHUNGSPERIODE" NUMBER(3,0), 
	"BELEGNUMMERNKREIS" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" NUMBER(*,0), 
	"BUCHUNGSTEXT" VARCHAR2(128 BYTE), 
	"BUCHUNGSBETRAG" NUMBER(9,2), 
	"SOLLKONTO" NUMBER(6,0), 
	"HABENKONTO" NUMBER(6,0), 
	"STEUERSCHLUESSEL" NUMBER(3,0), 
	"KOSTENSTELLE" VARCHAR2(26 BYTE), 
	"KOSTENTRAEGER" VARCHAR2(26 BYTE), 
	"BUCHUNGSBETRAG_EURO" NUMBER(9,2), 
	"WAEHRUNG" VARCHAR2(26 BYTE), 
	"ZUSATZANGABEN" NUMBER(3,0), 
	"OK" NUMBER DEFAULT 0, 
	"STORNO" NUMBER DEFAULT 0, 
	"PK_LEX" NUMBER, 
	"BEMERKUNGEN" VARCHAR2(4000 BYTE), 
	"DATUM_OK" DATE, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"JAHR_BELEGNUMMER" VARCHAR2(4000 BYTE), 
	"JAHR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENBLATT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENBLATT" 
   (	"BUCHUNGSNUMMER" NUMBER(38,0), 
	"KONTONUMMER" VARCHAR2(26 BYTE), 
	"KONTOBEZEICHNUNG" VARCHAR2(128 BYTE), 
	"BELEGDATUM" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"GEGENKONTO" VARCHAR2(4000 BYTE), 
	"SOLLBETRAG_EUR" NUMBER, 
	"HABENBETRAG_EUR" NUMBER(38,2), 
	"USTKONTO" VARCHAR2(26 BYTE), 
	"UST" NUMBER(38,0), 
	"DATUM_OK" DATE, 
	"OK" NUMBER, 
	"SOLLBETRAG_EUR1" NUMBER, 
	"ID" NUMBER, 
	"BUCHUNGSSTATUS" NUMBER, 
	"JAHR" NUMBER, 
	"KST" VARCHAR2(4000 BYTE), 
	"KTR" VARCHAR2(4000 BYTE), 
	"FK_BAS_KAL_BELEGDATUM" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_KON_GESCHAEFTSPARTNER" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER, 
	"FK_LEX_RELATION" VARCHAR2(400 BYTE), 
	"FK_LEX_RELATION_SUB" VARCHAR2(400 BYTE), 
	"DATUM_STEUER_OK" DATE, 
	"SPLIT_NR" NUMBER, 
	"FLG_SPLIT_BUCH" NUMBER, 
	"SPLIT_NR_MAN" NUMBER, 
	"DATUM_SPLIT_OK" DATE, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_STEU_STEUER_VORANMELDG" NUMBER, 
	"DATUM_STEUERB_ÜBERG" DATE, 
	"DATUM_FINANZAMT_ÜBERG" DATE, 
	"LOAD_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN" 
   (	"KONTO_NUMMER" VARCHAR2(26 BYTE), 
	"KONTENBEZEICHNUNG" VARCHAR2(128 BYTE), 
	"KONTENKATEGORIE" VARCHAR2(4000 BYTE), 
	"KONTENUNTERART" VARCHAR2(4000 BYTE), 
	"UST_POS" NUMBER(*,0), 
	"UST" NUMBER(*,0), 
	"STEUER" VARCHAR2(4000 BYTE), 
	"UST_POSE" NUMBER(*,0), 
	"ZUORDNUNG_EUE" VARCHAR2(4000 BYTE), 
	"ZUORDNUNG_AKTIVA" VARCHAR2(4000 BYTE), 
	"ZUORDNUNG_PASSIVA" VARCHAR2(4000 BYTE), 
	"ZUORDNUNG_GUV" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_GRP" 
   (	"PK_KONTENPLAN" NUMBER, 
	"JAHR" NUMBER, 
	"VERSION" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_KONTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN" 
   (	"PK_LEX_KONTENPLAN_KONTEN" NUMBER, 
	"KONTEN_NR_EXT" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"FK_LEX_KONTENPLAN" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_GRP" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_GRP2" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_KL" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_TYP" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_KONTEN_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_GRP" 
   (	"PK_LEX_KONTENPLAN_KONTEN_GRP" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"KONTENNR_EXT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_KONTEN_KAT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT" 
   (	"PK_LEX_KONTENPLAN_KONTEN_KAT" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"FK_LEX_KONTENPLANLEX_" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_KAT_GRP" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_KONTEN_KAT_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT_GRP" 
   (	"PK_LEX_KONTENPLAN_KONTEN_KAT_GRP" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"FK_LEX_KONTENPLAN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_KONTEN_KL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KL" 
   (	"PK_KONTENPLAN_KONTEN_KL" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"FK_KONTENPLAN" NUMBER, 
	"VON" NUMBER, 
	"BIS" NUMBER, 
	"KT_KL_EXT" NUMBER, 
	"KTO_TYP_GRP" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_KONTEN_TYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_TYP" 
   (	"PK_KONTENPLAN_KONTEN_TYP" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_KONTENPLAN_NEU
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_KONTENPLAN_NEU" 
   (	"NR" NUMBER(38,0), 
	"DATEV" VARCHAR2(4000 BYTE), 
	"DREIECKSG" VARCHAR2(4000 BYTE), 
	"ERW_NAME" VARCHAR2(4000 BYTE), 
	"GESPERRT" VARCHAR2(4000 BYTE), 
	"IGL" VARCHAR2(4000 BYTE), 
	"KATEGORIE" VARCHAR2(4000 BYTE), 
	"KONTOART" VARCHAR2(4000 BYTE), 
	"UST_ALT" VARCHAR2(4000 BYTE), 
	"UST_NEU" VARCHAR2(4000 BYTE), 
	"UST_ERKL" NUMBER(38,0), 
	"UST_POS_ALT" NUMBER(38,0), 
	"UST_POS_NEU" NUMBER(38,0), 
	"VERDICHTET" VARCHAR2(4000 BYTE), 
	"NAME" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_LONG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_LONG" 
   (	"BELEGDAT" VARCHAR2(26 BYTE), 
	"ABSCHLUSS" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(26 BYTE), 
	"BENUTZER" VARCHAR2(26 BYTE), 
	"BETRAGDM" NUMBER(8,2), 
	"BETRAGEUR" NUMBER(8,2), 
	"BUCHDAT" VARCHAR2(26 BYTE), 
	"NR" NUMBER(6,0), 
	"HABENDM" NUMBER(8,2), 
	"HABENEUR" NUMBER(8,2), 
	"HABEN" NUMBER(8,2), 
	"JOUR_DAT" VARCHAR2(26 BYTE), 
	"RELATION" VARCHAR2(26 BYTE), 
	"SOLLDM" NUMBER(8,2), 
	"SOLLEUR" NUMBER(8,2), 
	"SOLL" NUMBER(8,2), 
	"SPERRE" VARCHAR2(26 BYTE), 
	"STAPEL" VARCHAR2(26 BYTE), 
	"STATUS" VARCHAR2(26 BYTE), 
	"STATUS_DAT" VARCHAR2(26 BYTE), 
	"UST_H_DM" VARCHAR2(26 BYTE), 
	"UST_H_EUR" VARCHAR2(26 BYTE), 
	"UST_HABEN" VARCHAR2(26 BYTE), 
	"UST_S_DM" NUMBER(6,2), 
	"UST_S_EUR" NUMBER(6,2), 
	"UST_SOLL" NUMBER(6,2), 
	"UST_DM" NUMBER(6,2), 
	"UST_EUR" NUMBER(6,2), 
	"UST" NUMBER(6,2), 
	"UST_KTO" NUMBER(6,0), 
	"UST_KTO_H" VARCHAR2(26 BYTE), 
	"UST_KTO_S" NUMBER(6,0), 
	"UST_PROZ" NUMBER(4,0), 
	"UST_TEXT" VARCHAR2(26 BYTE), 
	"PERIODE" NUMBER(3,0), 
	"BELEGNR" NUMBER(6,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"BETRAG" NUMBER(8,2), 
	"WHRG" VARCHAR2(26 BYTE), 
	"SOLLKTO" NUMBER(6,0), 
	"HABENKTO" NUMBER(6,0), 
	"ZUSATZANG" VARCHAR2(26 BYTE), 
	"NOTIZ" VARCHAR2(26 BYTE), 
	"KST" VARCHAR2(26 BYTE), 
	"KTR" VARCHAR2(26 BYTE), 
	"JAHR" NUMBER, 
	"JAHR_BELEG" VARCHAR2(4000 BYTE), 
	"BEMERKUNGEN" VARCHAR2(4000 BYTE), 
	"LAST_UPDATE_DATE" DATE, 
	"DATUM_OK" DATE, 
	"FK_STD_OK_STATE" NUMBER, 
	"FK_LEX_LONG_ZUS_RELATION" VARCHAR2(20 BYTE), 
	"ÜBERGABEDATUM_AN_STB" DATE, 
	"SEL_LEX_RELATION" NUMBER, 
	"FK_LEX_RELATION_MAIN" VARCHAR2(400 BYTE), 
	"STEUER_DATUM_OK" DATE, 
	"SPLIT_NR" NUMBER, 
	"FLG_SPLIT_BUCH" NUMBER, 
	"FK_LEX_STORNO" NUMBER DEFAULT 0, 
	"DATUM_DUPL_OK" DATE, 
	"DUPL_BEMERKUNG" VARCHAR2(4000 BYTE), 
	"FK_CONTR_DUPL_STATUS" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_STEU_STEUER_VORANMLDG" NUMBER, 
	"DATUM_STEUERB_ÜBERG" DATE, 
	"DATUM_FINANZAMT_ÜBERG" DATE, 
	"FK_LEX_BELEGDAT" NUMBER, 
	"FK_LEX_JOURDAT" NUMBER, 
	"OK_ALL" NUMBER, 
	"NOK_ALL" NUMBER, 
	"BEMERKUNG_ALL" VARCHAR2(4000 CHAR), 
	"DATUM_ALL_OK" DATE, 
	"DATUM_ALL_NOK" DATE, 
	"STEUERSCHLUESSEL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_LEX_LONG"."ÜBERGABEDATUM_AN_STB" IS 'Übergabedatum an Steuerberater';
--------------------------------------------------------
--  DDL for Table T_LEX_LONG_COMM
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_LONG_COMM" 
   (	"ID" NUMBER, 
	"FK_RELATION" VARCHAR2(4000 BYTE), 
	"COMMENT_TEXT" VARCHAR2(4000 BYTE), 
	"CREATED" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"UPDATED" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_LONG_IMP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_LONG_IMP" 
   (	"BELEGDAT" VARCHAR2(26 BYTE), 
	"ABSCHLUSS" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(26 BYTE), 
	"BENUTZER" VARCHAR2(26 BYTE), 
	"BETRAGDM" NUMBER(8,2), 
	"BETRAGEUR" NUMBER(8,2), 
	"BUCHDAT" VARCHAR2(26 BYTE), 
	"NR" NUMBER(6,0), 
	"HABENDM" NUMBER(8,2), 
	"HABENEUR" NUMBER(8,2), 
	"HABEN" NUMBER(8,2), 
	"JOUR_DAT" VARCHAR2(26 BYTE), 
	"RELATION" VARCHAR2(26 BYTE), 
	"SOLLDM" NUMBER(8,2), 
	"SOLLEUR" NUMBER(8,2), 
	"SOLL" NUMBER(8,2), 
	"SPERRE" VARCHAR2(26 BYTE), 
	"STAPEL" VARCHAR2(26 BYTE), 
	"STATUS" VARCHAR2(26 BYTE), 
	"STATUS_DAT" VARCHAR2(26 BYTE), 
	"UST_H_DM" VARCHAR2(26 BYTE), 
	"UST_H_EUR" VARCHAR2(26 BYTE), 
	"UST_HABEN" VARCHAR2(26 BYTE), 
	"UST_S_DM" NUMBER(6,2), 
	"UST_S_EUR" NUMBER(6,2), 
	"UST_SOLL" NUMBER(6,2), 
	"UST_DM" NUMBER(6,2), 
	"UST_EUR" NUMBER(6,2), 
	"UST" NUMBER(6,2), 
	"UST_KTO" NUMBER(6,0), 
	"UST_KTO_H" VARCHAR2(26 BYTE), 
	"UST_KTO_S" NUMBER(6,0), 
	"UST_PROZ" NUMBER(4,0), 
	"UST_TEXT" VARCHAR2(26 BYTE), 
	"PERIODE" NUMBER(3,0), 
	"BELEGNR" NUMBER(6,0), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"BETRAG" NUMBER(8,2), 
	"WHRG" VARCHAR2(26 BYTE), 
	"SOLLKTO" NUMBER(6,0), 
	"HABENKTO" NUMBER(6,0), 
	"ZUSATZANG" VARCHAR2(26 BYTE), 
	"NOTIZ" VARCHAR2(26 BYTE), 
	"KST" VARCHAR2(26 BYTE), 
	"KTR" VARCHAR2(26 BYTE), 
	"JAHR" NUMBER, 
	"JAHR_BELEG" VARCHAR2(4000 BYTE), 
	"BEMERKUNGEN" VARCHAR2(4000 BYTE), 
	"INS_UPD_MODE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_SACHKONTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_SACHKONTEN" 
   (	"KONTO" VARCHAR2(26 BYTE), 
	"KONTO1" NUMBER(38,0), 
	"PKW" VARCHAR2(128 BYTE), 
	"RELATION_TEIL" NUMBER(38,0), 
	"RELATION" VARCHAR2(26 BYTE), 
	"BELEGDATUM" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" NUMBER(38,0), 
	"BUCHUNGSTEXT" VARCHAR2(256 BYTE), 
	"GEGENKONTO" VARCHAR2(256 BYTE), 
	"SOLLBETRAG_EUR" NUMBER(38,2), 
	"HABENBETRAG_EUR" NUMBER(38,2), 
	"UST_KONTO" NUMBER(38,0), 
	"UST_PROZ" NUMBER(38,0), 
	"UST" NUMBER(38,2), 
	"BRUTTO" NUMBER(38,2), 
	"UST_7_PROZ" NUMBER(38,2), 
	"UST_19_PROZ" NUMBER(38,2), 
	"STATUS" VARCHAR2(20 BYTE), 
	"STATUS_DATUM" DATE, 
	"LEX_STATUS" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LEX_SUSA
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LEX_SUSA" 
   (	"KONTO" NUMBER(38,0), 
	"NAME" VARCHAR2(128 BYTE), 
	"LETZTE_BUCHUNG" VARCHAR2(26 BYTE), 
	"SUMME_WJ_SOLL" NUMBER(38,2), 
	"SUMME_WJ_HABEN" NUMBER(38,2), 
	"SUMME_PER_WJ_SOLL" NUMBER(38,2), 
	"SUMME_PER_WJ_HABEN" NUMBER(38,2), 
	"SALDO_PER_WJ_SOLL" NUMBER(38,2), 
	"SALDO_PER_WJ_HABEN" NUMBER(38,2), 
	"ID" NUMBER, 
	"LOAD_DATE" DATE, 
	"DATUM_OK" DATE, 
	"OK" NUMBER, 
	"JAHR" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_STEU_STEUER_VORANMELDG" NUMBER, 
	"DATUM_STEUERB_ÜBERG" DATE, 
	"DATUM_FINANZAMT_ÜBERG" DATE, 
	"FK_LEX_ABSCHLUSS_VORANMELDG" NUMBER, 
	"FK_STEU_JAHRES_ABSCHLUSSS" NUMBER, 
	"FK_LEX_BUCH_CNT" NUMBER, 
	"KAS_KASSE_MONAT_CNT" NUMBER, 
	"KAS_KASSE_JAHR_CNT" NUMBER, 
	"FK_IMP_LOG_LOAD" NUMBER, 
	"CALC_DIFF_BETRAG" NUMBER, 
	"BUCH_BETRAG_VORPERIODE" NUMBER, 
	"BUCH_BETRAG_AKT_PERIODE" NUMBER, 
	"CALC_BUCH_BETRAG_DIFF" NUMBER, 
	"DATUM_BUCH_BETRAG_OK" DATE, 
	"EB_WERT_RELEVANT" NUMBER, 
	"EB_WERT_SOLL" NUMBER(38,2), 
	"EB_WERT_HABEN" NUMBER(38,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LOC_LOCATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LOC_LOCATION" 
   (	"PK_LOC_LOCATION" NUMBER(30,10), 
	"LOCATION" VARCHAR2(255 BYTE), 
	"FK_BAS_LOC_LOCATION_TYPE" NUMBER(30,10), 
	"FK_ADR_ADRESSE" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_LOC_LOCATION_SUB
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_LOC_LOCATION_SUB" 
   (	"PK_LOC_LOCATION_SUB" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(20 BYTE), 
	"COMM" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_ANLAGEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_ANLAGEN" 
   (	"PK_MASCH_ANLAGEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_BAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_BAND" 
   (	"PK_MASCH_BAND" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MASCH_BAND_STATION" NUMBER, 
	"BAND_BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR), 
	"FK_LOC_LOCATION" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_BAND_STATIONEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_BAND_STATIONEN" 
   (	"PK_MASCH_BAND_STATIONEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"STATIONSBEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"FK_MASCH_BAND" NUMBER, 
	"POSITION" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_KOMPONENTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_KOMPONENTEN" 
   (	"PK_MASCH_KOMPONENTEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"COMM" VARCHAR2(4000 CHAR), 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"ANZAHL" NUMBER, 
	"FK_MASCH_KOMPONENTEN_MAIN" NUMBER, 
	"FK_STD_MASCH_ZUORD_VAR_FIX" NUMBER, 
	"FK_STD_MASCH_KOMP_SORT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_MATERIAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_MATERIAL" 
   (	"PK_MASCH_MATERIAL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"STUECKKOSTEN" NUMBER, 
	"FIXKOSTEN" NUMBER, 
	"ANZAHL" NUMBER, 
	"DESCR" VARCHAR2(4000 CHAR), 
	"MATERIALBEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR), 
	"FK_STD_MASCH_ZUORD_VAR_FIX" NUMBER, 
	"GRUNDPREIS" NUMBER, 
	"FK_BAS_MON_WAEHRUNG" NUMBER, 
	"FK_STD_MASCH_MAT_KATEGORIE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_PROJ_FREMDLEISTUNGEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNGEN" 
   (	"PK_MASCH_PROJ_FREMDLEISTUNGEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER DEFAULT 0, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"POSITION" NUMBER DEFAULT 0, 
	"FREMDLEISTUNGSBEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"FK_KON_SUBUNTERNEHMEN" NUMBER DEFAULT 0, 
	"KOSTEN_NETTO" NUMBER DEFAULT 0, 
	"FIXKOSTEN" NUMBER DEFAULT 0, 
	"GESAMTKOSTEN" NUMBER DEFAULT 0, 
	"FK_PROJ_PROJEKT" NUMBER DEFAULT 0, 
	"FK_MASCH_BAND_STATION" NUMBER DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_PROJ_INBETRIEBNAHME
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHME" 
   (	"PK_MASCH_PROJ_INBETRIEBNAHME" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"FK_STD_MASCH_PROJ_INBETRIEBNAHME_TYPE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MASCH_PROJ_MATERIAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MASCH_PROJ_MATERIAL" 
   (	"PK_MASCH_PROJ_MATERIAL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER DEFAULT 0, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_PROJ_PROJEKT" NUMBER DEFAULT 0, 
	"POSITION" NUMBER DEFAULT 0, 
	"MATERIALBEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"FK_KON_LIEFERANT" NUMBER DEFAULT 0, 
	"FK_BAS_MON_CURRENCY" NUMBER DEFAULT 0, 
	"STUECKKOSTEN" NUMBER DEFAULT 0, 
	"ANZAHL" NUMBER DEFAULT 0, 
	"FIXKOSTEN" NUMBER DEFAULT 0, 
	"GESAMTKOSTEN" NUMBER DEFAULT 0, 
	"FK_MASCH_BAND_STATION" NUMBER DEFAULT 0, 
	"FK_MASCH_MATERIAL" NUMBER DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MDT_MANDANT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_MDT_MANDANT" 
   (	"PK_MDT_MANDANT" NUMBER, 
	"MANDANT" VARCHAR2(4000 BYTE), 
	"FK_ORG_UNIT" NUMBER, 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"OPT_EMAIL" VARCHAR2(4000 CHAR), 
	"OPT_PHONE" VARCHAR2(4000 CHAR), 
	"OPT_ADDRESS" VARCHAR2(4000 CHAR), 
	"OPT_FULL_NAME" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ORG_BEITRAG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ORG_BEITRAG" 
   (	"PK_BEITRAG" NUMBER, 
	"FK_BEITRAGSART" NUMBER, 
	"MONAT" NUMBER, 
	"JAHR" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"DAT_FAELLIGKEIT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ORG_UNIT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ORG_UNIT" 
   (	"PK_ORG_UNIT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"COMPANY_NAME" VARCHAR2(4000 BYTE), 
	"ORG_UNIT_NAME" VARCHAR2(4000 BYTE), 
	"ACTIVE" NUMBER, 
	"ACTIVE_FROM" DATE, 
	"ACTIVE_TO" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"FK_ORG_UNIT_TYPE" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ORG_UNIT_CHECK_OUT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ORG_UNIT_CHECK_OUT" 
   (	"PK_ORG_UNIT_CHECK_OUT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_ORG_UNIT" NUMBER, 
	"CHECK_OUT_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ORG_UNIT_REL_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ORG_UNIT_REL_TYPE" 
   (	"PK_ORG_UNIT_REL_TYPE" NUMBER, 
	"ORG_UNIT_TYPE_REL_NAME_DE" VARCHAR2(4000 BYTE), 
	"ORG_UNIT_TYPE_REL_NAME_EN" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_ORG_UNIT_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_ORG_UNIT_TYPE" 
   (	"PK_ORG_UNIT_TYPE" NUMBER, 
	"ORG_UNIT_TYPE_NAME_DE" VARCHAR2(4000 BYTE), 
	"ORG_UNIT_TYPE_NAME_EN" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PLA_PLAN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PLA_PLAN" 
   (	"PK_PLA_PLAN" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PLA_PLAN_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PLA_PLAN_DET" 
   (	"PK_PLA_PLAN_DET" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PLA_PLAN_VERSION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PLA_PLAN_VERSION" 
   (	"PK_PLA_PLAN_VERSION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PREV_PROJ_PROJECT_CALCULATION_SERVICE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE" 
   (	"PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" 
   (	"PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_PROJ_PROJECT_SIMULATION" NUMBER, 
	"NAME_OF_PRODUCT" VARCHAR2(4000 CHAR), 
	"PRODUCTION_VOLUME_UNITS" NUMBER, 
	"MATERIAL_COSTS_PER_UNIT" NUMBER, 
	"MATERIAL_COSTS_PER_YEAR" NUMBER, 
	"SUPPLY_COSTS_PER_UNIT" NUMBER, 
	"SUPPLY_COSTS_PER_YEAR" NUMBER, 
	"EMPLOYEE_WAGES_PER_UNIT" NUMBER, 
	"EMPLOYEE_WAGES_PER_YEAR" NUMBER, 
	"ADDITIONAL_STAFF_COSTS_PERCENT" NUMBER, 
	"ADDITIONAL_STAFF_COSTS_PER_UNIT" NUMBER, 
	"ADDITIONAL_STAFF_COSTS_PER_YEAR" NUMBER, 
	"RENT_PER_UNIT" NUMBER, 
	"RENT_PER_YEAR" NUMBER, 
	"MARKETING_COSTS_PER_UNIT" NUMBER, 
	"MARKETING_COSTS_PER_YEAR" NUMBER, 
	"OTHER_COSTS_PER_UNIT" NUMBER, 
	"OTHER_COSTS_PER_YEAR" NUMBER, 
	"DEPRECIATION_PER_UNIT" NUMBER, 
	"DEPRECIATION_PER_YEAR" NUMBER, 
	"INSURANCE_COSTS_PER_UNIT" NUMBER, 
	"INSURANCE_COSTS_PER_YEAR" NUMBER, 
	"BANK_COSTS_PER_UNIT" NUMBER, 
	"BANK_COSTS_PER_YEAR" NUMBER, 
	"PRIME_COSTS_PER_UNIT" NUMBER, 
	"PRIME_COSTS_PER_YEAR" NUMBER, 
	"PRIME_COSTS_PER_PRODUCT_VOLUME" NUMBER, 
	"ESTIMATED_PROFIT_IN_PERCENT" NUMBER, 
	"ESTIMATED_PROFIT_PER_UNIT" NUMBER, 
	"ESTIMATED_PROFIT_PER_YEAR" NUMBER, 
	"ESTIMATED_PROFIT_PER_PRODUCT_VOLUME" NUMBER, 
	"MINIMUM_SALES_PRICE_PER_UNIT" NUMBER, 
	"MINIMUM_SALES_PRICE_PER_YEAR" NUMBER, 
	"MINIMUM_SALES_PRICE_PER_PRODUCT_VOLUME" NUMBER, 
	"SALES_TAXES_PER_UNIT" NUMBER, 
	"SALES_TAXES_PER_PERCENT" NUMBER, 
	"SALES_TAXES_PER_YEAR" NUMBER, 
	"SALES_TAXES_PER_PRODUCT_VOLUME" NUMBER, 
	"MINIMUM_GROSS_SALES_PRICE_PER_UNIT" NUMBER, 
	"MINIMUM_GROSS_SALES_PRICE_PER_YEAR" NUMBER, 
	"MINIMUM_GROSS_SALES_PRICE_PER_PRODUCT_VOLUME" NUMBER, 
	"DESCR" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PROD_PRODUCT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PROD_PRODUCT" 
   (	"PK_PROD_PRODUCT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"PRODUCT_NAME" VARCHAR2(4000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PROJ_PROJEKT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PROJ_PROJEKT" 
   (	"PK_PROJ_PROJEKT" NUMBER(30,10), 
	"FK_KON_AUFTRAGGEBER" NUMBER(30,10), 
	"FK_KON_PROJEKTPARTNER_1" NUMBER(30,10), 
	"FK_KON_PROJEKTPARTNER_2" NUMBER(30,10), 
	"PROJEKT" VARCHAR2(255 BYTE), 
	"VON" TIMESTAMP (6), 
	"BIS" TIMESTAMP (6), 
	"AKTUELLER_STUNDENSATZ" NUMBER(30,10), 
	"PSP_ELEMENT" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"RECHNUNG_GESTELLT" NUMBER(30,10), 
	"ZAHLUNG_ABGESCHLOSSEN" NUMBER(30,10), 
	"BELEGE_ZUGEORDNET" NUMBER(30,10), 
	"KM_GERECHNET" NUMBER(30,10), 
	"PROJEKT_ABGESCHLOSSEN" NUMBER(30,10), 
	"FK_STD_PROJ_PROJEKT_ART" NUMBER(30,10), 
	"FK_LEHR_LEHRGANG" NUMBER(30,10), 
	"BILD" VARCHAR2(255 BYTE), 
	"BILD1" VARCHAR2(255 BYTE), 
	"BILD2" VARCHAR2(255 BYTE), 
	"BILD3" VARCHAR2(255 BYTE), 
	"BILD4" VARCHAR2(255 BYTE), 
	"BILD5" VARCHAR2(255 BYTE), 
	"DATEINAME" VARCHAR2(255 BYTE), 
	"DATEINAME1" VARCHAR2(255 BYTE), 
	"DATEINAME2" VARCHAR2(255 BYTE), 
	"DATEINAME3" VARCHAR2(255 BYTE), 
	"DATEINAME4" VARCHAR2(255 BYTE), 
	"DATEINAME5" VARCHAR2(255 BYTE), 
	"DESCR" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"FK_STD_PROJ_PROJEKT_STATUS" NUMBER, 
	"BILD6" BLOB, 
	"FILENAME6" VARCHAR2(4000 BYTE), 
	"BILD7" BLOB, 
	"FILENAME7" VARCHAR2(4000 BYTE), 
	"LEBENSLAUF_REL" NUMBER, 
	"FK_STD_PROF_JOB_TYPE" NUMBER, 
	"POSITION" VARCHAR2(4000 CHAR), 
	"ORT" VARCHAR2(4000 BYTE), 
	"PROJEKTINHALTE" CLOB, 
	"TOOLS" VARCHAR2(4000 BYTE), 
	"FLG_PROJ_REFERENZPROJEKT" NUMBER, 
	"TECHN" VARCHAR2(4000 BYTE), 
	"OTHER" CLOB, 
	"REFERENZEN" VARCHAR2(4000 BYTE), 
	"ABSCHLUSSNOTE" NUMBER, 
	"FK_KON_PROJEKTPARTNER_3" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"EXT_PROJEKTNUMMER" VARCHAR2(255 CHAR), 
	"FIXTERMIN_START" DATE, 
	"FIXTERMIN_ENDE" DATE, 
	"STARTDATUM_GEPLANT" DATE, 
	"STARTDATUM_IST" DATE, 
	"ENDDATUM_GEPLANT" DATE, 
	"ENDDATUM_IST" DATE, 
	"ZEITRAUM_GEPLANT" NUMBER, 
	"ZEITRAUM_IST" NUMBER, 
	"FK_STD_PROJ_ZEITRAUM_GEPL_EINHEIT" NUMBER, 
	"FK_STD_PROJ_ZEITRAUM_IST_EINHEIT" NUMBER, 
	"FK_KON_PROJEKTLEITER" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD6") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BILD7") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("PROJEKTINHALTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("OTHER") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_PROJ_PROJEKT_ANGEBOT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PROJ_PROJEKT_ANGEBOT" 
   (	"PK_PROJ_PROJEKT_ANGEBOT" NUMBER, 
	"ANGEBOTSNUMMER" VARCHAR2(4000 CHAR), 
	"FK_KON_KONTAKT_SEND_TO" NUMBER, 
	"KONTAKTLISTE" CLOB, 
	"SEND_AT" DATE, 
	"FILE1" BLOB, 
	"DESCR" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_STD_PROJ_ANGEBOT_STATUS" NUMBER, 
	"FK_STD_PROJ_ANGEBOT_FINAL" NUMBER, 
	"FINAL_DT" DATE, 
	"FK_BAS_KAL_FINAL_DT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"ANGEBOTSSUMME" NUMBER, 
	"FK_BAS_MON_CURRENCY" NUMBER, 
	"FK_KON_AUFTRAGGEBER" NUMBER, 
	"GEPLANTE_STARTDATUM" DATE, 
	"GEPLANTER_ZEITRAUM" NUMBER, 
	"FK_STD_PROJ_ZEITRAUM_EINHEIT" NUMBER, 
	"ANGEBOTSPREIS" NUMBER, 
	"FK_BAS_KAL_DATUM_PREISFESTLEGUNG" DATE, 
	"EXT_ANGEBOTSNUMMER" VARCHAR2(255 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("KONTAKTLISTE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("FILE1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_PROJ_PROJEKT_MEILENSTEINE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PROJ_PROJEKT_MEILENSTEINE" 
   (	"PK_PROJ_PROJEKT_MEILENSTEINE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"DESCR" VARCHAR2(4000 CHAR), 
	"COMM" VARCHAR2(4000 CHAR), 
	"FK_PROJ_PROJECT" NUMBER, 
	"FIXTERMIN_START" DATE, 
	"FIXTERMIN_END" DATE, 
	"STARTDATUM_GEPLANT" DATE, 
	"STARTDATUM_IST" DATE, 
	"ENDDATUM_GEPLANT" DATE, 
	"ENDDATUM_IST" DATE, 
	"PLANVERSION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PROJ_REISEKOSTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PROJ_REISEKOSTEN" 
   (	"PK_PROJ_REISEKOSTEN" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_KON_PERSON" NUMBER, 
	"FK_CNT_KM" NUMBER, 
	"FK_KM_PAUSCHALE" NUMBER, 
	"VON" DATE, 
	"FK_BSA_KAL_VON" NUMBER, 
	"BIS" DATE, 
	"FK_BAS_KAL_BIS" NUMBER, 
	"TAGEGELD" NUMBER, 
	"FK_BAS_MON_TAGEGELD" NUMBER, 
	"ANZ_UEBERNACHTUNGEN" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"RECHNUNG" BLOB, 
	"FK_RE_RECHNUNG" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("RECHNUNG") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table T_PROJ_STUNDENZETTEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_PROJ_STUNDENZETTEL" 
   (	"PK_PROJ_STUNDENZETTEL" NUMBER(30,10), 
	"BESCHREIBUNG" VARCHAR2(255 BYTE), 
	"MONAT" NUMBER(30,10), 
	"JAHR" NUMBER(30,10), 
	"FK_PROJ_PROJEKT" NUMBER(30,10), 
	"ZEITRAUM_VON" TIMESTAMP (6), 
	"ZEITRAUM_BIS" TIMESTAMP (6), 
	"ERSTELLT_AM" TIMESTAMP (6), 
	"GEZEICHNET_AM" TIMESTAMP (6), 
	"FK_KON_GEZEICHNET_VON" NUMBER(30,10), 
	"STUNDENZAHL" NUMBER(30,10), 
	"GENEHMIGT_AM" TIMESTAMP (6), 
	"EINGEREICHT_AM_PP_1" TIMESTAMP (6), 
	"EINGEREICHT_AM_PP_2" TIMESTAMP (6), 
	"BESTAETIGUNG_AM_PP_1" TIMESTAMP (6), 
	"BESTAETIGUNG_AM_PP_2" TIMESTAMP (6), 
	"KOMMENTAR" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_KON_PERSON" NUMBER, 
	"AZ_ÜBERSTUNDEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FAHRZEIT" NUMBER, 
	"FK_STD_REISE_FAHRZEIT_EINHEIT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TREE_TAB
--------------------------------------------------------

  CREATE TABLE "COMPANY"."TREE_TAB" 
   (	"VORG_LEV_ID" NUMBER, 
	"VORG_LEV_SUB_ID" NUMBER, 
	"ACT_LEV_ID" NUMBER, 
	"ACT_LEV_SUB_ID" NUMBER, 
	"NACHF_LEV_ID" NUMBER, 
	"NACHF_LEV_SUB_ID" NUMBER, 
	"LEAF_VALUE" NUMBER, 
	"VORG_LEAF_VALUE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TREE_TAB1
--------------------------------------------------------

  CREATE TABLE "COMPANY"."TREE_TAB1" 
   (	"VORG_LEV_ID" NUMBER, 
	"VORG_LEV_SUB_ID" NUMBER, 
	"ACT_LEV_ID" NUMBER, 
	"ACT_LEV_SUB_ID" NUMBER, 
	"NACHF_LEV_ID" NUMBER, 
	"NACHF_LEV_SUB_ID" NUMBER, 
	"LEAF_VALUE" NUMBER, 
	"VORG_LEAF_VALUE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_ADR_KONTINENT_LAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_ADR_KONTINENT_LAND" 
   (	"PK_REL_KONTINENT_LAND" NUMBER, 
	"FK_KONTINENT" NUMBER, 
	"FK_LAND" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_FAMILIE_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_FAMILIE_BILD" 
   (	"FK_BILD" NUMBER, 
	"FK_FAMILIE" NUMBER, 
	"PK_REL_AHN_FAMILIE_BILD" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_PERSON_ELTERN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_PERSON_ELTERN" 
   (	"PK_ELTERN" NUMBER(10,0), 
	"FK_ELTERN" NUMBER(10,0), 
	"FK_KIND" NUMBER(10,0), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_PERSON_FAMILIE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_PERSON_FAMILIE" 
   (	"PK_REL_PERSON_FAMILIE" NUMBER(10,0), 
	"FK_FAMILIE" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"HERKUNFT" VARCHAR2(255 CHAR), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_PERSON_GESCHWISTER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_PERSON_GESCHWISTER" 
   (	"PK_PERSON_GESCHWISTER" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"FK_GESCHWISTER" NUMBER(10,0), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_PERSON_LEBENSPARTNER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_PERSON_LEBENSPARTNER" 
   (	"PK_LEBENSPARTNER" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"FK_LEBENSPARTNER" NUMBER(10,0), 
	"STATUS" VARCHAR2(255 CHAR), 
	"DATUM_STANDESAMTLICH" DATE, 
	"STANDESAMT" VARCHAR2(255 CHAR), 
	"DATUM_KIRCHLICH" DATE, 
	"KIRCHE" VARCHAR2(255 CHAR), 
	"FK_ORT" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_PERSON_LEBENSPARTNER_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_PERSON_LEBENSPARTNER_BILD" 
   (	"FK_BILD" NUMBER, 
	"FK_LEBENSPARTNER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_AHN_PERSON_RELIGION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_AHN_PERSON_RELIGION" 
   (	"PK_PERSON_RELIGION" NUMBER(10,0), 
	"RELIGION" VARCHAR2(255 CHAR), 
	"FK_PERSON" NUMBER(10,0), 
	"STATUS" VARCHAR2(255 CHAR), 
	"AUSGETRETEN_AM" DATE, 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_BARGELD_BELEG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_BARGELD_BELEG" 
   (	"PK_REL_BARGELD" NUMBER, 
	"FK_BARGELD" NUMBER, 
	"FK_BELEG" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_BELEGART_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_BELEGART_GRP" 
   (	"PK_REL_BELEGART_GRP" NUMBER, 
	"FK_BEL_BELEGART" NUMBER, 
	"FK_BEL_BELEGART_GRP" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_BELEG_ARTIKEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_BELEG_ARTIKEL" 
   (	"PK_REL_BEL_BELEG_ARTIKEL" NUMBER(30,10), 
	"FK_BEL_BELEG" NUMBER(30,10), 
	"FK_WH_ART_ARTIKEL" NUMBER(30,10), 
	"MENGE" NUMBER(30,10), 
	"PREIS_NETTO" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"MWST" NUMBER(30,10), 
	"PREIS_BRUTTO" NUMBER(30,10), 
	"LITER" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_WH_ART_ARTIKELBESTANDTEIL" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_BELEG_INVENTAR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_BELEG_INVENTAR" 
   (	"PK_REL_BEL_BELEG_INVENTAR" NUMBER, 
	"FK_BEL_BELEG" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_BELEG_LOCATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_BELEG_LOCATION" 
   (	"PK_REL_BEL_LOC" NUMBER(30,10), 
	"FK_BEL_BELEG" NUMBER(30,10), 
	"FK_LOC_LOCATION" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_KONT_BUCH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_KONT_BUCH" 
   (	"PK_REL_BEL_KONT_BUCH" NUMBER, 
	"FK_IMP_BEL" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_BEL_LEX
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_BEL_LEX" 
   (	"PK_REL_BEL_LEX" NUMBER, 
	"FK_IMP_BEL" NUMBER, 
	"FK_IMP_BEL_POS" NUMBER, 
	"LEX_BELEGNUMMER" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_COMP_COMPANY_COMPANY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_COMP_COMPANY_COMPANY" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" 
   (	"PK_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" NUMBER, 
	"FK_DB_OBJ_OBJECT_LIST" NUMBER, 
	"FK_DB_OBJ_OBJECT_LIST_PREV" NUMBER, 
	"CREATED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_DB_OBJ_OBJECT_LIST_PART
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART" 
   (	"PK_REL_DB_OBJ_OBJECT_LIST_PART" NUMBER, 
	"FK_DB_OBJ_OBJECT_LIST" NUMBER, 
	"FK_BAS_DB_PART" NUMBER, 
	"CREATION_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_DB_TXT_REPLACED
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_DB_TXT_REPLACED" 
   (	"PK_REL_DB_TXT_REPLACED" NUMBER, 
	"SORT" NUMBER, 
	"DATUM" DATE, 
	"CONTEXT" VARCHAR2(4000 BYTE), 
	"FK_DB_TXT_REPLACE" NUMBER, 
	"FK_DB_TXT_REPLACE_LOG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_DOC_DOCUMENT_CONTACT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_DOC_DOCUMENT_CONTACT" 
   (	"PK_REL_DOC_CONTACT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_DOC_DOCUMENT_TYPE_USAGE_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_DOC_DOCUMENT_TYPE_USAGE_TYPE" 
   (	"PK_REL_DOC_TYPE_USAGE_TYPE" NUMBER, 
	"FK_DOC_DOCUMENT_TYPE" NUMBER, 
	"FK_DOC_USAGE_TYPE" NUMBER, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"REQUIRED" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_AIRPORT_LOCATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_AIRPORT_LOCATION" 
   (	"PK_REL_AIRPORT_LOCATION" NUMBER, 
	"FK_ARP_AIRPORT" NUMBER, 
	"FK_LOC_LOCATION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_BORD_LOG_ENTRY_PAYMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_BORD_LOG_ENTRY_PAYMENT" 
   (	"PK_BORD_LOG_ENTRY_PAY" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_BORD_LOG_ENTRY" NUMBER, 
	"FK_PAY_PAYMENT" NUMBER, 
	"ADDITIONAL_COSTS" NUMBER, 
	"CREDIT_NOTE" NUMBER, 
	"CREDIT_NOTE_CURRENCY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_FLIGHT_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_FLIGHT_DOCUMENT" 
   (	"PK_REL_DOC_FLIGHT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_HANGAR_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_HANGAR_DOCUMENT" 
   (	"PK_REL_DOC_HANGAR" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_HAN_HANGAR" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_PAYMENT_PLANE_FLIGHT_CH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_PAYMENT_PLANE_FLIGHT_CH" 
   (	"PK_PAY_PLANE_FLI_CH" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_PAY_PAYMENT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_REL_PLANE_FLIGHT_CHARTERER" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"FK_REL_PLANE_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_PLANE_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_PLANE_DOCUMENT" 
   (	"PK_REL_DOC_PLANE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_APL_PLANE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_PLANE_FLIGHT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_PLANE_FLIGHT" 
   (	"PK_PLANE_FLIGHT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_FLI_PLANE_FLIGHT_CHARTERER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_FLI_PLANE_FLIGHT_CHARTERER" 
   (	"PK_REL_PLANE_FLIGHT_CHARTERER" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_REL_PLANE_FLIGHT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_REL_FLI_PLANE_FLIGHT_CHARTERER"."FK_CST_CUSTOMER" IS 'CHARTERER';
--------------------------------------------------------
--  DDL for Table T_REL_IMP_BEL_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_IMP_BEL_BEL" 
   (	"PK_REL_IMP_BEL_BEL" NUMBER, 
	"FK_IMP_BA_BEL1" NUMBER, 
	"FK_IMP_BA_BEL2" NUMBER, 
	"FK_VORGANG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INP_BELEGE_BEL_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE" 
   (	"PK_REL_INP_BELEGE_BEL_TYPE" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_INP_BELEGE_TYPE" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" 
   (	"PK_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" NUMBER, 
	"FK_INP_BELEGE_ALL1" NUMBER, 
	"FK_INP_BELEGE_ALL2" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" 
   (	"PK_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_TEL_TELEFONKARTEN" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INV_INVENTAR_ARTIKEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INV_INVENTAR_ARTIKEL" 
   (	"PK_REL_INV_ART" NUMBER, 
	"FK_INVENTAR" NUMBER, 
	"FK_ARTIKEL" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INV_INVENTAR_BARZAHL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INV_INVENTAR_BARZAHL" 
   (	"PK_REL_INV_BARZAHL" NUMBER, 
	"FK_INVENTAR" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INV_INVENTAR_KOMPONENTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INV_INVENTAR_KOMPONENTEN" 
   (	"PK_REL_INV_INVENTAR_KOMPONENTEN" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_INV_KOMPONENTEN" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INV_INVENTAR_VERBRAUCHSMAT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INV_INVENTAR_VERBRAUCHSMAT" 
   (	"PK_REL_INV_VERBRAUCHSMAT" NUMBER(30,10), 
	"FK_INVENTAR" NUMBER(30,10), 
	"FK_VERBRAUCHSMATERIAL" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_INV_INVENTAR_ZAHLUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_INV_INVENTAR_ZAHLUNG" 
   (	"PK_REL_INV_ZAHLUNG" NUMBER, 
	"FK_INV_INVENTAR" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"ZUORDNUNGSART" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KAT_KATEGORIE_BUCH_BELEG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KAT_KATEGORIE_BUCH_BELEG" 
   (	"PK_REL_KAT_KATEGORIE_BUCH_BELEG" NUMBER, 
	"FK_BAS_KAT_KATEGORIE" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_INP_BELEGE_POS_ALL" NUMBER, 
	"FK_STD_CONTR_STATUS_KAT" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_GESCHAEFTSPARTNER_KONTAKT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_GESCHAEFTSPARTNER_KONTAKT" 
   (	"PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT" NUMBER(30,10), 
	"FK_KON_GESCHAEFTSPARTNER" NUMBER(30,10), 
	"FK_KON_KONTAKT" NUMBER(30,10), 
	"FK_ADR_ADRESSE" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_KONTAKT_KONTAKTTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_KONTAKT_KONTAKTTYP" 
   (	"PK_REL_KON_KONT" NUMBER, 
	"FK_KONTAKT" NUMBER, 
	"FK_KONTAKTTYP" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_KONTAKTPERSON_ADRESSE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_KONTAKTPERSON_ADRESSE" 
   (	"PK_REL_KONTP_ADR" NUMBER, 
	"FK_KONTAKTPERSON" NUMBER, 
	"FK_ORG_UNIT" NUMBER, 
	"FK_ADRESSE" NUMBER, 
	"FK_KONTAKT" NUMBER, 
	"FK_GESCHAEFTSPARTNER" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_PERSON_BANKKONTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_PERSON_BANKKONTO" 
   (	"PK_KTO_BANKKONTO" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_KTO_BANKKONTO" NUMBER, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_PERSON_BERUF
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_PERSON_BERUF" 
   (	"PK_PERSON_BERUF" NUMBER(10,0), 
	"BERUF" VARCHAR2(255 CHAR), 
	"FK_PERSON" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"REIHENFOLGE" NUMBER(10,0), 
	"VON" DATE, 
	"BIS" DATE, 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_PERSON_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_PERSON_BILD" 
   (	"FK_PERSON" NUMBER, 
	"FK_BILD" NUMBER, 
	"AKTUELL" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_PERSON_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_PERSON_DOCUMENT" 
   (	"PK_REL_DOC_CONTACT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_DOC_DOCUMENT" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_PERSON_KONTAKTDATEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_PERSON_KONTAKTDATEN" 
   (	"PK_PERSON_KONTAKTDATEN" NUMBER, 
	"FK_PERSON" NUMBER, 
	"FK_KONTAKTDATENART" NUMBER, 
	"KONTAKTDATEN" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KON_PERSON_WOHNORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KON_PERSON_WOHNORT" 
   (	"PK_PERSON_WOHNORT" NUMBER(10,0), 
	"FK_WOHNORT" NUMBER(10,0), 
	"FK_PERSON" NUMBER(10,0), 
	"KOMMENTAR" VARCHAR2(255 CHAR), 
	"REIHENFOLGE" NUMBER(10,0), 
	"VON" DATE, 
	"BIS" DATE, 
	"CREATION_DATE" DATE, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"MODIFY_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 BYTE), 
	"STATUS" NUMBER, 
	"ADDRESS_ZUSATZ" VARCHAR2(4000 BYTE), 
	"HAUSNUMMER" VARCHAR2(20 BYTE), 
	"FK_STRASSE" NUMBER, 
	"POSTFACH" VARCHAR2(20 BYTE), 
	"FK_ADDRESSTYP" NUMBER DEFAULT 1
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KTO_KONT_BUCH_IMP_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_IMP_BEL" 
   (	"PK_REL_KTO_KONT_BUCH_IMP_BEL" NUMBER, 
	"FK_KTO_KONTO_BUCH" NUMBER, 
	"FK_IMP_BEL" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"RELEVANTER_TEILBETRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KTO_KONT_BUCH_KONT_BUCH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" 
   (	"PK_REL_KTO_KONT_BUCH_KONT_BUCH" NUMBER, 
	"FK_KTO_KONTO_BUCH1" NUMBER, 
	"FK_KTO_KONTO_BUCH2" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"BEMERKUNG" VARCHAR2(4000 CHAR), 
	"FK_STD_BUCHUNGSVORGANG" NUMBER, 
	"FK_STD_TYPE" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KTO_KONT_BUCH_LEX_BUCH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_LEX_BUCH" 
   (	"PK_REL_KTO_KONT_BUCH_LEX_BUCH" NUMBER, 
	"FK_LEX_BUCH" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"SOLLKONTO" NUMBER, 
	"HABENKONTO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_KTO_KONTO_AUSZUG_BILD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_BILD" 
   (	"PK_KTO_KONTO_AUSZUG_BILD" NUMBER, 
	"FK_KTO_KONTO_AUSZUG" NUMBER, 
	"SEITE" NUMBER, 
	"BILD" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_REL_KTO_KONTO_AUSZUG_GIR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" 
   (	"PK_REL_KTO_KONTO_AUSZUG_GIR" NUMBER, 
	"FK_KTO_KONTO_AUSZUG" NUMBER, 
	"FK_KTO_GIROKONTO_OLD" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_LEHR_FRAGE_LOESUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_LEHR_FRAGE_LOESUNG" 
   (	"PK_LEHR_FRAGE_LOESEUNG" NUMBER, 
	"FK_LEHR_FRAGE" NUMBER, 
	"FK_LEHR_LOESUNG" NUMBER, 
	"CREATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_LEX_KONTENPLAN_KTO_KTO_KAT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_LEX_KONTENPLAN_KTO_KTO_KAT" 
   (	"PK_REL_LEX_KONTENPLAN_KTO_KTO_KAT" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_KAT" NUMBER, 
	"FK_LEX_KONTENPLAN_KONTEN_KAT_GRP" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_LEX_KTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_LEX_KTO" 
   (	"FK_MAIN_KEY" NUMBER(30,10), 
	"ID" NUMBER(30,10), 
	"Buchungstag" TIMESTAMP (6), 
	"Betrag" VARCHAR2(255 BYTE), 
	"WAEHRUNG" VARCHAR2(255 BYTE), 
	"FREMDWAEHRUNGSBETRAG" VARCHAR2(255 BYTE), 
	"Fremdwährung" VARCHAR2(255 BYTE), 
	"BUCHUNGSTEXT" VARCHAR2(4000 BYTE), 
	"FK_KATEGORIE" NUMBER(30,10), 
	"FK_STD_VERW_VERWENDUNGSZWECK" NUMBER(30,10), 
	"FK_BAS_KONTOTYP" NUMBER(30,10), 
	"FK_BAS_BUCHUNGSTAG" NUMBER(30,10), 
	"FK_BAS_WERTSTELLUNG" NUMBER(30,10), 
	"VERWENDUNGSZWECK" VARCHAR2(255 BYTE), 
	"KATEGORIE" VARCHAR2(255 BYTE), 
	"BUCHT_TAG" NUMBER(30,10), 
	"BUCHT_MONAT" NUMBER(30,10), 
	"BUCHT_JAHR" NUMBER(30,10), 
	"BUCHT_DATUM" TIMESTAMP (6), 
	"WERTT_TAG" NUMBER(30,10), 
	"WERTT_MONAT" NUMBER(30,10), 
	"WERTT_JAHR" NUMBER(30,10), 
	"WERTT_DATUM" TIMESTAMP (6), 
	"KONTOTYP" VARCHAR2(255 BYTE), 
	"FK_KTO_VORGANG" NUMBER(30,10), 
	"WIEDERHOLUNG" VARCHAR2(255 BYTE), 
	"NAECHSTE_ZAHLUNG" TIMESTAMP (6), 
	"FK_BUCHUNG_STEUER" NUMBER(30,10), 
	"FK_MAIN_KEY_SUB" NUMBER(30,10), 
	"BUCHUNGSTAG_SUB" TIMESTAMP (6), 
	"BUCHUNGSTEXT_SUB" VARCHAR2(4000 BYTE), 
	"KONTOTYP_SUB" VARCHAR2(255 BYTE), 
	"WERT_SUB" NUMBER(30,10), 
	"WERT_MAIN" NUMBER(30,10), 
	"CNT_FK_INP_BELEGE_ALL" NUMBER(30,10), 
	"SUM_STATUS" NUMBER(30,10), 
	"SUM_STATUS_S1" NUMBER(30,10), 
	"SUM_STATUS_S0" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_LEX_KTO_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_LEX_KTO_BEL" 
   (	"PK_REL_LEX_KTO_BEL" NUMBER, 
	"FK_LEX_OLD" NUMBER, 
	"FK_LEX_RELATION" VARCHAR2(4000 BYTE), 
	"FK_MAIN_KEY" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE DEFAULT sysdate, 
	"OK" NUMBER, 
	"OK_DATUM" DATE, 
	"COMM" VARCHAR2(4000 BYTE), 
	"FK_REL_LEX_KTO_BEL" NUMBER, 
	"FK_INP_BELEGE_POS_ALL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_REL_LEX_KTO_BEL"."FK_LEX_RELATION" IS 'LEXWARE_LONG';
--------------------------------------------------------
--  DDL for Table T_REL_LEX_LEX
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_LEX_LEX" 
   (	"PK_REL_LEX_LEX" NUMBER, 
	"FK_BEL_BELEGNR1" NUMBER, 
	"FK_BEL_BELEGNR2" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"BEMERKUNG" VARCHAR2(4000 CHAR), 
	"JAHR1" NUMBER, 
	"JAHR2" NUMBER, 
	"FK_LEX_RELATION1" VARCHAR2(400 BYTE), 
	"FK_LEX_RELATION2" VARCHAR2(400 BYTE), 
	"DATUM_OK" DATE, 
	"FK_REL_TYPE_LEX_LEX" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_LEX_LEX_BANKKONTO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_LEX_LEX_BANKKONTO" 
   (	"PK_REL_LEX_LEX_BANKKONTO" NUMBER, 
	"FK_KTO_BANKKONTO" NUMBER, 
	"FK_LEX_KONTO" NUMBER, 
	"VALID" NUMBER, 
	"VALID_FROM" DATE, 
	"VALID_TO" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_ANL_ANLAGE_KOMPONENTE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE" 
   (	"PK_REL_MASCH_ANL_ANLAGE_KOMPONENTE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MASCH_ANLAGE" NUMBER, 
	"FK_MASCH_KOMPONENTE" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR), 
	"FK_STD_MASCH_ZUORD_VAR_FIX" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" 
   (	"PK_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MASCH_BAND_STATION" NUMBER, 
	"FK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR), 
	"POSITION" NUMBER, 
	"ANZAHL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" 
   (	"PK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MASCH_KOMPONENTE" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR), 
	"FK_STD_MASCH_ZUORD_VAR_FIX" NUMBER, 
	"FK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" NUMBER, 
	"POSITION" NUMBER, 
	"FK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" 
   (	"PK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MASCH_KOMPONENTEN_MAIN" NUMBER, 
	"FK_MASCH_KOMPONENTEN" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" 
   (	"PK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MASCH_MATERIAL" NUMBER, 
	"FK_MASCH_MATERIAL_MAIN" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_PROJ_INBETRIEBNAHME_MATERIAL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_PROJ_INBETRIEBNAHME_MATERIAL" 
   (	"PK_REL_MASCH_PROJ_INBETRIEBNAHME_MATERIAL" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_STD_MASCH_PROJ_INBETRIEBNAHME_TYPE" NUMBER, 
	"FK_MASCH_PROJ_INBETRIEBNAHME" NUMBER, 
	"FK_MASCH_PROJ_MATERIAL" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_PROJ_INBETRIEBNAHME_PERSON
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_PROJ_INBETRIEBNAHME_PERSON" 
   (	"PK_REL_MASCH_PROJ_INBETRIEBNAHME_PERSON" NUMBER, 
	"FK_MASCH_PROJ_INBETRIEBNAHME" NUMBER, 
	"FK_KON_PERSON" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_KON_PERSON_ROLE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MASCH_PROJ_PROJEKT_ANLAGEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MASCH_PROJ_PROJEKT_ANLAGEN" 
   (	"PK_REL_MASCH_PROJ_PROJEKT_ANLAGEN" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_MASCH_ANLAGEN" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MDT_MANDANT_STD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MDT_MANDANT_STD" 
   (	"PK_REL_MDT_MANDANT_STD" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_STD" NUMBER, 
	"CREATED_ON" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_MDT_MANDANT_STD_GROUP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_MDT_MANDANT_STD_GROUP" 
   (	"PK_REL_MDT_MANDANT_STD_GROUP" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_STD_GROUP" NUMBER, 
	"CREATED_ON" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_ORG_UNIT_CON_ORG_REL_TYPE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_ORG_UNIT_CON_ORG_REL_TYPE" 
   (	"PK_ORG_UNIT_CON_ORG_REL_TYPE" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_ORG_UNIT_CONTACT" NUMBER, 
	"FK_ORG_UNIT_REL_TYPE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_ORG_UNIT_KONTAKT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_ORG_UNIT_KONTAKT" 
   (	"PK_ORG_UNIT_CON" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_ORG_UNIT" NUMBER, 
	"FK_CON_CONTACT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_PROJ_ANGEBOT_PROJEKT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_PROJ_ANGEBOT_PROJEKT" 
   (	"PK_REL_PROJ_ANGEBOT_PROJEKT" NUMBER, 
	"FK_PROJ_PROJEKT_ANGEBOT" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_PROJ_PROJECT_LOCATION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" 
   (	"PK_REL_PROJ_PROJECT_LOCATION" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_LOC_LOCATION" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"ZUORDNUNGSART" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_PROJ_PROJECT_PAYMENT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_PROJ_PROJECT_PAYMENT" 
   (	"PK_REL_PROJ_ZAHLUNG" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"FK_IMP_BA_BEL" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"ZUORDNUNGSART" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_PROJ_STUNDEN_BELEG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_PROJ_STUNDEN_BELEG" 
   (	"FK_STUNDENZETTEL" VARCHAR2(255 BYTE), 
	"FK_BELEG" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_PROJ_STUNDENZETTEL_BELEG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_PROJ_STUNDENZETTEL_BELEG" 
   (	"PK_REL_PROJ_STUNDENZETTEL_BELEG" NUMBER(30,10), 
	"FK_PROJ_STUNDENZETTEL" NUMBER(30,10), 
	"FK_BEL_BELEG" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_RE_RECHNUNG_BELEG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG" 
   (	"PK_REL_RE_RECHNUNG_BELEG" NUMBER, 
	"FK_RE_RECHNUNG" NUMBER, 
	"FK_BEL_BELEG" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_INP_BELEGE_POS_ALL" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_RE_RECHNUNG_BELEG_NEU
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG_NEU" 
   (	"PK_REL_STDZ_BEL" NUMBER, 
	"FK_STUNDENZETTEL" NUMBER, 
	"FK_BELEG" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_RE_RECHNUNG_BOOKING_PLANE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_RE_RECHNUNG_BOOKING_PLANE" 
   (	"PK_PAY_PAYMENT" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"VALUE" VARCHAR2(20 BYTE), 
	"FK_PAY_PAYMENT_TYPE" NUMBER, 
	"PAY_DATE" NUMBER, 
	"BOOKING_DATE" NUMBER, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFY_AT" DATE, 
	"FK_APL_PLANE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_RE_RECHNUNG_PLANE_FLIGHT_CH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_RE_RECHNUNG_PLANE_FLIGHT_CH" 
   (	"PK_INV_PL_FLI_CH" NUMBER, 
	"FK_MDT_MANDANT" NUMBER, 
	"FK_INV_INVOICE" NUMBER, 
	"FK_APL_PLANE" NUMBER, 
	"FK_FLI_FLIGHT" NUMBER, 
	"FK_CST_CUSTOMER" NUMBER, 
	"FK_REL_PLANE_FLIGHT" NUMBER, 
	"FK_REL_PLANE_FLIGHT_CHARTERER" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_REL_RE_RECHNUNG_PLANE_FLIGHT_CH"."FK_CST_CUSTOMER" IS 'Charterer';
--------------------------------------------------------
--  DDL for Table T_REL_RE_RECHNUNG_STUNDENZETTEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_RE_RECHNUNG_STUNDENZETTEL" 
   (	"PK_REL_RE_STDZ" NUMBER(30,10), 
	"FK_RE_RECHNUNG" NUMBER(30,10), 
	"FK_PROJ_STUNDENZETTEL" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_RE_RECHNUNG_ZAHLUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_RE_RECHNUNG_ZAHLUNG" 
   (	"PK_REL_RE_RECHNUNG_ZAHLUNG" NUMBER, 
	"FK_RE_RECHNUNG" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"RELEVANTER_TEILBETRAG" NUMBER, 
	"BEMERKUNG" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_SOL_SOLUTION_SOLUTION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_SOL_SOLUTION_SOLUTION" 
   (	"PK_REL_SOL_SOLUTION_SOLUTION" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_LOHN_INP_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_INP_BEL" 
   (	"PK_REL_STEU_STEUER_LOHN_INP_BEL" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_STEU_STEUER_LOHN_KARTE" NUMBER, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_LOHN_ZAHLUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_ZAHLUNG" 
   (	"PK_REL_STEU_STEUER_LOHN_ZAHLUNG" NUMBER, 
	"FK_STEU_STEUER_LOHNSTEUERKARTE" NUMBER, 
	"FK_MAIN_KEY" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"RELEVANTER_TEILBETRAG" NUMBER, 
	"BEMERKUNG" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_MONAT_BEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_BEL" 
   (	"PK_REL_STEU_STEUER_MONAT_BEL" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_BEL_BELEG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_MONAT_RECH
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_RECH" 
   (	"PK_REL_STEU_STEUER_MONAT_RECH" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_RE_RECHNUNG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_SATZ_GUELT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_SATZ_GUELT" 
   (	"PK_REL_STEU_STEUER_SATZ_GUELT" NUMBER, 
	"FK_STEU_STEUER_SATZ_LEX" NUMBER, 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER, 
	"GUELTIG_AB" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_VERPFL_BELEG_ORT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_ORT" 
   (	"PK_REL_STEU_STEUER_VERPFL_BELEG_ORT" NUMBER, 
	"FK_STEU_STEUER_VERPFL_MEHRAUFWD_DET" NUMBER, 
	"FK_ADR_ORT" NUMBER, 
	"FK_STD_STEU_AUSWAERTS" NUMBER, 
	"CREATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_STEU_STEUER_VERPFL_BELEG_SRC
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_SRC" 
   (	"PK_REL_STEU_STEUER_VERPFL_BELEG_SRC" NUMBER, 
	"FK_STEU_STEUER_VERPFL_MEHRAUFWD_DET" NUMBER, 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_PROJ_STUNDENZETTEL" NUMBER, 
	"COMM" VARCHAR2(20 BYTE), 
	"FK_STD_STEU_STATUS" NUMBER, 
	"CREATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_WF_WORKFLOW_WORKFLOW
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_WF_WORKFLOW_WORKFLOW" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_WH_ARTIKELTYP_ARTIKELTYP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_WH_ARTIKELTYP_ARTIKELTYP" 
   (	"PK_REL_WH_ARTIKELTYP_ARTIKELTYP" NUMBER, 
	"FK_BAS_WH_ART_ARTIKELTYP_MAIN" NUMBER, 
	"FK_BAS_WH_ART_ARTIKELTYP_SUB" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_REL_WH_LAGERORT_ARTIKEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_REL_WH_LAGERORT_ARTIKEL" 
   (	"PK_REL_LAGO_ART" NUMBER, 
	"FK_ARTIKEL" NUMBER, 
	"FK_LAGERORT" NUMBER, 
	"FK_PACKUNGSGRÖßE" NUMBER, 
	"MENGE" NUMBER, 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_RE_RECHNUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_RE_RECHNUNG" 
   (	"PK_RE_RECHNUNG" NUMBER(30,10), 
	"RECHNUNGSNUMMER" VARCHAR2(255 BYTE), 
	"RECHNUNG" VARCHAR2(255 BYTE), 
	"FK_PROJ_PROJEKT" NUMBER(30,10), 
	"RECHNUNGSDATUM" TIMESTAMP (6), 
	"ZEITRAUM_VON" TIMESTAMP (6), 
	"ZEITRAUM_BIS" TIMESTAMP (6), 
	"RECHNUNGSBETRAG_NETTO" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"MWST" NUMBER(30,10), 
	"RECHNUNGSBETRAG_BRUTTO" NUMBER(30,10), 
	"ZAHLUNGSEINGANG" TIMESTAMP (6), 
	"GEZAHLT_AM" TIMESTAMP (6), 
	"ZAHLUNGSBETRAG" NUMBER(30,10), 
	"FK_STD_RE_RECHNUNGSTYP" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_STD_KTO_ZAHLUNGSART" NUMBER(30,10), 
	"SKONTOBETRAG" NUMBER(30,10), 
	"SKONTOSATZ" NUMBER(30,10), 
	"ZAHLUNG_ABGESCHLOSSEN" NUMBER(30,10), 
	"VORSTEUER_BEZAHLT" NUMBER(30,10), 
	"STEUERENDABRECHNUNG" NUMBER(30,10), 
	"FK_KON_RECHNUNGSEMPFAENGER" NUMBER, 
	"FK_KON_RECHNUNGSSENDER" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_RE_RECHNUNG_MAHNUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_RE_RECHNUNG_MAHNUNG" 
   (	"PK_OFFENE_RECHNUNGEN" NUMBER, 
	"BETRAG" NUMBER, 
	"WAEHRUNG" VARCHAR2(20 BYTE), 
	"GESCHAEFTSPARTNER" VARCHAR2(4000 BYTE), 
	"ZWECK" VARCHAR2(4000 BYTE), 
	"GRUND" VARCHAR2(4000 BYTE), 
	"EMPFAENGER" VARCHAR2(4000 BYTE), 
	"IBAN" VARCHAR2(4000 BYTE), 
	"BANK_VERWENDUNGSZWECK" VARCHAR2(4000 BYTE), 
	"DATUM" VARCHAR2(20 BYTE), 
	"MAHNUNGSDATUM" VARCHAR2(20 BYTE), 
	"FAELLIGKEITSDATUM" VARCHAR2(20 BYTE), 
	"FK_RE_RECHNUNG" NUMBER, 
	"FK_INKASSOBUERO" NUMBER, 
	"FK_BAS_FAELLIGKEITSDATUM" NUMBER, 
	"FK_BAS_WAEHRUNG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_RE_SUB_HOTELRECHNUNGEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_RE_SUB_HOTELRECHNUNGEN" 
   (	"HOTEL" VARCHAR2(128 BYTE), 
	"ADRESSE" VARCHAR2(128 BYTE), 
	"DATUM" VARCHAR2(26 BYTE), 
	"BELEGNUMMER" VARCHAR2(26 BYTE), 
	"BELEG" VARCHAR2(20 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"ZAHLUNGSART" VARCHAR2(26 BYTE), 
	"VERWENDUNGSZWECK" VARCHAR2(26 BYTE), 
	"ZIMMER" VARCHAR2(20 BYTE), 
	"UEBERNACHTUNG" VARCHAR2(128 BYTE), 
	"FRUEHSTUECK_INKLUSIVE" VARCHAR2(26 BYTE), 
	"PARKEN" VARCHAR2(4000 BYTE), 
	"GEBUEHREN" VARCHAR2(4000 BYTE), 
	"MWST_19" VARCHAR2(4000 BYTE), 
	"MWST_BETRAG_19" VARCHAR2(4000 BYTE), 
	"MWST_7" VARCHAR2(4000 BYTE), 
	"MWST_7_BETRAG" VARCHAR2(4000 BYTE), 
	"DATUM_VON" VARCHAR2(4000 BYTE), 
	"DATUM_BIS" VARCHAR2(4000 BYTE), 
	"ZIMMER2" VARCHAR2(4000 BYTE), 
	"ANZAHL_NAECHTE" VARCHAR2(4000 BYTE), 
	"FIRMA" VARCHAR2(4000 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"PK_RE_SUB_HOTELRECHNUNGEN" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"LAND" VARCHAR2(20 BYTE), 
	"STADT" VARCHAR2(20 BYTE), 
	"FK_LOC_LOCATION" NUMBER, 
	"BEMERKUNG" VARCHAR2(4000 BYTE), 
	"BILD" BLOB, 
	"BILD1" BLOB, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"WAEHRUNG_BETRAG" VARCHAR2(20 BYTE), 
	"FK_LEX_BUCHUNG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("BILD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("BILD1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_SOL_SOLUTION
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_SOL_SOLUTION" 
   (	"PK_SOL_SOLUTION" NUMBER, 
	"SOLUTION" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_SOL_SOLUTION_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_SOL_SOLUTION_DET" 
   (	"PK_SOL_SOLUTION_DET" NUMBER, 
	"COMM" VARCHAR2(4000 CHAR), 
	"FK_SOL_SOLUTION" NUMBER, 
	"CREATED_AT" DATE, 
	"MODIFIED_AT" DATE, 
	"DESCR" VARCHAR2(4000 CHAR), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STD" 
   (	"PK_STD" NUMBER(30,10), 
	"FK_STD_GROUP" NUMBER(30,10), 
	"STD_NAME" VARCHAR2(255 BYTE), 
	"STD_VALUE" VARCHAR2(255 BYTE), 
	"COMM" VARCHAR2(255 BYTE), 
	"VALID" NUMBER(30,10), 
	"VALID_FROM" TIMESTAMP (6), 
	"VALID_TO" TIMESTAMP (6), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"MARK" NUMBER, 
	"SORT" NUMBER, 
	"FK_STD_FARBE" NUMBER, 
	"STD_NAME_ENG" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STD_GROUP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STD_GROUP" 
   (	"PK_STD_GROUP" NUMBER(30,10), 
	"STD_GROUP_NAME" VARCHAR2(255 BYTE), 
	"TABLE_NAME" VARCHAR2(255 BYTE), 
	"COL_NAME" VARCHAR2(255 BYTE), 
	"COMM" VARCHAR2(255 BYTE), 
	"VALID" NUMBER(30,10), 
	"VALID_FROM" TIMESTAMP (6), 
	"VALID_TO" TIMESTAMP (6), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"STD_GROUP_NAME_ENG" VARCHAR2(4000 BYTE), 
	"FK_MDT_MANDANT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_BESCHEID_POS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_BESCHEID_POS" 
   (	"POS" VARCHAR2(128 BYTE), 
	"BETRAG" VARCHAR2(26 BYTE), 
	"POS1" VARCHAR2(26 BYTE), 
	"STEUERNUMMER" VARCHAR2(26 BYTE), 
	"PK_STEU_STEUER_BESCHEID_POS" NUMBER, 
	"FK_STEU_STEUER_JAHR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_ERKLAERUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG" 
   (	"PK_STEU_STEUER_ERKLAERUNG" NUMBER, 
	"FK_STEU_STEUER_JAHR" NUMBER, 
	"FK_STD_STEU_STEUER_ERKLAERUNG_TYP" NUMBER, 
	"FK_STD_STEU_STEUER_ERKLAERUNG_ART" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"FK_STD_STEU_STATUS" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_STEU_STEUER_ERKLAERUNG"."FK_STD_STEU_STEUER_ERKLAERUNG_TYP" IS 'Geschäftlich / Privat';
   COMMENT ON COLUMN "COMPANY"."T_STEU_STEUER_ERKLAERUNG"."FK_STD_STEU_STEUER_ERKLAERUNG_ART" IS 'Steuerart: Einkommenssteuer / Umsatzsteuer';
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_ERKLAERUNG_ANLAGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG_ANLAGE" 
   (	"PK_STEU_STEUER_ERKLAERUNG_ANLAGE" NUMBER, 
	"FK_STEU_STEUER_ERKLAERUNG" NUMBER, 
	"FK_STD_STEU_STATUS" NUMBER, 
	"FK_STD_STEU_ERKLAERUNG_ANLAGE_TYP" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS" 
   (	"PK_STEU_STEUER_ERKLAERUNG_ANLAGE_POS" NUMBER, 
	"FK_STEU_STEUER_ERKLAERUNG_ANLAGE_POS" NUMBER, 
	"FK_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR" 
   (	"PK_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR" NUMBER, 
	"FK_STEU_STEUER_ERKLAERUNG_ANLAGE" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_JAHR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_JAHR" 
   (	"PK_STEU_STEUER_JAHR" NUMBER, 
	"JAHR" NUMBER, 
	"FAELLIGKEITSDATUM" DATE, 
	"FK_BAS_KAL_FAELLIGKEITSDATUM" NUMBER, 
	"MAHNDATUM" DATE, 
	"FK_BAS_KAL_MAHNDATUM" NUMBER, 
	"EINKOMMENSTEUERBESCHEID" BLOB, 
	"UMSATZSTEUERBESCHEID" BLOB, 
	"FK_STD_STEU_STATUS_BWA" NUMBER, 
	"FK_STD_STEU_STATUS_EUER" NUMBER, 
	"FK_STD_STEU_STATUS_JAHR" NUMBER, 
	"CREATION_DATE" DATE, 
	"FK_STD_STEU_STATUS_LEX_BUCH" NUMBER, 
	"FK_STD_STEU_STATUS_STEUERBERATER" NUMBER, 
	"DATUM_UEBERGABE_STEUERBER" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("EINKOMMENSTEUERBESCHEID") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("UMSATZSTEUERBESCHEID") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_JAHR_TODO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO" 
   (	"PK_STEU_STEUER_JAHR_TODO" NUMBER, 
	"FK_BAS_KAL_JAHR" NUMBER, 
	"FK_STEU_TODO_GRP" NUMBER, 
	"DATUM_OK" DATE, 
	"TODO" VARCHAR2(4000 BYTE), 
	"FK_STD_STEU_STATUS" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_JAHR_TODO_GRP
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO_GRP" 
   (	"PK_STEU_STEUER_JAHR_TODO_GRP" NUMBER, 
	"TODO" VARCHAR2(4000 BYTE), 
	"FK_STD_STEU_THEMA_DAUERHAFT" NUMBER, 
	"CREATION_DATE" DATE DEFAULT sysdate, 
	"FK_STD_STEU_THEMA_MONATLICH" NUMBER, 
	"FK_STD_STEU_THEMA_JAEHRLICH" NUMBER, 
	"STEUERBERATER_INVOLVIERT" NUMBER, 
	"FINANZAMT_INVOLVIERT" NUMBER, 
	"STEUERBERATER_EMPFAENGER" NUMBER, 
	"STEUERBERATER_SENDER" NUMBER, 
	"FINANZAMT_EMPFAENGER" NUMBER, 
	"FINANZAMT_SENDER" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_KRANKENKASSE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_KRANKENKASSE" 
   (	"PK_STEU_STEUER_KRANKENKASSE" NUMBER, 
	"MITGLIEDSNUMMER" VARCHAR2(20 BYTE), 
	"STEUERIDENTIFIKATIONSNUMMER" NUMBER, 
	"JAHR" NUMBER, 
	"VON" VARCHAR2(20 BYTE), 
	"BIS" VARCHAR2(20 BYTE), 
	"BEITRAGSART" VARCHAR2(4000 BYTE), 
	"BETRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_LOHN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_LOHN" 
   (	"KATEGORIE" VARCHAR2(4000 BYTE), 
	"WERT" VARCHAR2(4000 BYTE), 
	"FK_STEU_STEUER_LOHNSTEUERKARTE" NUMBER, 
	"PK_STEU_STEUER_LOHN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_LOHNSTEUERKARTE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_LOHNSTEUERKARTE" 
   (	"PK_STEU_STEUER_LOHNSTEUERKARTE" NUMBER, 
	"FK_KON_FIRMA" NUMBER, 
	"JAHR" NUMBER, 
	"VON" DATE, 
	"BIS" DATE, 
	"ETIN" VARCHAR2(20 BYTE), 
	"DATUM" DATE, 
	"IDENTIFIKATIONSNUMMER" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_MONAT
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_MONAT" 
   (	"PK_STEU_STEUER_MONAT" NUMBER, 
	"MONAT" NUMBER, 
	"JAHR" NUMBER, 
	"FAELLIGKEITSDATUM" DATE, 
	"FK_STD_STEU_STATUS" NUMBER, 
	"DATUM_OK" DATE, 
	"FK_BAS_KAL_FAELLIGKEITSTAG" NUMBER, 
	"FK_BAS_KAL_STEUER_JAHR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_MONAT_TODO
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_MONAT_TODO" 
   (	"PK_STEU_STEUER_MONAT_TODO" NUMBER, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FK_STEU_TODO_GRP" NUMBER, 
	"DATUM_OK" DATE, 
	"TODO" VARCHAR2(4000 BYTE), 
	"FK_STD_STEU_STATUS" NUMBER, 
	"CREATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_SATZ_LEX
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_SATZ_LEX" 
   (	"PK_STEU_STEUER_SATZ_LEX" NUMBER, 
	"KURZBEZEICHNUNG" VARCHAR2(20 BYTE), 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"PROZENTSATZ" NUMBER, 
	"STEUERART" VARCHAR2(4000 BYTE), 
	"UMSATZSTEUERKONTO" NUMBER, 
	"UMSATZSTEUERKONTO_N_FAELLIG" NUMBER, 
	"V_STEU_KONTO_EU" NUMBER, 
	"GUELTIG" NUMBER, 
	"GUELTIG_VON" DATE, 
	"GUELTIG_BIS" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_STEUERNUMMER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_STEUERNUMMER" 
   (	"PK_STEU_STEUERNUMMER" NUMBER, 
	"STEUERNUMMER" VARCHAR2(4000 BYTE), 
	"STEUERART" VARCHAR2(4000 BYTE), 
	"GUELTIG_VON" DATE, 
	"GUELTIG_BIS" DATE, 
	"BEMERKUNGEN" VARCHAR2(4000 BYTE), 
	"FINANZAMT" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_VERPFL_MEHRAUFWD
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" 
   (	"PK_STEU_STEUER_VERPFL_MEHRAUFWD" NUMBER, 
	"MONAT" NUMBER, 
	"JAHR" NUMBER, 
	"FK_STD_STEU_VERPFL_MEHRAUFWD_STATUS" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"CREATION_DATE" DATE, 
	"FK_STEU_STEUER_MONAT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_VERPFL_MEHRAUFWD_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" 
   (	"PK_STEU_STEUER_VERPFL_MEHRAUFWD_DET" NUMBER, 
	"FK_STEU_STEUER_VERPFL_MEHRAUFWD" NUMBER, 
	"DATUM_VERPFL_MEHRAUFWD" DATE, 
	"FK_BAS_KAL_DATUM_VERPFL_MEHRAUFWD" NUMBER, 
	"DESCR" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"FK_ADR_ORT" NUMBER, 
	"FK_STD_VERPFL_FRUEHSTUECK" NUMBER, 
	"FK_STD_VERPFL_VERPFLEGUNGSPAUSCHALE_VOLL" NUMBER, 
	"FK_STD_VERPFL_VERPFLEGUNGSPAUSCHALE_TEIL" NUMBER, 
	"FK_STD_VERPFL_VERPFLEGUNSPAUSCHALE_KUERZ" NUMBER, 
	"FK_STD_VERPFL_UEBERNACHTUNGSPAUSCHALE" NUMBER, 
	"FK_STD_STEU_VERPFL_STATUS_VP_VOLL" NUMBER, 
	"FK_STD_STEU_VERPFL_STATUS_VP_TEIL" NUMBER, 
	"FK_STD_STEU_VERPFL_STATUS_VP_KUERZ" NUMBER, 
	"FK_STD_STEU_VERPFL_STATUS_UEP" NUMBER, 
	"FK_STD_STEU_VERPFL_MEHRAUFWD_STATUS" NUMBER, 
	"CREATION_DATE" DATE, 
	"MODIFY_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_STEU_STEUER_VORANMLDG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_STEU_STEUER_VORANMLDG" 
   (	"PK_STEU_STEUER_VORANMLDG" NUMBER, 
	"MELDEMONAT" DATE, 
	"BERICHTIGTE_ANMLDG_NR" NUMBER, 
	"BELEG_NR" NUMBER, 
	"STEUERPFL_UMSAETZE" NUMBER, 
	"ABZIEHBARE_VORSTEUERBETR" NUMBER, 
	"UMSATZSTVORAUSZLG_UEBERSCHUSS" NUMBER, 
	"SENDEDATUM" DATE, 
	"TRANSAKTIONSNUMMER" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(4000 CHAR), 
	"CREATED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(4000 CHAR), 
	"MODIFIED_AT" DATE, 
	"FK_STEU_STEUER_MONAT" NUMBER, 
	"FILE1" BLOB, 
	"FILE2" BLOB, 
	"FK_STD_STEU_STATUS" NUMBER, 
	"FK_STD_STEU_TYPE_STEUERVORANMELDG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FILE1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("FILE2") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table T_TEL_RECHNUNG_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_TEL_RECHNUNG_DET" 
   (	"PK_TEL_RECHNUNG_DET" NUMBER, 
	"FK_RE_RECHNUNG" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_TEL_TELEFONKARTEN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_TEL_TELEFONKARTEN" 
   (	"TYP_TELEFON_KARTE" VARCHAR2(26 BYTE), 
	"TEL_TELEFONNUMMER" VARCHAR2(26 BYTE), 
	"VER_FL_VERTRAG" VARCHAR2(26 BYTE), 
	"VER_KAR_FL_BESTEHEND" VARCHAR2(26 BYTE), 
	"VER_ANTRAGSNUMMER" VARCHAR2(26 BYTE), 
	"TYP" VARCHAR2(26 BYTE), 
	"VER_KAR_DATENKAPAZITAET" VARCHAR2(26 BYTE), 
	"VER_KUNDENNUMMER" VARCHAR2(4000 BYTE), 
	"VER_DATUM" VARCHAR2(26 BYTE), 
	"VER_KAR_PROVIDER" VARCHAR2(26 BYTE), 
	"VER_KAR_DIENSTLEISTER" VARCHAR2(26 BYTE), 
	"KAR_PIN1" VARCHAR2(20 BYTE), 
	"KAR_KARTENNUMMER" VARCHAR2(20 BYTE), 
	"KAR_KARTENNUMMER1" VARCHAR2(20 BYTE), 
	"VER_ABLAUFDATUM" VARCHAR2(26 BYTE), 
	"BEMERKUNG" VARCHAR2(26 BYTE), 
	"VER_VERTRAGSART" VARCHAR2(26 BYTE), 
	"VER_VERTRAGSLAUFZEIT" VARCHAR2(26 BYTE), 
	"VER_KAR_DATUM2" VARCHAR2(20 BYTE), 
	"VER_AUFTRAGSNUMMER" VARCHAR2(20 BYTE), 
	"PK_TEL_TELEFONKARTEN" NUMBER, 
	"WEB_WEBSEITE" VARCHAR2(20 BYTE), 
	"WEB_BENUTZERNAME" VARCHAR2(4000 BYTE), 
	"WEB_PASSWORT" VARCHAR2(20 BYTE), 
	"KAR_PUK1" VARCHAR2(4000 BYTE), 
	"KAR_PUK2" VARCHAR2(4000 BYTE), 
	"KAR_PIN2" VARCHAR2(20 BYTE), 
	"KAR_SIMKARTENNR" VARCHAR2(4000 BYTE), 
	"GER_IMEI" VARCHAR2(20 BYTE), 
	"VER_MANDATSREFERENZNUMMER" VARCHAR2(20 BYTE), 
	"VER_PROD_PRODUKT" VARCHAR2(20 BYTE), 
	"VER_KAR_DATENUEBERTRAGUNG" VARCHAR2(20 BYTE), 
	"VER_VERTRAGSNUMMER" VARCHAR2(20 BYTE), 
	"VER_VON" DATE, 
	"VER_BIS" DATE, 
	"BEST_AUFTRAGSDATUM" DATE, 
	"COMM" VARCHAR2(4000 CHAR), 
	"KAR_SIMKARTENNR_NEU" VARCHAR2(4000 CHAR), 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_TEX_TEXTILREINIGUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_TEX_TEXTILREINIGUNG" 
   (	"NR" VARCHAR2(26 BYTE), 
	"NR2" VARCHAR2(26 BYTE), 
	"TYP" VARCHAR2(26 BYTE), 
	"TYP2" VARCHAR2(26 BYTE), 
	"DATUM" VARCHAR2(26 BYTE), 
	"ARTIKELTYP" NUMBER(5,0), 
	"ANZAHL" NUMBER(3,0), 
	"PREIS_PRO_STUECK" NUMBER(6,1), 
	"ARTIKELBEZEICHNUNG" VARCHAR2(26 BYTE), 
	"KUNDENNR" NUMBER(6,0), 
	"WERTEKARTENNR" NUMBER(11,0), 
	"VORHERIGER_RESTWERT" NUMBER(5,0), 
	"AKTUELLER_RESTWERT" NUMBER(5,0), 
	"GESAMTPREIS" NUMBER(6,1), 
	"TEXTILREINIGUNG" VARCHAR2(128 BYTE), 
	"BEMERKUNG" VARCHAR2(26 BYTE), 
	"FK_IMP_BA_BEL" NUMBER, 
	"PK_TEX_TEXTILREINIGUNG" NUMBER, 
	"FK_BAS_KAL_ARBEITSTAG" NUMBER, 
	"ZAHLUNGSART" VARCHAR2(4000 BYTE), 
	"FK_KTO_BUCHUNG" NUMBER, 
	"STEUERSATZ" NUMBER, 
	"FK_PROJ_PROJEKT" NUMBER, 
	"FK_LEX_BUCHUNG" NUMBER, 
	"FK_BEL_BELEG_ABLAGE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "COMPANY"."T_TEX_TEXTILREINIGUNG"."FK_IMP_BA_BEL" IS 'Sequence über alle Belege';
--------------------------------------------------------
--  DDL for Table T_USM_USER
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_USM_USER" 
   (	"USER_ID" NUMBER, 
	"USERNAME" VARCHAR2(4000 BYTE), 
	"BLOCKED_BY" VARCHAR2(20 BYTE), 
	"ADDRESS" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VERK_BAHN
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VERK_BAHN" 
   (	"PK_BAHN" VARCHAR2(20 BYTE), 
	"BAHNCARDNR" NUMBER, 
	"VON" DATE, 
	"BIS" DATE, 
	"KLASSE" NUMBER, 
	"RED" NUMBER, 
	"COMM" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VERS_INSURANCE_YEARLY
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VERS_INSURANCE_YEARLY" 
   (	"PK_INSURANCE_YEARLY" NUMBER, 
	"FK_INSURANCE_COMPANY" NUMBER, 
	"FK_INSURANCE_TYPE" NUMBER, 
	"VON" DATE, 
	"BIS" DATE, 
	"MELD_FINANZAMT" VARCHAR2(20 BYTE), 
	"BETRAG" NUMBER, 
	"WAEHRUNG" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE DEFAULT SYSDATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VERS_RV_AUSZUG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VERS_RV_AUSZUG" 
   (	"PK_RV_AUSZUG" NUMBER, 
	"VERS_NR" VARCHAR2(20 BYTE), 
	"FK_ARBEITSGRUPPE" NUMBER, 
	"RV_AUSZUG_DATE" DATE, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VERS_RV_AUSZUG_PAGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE" 
   (	"PK_RV_AUSZUG_PAGE" NUMBER, 
	"FK_RV_AUSZUG" NUMBER, 
	"PAGE_NUMBER" NUMBER, 
	"CREATED_AT" DATE, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" DATE, 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VERS_RV_AUSZUG_PAGE_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE_DET" 
   (	"PK_RV_AUSZUG_PAGE_DET" NUMBER, 
	"FK_RV" NUMBER, 
	"FK_RV_TYPE" NUMBER, 
	"VON" DATE, 
	"BIS" DATE, 
	"BETRAG" NUMBER, 
	"FK_WAEHRUNG" NUMBER, 
	"ZEIT" NUMBER, 
	"FK_ZEITEINHEIT" NUMBER, 
	"FK_EMPLOYMENT_TYPE" NUMBER, 
	"CREATED_AT" VARCHAR2(20 BYTE), 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"MODIFIED_AT" VARCHAR2(20 BYTE), 
	"MODIFIED_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VERS_VERSICHERUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VERS_VERSICHERUNG" 
   (	"PK_VERS_VERSICHERUNG" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"FK_STD_VERS_VERSICHERUNGSTYP" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VER_VERTRAG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VER_VERTRAG" 
   (	"PK_VER_VERTRAG" NUMBER, 
	"FK_VER_VERTRAGSTYPE" NUMBER, 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE, 
	"BEZEICHNUNG" VARCHAR2(4000 CHAR), 
	"START_DT" DATE, 
	"END_DT" DATE, 
	"VALID" NUMBER, 
	"KUENDIGUNGSFRIST" VARCHAR2(4000 CHAR), 
	"FK_STD_VER_FRIST_LANG_KURZ" NUMBER, 
	"FK_KON_PERSON_VERTRAGNEHMER" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK" 
   (	"HAUPT_MERKMAL1" VARCHAR2(4000 BYTE), 
	"HAUPT_MERKMAL1_WERT" VARCHAR2(4000 BYTE), 
	"HAUPT_MERKMAL2" VARCHAR2(4000 BYTE), 
	"HAUPT_MERKMAL2_WERT" VARCHAR2(4000 BYTE), 
	"HAUPT_MERKMAL3" VARCHAR2(4000 BYTE), 
	"HAUPT_MERKMAL3_WERT" VARCHAR2(4000 BYTE), 
	"PK_AUDI_FIN_VERTRAG_HAUPT_MERK" NUMBER, 
	"FK_FIN_VERTRAG" NUMBER, 
	"FK_VER_VERTRAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VER_VERTRAG_AUDI_FIN_POS
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_POS" 
   (	"RATE" NUMBER(4,0), 
	"FAELLIGKEIT" VARCHAR2(26 BYTE), 
	"RATENHOEHE" NUMBER(9,0), 
	"ZINSANTEIL" NUMBER(6,0), 
	"TILGUNGSANTEIL" NUMBER(9,0), 
	"RKG_ANTEILIG" NUMBER(9,0), 
	"PK_VER_VERTRAG_AUDI_FIN_POS" NUMBER, 
	"FK_VER_VERTRAG_AUDI_FIN" NUMBER, 
	"FK_KTO_BUCHUNG" NUMBER, 
	"FK_STD_POS_TYPE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_VER_VERTRAG_MIETE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_VER_VERTRAG_MIETE" 
   (	"PK_VER_VERTRAG_MIETE" NUMBER, 
	"FK_VER_VERTRAG" NUMBER, 
	"BEZEICHNUNG" VARCHAR2(4000 BYTE), 
	"COMM" VARCHAR2(4000 BYTE), 
	"KAUTION" NUMBER, 
	"ZIMMER" NUMBER, 
	"SCHLÜSSEL" NUMBER, 
	"QUADRATMETER" NUMBER, 
	"FK_VERMIETER" NUMBER, 
	"FK_DATUM_VERTRAGSABSCHLUSS" NUMBER, 
	"CREATED_AT" DATE, 
	"FK_LOCATION" NUMBER, 
	"FK_INVENTAR" NUMBER, 
	"KÜNDIGUNGSFRIST" NUMBER, 
	"FK_EINHEIT_KÜNDIGUNGSFRIST" NUMBER, 
	"FK_DATUM_MIETVERTRAGSBEGINN" NUMBER, 
	"FK_LOCATION_MIETER" NUMBER, 
	"STELLPLATZ" NUMBER, 
	"NEBENKOSTEN" NUMBER, 
	"FK_KTO_BANKVERBINDUNG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WET_NIEDERSCHLAGSMENGE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WET_NIEDERSCHLAGSMENGE" 
   (	"PK_WET_NIEDERSCHLAGSMENGE" NUMBER, 
	"JAHR" NUMBER, 
	"DATUM" DATE, 
	"FK_BAS_KAL_DATUM" NUMBER, 
	"NIEDERSCHLAGSMENGE" NUMBER, 
	"EINHEIT" VARCHAR2(20 BYTE) DEFAULT 'l', 
	"COMM" VARCHAR2(4000 BYTE), 
	"CREATED_AT" DATE DEFAULT sysdate, 
	"FK_LOC_LOCATION" NUMBER, 
	"FLG_KAL_AUFSTELLTAG" NUMBER, 
	"FLG_KAL_ABBAUTAG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WF_WORKFLOW
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WF_WORKFLOW" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WF_WORKFLOW_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WF_WORKFLOW_DET" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_ART_ARTIKEL
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_ART_ARTIKEL" 
   (	"PK_WH_ART_ARTIKEL" NUMBER(30,10), 
	"ARTIKEL" VARCHAR2(255 BYTE), 
	"FK_BAS_WH_PACKUNGSTYP" NUMBER(30,10), 
	"MENGE" NUMBER(30,10), 
	"PREIS_NETTO" NUMBER(30,10), 
	"FK_BAS_STEU_STEUER_SATZ" NUMBER(30,10), 
	"PREIS_BRUTTO" NUMBER(30,10), 
	"KOMMENTAR" VARCHAR2(255 BYTE), 
	"FK_BAS_WH_MENGENEINHEIT" NUMBER(30,10), 
	"FK_BAS_WH_ARTIKELBUENDELUNG" NUMBER(30,10), 
	"FK_STD_WH_ARTIKEL" NUMBER(30,10), 
	"FK_STD_WH_ARTIKEL_FLAG" NUMBER(30,10), 
	"FK_KON_HERSTELLER" NUMBER(30,10), 
	"FK_BAS_BAS_FARBE" NUMBER(30,10), 
	"EXT_ARTIKELNR" VARCHAR2(255 BYTE), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_M_ARTIKEL" NUMBER(30,10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_ART_ARTIKELBESTANDTEILE
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_ART_ARTIKELBESTANDTEILE" 
   (	"PK_ARTIKELBEST" NUMBER(30,10), 
	"ARTIKELBESTANDTEIL" VARCHAR2(255 BYTE), 
	"FK_ARTIKEL" NUMBER(30,10), 
	"MENGE" NUMBER(30,10), 
	"FK_PACKUNGSTYP" NUMBER(30,10), 
	"FK_ARTIKELBESTANDTEILTYP" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_ART_ARTIKEL_BESTANDTEIL_INVENTURBESTAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_ART_ARTIKEL_BESTANDTEIL_INVENTURBESTAND" 
   (	"PK_WARENEINGANG" NUMBER(30,10), 
	"MENGE" NUMBER(30,10), 
	"FK_ARTIKEL" NUMBER(30,10), 
	"DATUM" TIMESTAMP (6), 
	"FK_BELEG" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_ART_ARTIKEL_INVENTUR
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_ART_ARTIKEL_INVENTUR" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_ART_ARTIKEL_INVENTURBESTAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_ART_ARTIKEL_INVENTURBESTAND" 
   (	"PK_WARENEINGANG" NUMBER(30,10), 
	"MENGE" NUMBER(30,10), 
	"FK_ARTIKEL" NUMBER(30,10), 
	"DATUM" TIMESTAMP (6), 
	"FK_BELEG" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_ART_ARTIKEL_SOLLBESTAND
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_ART_ARTIKEL_SOLLBESTAND" 
   (	"PK_WARENBESTAND" NUMBER(30,10), 
	"MENGE" NUMBER(30,10), 
	"FK_ARTIKEL" NUMBER(30,10), 
	"DATUM" TIMESTAMP (6), 
	"MINDESTMENGE" NUMBER(30,10), 
	"GUELTIG_VON" TIMESTAMP (6), 
	"GUELTIG_BIS" TIMESTAMP (6), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_WAREN_BEWEGUNG
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_WAREN_BEWEGUNG" 
   (	"PK_WAREN_BEWEGUNG" NUMBER(30,10), 
	"FK_WAREN_BEWEGUNGSTYP" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_WH_ART_ARTIKEL" NUMBER, 
	"COMM" NUMBER, 
	"WAREN_BEWEGUNG_FROM" NUMBER, 
	"DATUM" VARCHAR2(20 BYTE), 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_BEL_BELEGE" VARCHAR2(20 BYTE), 
	"WAREN_BEWEGUNG_TO" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_WH_WAREN_BEWEGUNG_DET
--------------------------------------------------------

  CREATE TABLE "COMPANY"."T_WH_WAREN_BEWEGUNG_DET" 
   (	"PK_WH_WAREN_BEWEGUNG_DET" NUMBER(30,10), 
	"FK_WH_WAREN_BEWEGUNG" NUMBER(30,10), 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"MODIFIED_BY" VARCHAR2(255 BYTE), 
	"MODIFIED_AT" TIMESTAMP (6), 
	"FK_WH_ART_ARTIKEL" NUMBER, 
	"MENGE" NUMBER, 
	"COLUMN1" NUMBER, 
	"DATUM" VARCHAR2(20 BYTE), 
	"FK_INP_BELEGE_ALL" NUMBER, 
	"FK_BEL_BELEGE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View V_ABL_ORDNER_PAGE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ABL_ORDNER_PAGE" ("J_PAGE", "PK_ABL_ORDNER_PAGE", "PK_ABL_ORDNER", "PAGE_NUMBER", "JAHR", "ORDNER_NAME", "ORDNER_PAGE") AS 
  select jahr || ' ' || page_number j_page, pk_abl_ordner_page, pk_abl_ordner, page_number, jahr, ordner_name, jahr || ' / ' || ordner_name || ' / Seite ' || page_number ordner_page
from T_ABL_ORDNER abl_ord
  left join T_ABL_ORDNER_PAGE abl_ord_p on abl_ord.pk_abl_ordner = abl_ord_p.fk_abl_ordner
;
--------------------------------------------------------
--  DDL for View V_ADR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ADR" ("PK_ADR_ADDRESS", "FK_MDT_MANDANT", "STREET", "STREET_NO", "ZIP_CODE", "FK_ADR_CITY", "PK_ADR_CITY", "CITY", "FK_ADR_COUNTRY", "PK_ADR_COUNTRY", "COUNTRY", "PHONE_CODE") AS 
  select "PK_ADR_ADDRESS","FK_MDT_MANDANT","STREET","STREET_NO","ZIP_CODE","FK_ADR_CITY","PK_ADR_CITY","CITY","FK_ADR_COUNTRY","PK_ADR_COUNTRY","COUNTRY","PHONE_CODE"
 from adr_address adr 
   left join adr_city cit on adr.fk_adr_city = cit.pk_adr_city
   left join adr_country cou on cit.fk_adr_country =cou.pk_adr_country
;
--------------------------------------------------------
--  DDL for View V_ADR_ADRESSE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ADR_ADRESSE" ("PK_ADR_ADRESSE", "STRASSE", "HSNR", "PLZ", "ORT", "OT", "LAND", "BESCHREIBUNG", "ADR", "PK_ADR_ORT", "PK_ADR_LAND", "PK_ADR_PLZ_ORT") AS 
  select pk_adr_adresse, strasse, hsnr, plz, ort,ot, land, beschreibung, strasse || ' ' || hsnr || ', ' || plz || ' ' || ort || ' (' || ot || ')' || ', ' || land adr, pk_adr_ort, pk_adr_land, pk_adr_plz_ort
from  t_adr_adresse ad 
  left join t_adr_plz_ort plz on plz.pk_adr_plz_ort = ad.fk_adr_plz_ort
  left join t_adr_ort ort on plz.fk_adr_ort = ort.pk_adr_ort
  left join t_adr_land land on ort.fk_adr_land = land.pk_adr_land
;
--------------------------------------------------------
--  DDL for View V_ADR_ORT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ADR_ORT" ("PK_ADR_ORT", "ORT", "PK_ADR_LAND", "LAND", "KOORDINATEN", "ORT_2") AS 
  select pk_adr_ort, ort, pk_adr_land, land,koordinaten, ort_2
from t_adr_ort ort
 left join t_adr_land la on ort.fk_adr_land= la.pk_adr_land
;
--------------------------------------------------------
--  DDL for View V_ADR_PLZ_BUNDESLAND
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ADR_PLZ_BUNDESLAND" ("PK_ADR_ORT", "ORT", "PK_ADR_LAND", "LAND") AS 
  select ort."PK_ADR_ORT",ort."ORT",ort."PK_ADR_LAND",ort."LAND"
from v_adr_ort ort  
 left join t_adr_plz_ort_bundesland bl
on upper(bl.ort) = upper(ort.ort)
where bl.ort is null and pk_adr_land = 1
;
--------------------------------------------------------
--  DDL for View V_ALL_KONT_BUCH
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ALL_KONT_BUCH" ("FK_MAIN_KEY") AS 
  select fk_main_key
from t_KTO_GIROKONTO
union
select fk_main_key
from t_KTO_KREDITKARTE
union
select fk_main_key
from t_KTO_TAGESGELDKONTO
union
select fk_main_key
from t_KTO_PAYPAL
;
--------------------------------------------------------
--  DDL for View V_APX_BRANCH_FROM_TO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_APX_BRANCH_FROM_TO" ("PAGE_FROM", "PAGE_TO", "WORKSPACE", "WORKSPACE_DISPLAY_NAME", "APPLICATION_ID", "APPLICATION_NAME", "PAGE_ID", "PAGE_NAME", "BRANCH_NAME", "BRANCH_ACTION", "BRANCH_POINT", "WHEN_BUTTON_PRESSED", "BRANCH_TYPE", "PROCESS_SEQUENCE", "CONDITION_TYPE", "CONDITION_TYPE_CODE", "CONDITION_EXPRESSION1", "CONDITION_EXPRESSION2", "SAVE_STATE_BEFORE_BRANCH", "BUILD_OPTION", "AUTHORIZATION_SCHEME", "AUTHORIZATION_SCHEME_ID", "LAST_UPDATED_BY", "LAST_UPDATED_ON", "COMPONENT_COMMENT", "BRANCH_ID", "BRANCH_WHEN_BUTTON_ID", "COMPONENT_SIGNATURE") AS 
  select page_id page_from, substr(substr(branch_action, instr(branch_action,'APP_ID.:')+8,9),1,instr(substr(branch_action, instr(branch_action,'APP_ID.:')+8,9),':')-1) page_to, br."WORKSPACE",br."WORKSPACE_DISPLAY_NAME",br."APPLICATION_ID",br."APPLICATION_NAME",br."PAGE_ID",br."PAGE_NAME",br."BRANCH_NAME",br."BRANCH_ACTION",br."BRANCH_POINT",br."WHEN_BUTTON_PRESSED",br."BRANCH_TYPE",br."PROCESS_SEQUENCE",br."CONDITION_TYPE",br."CONDITION_TYPE_CODE",br."CONDITION_EXPRESSION1",br."CONDITION_EXPRESSION2",br."SAVE_STATE_BEFORE_BRANCH",br."BUILD_OPTION",br."AUTHORIZATION_SCHEME",br."AUTHORIZATION_SCHEME_ID",br."LAST_UPDATED_BY",br."LAST_UPDATED_ON",br."COMPONENT_COMMENT",br."BRANCH_ID",br."BRANCH_WHEN_BUTTON_ID",br."COMPONENT_SIGNATURE" 
  from apex_application_page_branches br
;
--------------------------------------------------------
--  DDL for View V_APX_BRANCH_FROM_TO_ALL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_APX_BRANCH_FROM_TO_ALL" ("TYPE", "BRANCH_NAME", "APPLICATION_ID", "PAGE_FROM", "PAGE_TO") AS 
  select 'Branch' as type, branch_name,  application_id, page_id page_from, substr(substr(branch_action, instr(branch_action,'APP_ID.:')+8,9),1,instr(substr(branch_action, instr(branch_action,'APP_ID.:')+8,9),':')-1) page_to 
   from apex_application_page_branches br 
   where workspace = 'COMPANY'
union
select 'button' type , button_name, application_id, page_id, substr(substr(redirect_url, instr(redirect_url,'APP_ID.:')+8,9),1,instr(substr(redirect_url, instr(redirect_url,'APP_ID.:')+8,9),':')-1) page_to 
  from  APEX_APPLICATION_PAGE_BUTTONS 
  where workspace = 'COMPANY'
;
--------------------------------------------------------
--  DDL for View V_BEL_BELEG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_BEL_BELEG" ("CHILD", "PARENT", "BELEGART") AS 
  select 'B' || pk_bas_bel_belegart as child,
'A' || 0 parent,
belegart

from t_bas_bel_belegart
union
select 'C' ||  pk_bel_beleg,
'B' || fk_bas_bel_belegart,
pk_bel_beleg || ' ' || datum || ' ' || beleg
from t_bel_beleg
;
--------------------------------------------------------
--  DDL for View V_BEL_BELEG_DAT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_BEL_BELEG_DAT" ("ANWESENHEITSZEIT", "AZ_MANUELL_GEPFLEGT", "AZ_M_PAUSE", "AZ_O_PAUSE", "BELEG", "BETRAG_BRUTTO", "BETRAG_NETTO", "BIS", "DATUM", "EXT_AUFTRAGSDATUM", "EXT_AUFTRAGSNR", "EXT_LEISTUNGSDATUM", "EXT_LIEFERSCHEINNR", "EXT_RECHNUNGSDATUM", "EXT_RENR", "FK_IMP_BEL_NR", "FK_IMP_NO", "FK_STD_KAL_ABRECHNUNGSZEITRAUM", "FK_STD_WH_LIEFERART", "FK_STD_KTO_BANKBELEG", "FK_STD_MON_FREMDWAEHRUNG", "FK_STD_RE_OFFEN", "FK_STD_RE_RECHNUNGSERSTELLUNG", "FK_STD_RE_RECHNUNG_ERSTELLT", "FK_STD_STEU_EINKOMMENSTEUERRELEVANT", "FK_STD_STEU_UNTERNEHMENSSTEUERRELEVANT", "FK_STD_STEU_VORSTEUERPFLEGE", "FK_STD_STEU_VORSTEUERRELEVANT", "FK_STD_WAREN_BESTELLTYP", "FK_WH_WAREN_BESTELLNR", "FRMDW_BETRAG_BRUTTO", "FRMDW_BETRAG_NETTO", "FRMDW_MWST", "FRMDW_STSATZ", "KOMMENTAR", "MWST", "PARKZEIT", "PK_BEL_BELEG", "VON") AS 
  select PK_BEL_BELEG,
       BELEG || case when fk_std_kal_feiertag = 1 then 'Feiertag' end || case when von is not null then ' von ' || to_char(von,'HH24:MI') || ' bis ' || to_char(bis,'HH24:MI') end || ' (' || pk_bel_beleg || ')' beleg,
       BETRAG_BRUTTO,
       nvl(tb.DATUM, ta.datum) datum,
       VON,
       BIS,
       AZ_O_PAUSE,
       AZ_M_PAUSE,
       ANWESENHEITSZEIT,
       PARKZEIT,
       AZ_MANUELL_GEPFLEGT,
       KOMMENTAR,
       BETRAG_NETTO,
       FK_IMP_BEL_NR,
       FK_IMP_NO,
       EXT_RENR,
       EXT_AUFTRAGSNR,
       EXT_LIEFERSCHEINNR,
       EXT_LEISTUNGSDATUM,
       EXT_RECHNUNGSDATUM,
       EXT_AUFTRAGSDATUM,
       FK_STD_RE_OFFEN,
       FK_STD_STEU_VORSTEUERRELEVANT,
       FK_STD_STEU_VORSTEUERPFLEGE,
       FK_STD_RE_RECHNUNGSERSTELLUNG,
       FK_STD_RE_RECHNUNG_ERSTELLT,
       FK_STD_KTO_BANKBELEG,
       MWST,
       FK_STD_WH_LIEFERART,
       FK_STD_STEU_EINKOMMENSTEUERRELEVANT,
       FK_STD_STEU_UNTERNEHMENSSTEUERRELEVANT,
       FK_WH_WAREN_BESTELLNR,
       FK_STD_WH_BESTELLTYP,
       FK_STD_ABR_ABRECHNUNGSZEITRAUM,
       FK_BAS_MON_FREMDWAEHRUNG,
       FRMDW_BETRAG_NETTO,
       FRMDW_STSATZ,
       FRMDW_MWST,
       FRMDW_BETRAG_BRUTTO
  from T_bel_BELEG tb
   left join t_bas_kal_arbeitstage ta on tb.fk_bas_kal_arbeitstag = ta.pk_bas_kal_arbeitstage
;
--------------------------------------------------------
--  DDL for View V_BEL_BELEG_DAT2
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_BEL_BELEG_DAT2" ("CHILD", "PARENT", "TXT", "SORT") AS 
  select 
  'B' || nvl(jahr,0) as child,
  'A' || 0 parent,
  'Jahr: ' || nvl(jahr,0) txt,
  'Jahr: ' || nvl(jahr,0) as sort
from t_bas_kal_arbeitstage
group by nvl(jahr,0)
--2. Ebene
union
select 
  'C-1' ||  nvl(jahr,0),
  'B' || nvl(jahr,0),
  'Jahr' || nvl(jahr,0),
  'A - Beleg ' || nvl(jahr,0) pk_beleg
from t_bas_kal_arbeitstage
union
select 
  'C-2' || nvl(jahr,0)  as child,
  'B'  || nvl(jahr,0)  parent,
  'Monate'  || nvl(jahr,0)   txt,
  'Jahr: '  || nvl(jahr,0)   as sort
from t_bas_kal_arbeitstage
--3. Ebene
union
select 
  'D' ||  tbel.pk_bel_beleg,
  'C-1' || nvl(jahr,0),
  tbel.pk_bel_beleg || ' ' || tbel.datum || ' ' || tbel.beleg,
  'A - Beleg ' || tbel.datum || belegart || pk_bel_beleg
from t_bel_beleg tbel
  left join t_bas_kal_arbeitstage tarb on  tbel.fk_bas_kal_arbeitstag = tarb.pk_bas_kal_arbeitstage
  left join t_bas_bel_belegart tbela on tbel.fk_bas_bel_belegart = tbela.pk_bas_bel_belegart
union
--monat
--1. Ebene
select 
  'D' ||  nvl(jahr,0) || nvl(monat,0) as child,
  'C-2' || nvl(jahr,0) parent,
  'Monat: ' || monat,
  'B - Monat ' ||  monat
from t_bas_kal_arbeitstage
union
--2. Ebene
select 
  'E-1' ||  nvl(jahr,0) || nvl(monat,0) as child,
  'D' ||  nvl(jahr,0) || nvl(monat,0) parent,
  'Monat ' ,
  'C - Monat ' ||  monat
from t_bas_kal_arbeitstage
union
select 
  'E-2' ||  nvl(jahr,0) || nvl(monat,0) || 0 as child,
  'D' ||  nvl(jahr,0) || nvl(monat,0) parent,
  'Arbeitstage ' ||  nvl(jahr,0) || nvl(monat,0) || 0 ,
  'C - Monat ' ||  monat
from t_bas_kal_arbeitstage
--2. Ebene

union
--3. Ebene
select 
  'F' ||  tbel.pk_bel_beleg,
  'E-1' || nvl(jahr,0) || nvl(monat,0),
  tbel.pk_bel_beleg || ' ' || tbel.datum || ' ' || tbel.beleg,
  'A - Beleg ' || tbel.datum || belegart || pk_bel_beleg
from t_bel_beleg tbel
  left join t_bas_kal_arbeitstage tarb on tbel.fk_bas_kal_arbeitstag= tarb.pk_bas_kal_arbeitstage
  left join t_bas_bel_belegart tbela on tbel.fk_bas_bel_belegart = tbela.pk_bas_bel_belegart
union
--arbeitstag
--1. Ebene
select 
  'F' || nvl(jahr,0) || nvl(monat,0) || nvl(PK_bas_kal_arbeitstage,0) as child,
  'E-2' || nvl(jahr,0) || nvl(monat,0) || 0 parent,
  case when FK_std_kal_Wochenende = 1 then 'WE' end || case when FK_std_kal_Arbeitstag = 1 then 'WT'  when FK_std_kal_Arbeitstag = 0 and fk_std_kal_wochenende = 0 then 'FT' end || ': ' || 'Tag: ' || Datum || ' ' 
  || Feiertag  || nvl(jahr,0) || nvl(monat,0) || 0 || pk_bas_kal_arbeitstage tg,
  'Tag: ' || datum
from t_bas_kal_arbeitstage 
--2. Ebene
union
select 
  'G' ||  tbel.pk_bel_beleg,
  'F' || nvl(jahr,0) || nvl(monat,0) || nvl(PK_bas_kal_arbeitstage,0),
  tbel.pk_bel_beleg || ' ' || tbel.datum || ' ' || tbel.beleg,
  'A - Beleg ' || tbel.datum || belegart || pk_bel_beleg || pk_bas_kal_arbeitstage
from t_bel_beleg tbel
  left join t_bas_kal_arbeitstage tarb on tbel.fk_bas_kal_arbeitstag = tarb.pk_bas_kal_arbeitstage
  left join t_bas_bel_belegart tbela on tbel.fk_bas_bel_belegart = tbela.pk_bas_bel_belegart
;
--------------------------------------------------------
--  DDL for View V_BEL_BELEG_RECHNUNG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_BEL_BELEG_RECHNUNG" ("CHILD", "PARENT", "TXT") AS 
  select 'B' || pK_re_rechnung child,
'A' || 0 parent,
pk_re_rechnung || ' ' || rechnung  as txt
from t_re_rechnung
union
select 'B' || 0 child,
'A' || 0 parent,
'Beleg ohne Rechnung'
from dual
union
select 'C1' || pk_bel_beleg child,
'B' || nvl(fk_re_rechnung,0) parent,
pk_re_rechnung || ' Beleg: ' || pk_bel_beleg || ' ' || beleg || ' ' ||  belegart || ' ' || datum || ' ' || rechnung || ' ' || rechnungsdatum || ' ' || rechnungsnummer || ' ' || std_name
from t_bel_beleg tbel
 left join t_bas_bel_belegart tbela on tbel.fk_bas_bel_belegart = tbela.pk_bas_bel_belegart
 left join t_rel_re_rechnung_beleg trrebe on trrebe.fk_bel_beleg = tbel.pk_bel_beleg
 left join t_re_rechnung tre on trrebe.fk_re_rechnung = tre.pk_re_rechnung
 left join (select * from t_std where fk_std_group = 441) tret on tre.fk_std_re_rechnungstyp = tret.std_value
union
select 'C2' || pk_proj_stundenzettel child,
'B' || nvl(fk_re_rechnung,0) parent,
pk_re_rechnung || ' Stundenzettel: ' || pk_proj_stundenzettel || ' ' ||  beschreibung 
from t_proj_stundenzettel tstdz
 left join t_rel_re_rechnung_stundenzettel tstdzb on tstdzb.fk_proj_stundenzettel = tstdz.pk_proj_stundenzettel
 left join t_re_rechnung tre on tstdzb.fk_re_rechnung = tre.pk_re_rechnung
 left join (select * from t_std where fk_std_group = 441) tret on tre.fk_std_re_rechnungstyp = tret.std_value
;
--------------------------------------------------------
--  DDL for View V_BOR_BORD_LOG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_BOR_BORD_LOG" ("BL_NAME", "PK_BOR_BORD_LOG", "BORD_LOG", "BORD_LOG_DATE", "FK_MDT_MANDANT", "FK_APL_PLANE", "PK_BOR_BORD_LOG_ENTRY", "FK_FLI_FLIGHT", "ENTRY_DATE", "PIC", "T_O_TIME", "LDG_TIME", "CHARGES", "EDMA", "ARRIVAL", "FK_BOR_BORD_LOG_ENTRY_GRP", "COMM", "COST_ADD", "TIME_DIFF", "TIME_DIFF_DOWN", "TIME_DIFF_0", "TIME_DIFF_HOURS", "RNR", "BL", "RW", "SUM_FH") AS 
  with dat as (
                select bor."PK_BOR_BORD_LOG",bor."BORD_LOG",bor."BORD_LOG_DATE",bor."FK_MDT_MANDANT",bor."FK_APL_PLANE", PK_BOR_BORD_LOG_ENTRY,  FK_FLI_FLIGHT, ENTRY_DATE, PIC, T_O_TIME, LDG_TIME, CHARGES, EDMA, ARRIVAL, FK_bor_BORD_LOG_ENTRY_GRP, COMM, COST_ADD,
                  ldg_time-t_o_time time_diff,
                  round( ldg_time-t_o_time,-2) time_diff_down, --m
                  round( ldg_time-t_o_time,0) time_diff_0, --j
                  (round( ldg_time-t_o_time,-2)*24-  round( ldg_time-t_o_time,-2))*60 time_diff_hours, --k
                  row_number() over (partition by pk_bor_bord_log order by bord_log_date) rnr
                from bor_bord_log bor
                 left join bor_bord_log_entry_grp borentrgrp on borentrgrp.fk_bor_bord_log = bor.pk_bor_bord_log
                 left join bor_bord_log_entry borentr on borentr.fk_bor_bord_log_entry_grp = borentrgrp.pk_bor_bord_log_entry_grp
            )
select 'Zeile' bl_name, dat."PK_BOR_BORD_LOG",dat."BORD_LOG",dat."BORD_LOG_DATE",dat."FK_MDT_MANDANT",dat."FK_APL_PLANE",dat."PK_BOR_BORD_LOG_ENTRY",dat."FK_FLI_FLIGHT",dat."ENTRY_DATE",dat."PIC",dat."T_O_TIME",dat."LDG_TIME",dat."CHARGES",dat."EDMA",dat."ARRIVAL",dat."FK_BOR_BORD_LOG_ENTRY_GRP",dat."COMM",dat."COST_ADD",dat."TIME_DIFF",dat."TIME_DIFF_DOWN",dat."TIME_DIFF_0",dat."TIME_DIFF_HOURS",dat."RNR", round(rnr/7,0) bl,  mod(rnr,7) rw ,sum( nvl( ( ldg_time-t_o_time),0)) over (partition by  round(rnr/7,0), dat.pk_bor_bord_log  order by dat.pk_bor_bord_log_entry) sum_fh
from dat
union
select 'Summe', dat."PK_BOR_BORD_LOG",dat."BORD_LOG",dat."BORD_LOG_DATE",dat."FK_MDT_MANDANT",dat."FK_APL_PLANE",dat."PK_BOR_BORD_LOG_ENTRY",dat."FK_FLI_FLIGHT",dat."ENTRY_DATE",dat."PIC",dat."T_O_TIME",dat."LDG_TIME",dat."CHARGES",dat."EDMA",dat."ARRIVAL",dat."FK_BOR_BORD_LOG_ENTRY_GRP",dat."COMM",dat."COST_ADD",dat."TIME_DIFF",dat."TIME_DIFF_DOWN",dat."TIME_DIFF_0",dat."TIME_DIFF_HOURS",dat."RNR", round(rnr/7,0) , null, sum( nvl( round( ldg_time-t_o_time,-2),0)) over (partition by dat.pk_bor_bord_log,  mod(rnr,7) order by dat.pk_bor_bord_log_entry) sum_fh
from dat
where mod(rnr,7)=0
;
--------------------------------------------------------
--  DDL for View V_BUCHUNGSTATUS_OLD
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_BUCHUNGSTATUS_OLD" ("TYP", "KTONR", "BELEGDATUM", "BUCHUNGSDATUM", "BUCHUNGSPERIODE", "BELEGNUMMERNKREIS", "BELEGNUMMER", "BUCHUNGSTEXT", "BUCHUNGSBETRAG", "SOLLKONTO", "HABENKONTO", "STEUERSCHLÜSSEL", "KOSTENSTELLE", "KOSTENTRÄGER", "BUCHUNGSBETRAG_EURO", "WÄHRUNG", "ZUSATZANGABEN", "OK", "STORNO", "PK_LEX", "BEMERKUNGEN", "DATUM_OK", "WERT", "Kontotyp", "LSOLLKONTO", "FK_MAIN_KEY", "VERWENDUNGSZWECK", "KATEGORIE") AS 
  with kto as (
                  select sollkonto ktonr from t_LEX GROUP  by sollkonto
                 union 
                 select habenkonto from t_lex group by habenkonto
 )
select 'Sollkonto' typ, kto."KTONR" , t_lex."BELEGDATUM",t_lex."BUCHUNGSDATUM",t_lex."BUCHUNGSPERIODE",t_lex."BELEGNUMMERNKREIS",t_lex."BELEGNUMMER",t_lex."BUCHUNGSTEXT",t_lex."BUCHUNGSBETRAG",t_lex."SOLLKONTO",t_lex."HABENKONTO",t_lex."STEUERSCHLÜSSEL",t_lex."KOSTENSTELLE",t_lex."KOSTENTRÄGER",t_lex."BUCHUNGSBETRAG_EURO",t_lex."WÄHRUNG",t_lex."ZUSATZANGABEN",t_lex."OK",t_lex."STORNO",t_lex."PK_LEX",t_lex."BEMERKUNGEN",t_lex."DATUM_OK" , -Buchungsbetrag wert, ktozus."Kontotyp", case when t_lex.sollkonto = 1700 then 'Girokonto' when t_lex.sollkonto = 1710 then 'Kreditkarte' end lsollkonto, t_lex.fk_main_key, verwendungszweck, kategorie
from t_lex
   left  join kto on  kto.ktonr = t_lex.sollkonto
   left join (
                    select case when "Kontotyp" = 'Girokonto' then 1700 when "Kontotyp"='Kreditkarte' then 1710 else null end as bktonr, kto.*  from v_konten_zus kto
             ) ktozus on ktozus.fk_buchung_steuer = t_lex.belegnummer
 union
 select  'Habenkonto' typ, kto."KTONR" , t_lex."BELEGDATUM",t_lex."BUCHUNGSDATUM",t_lex."BUCHUNGSPERIODE",t_lex."BELEGNUMMERNKREIS",t_lex."BELEGNUMMER",t_lex."BUCHUNGSTEXT",t_lex."BUCHUNGSBETRAG",t_lex."SOLLKONTO",t_lex."HABENKONTO",t_lex."STEUERSCHLÜSSEL",t_lex."KOSTENSTELLE",t_lex."KOSTENTRÄGER",t_lex."BUCHUNGSBETRAG_EURO",t_lex."WÄHRUNG",t_lex."ZUSATZANGABEN",t_lex."OK",t_lex."STORNO",t_lex."PK_LEX",t_lex."BEMERKUNGEN",t_lex."DATUM_OK" ,Buchungsbetrag wert, ktozus."Kontotyp", case when t_lex.habenkonto = 1700 then 'Girokonto' when t_lex.habenkonto = 1710 then 'Kreditkarte' end lsollkonto,t_lex. fk_main_key, verwendungszweck, Kategorie
from t_lex
 left join kto on kto.ktonr = t_lex.habenkonto
 left join (select case when "Kontotyp" = 'Girokonto' then 1700 when "Kontotyp"='Kreditkarte' then 1710 else null end as bktonr, kto.*  from v_konten_zus kto ) ktozus on ktozus.fk_buchung_steuer = t_lex.belegnummer
;
--------------------------------------------------------
--  DDL for View V_CALC_BEL_BETRAG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CALC_BEL_BETRAG" ("PK_INP_BELEGE_ALL", "NETTO_BETRAG", "NET", "NET1", "STEUERSATZ", "MWST_BETRAG", "MWST", "MWST1", "BRUTTO_BETRAG", "BR", "WAEHRUNG", "LAND", "NETTO_BETRAG_EUR", "NET_EUR", "NET1_EUR", "MWST_BETRAG_EUR", "MWST_EUR", "MWST1_EUR", "BRUTTO_BETRAG_EUR", "BR_EUR", "FRMDW_NETTO_BETRAG", "FRMDW_NET", "FRMDW_NET1", "FRMDW_MWST_BETRAG", "FRMDW_MWST", "FRMDW_MWST1", "FRMDW_BRUTTO_BETRAG", "FRMDW_BR", "NET_NEW", "N1", "N2", "N3", "NET_SEL", "M1", "M2", "M3", "MWST_SEL", "MWST_NEW", "B1", "B2", "B3", "BRUTTO_SEL", "BRUTTO_NEW") AS 
  with abf_net as (

                    select 
                    pk_inp_belege_all, 
                    
                    --net
                    Case when netto_betrag is not null then 4 else 0 end
                    + case when (brutto_betrag - mwst_betrag) is not null then 2 else 0 end
                    + case when ((brutto_betrag * 100/ (100+steuersatz) )) is not null then 1 else 0 end net_sel,
                    Case when netto_betrag is not null then 4 else 0 end n1,
                    case when (brutto_betrag - mwst_betrag) is not null then 2 else 0 end n2,
                    case when ((brutto_betrag * 100/ (100+steuersatz) )) is not null then 1 else 0 end n3,
                    --mwst
                    Case when mwst_betrag is not null then 4 else 0 end
                    + case when (netto_betrag * steuersatz / 100) is not null then 2 else 0 end
                    + case when (brutto_betrag * steuersatz / (100 +steuersatz)) is not null then 1 else 0 end mwst_sel,
                    Case when netto_betrag is not null then 4 else 0 end m1,
                    case when (netto_betrag * steuersatz / 100) is not null then 2 else 0 end m2,
                    case when (brutto_betrag * steuersatz / (100 +steuersatz)) is not null then 1 else 0 end m3,
                    --brutto
                    Case when brutto_betrag is not null then 4 else 0 end
                    + case when netto_betrag + mwst_betrag is not null then 2 else 0 end
                    + case when (netto_betrag * steuersatz / 100 + netto_betrag) is not null then 1 else 0 end brutto_sel,
                    Case when brutto_betrag is not null then 4 else 0 end b1,
                    case when (netto_betrag + mwst_betrag) is not null then 2 else 0 end b2,
                    case when (netto_betrag * steuersatz / 100 + netto_betrag) is not null then 1 else 0 end b3

                    from t_inp_belege_all inp1
                         left join t_bas_steu_steuer_satz st on st.pk_bas_steu_steuer_satz = inp1.fk_bas_steu_steuer_satz
                         left join t_bas_mon_waehrung wa on wa.pk_bas_mon_waehrung = inp1.fk_bas_mon_waehrung
                         left join t_adr_land la on la.pk_adr_land = inp1.fk_adr_land
     )

  select 
  inp1.pk_inp_belege_all,

--Beleg
netto_betrag ,
brutto_betrag - mwst_betrag net,
(brutto_betrag * 100/ (100+steuersatz) )  net1,
steuersatz,
mwst_betrag,
netto_betrag * steuersatz / 100 mwst,
brutto_betrag * steuersatz / (100 +steuersatz) mwst1,
brutto_betrag,
netto_betrag * steuersatz / 100 + netto_betrag br,
--(brutto_betrag * steuersatz / (100+steuersatz) )+brutto_betrag * steuersatz / (100+steuersatz) br_new,
waehrung,
land,

 --EUR
netto_betrag_eur ,
brutto_betrag_eur - mwst_betrag net_eur,
(brutto_betrag_eur * 100/ (100+steuersatz) )  net1_eur,

mwst_betrag_eur,
netto_betrag_eur * steuersatz / 100 mwst_eur,
brutto_betrag_eur * steuersatz / (100 +steuersatz) mwst1_eur,
brutto_betrag_eur,
netto_betrag_eur * steuersatz / 100 + netto_betrag_eur br_eur,
--(brutto_betrag * steuersatz / (100+steuersatz) )+brutto_betrag * steuersatz / (100+steuersatz) br1


--Fremdwährung
frmdw_netto_betrag ,
frmdw_brutto_betrag - frmdw_mwst_betrag frmdw_net,
(frmdw_brutto_betrag * 100/ (100+steuersatz) )  frmdw_net1,

frmdw_mwst_betrag,
frmdw_netto_betrag * steuersatz / 100 frmdw_mwst,
frmdw_brutto_betrag * steuersatz / (100 +steuersatz) frmdw_mwst1,
frmdw_brutto_betrag,
frmdw_netto_betrag * steuersatz / 100 + frmdw_netto_betrag frmdw_br,
--(brutto_betrag * steuersatz / (100+steuersatz) )+brutto_betrag * steuersatz / (100+steuersatz) br_new

case when (ab.net_sel = 4 or ab.net_sel = 5 or ab.net_sel = 7 ) then netto_betrag
     when (ab.net_sel = 3 or ab.net_sel= 2) then round((brutto_betrag - mwst_betrag),2)
     when ab.net_sel = 1 then round(((brutto_betrag * 100/ (100+steuersatz) )),2)
     else 0 
end net_new
,n1
,n2
,n3
,ab.net_sel
,m1
,m2
,m3
,ab.mwst_sel
,case when (ab.mwst_sel = 4 or ab.mwst_sel = 5 or ab.mwst_sel = 7 ) then mwst_betrag
     when (ab.mwst_sel = 3 or ab.mwst_sel= 2) then round((netto_betrag * steuersatz / 100),2)
     when ab.mwst_sel = 1 then round(brutto_betrag * steuersatz / (100 +steuersatz),2)
     else 0 
end mwst_new,
b1,
b2,
b3,
ab.brutto_sel,
case when (ab.brutto_sel = 4 or ab.brutto_sel = 5 or ab.brutto_sel = 7 ) then brutto_betrag
     when (ab.brutto_sel = 3 or ab.brutto_sel= 2) then round(netto_betrag + mwst_betrag,2)
     when ab.brutto_sel = 1 then round(netto_betrag * steuersatz / 100 + netto_betrag,2)
     else 0 
end brutto_new





from t_inp_belege_all inp1
     left join t_bas_steu_steuer_satz st on st.pk_bas_steu_steuer_satz = inp1.fk_bas_steu_steuer_satz
     left join t_bas_mon_waehrung wa on wa.pk_bas_mon_waehrung = inp1.fk_bas_mon_waehrung
     left join t_adr_land la on la.pk_adr_land = inp1.fk_adr_land
     left join abf_net ab on ab.pk_inp_belege_all = inp1.pk_inp_belege_all
;
--------------------------------------------------------
--  DDL for View V_CALC_BEL_POS_BETRAG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CALC_BEL_POS_BETRAG" ("PK_INP_BELEGE_POS_ALL", "FK_INP_BELEGE_ALL", "NETTO_BETRAG", "NET", "NET1", "NET2", "STEUERSATZ", "MWST_BETRAG", "MWST", "MWST1", "BRUTTO_BETRAG", "BR", "BR1", "WAEHRUNG", "LAND", "NET_NEW", "N1", "N2", "N3", "NET3", "NET_SEL", "M1", "M2", "M3", "MWST_SEL", "BRUT2", "MWST_NEW", "B1", "B2", "B3", "BRUTTO_SEL", "BRUT1", "BRUTTO_NEW") AS 
  with abf_net as (

select 
pk_inp_belege_pos_all, 
fk_inp_belege_all,
--net
Case when netto_betrag is not null then 4 else 0 end
+ case when (brutto_betrag - mwst_betrag) is not null then 2 else 0 end
+ case when ((brutto_betrag * 100/ (100+steuersatz) )) is not null then 1 else 0 end  
--+  case when (mwst_betrag * 100 / steuersatz) is not null then 1 else 0 end 
net_sel,
Case when netto_betrag is not null then 4 else 0 end n1,
case when (brutto_betrag - mwst_betrag) is not null then 2 else 0 end n2,
case when ((brutto_betrag * 100/ (100+steuersatz) )) is not null then 1 else 0 end n3,

--mwst
Case when mwst_betrag is not null then 4 else 0 end
+ case when (netto_betrag * steuersatz / 100) is not null then 2 else 0 end
+ case when (brutto_betrag * steuersatz / (100 +steuersatz)) is not null then 1 else 0 end mwst_sel,
Case when netto_betrag is not null then 4 else 0 end m1,
case when (netto_betrag * steuersatz / 100) is not null then 2 else 0 end m2,
case when (brutto_betrag * steuersatz / (100 +steuersatz)) is not null then 1 else 0 end m3,
--brutto
Case when brutto_betrag is not null then 4 else 0 end
+ case when netto_betrag + mwst_betrag is not null then 2 else 0 end
+ case when (netto_betrag * steuersatz / 100 + netto_betrag) is not null then 1 else 0 end brutto_sel,
+ case when mwst_betrag * steuersatz / (100 + steuersatz) is not null then 1 else 0 end ,
Case when brutto_betrag is not null then 4 else 0 end b1,
case when (netto_betrag + mwst_betrag) is not null then 2 else 0 end b2,
case when (netto_betrag * steuersatz / 100 + netto_betrag) is not null then 1 else 0 end b3

from t_inp_belege_pos_all inp1
     left join t_bas_steu_steuer_satz st on st.pk_bas_steu_steuer_satz = inp1.fk_bas_steu_steuer_satz
     left join t_bas_mon_waehrung wa on wa.pk_bas_mon_waehrung = inp1.fk_bas_mon_waehrung
     left join t_adr_land la on la.pk_adr_land = inp1.fk_adr_land
     )
select 
inp1.pk_inp_belege_pos_all,
inp1.fk_inp_belege_all,

--Beleg
netto_betrag ,
brutto_betrag - mwst_betrag net,
(brutto_betrag * 100/ (100+steuersatz) )  net1,
case  when steuersatz is not null and steuersatz <>0 then (mwst_betrag * 100 / steuersatz)  end net2,
steuersatz,

mwst_betrag,
netto_betrag * steuersatz / 100 mwst,
brutto_betrag * steuersatz / (100 +steuersatz) mwst1,

brutto_betrag,
netto_betrag + mwst_betrag br,
netto_betrag * steuersatz / 100 + netto_betrag br1,

--(brutto_betrag * steuersatz / (100+steuersatz) )+brutto_betrag * steuersatz / (100+steuersatz) br_new,
waehrung,
land,

case when (ab.net_sel = 4 or ab.net_sel = 5 or ab.net_sel = 7  or ab.net_sel = 15) then netto_betrag
     when (ab.net_sel = 3 or ab.net_sel= 2 or ab.net_sel = 11) then round((brutto_betrag - mwst_betrag),2)
     when ab.net_sel = 1 or ab.net_sel = 1 then round(((brutto_betrag * 100/ (100+steuersatz) )),2)

     else 0 
end net_new
,n1
,n2
,n3
,case when steuersatz is not null and steuersatz <>0  then mwst_betrag * 100 / steuersatz end net3
,ab.net_sel
,m1
,m2
,m3
,ab.mwst_sel
, case when steuersatz is not null and steuersatz <>0  then mwst_betrag * (100 +steuersatz)/ steuersatz end brut2
,case when (ab.mwst_sel = 4 or ab.mwst_sel = 5 or ab.mwst_sel = 7 ) then mwst_betrag
     when (ab.mwst_sel = 3 or ab.mwst_sel= 2) then round((netto_betrag * steuersatz / 100),2)
     when ab.mwst_sel = 1 then round(brutto_betrag * steuersatz / (100 +steuersatz),2)
     else 0 
end mwst_new,
b1,
b2,
b3,

ab.brutto_sel,
mwst_betrag * steuersatz / (100 + steuersatz)  brut1,
case when (ab.brutto_sel = 4 or ab.brutto_sel = 5 or ab.brutto_sel = 7 or ab.brutto_sel = 15) then brutto_betrag
     when (ab.brutto_sel = 3 or ab.brutto_sel= 2 or ab.brutto_sel = 11) then round(netto_betrag + mwst_betrag,2)
     when ab.brutto_sel = 1 or ab.brutto_sel = 9 then round(netto_betrag * steuersatz / 100 + netto_betrag,2)

     else 0 
end brutto_new

 --EUR
--netto_betrag_eur ,
--brutto_betrag_eur - mwst_betrag net_eur,
--(brutto_betrag_eur * 100/ (100+steuersatz) )  net1_eur,

--mwst_betrag_eur,
--netto_betrag_eur * steuersatz / 100 mwst_eur,
--brutto_betrag_eur * steuersatz / (100 +steuersatz) mwst1_eur,
--brutto_betrag_eur,
--netto_betrag_eur * steuersatz / 100 + netto_betrag_eur br_eur
--(brutto_betrag * steuersatz / (100+steuersatz) )+brutto_betrag * steuersatz / (100+steuersatz) br1


--Fremdwährung
--frmdw_netto_betrag ,
--frmdw_brutto_betrag - frmdw_mwst_betrag frmdw_net,
--(frmdw_brutto_betrag * 100/ (100+steuersatz) )  frmdw_net1,

--frmdw_mwst_betrag,
--frmdw_netto_betrag * steuersatz / 100 frmdw_mwst,
--frmdw_brutto_betrag * steuersatz / (100 +steuersatz) frmdw_mwst1,
--frmdw_brutto_betrag,
--frmdw_netto_betrag * steuersatz / 100 + frmdw_netto_betrag frmdw_br
--(brutto_betrag * steuersatz / (100+steuersatz) )+brutto_betrag * steuersatz / (100+steuersatz) br_new







from t_inp_belege_pos_all inp1
     left join t_bas_steu_steuer_satz st on st.pk_bas_steu_steuer_satz = inp1.fk_bas_steu_steuer_satz
     left join t_bas_mon_waehrung wa on wa.pk_bas_mon_waehrung = inp1.fk_bas_mon_waehrung
     left join t_adr_land la on la.pk_adr_land = inp1.fk_adr_land
     left join abf_net ab on ab.pk_inp_belege_pos_all = inp1.pk_inp_belege_pos_all
;
--------------------------------------------------------
--  DDL for View V_CHECK_DATE_FORMAT_LEX_BELEGDAT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CHECK_DATE_FORMAT_LEX_BELEGDAT" ("D") AS 
  select regexp_replace(substr(belegdat,1,10),'[0-9]','x') d from t_lex_long group by regexp_replace(substr(belegdat,1,10),'[0-9]','x')
;
--------------------------------------------------------
--  DDL for View V_CHECK_GIR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CHECK_GIR" ("Buchungstag", "BUCHUNGSTEXT", "Betrag") AS 
  select "Buchungstag", Buchungstext, "Betrag"
from t_KTO_GIROKONTO
--where "Unternehmen" not in ('1.50% AUSLANDSEINSATZENTGELT','1.75% AUSLANDSEINSATZENTGELT')
group by "Buchungstag", Buchungstext, "Betrag"
having count(*) >1
;
--------------------------------------------------------
--  DDL for View V_CHECK_KRED
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CHECK_KRED" ("Buchungstag", "Unternehmen", "Betrag") AS 
  select "Buchungstag", "Unternehmen", "Betrag"
from t_KTO_KREDITKARTE
where "Unternehmen" not in ('1.50% AUSLANDSEINSATZENTGELT','1.75% AUSLANDSEINSATZENTGELT')
group by "Buchungstag", "Unternehmen", "Betrag"
having count(*) >1
;
--------------------------------------------------------
--  DDL for View V_CHK_TREE_TAB
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CHK_TREE_TAB" ("CHK_LEAF_VALUE", "CNT", "VORG_LEV_ID", "VORG_LEV_SUB_ID", "ACT_LEV_ID", "ACT_LEV_SUB_ID", "NACHF_LEV_ID", "NACHF_LEV_SUB_ID", "LEAF_VALUE", "VORG_LEAF_VALUE", "LEAF_VALUE_NAME", "LEAF_VALUE_VORNAME", "VORG_LEAF_VALUE_NAME", "VORG_LEAF_VALUE_VORNAME") AS 
  select "CHK_LEAF_VALUE"
,"CNT","VORG_LEV_ID"
,"VORG_LEV_SUB_ID"
,"ACT_LEV_ID"
,"ACT_LEV_SUB_ID"
,"NACHF_LEV_ID"
,"NACHF_LEV_SUB_ID"
,"LEAF_VALUE"
,"VORG_LEAF_VALUE"
, pl.name as leaf_value_name
, pl.vorname as leaf_value_vorname
, pvl.name as vorg_leaf_value_name
, pvl.vorname as vorg_leaf_value_vorname
from 
(
  select leaf_value chk_leaf_value, count(*) as cnt
  from (
            select act_lev_id, act_lev_sub_id, leaf_value
            from 
            tree_tab
            group by act_lev_id, act_lev_sub_id, leaf_value
            union 
            select vorg_lev_id, vorg_lev_sub_id, vorg_leaf_value
            from 
            tree_tab
            group by vorg_lev_id,  vorg_lev_sub_id, vorg_leaf_value
  )
  group by leaf_value
  having count(*) > 1
) chk
left join tree_tab on (chk.chk_leaf_value = tree_tab.leaf_value or chk.chk_leaf_value = tree_tab.vorg_leaf_value)
left join person pl on pl.pk_person = tree_tab.leaf_value
left join person pvl on pvl.pk_person = tree_tab.vorg_leaf_value
order by chk_leaf_value
;
--------------------------------------------------------
--  DDL for View V_CHK_TREE_TAB_LEV_ABSTAND
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CHK_TREE_TAB_LEV_ABSTAND" ("VORG_LEV_ID", "VORG_LEV_SUB_ID", "ACT_LEV_ID", "ACT_LEV_SUB_ID", "NACHF_LEV_ID", "NACHF_LEV_SUB_ID", "LEAF_VALUE", "VORG_LEAF_VALUE") AS 
  select "VORG_LEV_ID","VORG_LEV_SUB_ID","ACT_LEV_ID","ACT_LEV_SUB_ID","NACHF_LEV_ID","NACHF_LEV_SUB_ID","LEAF_VALUE","VORG_LEAF_VALUE" 
from tree_tab
where act_lev_id - vorg_lev_id <> 1
;
--------------------------------------------------------
--  DDL for View V_CNT_OK_LEX
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CNT_OK_LEX" ("SOLLKONTO", "CNT_STORNO", "CNT_OK") AS 
  with cnt as (select sollkonto, sum(case when storno = 0 then 1 else 0 end) cnt_storno, sum(case when ok = 1 and storno = 0 then 1 else 0 end) cnt_ok
from t_lex

group by sollkonto)
select sollkonto, cnt_storno, cnt_ok
from cnt
where cnt_storno = cnt_ok
;
--------------------------------------------------------
--  DDL for View V_COMP_INP_BELEGE_ALL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_COMP_INP_BELEGE_ALL" ("CNT_PUNKTE", "FK_BEL_BELEG_ABLAGE", "FK_ABL_ORDNER_PAGE", "CNT_PUNKTE_GESCHAETZT", "PUNKTE_VON", "PUNKTE_BIS", "FK_LOC_LOCATION_VERG", "FK_IMP_BA_BEL_OLD", "GESCHW_IST", "GESCHW_SOLL", "GESCHW_UEBER_GRZ", "GESCHW_UEBER_GRZ_ABZGL_MESSTOL", "CODE_BUSSGELD", "DESCR_BUSSGELD", "GEZAHLT_AM", "WEBSEITE", "KUNDENNUMMER", "FK_REAL_BELEG_EXIST", "FK_CALC_STATE", "FK_CALC_STATE_EUR", "FK_CALC_STATE_FRMDW", "FK_BAS_STD_STATUS", "DATUM_VERGEHEN", "CREATE_AT", "CREATE_BY", "MODIFY_AT", "MODIFY_BY", "DATUM_ORT_OK", "DATUM_ADDRESSE_OK", "DATUM_BUSSGELD_OK", "DATUM_BELEG_POS_OK", "DATUM_BUCHUNG_OK", "DATUM_VERPFL_BEL_OK", "FK_INT_INTERNET_APP", "FK_CONTR_DUPL_STATUS", "DATUM_DUPL_OK", "DUPL_BEMERKUNG", "FK_KON_GESCHAEFTSPARTNER", "DUMMY", "STORNIERT", "FK_ADR_ADRESSE_SCHNELL", "RNR", "SEL", "SUM1", "NR_ROW", "SEL_PK_INP_BELEGE_ALL", "ERG", "PK_INP_BELEGE_ALL", "FK_LEX_BUCHUNG", "FK_BAS_KAT_KATEGORIE", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "FK_BAS_STD_ZAHLUNGSART", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_ROJEKT", "BELEGNUMMER", "BEZEICHNUNG", "FK_ADR_LAND", "FK_ADR_CITY", "BEL_DATUM", "VON", "BIS", "NETTO_BETRAG", "FK_BAS_STEU_STEUER_SATZ", "MWST_BETRAG", "BRUTTO_BETRAG", "FK_BAS_MON_WAEHRUNG", "STEUERNUMMER", "FK_BAS_MON_UMRECHNUNGSKURS", "COMM_REST_BELEG", "COMM_TEL_BELEG", "COMM_PRODUKTE", "COMM_BEGRUENDUNG", "COMM_SONSTIGES", "BELEG", "ZAHLUNGSBELEG", "LITER", "ZAPFSAEULE", "FK_LOC_LOCATION", "PERSOENLICH_VOR_ORT", "BELEG_UHRZEIT", "VON_UHRZEIT", "BIS_UHRZEIT", "FK_BAS_KAL_VON_ARBEITSTAG", "FK_BAS_KAL_BIS_ARBEITSTAG", "COMM_ADRESSE", "TANKSTELLEN_NR", "BRUTTO_BETRAG_INCL_TRINKG", "COMM_PARKTICKET", "FRMDW_NETTO_BETRAG", "FK_BAS_MON_FRMDW", "FK_BAS_MON_FRMDW_MWST_SATZ", "FRMDW_MWST_BETRAG", "FRMDW_BRUTTO_BETRAG", "FRMDW_BRUTTO_INCL_TRINKG", "MWST_BETRAG_EUR", "BRUTTO_BETRAG_EUR", "BRUTTO_INCL_TRINKG_EUR", "NETTO_BETRAG_EUR", "PREIS_PRO_MENGE", "MENGENEINHEIT", "LA_DATUM", "FK_LA_KONTO", "FK_LA_WDH", "FK_BAS_STD_ZAHLSTATUS", "COMM_VERGEHEN", "VERG_BEHOERDE") AS 
  with dat1 as (select 'old' sel, null sum1, 1 nr_row, inp.*
from t_inp_belege_all inp
--where pk_inp_belege_all = :p373_pk_inp_belege_all_1
),
dat2 as (
    select 'new' sel, null sum1, 2 nr_row, inp.*

from t_inp_belege_all inp
--where pk_inp_belege_all = :p373_pk_inp_belege_all
),

un as (
select sel, sum1,nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_BAS_KAT_KATEGORIE	,	--	NUMBER
FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
FK_KTO_BUCHUNG	,	--	NUMBER
FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
FK_INV_INVENTAR	,	--	NUMBER
FK_PROJ_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_ADR_LAND	,	--	NUMBER
FK_ADR_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_BAS_STEU_STEUER_SATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_BAS_MON_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRUENDUNG) COMM_BEGRUENDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSAEULE	,	--	NUMBER
FK_LOC_LOCATION	,	--	NUMBER
PERSOENLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_BAS_KAL_VON_ARBEITSTAG	,	--	NUMBER
FK_BAS_KAL_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_BAS_MON_FRMDW	,	--	NUMBER
FK_BAS_MON_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_BAS_STD_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BEL_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOC_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_BAS_STD_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INT_INTERNET_APP	,	--	NUMBER
FK_CONTR_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_KON_GESCHAEFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADR_ADRESSE_SCHNELL		--	NUMBER

from dat1
   union all
    select  sel, sum1, nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_BAS_KAT_KATEGORIE	,	--	NUMBER
FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
FK_KTO_BUCHUNG	,	--	NUMBER
FK_bAS_STD_ZAHLUNGSART	,	--	NUMBER
FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
FK_INV_INVENTAR	,	--	NUMBER
FK_PROJ_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_ADR_LAND	,	--	NUMBER
FK_ADR_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_BAS_STEU_STEUER_SATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_BAS_MON_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRUENDUNG) COMM_BEGRUENDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSAEULE	,	--	NUMBER
FK_LOC_LOCATION	,	--	NUMBER
PERSOENLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_BAS_KAL_VON_ARBEITSTAG	,	--	NUMBER
FK_BAS_KAL_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_BAS_MON_FRMDW	,	--	NUMBER
FK_BAS_MON_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_BAS_STD_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BEL_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOC_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_BAS_STD_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INT_INTERNET_APP	,	--	NUMBER
FK_CONTR_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_KON_GESCHAEFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADR_ADRESSE_SCHNELL		--	NUMBER
    from dat2
    )

    ,

    
vgl as (
select sel, sum1, nr_row, 'erg' erg, PK_INP_BELEGE_ALL sel_PK_INP_BELEGE_ALL, 
row_number() over (partition by PK_INP_BELEGE_ALL order by nr_row) PK_INP_BELEGE_ALL,
row_number() over (partition by FK_LEX_BUCHUNG order by nr_row) FK_LEX_BUCHUNG,
row_number() over (partition by FK_BAS_KAT_KATEGORIE order by nr_row) FK_BAS_KAT_KATEGORIE,
row_number() over (partition by FK_BAS_KAL_ARBEITSTAG order by nr_row) FK_BAS_KAL_ARBEITSTAG,
row_number() over (partition by FK_KTO_BUCHUNG order by nr_row) FK_KTO_BUCHUNG,
row_number() over (partition by FK_BAS_STD_ZAHLUNGSART order by nr_row) FK_BAS_STD_ZAHLUNGSART,
row_number() over (partition by FK_STD_VERW_VERWENDUNGSZWECK order by nr_row) FK_STD_VERW_VERWENDUNGSZWECK,
row_number() over (partition by FK_INV_INVENTAR order by nr_row) FK_INV_INVENTAR,
row_number() over (partition by FK_PROJ_PROJEKT order by nr_row) FK_PROJ_PROJEKT,
row_number() over (partition by BELEGNUMMER order by nr_row) BELEGNUMMER,
row_number() over (partition by BEZEICHNUNG order by nr_row) BEZEICHNUNG,
row_number() over (partition by FK_ADR_LAND order by nr_row) FK_ADR_LAND,
row_number() over (partition by FK_ADR_CITY order by nr_row) FK_ADR_CITY,
row_number() over (partition by BEL_DATUM order by nr_row) BEL_DATUM,
row_number() over (partition by VON order by nr_row) VON,
row_number() over (partition by BIS order by nr_row) BIS,
row_number() over (partition by NETTO_BETRAG order by nr_row) NETTO_BETRAG,
row_number() over (partition by FK_BAS_STEU_STEUER_SATZ order by nr_row) FK_BAS_STEU_STEUER_SATZ,
row_number() over (partition by MWST_BETRAG order by nr_row) MWST_BETRAG,
row_number() over (partition by BRUTTO_BETRAG order by nr_row) BRUTTO_BETRAG,
row_number() over (partition by FK_BAS_MON_WAEHRUNG order by nr_row) FK_BAS_MON_WAEHRUNG,
row_number() over (partition by STEUERNUMMER order by nr_row) STEUERNUMMER,
row_number() over (partition by FK_BAS_MON_UMRECHNUNGSKURS order by nr_row) FK_BAS_MON_UMRECHNUNGSKURS,
row_number() over (partition by COMM_REST_BELEG order by nr_row) COMM_REST_BELEG,
row_number() over (partition by COMM_TEL_BELEG order by nr_row) COMM_TEL_BELEG,
row_number() over (partition by COMM_PRODUKTE order by nr_row) COMM_PRODUKTE,
row_number() over (partition by COMM_BEGRUENDUNG order by nr_row) COMM_BEGRUENDUNG,
row_number() over (partition by COMM_SONSTIGES order by nr_row) COMM_SONSTIGES,
row_number() over (partition by BELEG order by nr_row) BELEG,
row_number() over (partition by ZAHLUNGSBELEG order by nr_row) ZAHLUNGSBELEG,
row_number() over (partition by LITER order by nr_row) LITER,
row_number() over (partition by ZAPFSAEULE order by nr_row) ZAPFSAEULE,
row_number() over (partition by FK_LOC_LOCATION order by nr_row) FK_LOC_LOCATION,
row_number() over (partition by PERSOENLICH_VOR_ORT order by nr_row) PERSOENLICH_VOR_ORT,
row_number() over (partition by BELEG_UHRZEIT order by nr_row) BELEG_UHRZEIT,
row_number() over (partition by VON_UHRZEIT order by nr_row) VON_UHRZEIT,
row_number() over (partition by BIS_UHRZEIT order by nr_row) BIS_UHRZEIT,
row_number() over (partition by FK_BAS_KAL_VON_ARBEITSTAG order by nr_row) FK_BAS_KAL_VON_ARBEITSTAG,
row_number() over (partition by FK_BAS_KAL_BIS_ARBEITSTAG order by nr_row) FK_BAS_KAL_BIS_ARBEITSTAG,
row_number() over (partition by COMM_ADRESSE order by nr_row) COMM_ADRESSE,
row_number() over (partition by TANKSTELLEN_NR order by nr_row) TANKSTELLEN_NR,
row_number() over (partition by BRUTTO_BETRAG_INCL_TRINKG order by nr_row) BRUTTO_BETRAG_INCL_TRINKG,
row_number() over (partition by COMM_PARKTICKET order by nr_row) COMM_PARKTICKET,
row_number() over (partition by FRMDW_NETTO_BETRAG order by nr_row) FRMDW_NETTO_BETRAG,
row_number() over (partition by FK_BAS_MON_FRMDW order by nr_row) FK_BAS_MON_FRMDW,
row_number() over (partition by FK_BAS_MON_FRMDW_MWST_SATZ order by nr_row) FK_BAS_MON_FRMDW_MWST_SATZ,
row_number() over (partition by FRMDW_MWST_BETRAG order by nr_row) FRMDW_MWST_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_BETRAG order by nr_row) FRMDW_BRUTTO_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_INCL_TRINKG order by nr_row) FRMDW_BRUTTO_INCL_TRINKG,
row_number() over (partition by MWST_BETRAG_EUR order by nr_row) MWST_BETRAG_EUR,
row_number() over (partition by BRUTTO_BETRAG_EUR order by nr_row) BRUTTO_BETRAG_EUR,
row_number() over (partition by BRUTTO_INCL_TRINKG_EUR order by nr_row) BRUTTO_INCL_TRINKG_EUR,
row_number() over (partition by NETTO_BETRAG_EUR order by nr_row) NETTO_BETRAG_EUR,
row_number() over (partition by PREIS_PRO_MENGE order by nr_row) PREIS_PRO_MENGE,
row_number() over (partition by MENGENEINHEIT order by nr_row) MENGENEINHEIT,
row_number() over (partition by LA_DATUM order by nr_row) LA_DATUM,
row_number() over (partition by FK_LA_KONTO order by nr_row) FK_LA_KONTO,
row_number() over (partition by FK_LA_WDH order by nr_row) FK_LA_WDH,
row_number() over (partition by FK_BAS_STD_ZAHLSTATUS order by nr_row) FK_BAS_STD_ZAHLSTATUS,
row_number() over (partition by COMM_VERGEHEN order by nr_row) COMM_VERGEHEN,
row_number() over (partition by VERG_BEHOERDE order by nr_row) VERG_BEHOERDE,
row_number() over (partition by CNT_PUNKTE order by nr_row) CNT_PUNKTE,
row_number() over (partition by FK_BEL_BELEG_ABLAGE order by nr_row) FK_BEL_BELEG_ABLAGE,
row_number() over (partition by FK_ABL_ORDNER_PAGE order by nr_row) FK_ABL_ORDNER_PAGE,
row_number() over (partition by CNT_PUNKTE_GESCHAETZT order by nr_row) CNT_PUNKTE_GESCHAETZT,
row_number() over (partition by PUNKTE_VON order by nr_row) PUNKTE_VON,
row_number() over (partition by PUNKTE_BIS order by nr_row) PUNKTE_BIS,
row_number() over (partition by FK_LOC_LOCATION_VERG order by nr_row) FK_LOC_LOCATION_VERG,
row_number() over (partition by FK_IMP_BA_BEL_OLD order by nr_row) FK_IMP_BA_BEL_OLD,
row_number() over (partition by GESCHW_IST order by nr_row) GESCHW_IST,
row_number() over (partition by GESCHW_SOLL order by nr_row) GESCHW_SOLL,
row_number() over (partition by GESCHW_UEBER_GRZ order by nr_row) GESCHW_UEBER_GRZ,
row_number() over (partition by GESCHW_UEBER_GRZ_ABZGL_MESSTOL order by nr_row) GESCHW_UEBER_GRZ_ABZGL_MESSTOL,
row_number() over (partition by CODE_BUSSGELD order by nr_row) CODE_BUSSGELD,
row_number() over (partition by DESCR_BUSSGELD order by nr_row) DESCR_BUSSGELD,
row_number() over (partition by GEZAHLT_AM order by nr_row) GEZAHLT_AM,
row_number() over (partition by WEBSEITE order by nr_row) WEBSEITE,
row_number() over (partition by KUNDENNUMMER order by nr_row) KUNDENNUMMER,
row_number() over (partition by FK_REAL_BELEG_EXIST order by nr_row) FK_REAL_BELEG_EXIST,
row_number() over (partition by FK_CALC_STATE order by nr_row) FK_CALC_STATE,
row_number() over (partition by FK_CALC_STATE_EUR order by nr_row) FK_CALC_STATE_EUR,
row_number() over (partition by FK_CALC_STATE_FRMDW order by nr_row) FK_CALC_STATE_FRMDW,
row_number() over (partition by FK_BAS_STD_STATUS order by nr_row) FK_BAS_STD_STATUS,
row_number() over (partition by DATUM_VERGEHEN order by nr_row) DATUM_VERGEHEN,
row_number() over (partition by CREATE_AT order by nr_row) CREATE_AT,
row_number() over (partition by CREATE_BY order by nr_row) CREATE_BY,
row_number() over (partition by MODIFY_AT order by nr_row) MODIFY_AT,
row_number() over (partition by MODIFY_BY order by nr_row) MODIFY_BY,
row_number() over (partition by DATUM_ORT_OK order by nr_row) DATUM_ORT_OK,
row_number() over (partition by DATUM_ADDRESSE_OK order by nr_row) DATUM_ADDRESSE_OK,
row_number() over (partition by DATUM_BUSSGELD_OK order by nr_row) DATUM_BUSSGELD_OK,
row_number() over (partition by DATUM_BELEG_POS_OK order by nr_row) DATUM_BELEG_POS_OK,
row_number() over (partition by DATUM_BUCHUNG_OK order by nr_row) DATUM_BUCHUNG_OK,
row_number() over (partition by DATUM_VERPFL_BEL_OK order by nr_row) DATUM_VERPFL_BEL_OK,
row_number() over (partition by FK_INT_INTERNET_APP order by nr_row) FK_INT_INTERNET_APP,
row_number() over (partition by FK_CONTR_DUPL_STATUS order by nr_row) FK_CONTR_DUPL_STATUS,
row_number() over (partition by DATUM_DUPL_OK order by nr_row) DATUM_DUPL_OK,
row_number() over (partition by DUPL_BEMERKUNG order by nr_row) DUPL_BEMERKUNG,
row_number() over (partition by FK_KON_GESCHAEFTSPARTNER order by nr_row) FK_KON_GESCHAEFTSPARTNER,
row_number() over (partition by DUMMY order by nr_row) DUMMY,
row_number() over (partition by STORNIERT order by nr_row) STORNIERT,
row_number() over (partition by FK_ADR_ADRESSE_SCHNELL order by nr_row) FK_ADR_ADRESSE_SCHNELL





from un
)

,


all_ as (
select sel, sum1,nr_row, pk_inp_belege_all sel_pk_inp_belege_all,  'erg' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_BAS_KAT_KATEGORIE) FK_BAS_KAT_KATEGORIE	,	--	NUMBER
to_char(FK_BAS_KAL_ARBEITSTAG) FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
to_char(FK_KTO_BUCHUNG) FK_KTO_BUCHUNG	,	--	NUMBER
to_char(FK_BAS_STD_ZAHLUNGSART) FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
to_char(FK_STD_VERW_VERWENDUNGSZWECK	) FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INV_INVENTAR	) FK_INV_INVENTAR	,	--	NUMBER
to_char(FK_PROJ_PROJEKT) FK_PROJ_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_ADR_LAND) FK_ADR_LAND	,	--	NUMBER
to_char(FK_ADR_CITY) FK_ADR_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_STEU_STEUER_SATZ) FK_BAS_STEU_STEUER_SATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_MON_WAEHRUNG) FK_BAS_MON_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_BAS_MON_UMRECHNUNGSKURS) FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRUENDUNG)) COMM_BEGRUENDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSAEULE) ZAPFSAEULE	,	--	NUMBER
to_char(FK_LOC_LOCATION) FK_LOC_LOCATION	,	--	NUMBER
to_char(PERSOENLICH_VOR_ORT) PERSOENLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_BAS_KAL_VON_ARBEITSTAG) FK_BAS_KAL_VON_ARBEITSTAG, --NUMBER
to_char(FK_BAS_KAL_BIS_ARBEITSTAG) FK_BAS_KAL_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_BAS_MON_FRMDW) FK_BAS_MON_FRMDW, --NUMBER
to_char(FK_BAS_MON_FRMDW_MWST_SATZ) FK_BAS_MON_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_BAS_STD_ZAHLSTATUS) FK_BAS_STD_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BEL_BELEG_ABLAGE) FK_BEL_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOC_LOCATION_VERG) FK_LOC_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_BAS_STD_STATUS) FK_BAS_STD_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INT_INTERNET_APP) FK_INT_INTERNET_APP, --NUMBER
to_char(FK_CONTR_DUPL_STATUS) FK_CONTR_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_KON_GESCHAEFTSPARTNER) FK_KON_GESCHAEFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADR_ADRESSE_SCHNELL) FK_ADR_ADRESSE_SCHNELL --NUMBER

from un
union all
select sel, sum1,nr_row,sel_pk_inp_belege_all sel_pk_inp_belege_all, 'zw' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_BAS_KAT_KATEGORIE) FK_BAS_KAT_KATEGORIE	,	--	NUMBER
to_char(FK_BAS_KAL_ARBEITSTAG) FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
to_char(FK_KTO_BUCHUNG) FK_KTO_BUCHUNG	,	--	NUMBER
to_char(FK_BAS_STD_ZAHLUNGSART) FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
to_char(FK_STD_VERW_VERWENDUNGSZWECK	) FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INV_INVENTAR	) FK_INV_INVENTAR	,	--	NUMBER
to_char(FK_PROJ_PROJEKT) FK_PROJ_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_ADR_LAND) FK_ADR_LAND	,	--	NUMBER
to_char(FK_ADR_CITY) FK_ADR_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_sTEU_STEUER_SATZ) FK_BAS_STEU_STEUER_SATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_MON_WAEHRUNG) FK_BAS_MON_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_BAS_MON_UMRECHNUNGSKURS) FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRUENDUNG)) COMM_BEGRUENDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSAEULE) ZAPFSAEULE	,	--	NUMBER
to_char(FK_LOC_LOCATION) FK_LOC_LOCATION	,	--	NUMBER
to_char(PERSOENLICH_VOR_ORT) PERSOENLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_BAS_KAL_VON_ARBEITSTAG) FK_BAS_KAL_VON_ARBEITSTAG, --NUMBER
to_char(FK_BAS_KAL_BIS_ARBEITSTAG) FK_BAS_KAL_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_BAS_MON_FRMDW) FK_BAS_MON_FRMDW, --NUMBER
to_char(FK_BAS_MON_FRMDW_MWST_SATZ) FK_BAS_MON_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_BAS_STD_ZAHLSTATUS) FK_BAS_STD_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BEL_BELEG_ABLAGE) FK_BEL_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOC_LOCATION_VERG) FK_LOC_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_BAS_STD_STATUS) FK_BAS_STD_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INT_INTERNET_APP) FK_INT_INTERNET_APP, --NUMBER
to_char(FK_CONTR_DUPL_STATUS) FK_CONTR_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_KON_GESCHAEFTSPARTNER) FK_KON_GESCHAEFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADR_ADRESSE_SCHNELL) FK_ADR_ADRESSE_SCHNELL --NUMBER

from 
vgl
union all
select null sel, 
case when max(PK_INP_BELEGE_ALL) =1 then 0 else 1 end + --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_KAT_KATEGORIE) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_KAL_ARBEITSTAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_KTO_BUCHUNG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STD_ZAHLUNGSART) =1 then 0 else 1 end + --NUMBER
case when max(FK_STD_VERW_VERWENDUNGSZWECK) =1 then 0 else 1 end + --NUMBER
case when max(FK_INV_INVENTAR) =1 then 0 else 1 end + --NUMBER
case when max(FK_PROJ_PROJEKT) =1 then 0 else 1 end + --NUMBER
case when max(BELEGNUMMER) =1 then 0 else 1 end + --VARCHAR2
case when max(BEZEICHNUNG) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_ADR_LAND) =1 then 0 else 1 end + --NUMBER
case when max(FK_ADR_CITY) =1 then 0 else 1 end + --NUMBER
case when max(BEL_DATUM) =1 then 0 else 1 end + --DATE
case when max(VON) =1 then 0 else 1 end + --DATE
case when max(BIS) =1 then 0 else 1 end + --DATE
case when max(NETTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STEU_STEUER_SATZ) =1 then 0 else 1 end + --NUMBER
case when max(MWST_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(BRUTTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_MON_WAEHRUNG) =1 then 0 else 1 end + --NUMBER
case when max(STEUERNUMMER) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_BAS_MON_UMRECHNUNGSKURS) =1 then 0 else 1 end + --NUMBER
case when max(COMM_REST_BELEG) =1 then 0 else 1 end + --CLOB
case when max(COMM_TEL_BELEG) =1 then 0 else 1 end + --CLOB
case when max(COMM_PRODUKTE) =1 then 0 else 1 end + --CLOB
case when max(COMM_BEGRUENDUNG) =1 then 0 else 1 end + --CLOB
case when max(COMM_SONSTIGES) =1 then 0 else 1 end + --CLOB
case when max(BELEG) =1 then 0 else 1 end + --BLOB
case when max(ZAHLUNGSBELEG) =1 then 0 else 1 end + --BLOB
case when max(LITER) =1 then 0 else 1 end + --NUMBER
case when max(ZAPFSAEULE) =1 then 0 else 1 end + --NUMBER
case when max(FK_LOC_LOCATION) =1 then 0 else 1 end + --NUMBER
case when max(PERSOENLICH_VOR_ORT) =1 then 0 else 1 end + --NUMBER
case when max(BELEG_UHRZEIT) =1 then 0 else 1 end + --DATE
case when max(VON_UHRZEIT) =1 then 0 else 1 end + --DATE
case when max(BIS_UHRZEIT) =1 then 0 else 1 end + --DATE
case when max(FK_BAS_KAL_VON_ARBEITSTAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_KAL_BIS_ARBEITSTAG) =1 then 0 else 1 end + --NUMBER
case when max(COMM_ADRESSE) =1 then 0 else 1 end + --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then 0 else 1 end + --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then 0 else 1 end + --NUMBER
case when max(COMM_PARKTICKET) =1 then 0 else 1 end + --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_MON_FRMDW) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_MON_FRMDW_MWST_SATZ) =1 then 0 else 1 end + --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then 0 else 1 end + --NUMBER
case when max(MWST_BETRAG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(PREIS_PRO_MENGE) =1 then 0 else 1 end + --NUMBER
case when max(MENGENEINHEIT) =1 then 0 else 1 end + --NUMBER
case when max(LA_DATUM) =1 then 0 else 1 end + --DATE
case when max(FK_LA_KONTO) =1 then 0 else 1 end + --NUMBER
case when max(FK_LA_WDH) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STD_ZAHLSTATUS) =1 then 0 else 1 end + --NUMBER
case when max(COMM_VERGEHEN) =1 then 0 else 1 end + --CLOB
case when max(VERG_BEHOERDE) =1 then 0 else 1 end + --VARCHAR2
case when max(CNT_PUNKTE) =1 then 0 else 1 end + --NUMBER
case when max(FK_BEL_BELEG_ABLAGE) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then 0 else 1 end + --NUMBER
case when max(CNT_PUNKTE_GESCHAETZT) =1 then 0 else 1 end + --NUMBER
case when max(PUNKTE_VON) =1 then 0 else 1 end + --DATE
case when max(PUNKTE_BIS) =1 then 0 else 1 end + --DATE
case when max(FK_LOC_LOCATION_VERG) =1 then 0 else 1 end + --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_IST) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_SOLL) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_UEBER_GRZ) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then 0 else 1 end + --NUMBER
case when max(CODE_BUSSGELD) =1 then 0 else 1 end + --VARCHAR2
case when max(DESCR_BUSSGELD) =1 then 0 else 1 end + --VARCHAR2
case when max(GEZAHLT_AM) =1 then 0 else 1 end + --DATE
case when max(WEBSEITE) =1 then 0 else 1 end + --VARCHAR2
case when max(KUNDENNUMMER) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then 0 else 1 end + --NUMBER
case when max(FK_CALC_STATE) =1 then 0 else 1 end + --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then 0 else 1 end + --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STD_STATUS) =1 then 0 else 1 end + --NUMBER
case when max(DATUM_VERGEHEN) =1 then 0 else 1 end + --DATE
case when max(CREATE_AT) =1 then 0 else 1 end + --DATE
case when max(CREATE_BY) =1 then 0 else 1 end + --VARCHAR2
case when max(MODIFY_AT) =1 then 0 else 1 end + --DATE
case when max(MODIFY_BY) =1 then 0 else 1 end + --DATE
case when max(DATUM_ORT_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_ADDRESSE_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_BUSSGELD_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_BELEG_POS_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_BUCHUNG_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then 0 else 1 end + --DATE
case when max(FK_INT_INTERNET_APP) =1 then 0 else 1 end + --NUMBER
case when max(FK_CONTR_DUPL_STATUS) =1 then 0 else 1 end + --NUMBER
case when max(DATUM_DUPL_OK) =1 then 0 else 1 end + --DATE
case when max(DUPL_BEMERKUNG) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_KON_GESCHAEFTSPARTNER) =1 then 0 else 1 end + --NUMBER
case when max(DUMMY) =1 then 0 else 1 end + --NUMBER
case when max(STORNIERT) =1 then 0 else 1 end + --NUMBER
case when max(FK_ADR_ADRESSE_SCHNELL) =1 then 0 else 1 end  --NUMBER 
sum1, null nr_row, max(sel_pk_inp_belege_all) sel_pk_inp_belege_all, 'erg' erg,
case when max(PK_INP_BELEGE_ALL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAT_KATEGORIE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAL_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_KTO_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STD_ZAHLUNGSART) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STD_VERW_VERWENDUNGSZWECK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_INV_INVENTAR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_PROJ_PROJEKT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEGNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BEZEICHNUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ADR_LAND) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADR_CITY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BEL_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STEU_STEUER_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_WAEHRUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STEUERNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_BAS_MON_UMRECHNUNGSKURS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_REST_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_TEL_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_PRODUKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_BEGRUENDUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_SONSTIGES) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(ZAHLUNGSBELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(LITER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(ZAPFSAEULE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LOC_LOCATION) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PERSOENLICH_VOR_ORT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEG_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_BAS_KAL_VON_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAL_BIS_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_ADRESSE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_PARKTICKET) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_FRMDW_MWST_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PREIS_PRO_MENGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MENGENEINHEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(LA_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LA_KONTO) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LA_WDH) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STD_ZAHLSTATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(VERG_BEHOERDE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(CNT_PUNKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BEL_BELEG_ABLAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CNT_PUNKTE_GESCHAETZT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PUNKTE_VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(PUNKTE_BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LOC_LOCATION_VERG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_IST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_SOLL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CODE_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(DESCR_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(GEZAHLT_AM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(WEBSEITE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(KUNDENNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STD_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(MODIFY_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(MODIFY_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ORT_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ADDRESSE_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUSSGELD_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BELEG_POS_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUCHUNG_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_INT_INTERNET_APP) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CONTR_DUPL_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_DUPL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DUPL_BEMERKUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_KON_GESCHAEFTSPARTNER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DUMMY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STORNIERT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADR_ADRESSE_SCHNELL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end --NUMBER

from vgl
)

select rownum rnr, all_."SEL",all_."SUM1",all_."NR_ROW",all_."SEL_PK_INP_BELEGE_ALL",
all_."ERG",all_."PK_INP_BELEGE_ALL",all_."FK_LEX_BUCHUNG",all_."FK_BAS_KAT_KATEGORIE",all_."FK_BAS_KAL_ARBEITSTAG",
all_."FK_KTO_BUCHUNG",all_."FK_BAS_STD_ZAHLUNGSART",all_."FK_STD_VERW_VERWENDUNGSZWECK",all_."FK_INV_INVENTAR",all_."FK_PROJ_PROJEKT",all_."BELEGNUMMER",
all_."BEZEICHNUNG",all_."FK_ADR_LAND",all_."FK_ADR_CITY",all_."BEL_DATUM",all_."VON",all_."BIS",all_."NETTO_BETRAG",all_."FK_BAS_STEU_STEUER_SATZ",
all_."MWST_BETRAG",all_."BRUTTO_BETRAG",all_."FK_BAS_MON_WAEHRUNG",all_."STEUERNUMMER",all_."FK_BAS_MON_UMRECHNUNGSKURS",all_."COMM_REST_BELEG",all_."COMM_TEL_BELEG",
all_."COMM_PRODUKTE",all_."COMM_BEGRUENDUNG",all_."COMM_SONSTIGES",all_."BELEG",all_."ZAHLUNGSBELEG",all_."LITER",all_."ZAPFSAEULE",all_."FK_LOC_LOCATION",
all_."PERSOENLICH_VOR_ORT",all_."BELEG_UHRZEIT",all_."VON_UHRZEIT",all_."BIS_UHRZEIT",all_."FK_BAS_KAL_VON_ARBEITSTAG",all_."FK_BAS_KAL_BIS_ARBEITSTAG",all_."COMM_ADRESSE",
all_."TANKSTELLEN_NR",all_."BRUTTO_BETRAG_INCL_TRINKG",all_."COMM_PARKTICKET",all_."FRMDW_NETTO_BETRAG",all_."FK_BAS_MON_FRMDW",all_."FK_BAS_MON_FRMDW_MWST_SATZ",all_."FRMDW_MWST_BETRAG",
all_."FRMDW_BRUTTO_BETRAG",all_."FRMDW_BRUTTO_INCL_TRINKG",all_."MWST_BETRAG_EUR",all_."BRUTTO_BETRAG_EUR",all_."BRUTTO_INCL_TRINKG_EUR",all_."NETTO_BETRAG_EUR",all_."PREIS_PRO_MENGE",
all_."MENGENEINHEIT",all_."LA_DATUM",all_."FK_LA_KONTO",all_."FK_LA_WDH",all_."FK_BAS_STD_ZAHLSTATUS",all_."COMM_VERGEHEN",all_."VERG_BEHOERDE",all_."CNT_PUNKTE",all_."FK_BEL_BELEG_ABLAGE",all_."FK_ABL_ORDNER_PAGE",all_."CNT_PUNKTE_GESCHAETZT",
all_."PUNKTE_VON",all_."PUNKTE_BIS",all_."FK_LOC_LOCATION_VERG",all_."FK_IMP_BA_BEL_OLD",all_."GESCHW_IST",all_."GESCHW_SOLL",all_."GESCHW_UEBER_GRZ",all_."GESCHW_UEBER_GRZ_ABZGL_MESSTOL",all_."CODE_BUSSGELD",all_."DESCR_BUSSGELD",
all_."GEZAHLT_AM",all_."WEBSEITE",all_."KUNDENNUMMER",all_."FK_REAL_BELEG_EXIST",all_."FK_CALC_STATE",all_."FK_CALC_STATE_EUR",all_."FK_CALC_STATE_FRMDW",
all_."FK_BAS_STD_STATUS",all_."DATUM_VERGEHEN",all_."CREATE_AT",all_."CREATE_BY",all_."MODIFY_AT",all_."MODIFY_BY",all_."DATUM_ORT_OK",all_."DATUM_ADDRESSE_OK",all_."DATUM_BUSSGELD_OK",
all_."DATUM_BELEG_POS_OK",all_."DATUM_BUCHUNG_OK",all_."DATUM_VERPFL_BEL_OK",all_."FK_INT_INTERNET_APP",all_."FK_CONTR_DUPL_STATUS",all_."DATUM_DUPL_OK",all_."DUPL_BEMERKUNG",all_."FK_KON_GESCHAEFTSPARTNER",all_."DUMMY",all_."STORNIERT",all_."FK_ADR_ADRESSE_SCHNELL"
from all_
;
--------------------------------------------------------
--  DDL for View V_COMP_INP_BELEGE_ALL1
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_COMP_INP_BELEGE_ALL1" ("GESCHW_SOLL", "GESCHW_UEBER_GRZ", "GESCHW_UEBER_GRZ_ABZGL_MESSTOL", "CODE_BUSSGELD", "DESCR_BUSSGELD", "GEZAHLT_AM", "WEBSEITE", "KUNDENNUMMER", "FK_REAL_BELEG_EXIST", "FK_CALC_STATE", "FK_CALC_STATE_EUR", "FK_CALC_STATE_FRMDW", "FK_BAS_STD_STATUS", "DATUM_VERGEHEN", "CREATE_AT", "CREATE_BY", "MODIFY_AT", "MODIFY_BY", "DATUM_ORT_OK", "DATUM_ADDRESSE_OK", "DATUM_BUSSGELD_OK", "DATUM_BELEG_POS_OK", "DATUM_BUCHUNG_OK", "DATUM_VERPFL_BEL_OK", "FK_INT_INTERNET_APP", "FK_CONTR_DUPL_STATUS", "DATUM_DUPL_OK", "DUPL_BEMERKUNG", "FK_KON_GESCHAEFTSPARTNER", "DUMMY", "STORNIERT", "FK_ADR_ADRESSE_SCHNELL", "RNR", "SEL", "SUM1", "NR_ROW", "SEL_PK_INP_BELEGE_ALL", "ERG", "PK_INP_BELEGE_ALL", "FK_LEX_BUCHUNG", "FK_BAS_KAT_KATEGORIE", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "FK_BAS_STD_ZAHLUNGSART", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_PROJEKT", "BELEGNUMMER", "BEZEICHNUNG", "FK_ADR_LAND", "FK_ADR_CITY", "BEL_DATUM", "VON", "BIS", "NETTO_BETRAG", "FK_BAS_STEU_STEUER_SATZ", "MWST_BETRAG", "BRUTTO_BETRAG", "FK_BAS_MON_WAEHRUNG", "STEUERNUMMER", "FK_BAS_MON_UMRECHNUNGSKURS", "COMM_REST_BELEG", "COMM_TEL_BELEG", "COMM_PRODUKTE", "COMM_BEGRUENDUNG", "COMM_SONSTIGES", "BELEG", "ZAHLUNGSBELEG", "LITER", "ZAPFSAEULE", "FK_LOC_LOCATION", "PERSOENLICH_VOR_ORT", "BELEG_UHRZEIT", "VON_UHRZEIT", "BIS_UHRZEIT", "FK_BAS_KAL_VON_ARBEITSTAG", "FK_BAS_KAL_BIS_ARBEITSTAG", "COMM_ADRESSE", "TANKSTELLEN_NR", "BRUTTO_BETRAG_INCL_TRINKG", "COMM_PARKTICKET", "FRMDW_NETTO_BETRAG", "FK_BAS_MON_FRMDW", "FK_BAS_MON_FRMDW_MWST_SATZ", "FRMDW_MWST_BETRAG", "FRMDW_BRUTTO_BETRAG", "FRMDW_BRUTTO_INCL_TRINKG", "MWST_BETRAG_EUR", "BRUTTO_BETRAG_EUR", "BRUTTO_INCL_TRINKG_EUR", "NETTO_BETRAG_EUR", "PREIS_PRO_MENGE", "MENGENEINHEIT", "LA_DATUM", "FK_LA_KONTO", "FK_LA_WDH", "FK_BAS_STD_ZAHLSTATUS", "COMM_VERGEHEN", "VERG_BEHOERDE", "CNT_PUNKTE", "FK_BEL_BELEG_ABLAGE", "FK_ABL_ORDNER_PAGE", "CNT_PUNKTE_GESCHAETZT", "PUNKTE_VON", "PUNKTE_BIS", "FK_LOC_LOCATION_VERG", "FK_IMP_BA_BEL_OLD", "GESCHW_IST") AS 
  with dat1 as (select 'old' sel, null sum1, 1 nr_row, inp.*
from t_inp_belege_all inp
--where pk_inp_belege_all = :p373_pk_inp_belege_all_1
),
dat2 as (
    select 'new' sel, null sum1, 2 nr_row, inp.*

from t_inp_belege_all inp
--where pk_inp_belege_all = :p373_pk_inp_belege_all
),

un as (
select sel, sum1,nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_BAS_KAT_KATEGORIE	,	--	NUMBER
FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
FK_KTO_BUCHUNG	,	--	NUMBER
FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
FK_INV_INVENTAR	,	--	NUMBER
FK_PROJ_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_ADR_LAND	,	--	NUMBER
FK_ADR_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_BAS_STEU_STEUER_SATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_BAS_MON_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRUENDUNG) COMM_BEGRUENDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSAEULE	,	--	NUMBER
FK_LOC_LOCATION	,	--	NUMBER
PERSOENLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_BAS_KAL_VON_ARBEITSTAG	,	--	NUMBER
FK_BAS_KAL_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_BAS_MON_FRMDW	,	--	NUMBER
FK_BAS_MON_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_BAS_STD_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BEL_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOC_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_BAS_STD_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INT_INTERNET_APP	,	--	NUMBER
FK_CONTR_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_KON_GESCHAEFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADR_ADRESSE_SCHNELL		--	NUMBER

from dat1
   union all
select  sel, sum1, nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_BAS_KAT_KATEGORIE	,	--	NUMBER
FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
FK_KTO_BUCHUNG	,	--	NUMBER
FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
FK_INV_INVENTAR	,	--	NUMBER
FK_PROJ_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_ADR_LAND	,	--	NUMBER
FK_ADR_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_BAS_STEU_STEUER_SATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_BAS_MON_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRUENDUNG) COMM_BEGRUENDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSAEULE	,	--	NUMBER
FK_LOC_LOCATION	,	--	NUMBER
PERSOENLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_BAS_KAL_VON_ARBEITSTAG	,	--	NUMBER
FK_BAS_KAL_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_BAS_MON_FRMDW	,	--	NUMBER
FK_BAS_MON_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_BAS_STD_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BEL_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOC_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_BAS_STD_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INT_INTERNET_APP	,	--	NUMBER
FK_CONTR_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_KON_GESCHAEFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADR_ADRESSE_SCHNELL		--	NUMBER
    from dat2
    ),

    
vgl as (
select sel, sum1, nr_row, 'erg' erg, PK_INP_BELEGE_ALL sel_PK_INP_BELEGE_ALL, 
row_number() over (partition by PK_INP_BELEGE_ALL order by nr_row) PK_INP_BELEGE_ALL,
row_number() over (partition by FK_LEX_BUCHUNG order by nr_row) FK_LEX_BUCHUNG,
row_number() over (partition by FK_BAS_KAT_KATEGORIE order by nr_row) FK_BAS_KAT_KATEGORIE,
row_number() over (partition by FK_BAS_KAL_ARBEITSTAG order by nr_row) FK_BAS_KAL_ARBEITSTAG,
row_number() over (partition by FK_KTO_BUCHUNG order by nr_row) FK_KTO_BUCHUNG,
row_number() over (partition by FK_BAS_STD_ZAHLUNGSART order by nr_row) FK_BAS_STD_ZAHLUNGSART,
row_number() over (partition by FK_STD_VERW_VERWENDUNGSZWECK order by nr_row) FK_STD_VERW_VERWENDUNGSZWECK,
row_number() over (partition by FK_INV_INVENTAR order by nr_row) FK_INV_INVENTAR,
row_number() over (partition by FK_PROJ_PROJEKT order by nr_row) FK_PROJ_PROJEKT,
row_number() over (partition by BELEGNUMMER order by nr_row) BELEGNUMMER,
row_number() over (partition by BEZEICHNUNG order by nr_row) BEZEICHNUNG,
row_number() over (partition by FK_ADR_LAND order by nr_row) FK_ADR_LAND,
row_number() over (partition by FK_ADR_CITY order by nr_row) FK_ADR_CITY,
row_number() over (partition by BEL_DATUM order by nr_row) BEL_DATUM,
row_number() over (partition by VON order by nr_row) VON,
row_number() over (partition by BIS order by nr_row) BIS,
row_number() over (partition by NETTO_BETRAG order by nr_row) NETTO_BETRAG,
row_number() over (partition by FK_BAS_STEU_STEUER_SATZ order by nr_row) FK_BAS_STEU_STEUER_SATZ,
row_number() over (partition by MWST_BETRAG order by nr_row) MWST_BETRAG,
row_number() over (partition by BRUTTO_BETRAG order by nr_row) BRUTTO_BETRAG,
row_number() over (partition by FK_BAS_MON_WAEHRUNG order by nr_row) FK_BAS_MON_WAEHRUNG,
row_number() over (partition by STEUERNUMMER order by nr_row) STEUERNUMMER,
row_number() over (partition by FK_BAS_MON_UMRECHNUNGSKURS order by nr_row) FK_BAS_MON_UMRECHNUNGSKURS,
row_number() over (partition by COMM_REST_BELEG order by nr_row) COMM_REST_BELEG,
row_number() over (partition by COMM_TEL_BELEG order by nr_row) COMM_TEL_BELEG,
row_number() over (partition by COMM_PRODUKTE order by nr_row) COMM_PRODUKTE,
row_number() over (partition by COMM_BEGRUENDUNG order by nr_row) COMM_BEGRUENDUNG,
row_number() over (partition by COMM_SONSTIGES order by nr_row) COMM_SONSTIGES,
row_number() over (partition by BELEG order by nr_row) BELEG,
row_number() over (partition by ZAHLUNGSBELEG order by nr_row) ZAHLUNGSBELEG,
row_number() over (partition by LITER order by nr_row) LITER,
row_number() over (partition by ZAPFSAEULE order by nr_row) ZAPFSAEULE,
row_number() over (partition by FK_LOC_LOCATION order by nr_row) FK_LOC_LOCATION,
row_number() over (partition by PERSOENLICH_VOR_ORT order by nr_row) PERSOENLICH_VOR_ORT,
row_number() over (partition by BELEG_UHRZEIT order by nr_row) BELEG_UHRZEIT,
row_number() over (partition by VON_UHRZEIT order by nr_row) VON_UHRZEIT,
row_number() over (partition by BIS_UHRZEIT order by nr_row) BIS_UHRZEIT,
row_number() over (partition by FK_BAS_KAL_VON_ARBEITSTAG order by nr_row) FK_BAS_KAL_VON_ARBEITSTAG,
row_number() over (partition by FK_BAS_KAL_BIS_ARBEITSTAG order by nr_row) FK_BAS_KAL_BIS_ARBEITSTAG,
row_number() over (partition by COMM_ADRESSE order by nr_row) COMM_ADRESSE,
row_number() over (partition by TANKSTELLEN_NR order by nr_row) TANKSTELLEN_NR,
row_number() over (partition by BRUTTO_BETRAG_INCL_TRINKG order by nr_row) BRUTTO_BETRAG_INCL_TRINKG,
row_number() over (partition by COMM_PARKTICKET order by nr_row) COMM_PARKTICKET,
row_number() over (partition by FRMDW_NETTO_BETRAG order by nr_row) FRMDW_NETTO_BETRAG,
row_number() over (partition by FK_BAS_MON_FRMDW order by nr_row) FK_BAS_MON_FRMDW,
row_number() over (partition by FK_BAS_MON_FRMDW_MWST_SATZ order by nr_row) FK_BAS_MON_FRMDW_MWST_SATZ,
row_number() over (partition by FRMDW_MWST_BETRAG order by nr_row) FRMDW_MWST_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_BETRAG order by nr_row) FRMDW_BRUTTO_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_INCL_TRINKG order by nr_row) FRMDW_BRUTTO_INCL_TRINKG,
row_number() over (partition by MWST_BETRAG_EUR order by nr_row) MWST_BETRAG_EUR,
row_number() over (partition by BRUTTO_BETRAG_EUR order by nr_row) BRUTTO_BETRAG_EUR,
row_number() over (partition by BRUTTO_INCL_TRINKG_EUR order by nr_row) BRUTTO_INCL_TRINKG_EUR,
row_number() over (partition by NETTO_BETRAG_EUR order by nr_row) NETTO_BETRAG_EUR,
row_number() over (partition by PREIS_PRO_MENGE order by nr_row) PREIS_PRO_MENGE,
row_number() over (partition by MENGENEINHEIT order by nr_row) MENGENEINHEIT,
row_number() over (partition by LA_DATUM order by nr_row) LA_DATUM,
row_number() over (partition by FK_LA_KONTO order by nr_row) FK_LA_KONTO,
row_number() over (partition by FK_LA_WDH order by nr_row) FK_LA_WDH,
row_number() over (partition by FK_BAS_STD_ZAHLSTATUS order by nr_row) FK_BAS_STD_ZAHLSTATUS,
row_number() over (partition by COMM_VERGEHEN order by nr_row) COMM_VERGEHEN,
row_number() over (partition by VERG_BEHOERDE order by nr_row) VERG_BEHOERDE,
row_number() over (partition by CNT_PUNKTE order by nr_row) CNT_PUNKTE,
row_number() over (partition by FK_BEL_BELEG_ABLAGE order by nr_row) FK_BEL_BELEG_ABLAGE,
row_number() over (partition by FK_ABL_ORDNER_PAGE order by nr_row) FK_ABL_ORDNER_PAGE,
row_number() over (partition by CNT_PUNKTE_GESCHAETZT order by nr_row) CNT_PUNKTE_GESCHAETZT,
row_number() over (partition by PUNKTE_VON order by nr_row) PUNKTE_VON,
row_number() over (partition by PUNKTE_BIS order by nr_row) PUNKTE_BIS,
row_number() over (partition by FK_LOC_LOCATION_VERG order by nr_row) FK_LOC_LOCATION_VERG,
row_number() over (partition by FK_IMP_BA_BEL_OLD order by nr_row) FK_IMP_BA_BEL_OLD,
row_number() over (partition by GESCHW_IST order by nr_row) GESCHW_IST,
row_number() over (partition by GESCHW_SOLL order by nr_row) GESCHW_SOLL,
row_number() over (partition by GESCHW_UEBER_GRZ order by nr_row) GESCHW_UEBER_GRZ,
row_number() over (partition by GESCHW_UEBER_GRZ_ABZGL_MESSTOL order by nr_row) GESCHW_UEBER_GRZ_ABZGL_MESSTOL,
row_number() over (partition by CODE_BUSSGELD order by nr_row) CODE_BUSSGELD,
row_number() over (partition by DESCR_BUSSGELD order by nr_row) DESCR_BUSSGELD,
row_number() over (partition by GEZAHLT_AM order by nr_row) GEZAHLT_AM,
row_number() over (partition by WEBSEITE order by nr_row) WEBSEITE,
row_number() over (partition by KUNDENNUMMER order by nr_row) KUNDENNUMMER,
row_number() over (partition by FK_REAL_BELEG_EXIST order by nr_row) FK_REAL_BELEG_EXIST,
row_number() over (partition by FK_CALC_STATE order by nr_row) FK_CALC_STATE,
row_number() over (partition by FK_CALC_STATE_EUR order by nr_row) FK_CALC_STATE_EUR,
row_number() over (partition by FK_CALC_STATE_FRMDW order by nr_row) FK_CALC_STATE_FRMDW,
row_number() over (partition by FK_BAS_STD_STATUS order by nr_row) FK_BAS_STD_STATUS,
row_number() over (partition by DATUM_VERGEHEN order by nr_row) DATUM_VERGEHEN,
row_number() over (partition by CREATE_AT order by nr_row) CREATE_AT,
row_number() over (partition by CREATE_BY order by nr_row) CREATE_BY,
row_number() over (partition by MODIFY_AT order by nr_row) MODIFY_AT,
row_number() over (partition by MODIFY_BY order by nr_row) MODIFY_BY,
row_number() over (partition by DATUM_ORT_OK order by nr_row) DATUM_ORT_OK,
row_number() over (partition by DATUM_ADDRESSE_OK order by nr_row) DATUM_ADDRESSE_OK,
row_number() over (partition by DATUM_BUSSGELD_OK order by nr_row) DATUM_BUSSGELD_OK,
row_number() over (partition by DATUM_BELEG_POS_OK order by nr_row) DATUM_BELEG_POS_OK,
row_number() over (partition by DATUM_BUCHUNG_OK order by nr_row) DATUM_BUCHUNG_OK,
row_number() over (partition by DATUM_VERPFL_BEL_OK order by nr_row) DATUM_VERPFL_BEL_OK,
row_number() over (partition by FK_INT_INTERNET_APP order by nr_row) FK_INT_INTERNET_APP,
row_number() over (partition by FK_CONTR_DUPL_STATUS order by nr_row) FK_CONTR_DUPL_STATUS,
row_number() over (partition by DATUM_DUPL_OK order by nr_row) DATUM_DUPL_OK,
row_number() over (partition by DUPL_BEMERKUNG order by nr_row) DUPL_BEMERKUNG,
row_number() over (partition by FK_KON_GESCHAEFTSPARTNER order by nr_row) FK_KON_GESCHAEFTSPARTNER,
row_number() over (partition by DUMMY order by nr_row) DUMMY,
row_number() over (partition by STORNIERT order by nr_row) STORNIERT,
row_number() over (partition by FK_ADR_ADRESSE_SCHNELL order by nr_row) FK_ADR_ADRESSE_SCHNELL





from un
)

,


all_ as (
select sel, sum1,nr_row, pk_inp_belege_all sel_pk_inp_belege_all,  'erg' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_BAS_KAT_KATEGORIE) FK_BAS_KAT_KATEGORIE	,	--	NUMBER
to_char(FK_BAS_KAL_ARBEITSTAG) FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
to_char(FK_KTO_BUCHUNG) FK_KTO_BUCHUNG	,	--	NUMBER
to_char(FK_BAS_STD_ZAHLUNGSART) FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
to_char(FK_STD_VERW_VERWENDUNGSZWECK	) FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INV_INVENTAR	) FK_INV_INVENTAR	,	--	NUMBER
to_char(FK_PROJ_PROJEKT) FK_PROJ_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_ADR_LAND) FK_ADR_LAND	,	--	NUMBER
to_char(FK_ADR_CITY) FK_ADR_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_STEU_STEUER_SATZ) FK_BAS_STEU_STEUER_SATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_MON_WAEHRUNG) FK_BAS_MON_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_BAS_MON_UMRECHNUNGSKURS) FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRUENDUNG)) COMM_BEGRUENDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSAEULE) ZAPFSAEULE	,	--	NUMBER
to_char(FK_LOC_LOCATION) FK_LOC_LOCATION	,	--	NUMBER
to_char(PERSOENLICH_VOR_ORT) PERSOENLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_BAS_KAL_VON_ARBEITSTAG) FK_BAS_KAL_VON_ARBEITSTAG, --NUMBER
to_char(FK_BAS_KAL_BIS_ARBEITSTAG) FK_BAS_KAL_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_BAS_MON_FRMDW) FK_BAS_MON_FRMDW, --NUMBER
to_char(FK_BAS_MON_FRMDW_MWST_SATZ) FK_BAS_MON_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_BAS_STD_ZAHLSTATUS) FK_BAS_STD_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BEL_BELEG_ABLAGE) FK_BEL_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOC_LOCATION_VERG) FK_LOC_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_BAS_STD_STATUS) FK_BAS_STD_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INT_INTERNET_APP) FK_INT_INTERNET_APP, --NUMBER
to_char(FK_CONTR_DUPL_STATUS) FK_CONTR_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_KON_GESCHAEFTSPARTNER) FK_KON_GESCHAEFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADR_ADRESSE_SCHNELL) FK_ADR_ADRESSE_SCHNELL --NUMBER

from un
union all
select sel, sum1,nr_row,sel_pk_inp_belege_all sel_pk_inp_belege_all, 'zw' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_BAS_KAT_KATEGORIE) FK_BAS_KAT_KATEGORIE	,	--	NUMBER
to_char(FK_BAS_KAL_ARBEITSTAG) FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
to_char(FK_KTO_BUCHUNG) FK_BUCHUNG	,	--	NUMBER
to_char(FK_BAS_STD_ZAHLUNGSART) FK_BAS_STD_ZAHLUNGSART	,	--	NUMBER
to_char(FK_STD_VERW_VERWENDUNGSZWECK	) FK_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INV_INVENTAR	) FK_INVENTAR	,	--	NUMBER
to_char(FK_PROJ_PROJEKT) FK_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_ADR_LAND) FK_LAND	,	--	NUMBER
to_char(FK_ADR_CITY) FK_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_STEU_STEUER_SATZ) FK_BAS_STEU_STEUER_SATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_MON_WAEHRUNG) fK_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_BAS_MON_UMRECHNUNGSKURS) FK_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRUENDUNG)) COMM_BEGRÜNDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSAEULE) ZAPFSAEULE	,	--	NUMBER
to_char(FK_LOC_LOCATION) FK_LOC_LOCATION	,	--	NUMBER
to_char(PERSOENLICH_VOR_ORT) PERSOENLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_BAS_KAL_VON_ARBEITSTAG) FK_BAS_KAL_VON_ARBEITSTAG, --NUMBER
to_char(FK_BAS_KAL_BIS_ARBEITSTAG) FK_BAS_KAL_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_BAS_MON_FRMDW) FK_BAS_MON_FRMDW, --NUMBER
to_char(FK_BAS_MON_FRMDW_MWST_SATZ) FK_BAS_MON_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_BAS_STD_ZAHLSTATUS) FK_STD_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BEL_BELEG_ABLAGE) FK_BEL_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOC_LOCATION_VERG) FK_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_BAS_STD_STATUS) FK_BAS_STD_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INT_INTERNET_APP) FK_INT_INTERNET_APP, --NUMBER
to_char(FK_CONTR_DUPL_STATUS) FK_CONTR_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_KON_GESCHAEFTSPARTNER) FK_KON_GESCHAEFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADR_ADRESSE_SCHNELL) FK_ADR_ADRESSE_SCHNELL --NUMBER

from 
vgl
union all
select null sel, 

case when max(PK_INP_BELEGE_ALL) =1 then 0 else 1 end + --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_KAT_KATEGORIE) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_KAL_ARBEITSTAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_KTO_BUCHUNG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STD_ZAHLUNGSART) =1 then 0 else 1 end + --NUMBER
case when max(FK_STD_VERW_VERWENDUNGSZWECK) =1 then 0 else 1 end + --NUMBER
case when max(FK_INV_INVENTAR) =1 then 0 else 1 end + --NUMBER
case when max(FK_PROJ_PROJEKT) =1 then 0 else 1 end + --NUMBER
case when max(BELEGNUMMER) =1 then 0 else 1 end + --VARCHAR2
case when max(BEZEICHNUNG) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_ADR_LAND) =1 then 0 else 1 end + --NUMBER
case when max(FK_ADR_CITY) =1 then 0 else 1 end + --NUMBER
case when max(BEL_DATUM) =1 then 0 else 1 end + --DATE
case when max(VON) =1 then 0 else 1 end + --DATE
case when max(BIS) =1 then 0 else 1 end + --DATE
case when max(NETTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STEU_STEUER_SATZ) =1 then 0 else 1 end + --NUMBER
case when max(MWST_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(BRUTTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_MON_WAEHRUNG) =1 then 0 else 1 end + --NUMBER
case when max(STEUERNUMMER) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_BAS_MON_UMRECHNUNGSKURS) =1 then 0 else 1 end + --NUMBER
case when max(COMM_REST_BELEG) =1 then 0 else 1 end + --CLOB
case when max(COMM_TEL_BELEG) =1 then 0 else 1 end + --CLOB
case when max(COMM_PRODUKTE) =1 then 0 else 1 end + --CLOB
case when max(COMM_BEGRUENDUNG) =1 then 0 else 1 end + --CLOB
case when max(COMM_SONSTIGES) =1 then 0 else 1 end + --CLOB
case when max(BELEG) =1 then 0 else 1 end + --BLOB
case when max(ZAHLUNGSBELEG) =1 then 0 else 1 end + --BLOB
case when max(LITER) =1 then 0 else 1 end + --NUMBER
case when max(ZAPFSAEULE) =1 then 0 else 1 end + --NUMBER
case when max(FK_LOC_LOCATION) =1 then 0 else 1 end + --NUMBER
case when max(PERSOENLICH_VOR_ORT) =1 then 0 else 1 end + --NUMBER
case when max(BELEG_UHRZEIT) =1 then 0 else 1 end + --DATE
case when max(VON_UHRZEIT) =1 then 0 else 1 end + --DATE
case when max(BIS_UHRZEIT) =1 then 0 else 1 end + --DATE
case when max(FK_BAS_KAL_VON_ARBEITSTAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_KAL_BIS_ARBEITSTAG) =1 then 0 else 1 end + --NUMBER
case when max(COMM_ADRESSE) =1 then 0 else 1 end + --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then 0 else 1 end + --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then 0 else 1 end + --NUMBER
case when max(COMM_PARKTICKET) =1 then 0 else 1 end + --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_MON_FRMDW) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_MON_FRMDW_MWST_SATZ) =1 then 0 else 1 end + --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then 0 else 1 end + --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then 0 else 1 end + --NUMBER
case when max(MWST_BETRAG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then 0 else 1 end + --NUMBER
case when max(PREIS_PRO_MENGE) =1 then 0 else 1 end + --NUMBER
case when max(MENGENEINHEIT) =1 then 0 else 1 end + --NUMBER
case when max(LA_DATUM) =1 then 0 else 1 end + --DATE
case when max(FK_LA_KONTO) =1 then 0 else 1 end + --NUMBER
case when max(FK_LA_WDH) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STD_ZAHLSTATUS) =1 then 0 else 1 end + --NUMBER
case when max(COMM_VERGEHEN) =1 then 0 else 1 end + --CLOB
case when max(VERG_BEHOERDE) =1 then 0 else 1 end + --VARCHAR2
case when max(CNT_PUNKTE) =1 then 0 else 1 end + --NUMBER
case when max(FK_BEL_BELEG_ABLAGE) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then 0 else 1 end + --NUMBER
case when max(CNT_PUNKTE_GESCHAETZT) =1 then 0 else 1 end + --NUMBER
case when max(PUNKTE_VON) =1 then 0 else 1 end + --DATE
case when max(PUNKTE_BIS) =1 then 0 else 1 end + --DATE
case when max(FK_LOC_LOCATION_VERG) =1 then 0 else 1 end + --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_IST) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_SOLL) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_UEBER_GRZ) =1 then 0 else 1 end + --NUMBER
case when max(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then 0 else 1 end + --NUMBER
case when max(CODE_BUSSGELD) =1 then 0 else 1 end + --VARCHAR2
case when max(DESCR_BUSSGELD) =1 then 0 else 1 end + --VARCHAR2
case when max(GEZAHLT_AM) =1 then 0 else 1 end + --DATE
case when max(WEBSEITE) =1 then 0 else 1 end + --VARCHAR2
case when max(KUNDENNUMMER) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then 0 else 1 end + --NUMBER
case when max(FK_CALC_STATE) =1 then 0 else 1 end + --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then 0 else 1 end + --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then 0 else 1 end + --NUMBER
case when max(FK_BAS_STD_STATUS) =1 then 0 else 1 end + --NUMBER
case when max(DATUM_VERGEHEN) =1 then 0 else 1 end + --DATE
case when max(CREATE_AT) =1 then 0 else 1 end + --DATE
case when max(CREATE_BY) =1 then 0 else 1 end + --VARCHAR2
case when max(MODIFY_AT) =1 then 0 else 1 end + --DATE
case when max(MODIFY_BY) =1 then 0 else 1 end + --DATE
case when max(DATUM_ORT_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_ADDRESSE_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_BUSSGELD_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_BELEG_POS_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_BUCHUNG_OK) =1 then 0 else 1 end + --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then 0 else 1 end + --DATE
case when max(FK_INT_INTERNET_APP) =1 then 0 else 1 end + --NUMBER
case when max(FK_CONTR_DUPL_STATUS) =1 then 0 else 1 end + --NUMBER
case when max(DATUM_DUPL_OK) =1 then 0 else 1 end + --DATE
case when max(DUPL_BEMERKUNG) =1 then 0 else 1 end + --VARCHAR2
case when max(FK_KON_GESCHAEFTSPARTNER) =1 then 0 else 1 end + --NUMBER
case when max(DUMMY) =1 then 0 else 1 end + --NUMBER
case when max(STORNIERT) =1 then 0 else 1 end + --NUMBER
case when max(FK_ADR_ADRESSE_SCHNELL) =1 then 0 else 1 end  --NUMBER
	

sum1, null nr_row, max(sel_pk_inp_belege_all) sel_pk_inp_belege_all, 'erg' erg,
case when max(PK_INP_BELEGE_ALL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAT_KATEGORIE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAL_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_KTO_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STD_ZAHLUNGSART) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STD_VERW_VERWENDUNGSZWECK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_INV_INVENTAR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_PROJ_PROJEKT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEGNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BEZEICHNUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ADR_LAND) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADR_CITY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BEL_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STEU_STEUER_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_WAEHRUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STEUERNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_BAS_MON_UMRECHNUNGSKURS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_REST_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_TEL_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_PRODUKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_BEGRUENDUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_SONSTIGES) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(ZAHLUNGSBELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(LITER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(ZAPFSAEULE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LOC_LOCATION) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PERSOENLICH_VOR_ORT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEG_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_BAS_KAL_VON_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAL_BIS_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_ADRESSE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_PARKTICKET) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_FRMDW_MWST_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PREIS_PRO_MENGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MENGENEINHEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(LA_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LA_KONTO) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LA_WDH) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STD_ZAHLSTATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(VERG_BEHOERDE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(CNT_PUNKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BEL_BELEG_ABLAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CNT_PUNKTE_GESCHAETZT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PUNKTE_VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(PUNKTE_BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LOC_LOCATION_VERG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_IST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_SOLL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CODE_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(DESCR_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(GEZAHLT_AM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(WEBSEITE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(KUNDENNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STD_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(MODIFY_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(MODIFY_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ORT_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ADDRESSE_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUSSGELD_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BELEG_POS_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUCHUNG_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_INT_INTERNET_APP) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CONTR_DUPL_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_DUPL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DUPL_BEMERKUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_KON_GESCHAEFTSPARTNER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DUMMY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STORNIERT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADR_ADRESSE_SCHNELL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end --NUMBER

from vgl
)
select rownum rnr, all_."SEL",all_."SUM1",all_."NR_ROW",all_."SEL_PK_INP_BELEGE_ALL",all_."ERG",all_."PK_INP_BELEGE_ALL",
all_."FK_LEX_BUCHUNG",all_."FK_BAS_KAT_KATEGORIE",all_."FK_BAS_KAL_ARBEITSTAG",
all_."FK_KTO_BUCHUNG",all_."FK_BAS_STD_ZAHLUNGSART",all_."FK_STD_VERW_VERWENDUNGSZWECK",all_."FK_INV_INVENTAR",all_."FK_PROJ_PROJEKT",all_."BELEGNUMMER",all_."BEZEICHNUNG",all_."FK_ADR_LAND",
all_."FK_ADR_CITY",all_."BEL_DATUM",all_."VON",all_."BIS",all_."NETTO_BETRAG",all_."FK_BAS_STEU_STEUER_SATZ",all_."MWST_BETRAG",all_."BRUTTO_BETRAG",all_."FK_BAS_MON_WAEHRUNG",
all_."STEUERNUMMER",all_."FK_BAS_MON_UMRECHNUNGSKURS",all_."COMM_REST_BELEG",all_."COMM_TEL_BELEG",all_."COMM_PRODUKTE",all_."COMM_BEGRUENDUNG",all_."COMM_SONSTIGES",all_."BELEG",all_."ZAHLUNGSBELEG",
all_."LITER",all_."ZAPFSAEULE",all_."FK_LOC_LOCATION",all_."PERSOENLICH_VOR_ORT",all_."BELEG_UHRZEIT",all_."VON_UHRZEIT",all_."BIS_UHRZEIT",all_."FK_BAS_KAL_VON_ARBEITSTAG",all_."FK_BAS_KAL_BIS_ARBEITSTAG",all_."COMM_ADRESSE",
all_."TANKSTELLEN_NR",all_."BRUTTO_BETRAG_INCL_TRINKG",all_."COMM_PARKTICKET",all_."FRMDW_NETTO_BETRAG",all_."FK_BAS_MON_FRMDW",all_."FK_BAS_MON_FRMDW_MWST_SATZ",all_."FRMDW_MWST_BETRAG",all_."FRMDW_BRUTTO_BETRAG",all_."FRMDW_BRUTTO_INCL_TRINKG",
all_."MWST_BETRAG_EUR",all_."BRUTTO_BETRAG_EUR",all_."BRUTTO_INCL_TRINKG_EUR",all_."NETTO_BETRAG_EUR",all_."PREIS_PRO_MENGE",all_."MENGENEINHEIT",all_."LA_DATUM",all_."FK_LA_KONTO",all_."FK_LA_WDH",all_."FK_BAS_STD_ZAHLSTATUS",all_."COMM_VERGEHEN",
all_."VERG_BEHOERDE",all_."CNT_PUNKTE",all_."FK_BEL_BELEG_ABLAGE",all_."FK_ABL_ORDNER_PAGE",all_."CNT_PUNKTE_GESCHAETZT",all_."PUNKTE_VON",all_."PUNKTE_BIS",all_."FK_LOC_LOCATION_VERG",all_."FK_IMP_BA_BEL_OLD",
all_."GESCHW_IST",all_."GESCHW_SOLL",all_."GESCHW_UEBER_GRZ",all_."GESCHW_UEBER_GRZ_ABZGL_MESSTOL",all_."CODE_BUSSGELD",all_."DESCR_BUSSGELD",all_."GEZAHLT_AM",all_."WEBSEITE",all_."KUNDENNUMMER",all_."FK_REAL_BELEG_EXIST",all_."FK_CALC_STATE",all_."FK_CALC_STATE_EUR",
all_."FK_CALC_STATE_FRMDW",all_."FK_BAS_STD_STATUS",all_."DATUM_VERGEHEN",all_."CREATE_AT",all_."CREATE_BY",all_."MODIFY_AT",all_."MODIFY_BY",all_."DATUM_ORT_OK",all_."DATUM_ADDRESSE_OK",all_."DATUM_BUSSGELD_OK",all_."DATUM_BELEG_POS_OK",all_."DATUM_BUCHUNG_OK",
all_."DATUM_VERPFL_BEL_OK",all_."FK_INT_INTERNET_APP",all_."FK_CONTR_DUPL_STATUS",all_."DATUM_DUPL_OK",all_."DUPL_BEMERKUNG",all_."FK_KON_GESCHAEFTSPARTNER",all_."DUMMY",all_."STORNIERT",all_."FK_ADR_ADRESSE_SCHNELL"
from all_
;
--------------------------------------------------------
--  DDL for View V_COMP_TABLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_COMP_TABLES" ("COLUMN_NAME") AS 
  with tab1 as (select * from user_tab_cols where table_name = 'T_LEX_KONTENBLATT'),
tab2 as (select * from user_tab_cols where table_name = 'IMP_KONTENBLATT_2020_2')
select tab1.column_name
--tab1.column_name, tab2.column_name, tab1.data_type, tab2.data_type, tab1.data_length, tab2.data_length
from tab1  full join tab2 on  tab1.column_name = tab2.column_name
;
--------------------------------------------------------
--  DDL for View V_CON_DOC_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CON_DOC_EXISTS" ("PK_CON_CONTACT", "DOC_MISS", "DOC_NON_VALID") AS 
  with con as ( 
                        select *
                        from (select * from rel_org_unit_con  ) rel_org_con
                        left   join  (select * from con_contact  ) con  on rel_org_con.fk_con_contact = con.pk_con_contact
                        
                    

),
doc_us_type as (
                            select *
                            from (
                            select * 
                            from  REL_DOC_TYPE_USAGE_TYPE where fk_doc_usage_type = 2
                  
                            ) rel
                              left join  doc_usage_type doc_usage_type on rel.fk_doc_usage_type =doc_usage_type.pk_doc_usage_type
                              left join doc_document_type   doc_type  on rel.fk_doc_document_type = doc_type.pk_doc_document_type  
),
doc_us_type1 as (
                                select *
                                from doc_us_type, con
)

,

doc_type_con as (
                    select *
                    from doc_us_type1

                
),
con_doc as (
                      select *
                      from con
                       join rel_doc_contact reldoccon on reldoccon.fk_con_contact = con.pk_con_contact
                       
                       join doc_document doc on doc.pk_doc_document = reldoccon.fk_doc_document
                    )

select 


doc_type_con.pk_con_contact, 
listagg (case when (doc_type_con.required = 1 and con_doc.pk_con_contact is null) then doc_document_type end, ',') within group (order by doc_type_con.pk_con_contact) doc_miss, 
--sum(case when (doc_type_con.required = 1 and con_doc.pk_con_contact is null) then 1 else 0 end) doc_miss_cnt,
listagg (case when (trunc(con_doc.valid_until) <= trunc(sysdate) ) then document_title || ' ' ||  valid_until  end, ',') within group (order by doc_type_con.pk_con_contact) doc_non_valid


from doc_type_con
 left join con_doc on doc_type_con.fk_doc_document_type = con_doc.fk_doc_document_type and con_doc.pk_con_contact = doc_type_con.pk_con_contact
 left join (select * from bas_basic where fk_bas_basic_grp = 2) doc_bas  on doc_bas.basic_value = con_doc.FK_LAN_PROF_LEVEL
--group by doc_type_con.pk_con_contact;
;
--------------------------------------------------------
--  DDL for View V_CONTR_KONTROLLE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_CONTR_KONTROLLE" ("PK_CONTR_KONTROLLE", "JAHR", "KONTO", "FINALISIERUNGSDATUM", "RELATION", "BETRAG", "BUCHUNGSTEXT", "BUCHDAT", "STATUS", "KST", "KTR", "UST", "UST_KTO", "HABENKTO", "SOLLKTO", "DATUM_OK", "BEMERKUNGEN", "FK_LEX_STORNO", "ZUSATZANG", "STEUERSCHLUESSEL", "BELEGNR", "PERIODE", "BELEGDAT") AS 
  SELECT
        kon."PK_CONTR_KONTROLLE",
        kon."JAHR",
        kon."KONTO",
        kon."FINALISIERUNGSDATUM",
        relation,
        betrag,
        buchungstext,
        buchdat,
        status,
        kst,
        ktr,
        ust,
        ust_kto,
        habenkto,
        sollkto,
        datum_ok,
        bemerkungen,
        fk_lex_storno,
        zusatzang,
        Steuerschluessel,
        belegnr,
        periode,
  
        belegdat
    FROM
        t_contr_kontrolle kon
 left JOIN t_lex_long ON t_lex_long.sollkto = kon.konto
;
--------------------------------------------------------
--  DDL for View V_DB_CHECK_TABLE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DB_CHECK_TABLE" ("DB") AS 
  select 'select ' || rownum || ' pos , ' || chr(39) || table_name || chr(39) ||  ' table_name, count(*) cnt from ' || table_name || ' union' db from user_tables
;
--------------------------------------------------------
--  DDL for View V_DB_CHECK_TABLE_CONTENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DB_CHECK_TABLE_CONTENT" ("DT", "OLD_DATUM", "OLD_OBJECT_TYPE", "OLD_FK_STD_DB_NEED_BUILT", "OLD_FK_STD_DB_NEED_REGULARLY_UPD", "OLD_TABLE_NAME_NEW", "OLD_TABLE_NAME_OLD", "OLD_OBJECT_STATUS_OLD", "OLD_MODUL", "PK_DB_TAB_TABLE_CONTENT_COUNT", "OLD_TABLE_NAME", "OLD_CNT", "OLD_COMM", "OLD_DATUM_CHECK_OK", "OLD_FK_STD_DB_CHECK_STATUS", "OLD_FK_STD_DB_DATA_TRANSFERED", "NEW_POS", "NEW_TABLE_NAME", "NEW_CNT", "DIFF", "OBJECT_NAME", "OLD_RE_IMP_NR", "TRANSF_POS1", "TRANSF_MAX_TRANSF_DATE", "TRANSF_MIN_TRANSF_DATE", "TRANSF_CNT_TRANSFERED") AS 
  with old_tab as (
    select * from t_db_tab_table_content_count
    
),
new_tab as ( 
            select 1 pos , 'T_INV_INVENTARE' table_name, count(*) cnt from T_INV_INVENTARE union
            select 2 pos , 'T_KAL_TERMINE' table_name, count(*) cnt from T_KAL_TERMINE union
            select 3 pos , 'T_BAS_KAL_ARBEITSTAGE' table_name, count(*) cnt from T_BAS_KAL_ARBEITSTAGE union
            select 4 pos , 'T_KTO_GIROKONTO' table_name, count(*) cnt from T_KTO_GIROKONTO union
            select 5 pos , 'T_KTO_KAS_KASSE' table_name, count(*) cnt from T_KTO_KAS_KASSE union
            select 6 pos , 'T_KTO_BANKKONTO' table_name, count(*) cnt from T_KTO_BANKKONTO union
            select 7 pos , 'T_KTO_DOWNLOAD' table_name, count(*) cnt from T_KTO_DOWNLOAD union
            select 8 pos , 'T_KTO_KONTO_BUCH' table_name, count(*) cnt from T_KTO_KONTO_BUCH union
            select 9 pos , 'T_KTO_KREDITKARTE' table_name, count(*) cnt from T_KTO_KREDITKARTE union
            select 10 pos , 'T_KTO_PAYPAL' table_name, count(*) cnt from T_KTO_PAYPAL union
            select 11 pos , 'T_KTO_PP_VORGANG' table_name, count(*) cnt from T_KTO_PP_VORGANG union
            select 12 pos , 'T_KTO_PP_VORGANG_DOWNLOAD' table_name, count(*) cnt from T_KTO_PP_VORGANG_DOWNLOAD union
            select 13 pos , 'T_BAS_KAT_IMMO' table_name, count(*) cnt from T_BAS_KAT_IMMO union
            select 14 pos , 'T_BAS_KAT_KATEGORIE' table_name, count(*) cnt from T_BAS_KAT_KATEGORIE union
            select 15 pos , 'T_STD' table_name, count(*) cnt from T_STD union
            select 16 pos , 'T_STD_GROUP' table_name, count(*) cnt from T_STD_GROUP union
            select 17 pos , 'T_KTO_TAGESGELDKONTO' table_name, count(*) cnt from T_KTO_TAGESGELDKONTO union
            select 18 pos , 'T_BAS_KAT_OBERKATEGORIE' table_name, count(*) cnt from T_BAS_KAT_OBERKATEGORIE union
            select 19 pos , 'T_KTO_BANK' table_name, count(*) cnt from T_KTO_BANK union
            select 20 pos , 'BEST_POS' table_name, count(*) cnt from BEST_POS union
            select 21 pos , 'IMP_BA_ALLG_BEL' table_name, count(*) cnt from IMP_BA_ALLG_BEL union
            select 22 pos , 'IMP_BA_BEL_DET' table_name, count(*) cnt from IMP_BA_BEL_DET union
            select 23 pos , 'IMP_BA_BUSSGELDER' table_name, count(*) cnt from IMP_BA_BUSSGELDER union
            select 24 pos , 'IMP_BA_COWORKING' table_name, count(*) cnt from IMP_BA_COWORKING union
            select 25 pos , 'IMP_BA_GRENZBELEGE' table_name, count(*) cnt from IMP_BA_GRENZBELEGE union
            select 26 pos , 'IMP_BA_OEFFENTL_TICKETS' table_name, count(*) cnt from IMP_BA_OEFFENTL_TICKETS union
            select 27 pos , 'IMP_BA_PARKTICKETS' table_name, count(*) cnt from IMP_BA_PARKTICKETS union
            select 28 pos , 'IMP_BA_SONSTIGE_BELEGE' table_name, count(*) cnt from IMP_BA_SONSTIGE_BELEGE union
            select 29 pos , 'IMP_BA_TANKSTELLE' table_name, count(*) cnt from IMP_BA_TANKSTELLE union
            select 30 pos , 'IMP_BA_UNTERHALTUNG' table_name, count(*) cnt from IMP_BA_UNTERHALTUNG union
            select 31 pos , 'IMP_GEO' table_name, count(*) cnt from IMP_GEO union
            select 32 pos , 'IMP_KRED_OV_OLD' table_name, count(*) cnt from IMP_KRED_OV_OLD union
            select 33 pos , 'PROJ1_ADDFRIEND' table_name, count(*) cnt from PROJ1_ADDFRIEND union
            select 34 pos , 'PROJ1_ADDFRIEND_RELATIONS' table_name, count(*) cnt from PROJ1_ADDFRIEND_RELATIONS union
            select 35 pos , 'SPARCHILD' table_name, count(*) cnt from SPARCHILD union
            select 36 pos , 'SPARCHILD1' table_name, count(*) cnt from SPARCHILD1 union
            select 37 pos , 'T_ABL_ORDNER' table_name, count(*) cnt from T_ABL_ORDNER union
            select 38 pos , 'T_ABL_ORDNER_PAGE' table_name, count(*) cnt from T_ABL_ORDNER_PAGE union
            select 39 pos , 'T_ABR_EN_HEIZUNGSABLESUNG_DETAILS' table_name, count(*) cnt from T_ABR_EN_HEIZUNGSABLESUNG_DETAILS union
            select 40 pos , 'T_ABR_EN_HEIZUNGSABRECHNUNG' table_name, count(*) cnt from T_ABR_EN_HEIZUNGSABRECHNUNG union
            select 41 pos , 'T_ABR_EN_STROMABLESUNG' table_name, count(*) cnt from T_ABR_EN_STROMABLESUNG union
            select 42 pos , 'T_ADR_ADRESSE' table_name, count(*) cnt from T_ADR_ADRESSE union
            select 43 pos , 'T_ADR_ADRESSE_SCHNELL' table_name, count(*) cnt from T_ADR_ADRESSE_SCHNELL union
            select 44 pos , 'T_ADR_KONTINENT' table_name, count(*) cnt from T_ADR_KONTINENT union
            select 45 pos , 'T_ADR_LAND' table_name, count(*) cnt from T_ADR_LAND union
            select 46 pos , 'T_ADR_ORT' table_name, count(*) cnt from T_ADR_ORT union
            select 47 pos , 'T_ADR_ORT_KOORDINATEN' table_name, count(*) cnt from T_ADR_ORT_KOORDINATEN union
            select 48 pos , 'T_ADR_PLZ_ORT' table_name, count(*) cnt from T_ADR_PLZ_ORT union
            select 49 pos , 'T_ADR_PLZ_ORT_BUNDESLAND' table_name, count(*) cnt from T_ADR_PLZ_ORT_BUNDESLAND union
            select 50 pos , 'T_ADR_REGION' table_name, count(*) cnt from T_ADR_REGION union
            select 51 pos , 'T_AHN_AHNENTAFEL' table_name, count(*) cnt from T_AHN_AHNENTAFEL union
            select 52 pos , 'T_AHN_FAMILIE' table_name, count(*) cnt from T_AHN_FAMILIE union
            select 53 pos , 'T_AHN_PERSON_STAMM' table_name, count(*) cnt from T_AHN_PERSON_STAMM union
            select 54 pos , 'T_BAS_BAS_FARBE' table_name, count(*) cnt from T_BAS_BAS_FARBE union
            select 55 pos , 'T_BAS_BAS_MENGENEINHEIT' table_name, count(*) cnt from T_BAS_BAS_MENGENEINHEIT union
            select 56 pos , 'T_BAS_BEL_BELEGART' table_name, count(*) cnt from T_BAS_BEL_BELEGART union
            select 57 pos , 'T_BAS_BEL_BELEGART_GRP' table_name, count(*) cnt from T_BAS_BEL_BELEGART_GRP union
            select 58 pos , 'T_BAS_DOC_DOCUMENT_TYPE' table_name, count(*) cnt from T_BAS_DOC_DOCUMENT_TYPE union
            select 59 pos , 'T_BAS_FLI_APL_PLANE_MODELL' table_name, count(*) cnt from T_BAS_FLI_APL_PLANE_MODELL union
            select 60 pos , 'T_BAS_INV_INVENTARTYP' table_name, count(*) cnt from T_BAS_INV_INVENTARTYP union
            select 61 pos , 'T_BAS_KON_GESCHAEFTSPARTNERTYP' table_name, count(*) cnt from T_BAS_KON_GESCHAEFTSPARTNERTYP union
            select 62 pos , 'T_BAS_KON_KONTAKTTYP' table_name, count(*) cnt from T_BAS_KON_KONTAKTTYP union
            select 63 pos , 'T_BAS_LOC_LOCATION_TYPE' table_name, count(*) cnt from T_BAS_LOC_LOCATION_TYPE union
            select 64 pos , 'T_BAS_MON_UMTAUSCHKURS' table_name, count(*) cnt from T_BAS_MON_UMTAUSCHKURS union
            select 65 pos , 'T_BAS_MON_WAEHRUNG' table_name, count(*) cnt from T_BAS_MON_WAEHRUNG union
            select 66 pos , 'T_BAS_ORG_ORG_UNIT' table_name, count(*) cnt from T_BAS_ORG_ORG_UNIT union
            select 67 pos , 'T_BAS_PROJ_PROJEKT_ART_OLD' table_name, count(*) cnt from T_BAS_PROJ_PROJEKT_ART_OLD union
            select 68 pos , 'T_BAS_STEU_STEUER_SATZ' table_name, count(*) cnt from T_BAS_STEU_STEUER_SATZ union
            select 69 pos , 'T_BAS_WH_ART_ARTIKELBESTANDTEILTYP' table_name, count(*) cnt from T_BAS_WH_ART_ARTIKELBESTANDTEILTYP union
            select 70 pos , 'T_BAS_WH_ART_ARTIKELBUENDELUNG' table_name, count(*) cnt from T_BAS_WH_ART_ARTIKELBUENDELUNG union
            select 71 pos , 'T_BAS_WH_ART_ARTIKELTYP' table_name, count(*) cnt from T_BAS_WH_ART_ARTIKELTYP union
            select 72 pos , 'T_BAS_WH_PACKUNGSTYP' table_name, count(*) cnt from T_BAS_WH_PACKUNGSTYP union
            select 73 pos , 'T_BEI_KK_KRANKENKASSE_DET' table_name, count(*) cnt from T_BEI_KK_KRANKENKASSE_DET union
           -- select 74 pos , 'T_BEL_BELEG' table_name, count(*) cnt from T_BEL_BELEG union
            select 75 pos , 'T_BEL_BELEGPOSITION' table_name, count(*) cnt from T_BEL_BELEGPOSITION union
            select 76 pos , 'T_BEL_BELEGSEL' table_name, count(*) cnt from T_BEL_BELEGSEL union
            select 77 pos , 'T_BILD_BILDER' table_name, count(*) cnt from T_BILD_BILDER union
            select 78 pos , 'T_BOOK_BOOKING' table_name, count(*) cnt from T_BOOK_BOOKING union
            select 79 pos , 'T_BOOK_RESERVATION' table_name, count(*) cnt from T_BOOK_RESERVATION union
            select 80 pos , 'T_BUCH_BUCH' table_name, count(*) cnt from T_BUCH_BUCH union
            select 81 pos , 'T_CALC_MATCH' table_name, count(*) cnt from T_CALC_MATCH union
            select 82 pos , 'T_DB_TAB_TABLE_CONTENT_COUNT' table_name, count(*) cnt from T_DB_TAB_TABLE_CONTENT_COUNT union
            select 83 pos , 'T_CAR_AUTO_ERSATZTEILE' table_name, count(*) cnt from T_CAR_AUTO_ERSATZTEILE union
            select 84 pos , 'T_CAR_AUTO_VERMIETUNG' table_name, count(*) cnt from T_CAR_AUTO_VERMIETUNG union
            select 85 pos , 'T_CAR_AUTO_VERSICHERUNG' table_name, count(*) cnt from T_CAR_AUTO_VERSICHERUNG union
            select 86 pos , 'T_CAR_AUTO_VERSICHERUNG_POS' table_name, count(*) cnt from T_CAR_AUTO_VERSICHERUNG_POS union
            select 87 pos , 'T_CLOB' table_name, count(*) cnt from T_CLOB union
            select 88 pos , 'T_COMP_COMPANY' table_name, count(*) cnt from T_COMP_COMPANY union
            select 89 pos , 'T_CONTR_DUPLIKAT' table_name, count(*) cnt from T_CONTR_DUPLIKAT union
            select 90 pos , 'T_CONTR_DUPLIKAT_CHECK' table_name, count(*) cnt from T_CONTR_DUPLIKAT_CHECK union
            select 91 pos , 'T_CONTR_DUPLIKAT_CHECK_KONTR' table_name, count(*) cnt from T_CONTR_DUPLIKAT_CHECK_KONTR union
            select 92 pos , 'T_CONTR_KATEGORIE_ZAHLUNG' table_name, count(*) cnt from T_CONTR_KATEGORIE_ZAHLUNG union
            select 93 pos , 'T_CONTR_KONTROLLE' table_name, count(*) cnt from T_CONTR_KONTROLLE union
            select 94 pos , 'T_COST_COST_GRP' table_name, count(*) cnt from T_COST_COST_GRP union
            select 95 pos , 'T_COST_GAIN_AND_LOSS' table_name, count(*) cnt from T_COST_GAIN_AND_LOSS union
            select 96 pos , 'T_DB_OBJ_OBJECT_LIST' table_name, count(*) cnt from T_DB_OBJ_OBJECT_LIST union
            select 97 pos , 'T_DB_RENAME' table_name, count(*) cnt from T_DB_RENAME union
            select 98 pos , 'T_DOC_DOCUMENT' table_name, count(*) cnt from T_DOC_DOCUMENT union
            select 99 pos , 'T_DOC_USAGE_TYPE' table_name, count(*) cnt from T_DOC_USAGE_TYPE union
            select 100 pos , 'TEMP_ERG' table_name, count(*) cnt from TEMP_ERG union
            select 101 pos , 'T_ERF_BEL_KOMP' table_name, count(*) cnt from T_ERF_BEL_KOMP union
            select 102 pos , 'T_ERF_BEL_KOMP_DET' table_name, count(*) cnt from T_ERF_BEL_KOMP_DET union
            select 103 pos , 'T_ERF_BEL_KRANKENKASSE' table_name, count(*) cnt from T_ERF_BEL_KRANKENKASSE union
            select 104 pos , 'T_FLI_AIR_AIRPORTS' table_name, count(*) cnt from T_FLI_AIR_AIRPORTS union
            select 105 pos , 'T_FLI_AIR_HANGAR' table_name, count(*) cnt from T_FLI_AIR_HANGAR union
            select 106 pos , 'T_FLI_APL_MAINT' table_name, count(*) cnt from T_FLI_APL_MAINT union
            select 107 pos , 'T_FLI_APL_MAINT_PROGR' table_name, count(*) cnt from T_FLI_APL_MAINT_PROGR union
            select 108 pos , 'T_FLI_APL_PLANE' table_name, count(*) cnt from T_FLI_APL_PLANE union
            select 109 pos , 'T_FLI_APL_PLANE_ENGINE' table_name, count(*) cnt from T_FLI_APL_PLANE_ENGINE union
            select 110 pos , 'T_FLI_APL_PLANE_ENGINE_MODELL' table_name, count(*) cnt from T_FLI_APL_PLANE_ENGINE_MODELL union
            select 111 pos , 'T_FLI_BOR_BORD_LOG' table_name, count(*) cnt from T_FLI_BOR_BORD_LOG union
            select 112 pos , 'T_FLI_BOR_BORD_LOG_ENTRY' table_name, count(*) cnt from T_FLI_BOR_BORD_LOG_ENTRY union
            select 113 pos , 'T_FLI_BOR_BORD_LOG_ENTRY_ADD' table_name, count(*) cnt from T_FLI_BOR_BORD_LOG_ENTRY_ADD union
            select 114 pos , 'T_FLI_BOR_BORD_LOG_ENTRY_GRP' table_name, count(*) cnt from T_FLI_BOR_BORD_LOG_ENTRY_GRP union
            select 115 pos , 'T_FLI_BOR_BORD_LOG_ENTRY_HOB_RPM' table_name, count(*) cnt from T_FLI_BOR_BORD_LOG_ENTRY_HOB_RPM union
            select 116 pos , 'T_FLI_FLI_FLIGHT' table_name, count(*) cnt from T_FLI_FLI_FLIGHT union
            select 117 pos , 'T_FLI_FLI_FLIGHT_COMMENTS' table_name, count(*) cnt from T_FLI_FLI_FLIGHT_COMMENTS union
            select 118 pos , 'T_FLI_FLI_FLIGHT_DISCOUNT_REASONS' table_name, count(*) cnt from T_FLI_FLI_FLIGHT_DISCOUNT_REASONS union
            select 119 pos , 'T_FLI_FLI_FLIGHT_DISCOUNTS' table_name, count(*) cnt from T_FLI_FLI_FLIGHT_DISCOUNTS union
            select 120 pos , 'T_FLI_FLI_FLIGHT_STEPS' table_name, count(*) cnt from T_FLI_FLI_FLIGHT_STEPS union
            select 121 pos , 'T_IMMO_OBJEKT' table_name, count(*) cnt from T_IMMO_OBJEKT union
            select 122 pos , 'T_IMP_ADR' table_name, count(*) cnt from T_IMP_ADR union
            select 123 pos , 'T_IMP_KON_KONTAKTDATEN' table_name, count(*) cnt from T_IMP_KON_KONTAKTDATEN union
            select 124 pos , 'T_IMP_BEL' table_name, count(*) cnt from T_IMP_BEL union
            select 125 pos , 'T_IMP_HOTEL_BOOKING' table_name, count(*) cnt from T_IMP_HOTEL_BOOKING union
            select 126 pos , 'T_IMP_INP_BELEGE_ALL' table_name, count(*) cnt from T_IMP_INP_BELEGE_ALL union
            select 127 pos , 'T_IMP_KTO_BANK2' table_name, count(*) cnt from T_IMP_KTO_BANK2 union
            select 128 pos , 'T_IMP_KTO_BANK3' table_name, count(*) cnt from T_IMP_KTO_BANK3 union
            select 129 pos , 'T_IMP_KTO_BANK4' table_name, count(*) cnt from T_IMP_KTO_BANK4 union
            select 130 pos , 'T_IMP_KTO_BANK5' table_name, count(*) cnt from T_IMP_KTO_BANK5 union
            select 131 pos , 'T_IMP_KTO_BANK6' table_name, count(*) cnt from T_IMP_KTO_BANK6 union
            select 132 pos , 'T_IMP_KTO_BANK7' table_name, count(*) cnt from T_IMP_KTO_BANK7 union
            select 133 pos , 'T_IMP_KTO_GIR_KTO' table_name, count(*) cnt from T_IMP_KTO_GIR_KTO union
            select 134 pos , 'T_IMP_KTO_GIR_NORIS' table_name, count(*) cnt from T_IMP_KTO_GIR_NORIS union
            select 135 pos , 'T_IMP_KTO_GIR_POST' table_name, count(*) cnt from T_IMP_KTO_GIR_POST union
            select 136 pos , 'T_IMP_KTO_ING_DIBA' table_name, count(*) cnt from T_IMP_KTO_ING_DIBA union
            select 137 pos , 'T_IMP_KTO_KRED' table_name, count(*) cnt from T_IMP_KTO_KRED union
            select 138 pos , 'T_IMP_KTO_PAY' table_name, count(*) cnt from T_IMP_KTO_PAY union
            select 139 pos , 'T_IMP_KTO_062017' table_name, count(*) cnt from T_IMP_KTO_062017 union
            select 140 pos , 'T_IMP_LEX' table_name, count(*) cnt from T_IMP_LEX union
            select 141 pos , 'T_IMP_LEX_EXP_ACII' table_name, count(*) cnt from T_IMP_LEX_EXP_ACII union
            select 142 pos , 'T_IMP_LEX_KONTENBLATT_2017' table_name, count(*) cnt from T_IMP_LEX_KONTENBLATT_2017 union
            select 143 pos , 'T_IMP_LEX_KONTENBLATT_2018_1' table_name, count(*) cnt from T_IMP_LEX_KONTENBLATT_2018_1 union
            select 144 pos , 'T_IMP_LEX_KONTENBLATT_2018_2' table_name, count(*) cnt from T_IMP_LEX_KONTENBLATT_2018_2 union
            select 145 pos , 'T_IMP_LEX_KONTENBLATT_2019' table_name, count(*) cnt from T_IMP_LEX_KONTENBLATT_2019 union
            select 146 pos , 'T_IMP_LEX_KONTENBLATT_2020' table_name, count(*) cnt from T_IMP_LEX_KONTENBLATT_2020 union
            select 147 pos , 'T_IMP_LEX_LONG' table_name, count(*) cnt from T_IMP_LEX_LONG union
            select 148 pos , 'T_IMP_LEX_RE' table_name, count(*) cnt from T_IMP_LEX_RE union
            select 149 pos , 'T_IMP_LEX_TEST' table_name, count(*) cnt from T_IMP_LEX_TEST union
            select 150 pos , 'T_IMP_LIST' table_name, count(*) cnt from T_IMP_LIST union
            select 151 pos , 'T_IMP_LOG_LOAD' table_name, count(*) cnt from T_IMP_LOG_LOAD union
            select 152 pos , 'T_IMP_TEL_CONGSTAR_RECH' table_name, count(*) cnt from T_IMP_TEL_CONGSTAR_RECH union
            select 153 pos , 'T_IMP_TEL_CONGSTAR_RECH_DET' table_name, count(*) cnt from T_IMP_TEL_CONGSTAR_RECH_DET union
            select 154 pos , 'T_IMP_TEL_MOBILCOM_RECH' table_name, count(*) cnt from T_IMP_TEL_MOBILCOM_RECH union
            select 155 pos , 'T_IMP_TEL_MOBILCOM_RECH_DET' table_name, count(*) cnt from T_IMP_TEL_MOBILCOM_RECH_DET union
            select 156 pos , 'T_IMP_TEL_MOBILCOM_RECH_OV' table_name, count(*) cnt from T_IMP_TEL_MOBILCOM_RECH_OV union
            select 157 pos , 'T_IMP_TEL_O2' table_name, count(*) cnt from T_IMP_TEL_O2 union
            select 158 pos , 'T_IMP_TEL_VODAFONE' table_name, count(*) cnt from T_IMP_TEL_VODAFONE union
            select 159 pos , 'T_INP_BELEGE_ALL' table_name, count(*) cnt from T_INP_BELEGE_ALL union
            select 160 pos , 'T_INP_BELEGE_POS_ALL' table_name, count(*) cnt from T_INP_BELEGE_POS_ALL union
            select 161 pos , 'T_INT_INTERNETPORTAL_APP' table_name, count(*) cnt from T_INT_INTERNETPORTAL_APP union
            select 162 pos , 'T_INV_ANL_RESTBUCHWERT' table_name, count(*) cnt from T_INV_ANL_RESTBUCHWERT union
            select 163 pos , 'T_INV_KOMP_KOMPONENTEN' table_name, count(*) cnt from T_INV_KOMP_KOMPONENTEN union
            select 164 pos , 'T_INV_SUB_ELEKTRONIK' table_name, count(*) cnt from T_INV_SUB_ELEKTRONIK union
            select 165 pos , 'T_KON_GESCHAEFTSPARTNER' table_name, count(*) cnt from T_KON_GESCHAEFTSPARTNER union
            select 166 pos , 'T_KON_KONTAKT' table_name, count(*) cnt from T_KON_KONTAKT union
            select 167 pos , 'T_KON_PERSON' table_name, count(*) cnt from T_KON_PERSON union
            select 168 pos , 'T_KON_PERSON_OFFENE_PUNKTE' table_name, count(*) cnt from T_KON_PERSON_OFFENE_PUNKTE union
            select 169 pos , 'T_KTO_KONTO_AUSZUG' table_name, count(*) cnt from T_KTO_KONTO_AUSZUG union
            select 170 pos , 'T_KTO_SEPA_VORLAGEN' table_name, count(*) cnt from T_KTO_SEPA_VORLAGEN union
            select 171 pos , 'T_KZ_KENNZAHLEN' table_name, count(*) cnt from T_KZ_KENNZAHLEN union
            select 172 pos , 'T_LEHR_EINSENDEAUFGABE' table_name, count(*) cnt from T_LEHR_EINSENDEAUFGABE union
            select 173 pos , 'T_LEHR_FRAGE' table_name, count(*) cnt from T_LEHR_FRAGE union
            select 174 pos , 'T_LEHR_LEHRGANG' table_name, count(*) cnt from T_LEHR_LEHRGANG union
            select 175 pos , 'T_LEHR_LOESUNG' table_name, count(*) cnt from T_LEHR_LOESUNG union
            select 176 pos , 'T_LEX' table_name, count(*) cnt from T_LEX union
            select 177 pos , 'T_LEX_KONTENBLATT' table_name, count(*) cnt from T_LEX_KONTENBLATT union
            select 178 pos , 'T_LEX_KONTENPLAN' table_name, count(*) cnt from T_LEX_KONTENPLAN union
            select 179 pos , 'T_LEX_KONTENPLAN_GRP' table_name, count(*) cnt from T_LEX_KONTENPLAN_GRP union
            select 180 pos , 'T_LEX_KONTENPLAN_KONTEN' table_name, count(*) cnt from T_LEX_KONTENPLAN_KONTEN union
            select 181 pos , 'T_LEX_KONTENPLAN_KONTEN_GRP' table_name, count(*) cnt from T_LEX_KONTENPLAN_KONTEN_GRP union
            select 182 pos , 'T_LEX_KONTENPLAN_KONTEN_KAT' table_name, count(*) cnt from T_LEX_KONTENPLAN_KONTEN_KAT union
            select 183 pos , 'T_LEX_KONTENPLAN_KONTEN_KAT_GRP' table_name, count(*) cnt from T_LEX_KONTENPLAN_KONTEN_KAT_GRP union
            select 184 pos , 'T_LEX_KONTENPLAN_KONTEN_KL' table_name, count(*) cnt from T_LEX_KONTENPLAN_KONTEN_KL union
            select 185 pos , 'T_LEX_KONTENPLAN_KONTEN_TYP' table_name, count(*) cnt from T_LEX_KONTENPLAN_KONTEN_TYP union
            select 186 pos , 'T_LEX_KONTENPLAN_NEU' table_name, count(*) cnt from T_LEX_KONTENPLAN_NEU union
            select 187 pos , 'T_LEX_LONG' table_name, count(*) cnt from T_LEX_LONG union
            select 188 pos , 'T_LEX_LONG_COMM' table_name, count(*) cnt from T_LEX_LONG_COMM union
            select 189 pos , 'T_LEX_LONG_IMP' table_name, count(*) cnt from T_LEX_LONG_IMP union
            select 190 pos , 'T_LEX_SACHKONTEN' table_name, count(*) cnt from T_LEX_SACHKONTEN union
            select 191 pos , 'T_LEX_SUSA' table_name, count(*) cnt from T_LEX_SUSA union
            select 192 pos , 'T_LOC_LOCATION' table_name, count(*) cnt from T_LOC_LOCATION union
            select 193 pos , 'T_LOC_LOCATION_SUB' table_name, count(*) cnt from T_LOC_LOCATION_SUB union
            select 194 pos , 'T_MDT_MANDANT' table_name, count(*) cnt from T_MDT_MANDANT union
            select 195 pos , 'T_ORG_BEITRAG' table_name, count(*) cnt from T_ORG_BEITRAG union
            select 196 pos , 'T_ORG_UNIT' table_name, count(*) cnt from T_ORG_UNIT union
            select 197 pos , 'T_ORG_UNIT_CHECK_OUT' table_name, count(*) cnt from T_ORG_UNIT_CHECK_OUT union
            select 198 pos , 'T_ORG_UNIT_REL_TYPE' table_name, count(*) cnt from T_ORG_UNIT_REL_TYPE union
            select 199 pos , 'T_ORG_UNIT_TYPE' table_name, count(*) cnt from T_ORG_UNIT_TYPE union
            select 200 pos , 'T_PLA_PLAN' table_name, count(*) cnt from T_PLA_PLAN union
            select 201 pos , 'T_PLA_PLAN_DET' table_name, count(*) cnt from T_PLA_PLAN_DET union
            select 202 pos , 'T_PLA_PLAN_VERSION' table_name, count(*) cnt from T_PLA_PLAN_VERSION union
            select 203 pos , 'T_PROJ_PROJEKT' table_name, count(*) cnt from T_PROJ_PROJEKT union
            select 204 pos , 'T_PROJ_STUNDENZETTEL' table_name, count(*) cnt from T_PROJ_STUNDENZETTEL union
            select 205 pos , 'TREE_TAB' table_name, count(*) cnt from TREE_TAB union
            select 206 pos , 'T_REL_ADR_KONTINENT_LAND' table_name, count(*) cnt from T_REL_ADR_KONTINENT_LAND union
            select 207 pos , 'T_REL_AHN_FAMILIE_BILD' table_name, count(*) cnt from T_REL_AHN_FAMILIE_BILD union
            select 208 pos , 'T_REL_AHN_PERSON_ELTERN' table_name, count(*) cnt from T_REL_AHN_PERSON_ELTERN union
            select 209 pos , 'T_REL_AHN_PERSON_FAMILIE' table_name, count(*) cnt from T_REL_AHN_PERSON_FAMILIE union
            select 210 pos , 'T_REL_AHN_PERSON_GESCHWISTER' table_name, count(*) cnt from T_REL_AHN_PERSON_GESCHWISTER union
            select 211 pos , 'T_REL_AHN_PERSON_LEBENSPARTNER' table_name, count(*) cnt from T_REL_AHN_PERSON_LEBENSPARTNER union
            select 212 pos , 'T_REL_AHN_PERSON_LEBENSPARTNER_BILD' table_name, count(*) cnt from T_REL_AHN_PERSON_LEBENSPARTNER_BILD union
            select 213 pos , 'T_REL_AHN_PERSON_RELIGION' table_name, count(*) cnt from T_REL_AHN_PERSON_RELIGION union
            select 214 pos , 'T_REL_BEL_BARGELD_BELEG' table_name, count(*) cnt from T_REL_BEL_BARGELD_BELEG union
            select 215 pos , 'T_REL_BEL_BELEGART_GRP' table_name, count(*) cnt from T_REL_BEL_BELEGART_GRP union
            select 216 pos , 'T_REL_BEL_BELEG_ARTIKEL' table_name, count(*) cnt from T_REL_BEL_BELEG_ARTIKEL union
            select 217 pos , 'T_REL_BEL_BELEG_INVENTAR' table_name, count(*) cnt from T_REL_BEL_BELEG_INVENTAR union
            select 218 pos , 'T_REL_BEL_BELEG_LOCATION' table_name, count(*) cnt from T_REL_BEL_BELEG_LOCATION union
            select 219 pos , 'T_REL_BEL_KONT_BUCH' table_name, count(*) cnt from T_REL_BEL_KONT_BUCH union
            select 220 pos , 'T_REL_BEL_LEX' table_name, count(*) cnt from T_REL_BEL_LEX union
            select 221 pos , 'T_REL_COMP_COMPANY_COMPANY' table_name, count(*) cnt from T_REL_COMP_COMPANY_COMPANY union
            select 222 pos , 'T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST' table_name, count(*) cnt from T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST union
            select 223 pos , 'T_REL_DB_OBJ_OBJECT_LIST_PART' table_name, count(*) cnt from T_REL_DB_OBJ_OBJECT_LIST_PART union
            select 224 pos , 'T_REL_DOC_DOCUMENT_TYPE_USAGE_TYPE' table_name, count(*) cnt from T_REL_DOC_DOCUMENT_TYPE_USAGE_TYPE union
            select 225 pos , 'T_REL_FLI_BORD_LOG_ENTRY_PAYMENT' table_name, count(*) cnt from T_REL_FLI_BORD_LOG_ENTRY_PAYMENT union
            select 226 pos , 'T_REL_FLI_FLIGHT_DOCUMENT' table_name, count(*) cnt from T_REL_FLI_FLIGHT_DOCUMENT union
            select 227 pos , 'T_REL_FLI_HANGAR_DOCUMENT' table_name, count(*) cnt from T_REL_FLI_HANGAR_DOCUMENT union
            select 228 pos , 'T_REL_FLI_PAYMENT_PLANE_FLIGHT_CH' table_name, count(*) cnt from T_REL_FLI_PAYMENT_PLANE_FLIGHT_CH union
            select 229 pos , 'T_REL_FLI_PLANE_DOCUMENT' table_name, count(*) cnt from T_REL_FLI_PLANE_DOCUMENT union
            select 230 pos , 'T_REL_FLI_PLANE_FLIGHT' table_name, count(*) cnt from T_REL_FLI_PLANE_FLIGHT union
            select 231 pos , 'T_REL_FLI_PLANE_FLIGHT_CHARTERER' table_name, count(*) cnt from T_REL_FLI_PLANE_FLIGHT_CHARTERER union
            select 232 pos , 'T_REL_IMP_BEL_BEL' table_name, count(*) cnt from T_REL_IMP_BEL_BEL union
            select 233 pos , 'T_REL_INP_BELEGE_BEL_TYPE' table_name, count(*) cnt from T_REL_INP_BELEGE_BEL_TYPE union
            select 234 pos , 'T_REL_INV_INVENTAR_ARTIKEL' table_name, count(*) cnt from T_REL_INV_INVENTAR_ARTIKEL union
            select 235 pos , 'T_REL_INV_INVENTAR_BARZAHL' table_name, count(*) cnt from T_REL_INV_INVENTAR_BARZAHL union
            select 236 pos , 'T_REL_INV_INVENTAR_KOMPONENTEN' table_name, count(*) cnt from T_REL_INV_INVENTAR_KOMPONENTEN union
            select 237 pos , 'T_REL_INV_INVENTAR_VERBRAUCHSMAT' table_name, count(*) cnt from T_REL_INV_INVENTAR_VERBRAUCHSMAT union
            select 238 pos , 'T_REL_INV_INVENTAR_ZAHLUNG' table_name, count(*) cnt from T_REL_INV_INVENTAR_ZAHLUNG union
            select 239 pos , 'T_REL_KAT_KATEGORIE_BUCH_BELEG' table_name, count(*) cnt from T_REL_KAT_KATEGORIE_BUCH_BELEG union
            select 240 pos , 'T_REL_KON_GESCHAEFTSPARTNER_KONTAKT' table_name, count(*) cnt from T_REL_KON_GESCHAEFTSPARTNER_KONTAKT union
            select 241 pos , 'T_REL_KON_KONTAKT_KONTAKTTYP' table_name, count(*) cnt from T_REL_KON_KONTAKT_KONTAKTTYP union
            select 242 pos , 'T_REL_KON_KONTAKTPERSON_ADRESSE' table_name, count(*) cnt from T_REL_KON_KONTAKTPERSON_ADRESSE union
            select 243 pos , 'T_REL_KON_PERSON_BANKKONTO' table_name, count(*) cnt from T_REL_KON_PERSON_BANKKONTO union
            select 244 pos , 'T_REL_KON_PERSON_BERUF' table_name, count(*) cnt from T_REL_KON_PERSON_BERUF union
            select 245 pos , 'T_REL_KON_PERSON_BILD' table_name, count(*) cnt from T_REL_KON_PERSON_BILD union
            select 246 pos , 'T_REL_KON_PERSON_DOCUMENT' table_name, count(*) cnt from T_REL_KON_PERSON_DOCUMENT union
            select 247 pos , 'T_REL_KON_PERSON_KONTAKTDATEN' table_name, count(*) cnt from T_REL_KON_PERSON_KONTAKTDATEN union
            select 248 pos , 'T_REL_KON_PERSON_WOHNORT' table_name, count(*) cnt from T_REL_KON_PERSON_WOHNORT union
            select 249 pos , 'T_REL_KTO_KONT_BUCH_IMP_BEL' table_name, count(*) cnt from T_REL_KTO_KONT_BUCH_IMP_BEL union
            select 250 pos , 'T_REL_KTO_KONT_BUCH_KONT_BUCH' table_name, count(*) cnt from T_REL_KTO_KONT_BUCH_KONT_BUCH union
            select 251 pos , 'T_REL_KTO_KONT_BUCH_LEX_BUCH' table_name, count(*) cnt from T_REL_KTO_KONT_BUCH_LEX_BUCH union
            select 252 pos , 'T_REL_KTO_KONTO_AUSZUG_BILD' table_name, count(*) cnt from T_REL_KTO_KONTO_AUSZUG_BILD union
            select 253 pos , 'T_REL_KTO_KONTO_AUSZUG_GIR' table_name, count(*) cnt from T_REL_KTO_KONTO_AUSZUG_GIR union
            select 254 pos , 'T_REL_LEHR_FRAGE_LOESUNG' table_name, count(*) cnt from T_REL_LEHR_FRAGE_LOESUNG union
            select 255 pos , 'T_REL_LEX_KONTENPLAN_KTO_KTO_KAT' table_name, count(*) cnt from T_REL_LEX_KONTENPLAN_KTO_KTO_KAT union
            select 256 pos , 'T_REL_LEX_KTO' table_name, count(*) cnt from T_REL_LEX_KTO union
            select 257 pos , 'T_REL_LEX_KTO_BEL' table_name, count(*) cnt from T_REL_LEX_KTO_BEL union
            select 258 pos , 'T_REL_LEX_LEX' table_name, count(*) cnt from T_REL_LEX_LEX union
            select 259 pos , 'T_REL_LEX_LEX_BANKKONTO' table_name, count(*) cnt from T_REL_LEX_LEX_BANKKONTO union
            select 260 pos , 'T_REL_ORG_UNIT_CON_ORG_REL_TYPE' table_name, count(*) cnt from T_REL_ORG_UNIT_CON_ORG_REL_TYPE union
            select 261 pos , 'T_REL_ORG_UNIT_KONTAKT' table_name, count(*) cnt from T_REL_ORG_UNIT_KONTAKT union
            select 262 pos , 'T_REL_PROJ_PROJECT_LOCATION' table_name, count(*) cnt from T_REL_PROJ_PROJECT_LOCATION union
            select 263 pos , 'T_REL_PROJ_PROJECT_PAYMENT' table_name, count(*) cnt from T_REL_PROJ_PROJECT_PAYMENT union
            select 264 pos , 'T_REL_PROJ_STUNDEN_BELEG' table_name, count(*) cnt from T_REL_PROJ_STUNDEN_BELEG union
            select 265 pos , 'T_REL_PROJ_STUNDENZETTEL_BELEG' table_name, count(*) cnt from T_REL_PROJ_STUNDENZETTEL_BELEG union
            select 266 pos , 'T_REL_RE_RECHNUNG_BELEG' table_name, count(*) cnt from T_REL_RE_RECHNUNG_BELEG union
            select 267 pos , 'T_REL_RE_RECHNUNG_BELEG_NEU' table_name, count(*) cnt from T_REL_RE_RECHNUNG_BELEG_NEU union
            select 268 pos , 'T_REL_RE_RECHNUNG_BOOKING_PLANE' table_name, count(*) cnt from T_REL_RE_RECHNUNG_BOOKING_PLANE union
            select 269 pos , 'T_REL_RE_RECHNUNG_PLANE_FLIGHT_CH' table_name, count(*) cnt from T_REL_RE_RECHNUNG_PLANE_FLIGHT_CH union
            select 270 pos , 'T_REL_RE_RECHNUNG_STUNDENZETTEL' table_name, count(*) cnt from T_REL_RE_RECHNUNG_STUNDENZETTEL union
            select 271 pos , 'T_REL_RE_RECHNUNG_ZAHLUNG' table_name, count(*) cnt from T_REL_RE_RECHNUNG_ZAHLUNG union
            select 272 pos , 'T_REL_SOL_SOLUTION_SOLUTION' table_name, count(*) cnt from T_REL_SOL_SOLUTION_SOLUTION union
            select 273 pos , 'T_REL_STEU_STEUER_LOHN_INP_BEL' table_name, count(*) cnt from T_REL_STEU_STEUER_LOHN_INP_BEL union
            select 274 pos , 'T_REL_STEU_STEUER_LOHN_ZAHLUNG' table_name, count(*) cnt from T_REL_STEU_STEUER_LOHN_ZAHLUNG union
            select 275 pos , 'T_REL_STEU_STEUER_MONAT_BEL' table_name, count(*) cnt from T_REL_STEU_STEUER_MONAT_BEL union
            select 276 pos , 'T_REL_STEU_STEUER_MONAT_RECH' table_name, count(*) cnt from T_REL_STEU_STEUER_MONAT_RECH union
            select 277 pos , 'T_REL_STEU_STEUER_SATZ_GUELT' table_name, count(*) cnt from T_REL_STEU_STEUER_SATZ_GUELT union
            select 278 pos , 'T_REL_STEU_STEUER_VERPFL_BELEG_ORT' table_name, count(*) cnt from T_REL_STEU_STEUER_VERPFL_BELEG_ORT union
            select 279 pos , 'T_REL_STEU_STEUER_VERPFL_BELEG_SRC' table_name, count(*) cnt from T_REL_STEU_STEUER_VERPFL_BELEG_SRC union
            select 280 pos , 'T_REL_DB_TXT_REPLACED' table_name, count(*) cnt from T_REL_DB_TXT_REPLACED union
            select 281 pos , 'T_REL_WF_WORKFLOW_WORKFLOW' table_name, count(*) cnt from T_REL_WF_WORKFLOW_WORKFLOW union
            select 282 pos , 'T_REL_WH_ARTIKELTYP_ARTIKELTYP' table_name, count(*) cnt from T_REL_WH_ARTIKELTYP_ARTIKELTYP union
            select 283 pos , 'T_REL_WH_LAGERORT_ARTIKEL' table_name, count(*) cnt from T_REL_WH_LAGERORT_ARTIKEL union
            select 284 pos , 'T_RE_RECHNUNG' table_name, count(*) cnt from T_RE_RECHNUNG union
            select 285 pos , 'T_RE_RECHNUNG_MAHNUNG' table_name, count(*) cnt from T_RE_RECHNUNG_MAHNUNG union
            select 286 pos , 'T_RE_SUB_HOTELRECHNUNGEN' table_name, count(*) cnt from T_RE_SUB_HOTELRECHNUNGEN union
            select 287 pos , 'T_SOL_SOLUTION' table_name, count(*) cnt from T_SOL_SOLUTION union
            select 288 pos , 'T_SOL_SOLUTION_DET' table_name, count(*) cnt from T_SOL_SOLUTION_DET union
            select 289 pos , 'T_STEU_STEUER_BESCHEID_POS' table_name, count(*) cnt from T_STEU_STEUER_BESCHEID_POS union
            select 290 pos , 'T_STEU_STEUER_ERKLAERUNG' table_name, count(*) cnt from T_STEU_STEUER_ERKLAERUNG union
            select 291 pos , 'T_STEU_STEUER_ERKLAERUNG_ANLAGE' table_name, count(*) cnt from T_STEU_STEUER_ERKLAERUNG_ANLAGE union
            select 292 pos , 'T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS' table_name, count(*) cnt from T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS union
            select 293 pos , 'T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR' table_name, count(*) cnt from T_STEU_STEUER_ERKLAERUNG_ANLAGE_POS_VOR union
            select 294 pos , 'T_STEU_STEUER_JAHR' table_name, count(*) cnt from T_STEU_STEUER_JAHR union
            select 295 pos , 'T_STEU_STEUER_JAHR_TODO' table_name, count(*) cnt from T_STEU_STEUER_JAHR_TODO union
            select 296 pos , 'T_STEU_STEUER_JAHR_TODO_GRP' table_name, count(*) cnt from T_STEU_STEUER_JAHR_TODO_GRP union
            select 297 pos , 'T_STEU_STEUER_KRANKENKASSE' table_name, count(*) cnt from T_STEU_STEUER_KRANKENKASSE union
            select 298 pos , 'T_STEU_STEUER_LOHN' table_name, count(*) cnt from T_STEU_STEUER_LOHN union
            select 299 pos , 'T_STEU_STEUER_LOHNSTEUERKARTE' table_name, count(*) cnt from T_STEU_STEUER_LOHNSTEUERKARTE union
            select 300 pos , 'T_STEU_STEUER_MONAT' table_name, count(*) cnt from T_STEU_STEUER_MONAT union
            select 301 pos , 'T_STEU_STEUER_MONAT_TODO' table_name, count(*) cnt from T_STEU_STEUER_MONAT_TODO union
            select 302 pos , 'T_STEU_STEUER_SATZ_LEX' table_name, count(*) cnt from T_STEU_STEUER_SATZ_LEX union
            select 303 pos , 'T_STEU_STEUER_STEUERNUMMER' table_name, count(*) cnt from T_STEU_STEUER_STEUERNUMMER union
            select 304 pos , 'T_STEU_STEUER_VERPFL_MEHRAUFWD' table_name, count(*) cnt from T_STEU_STEUER_VERPFL_MEHRAUFWD union
            select 305 pos , 'T_STEU_STEUER_VERPFL_MEHRAUFWD_DET' table_name, count(*) cnt from T_STEU_STEUER_VERPFL_MEHRAUFWD_DET union
            select 306 pos , 'T_STEU_STEUER_VORANMLDG' table_name, count(*) cnt from T_STEU_STEUER_VORANMLDG union
            select 307 pos , 'T_TEL_RECHNUNG_DET' table_name, count(*) cnt from T_TEL_RECHNUNG_DET union
            select 308 pos , 'T_TEL_TELEFONKARTEN' table_name, count(*) cnt from T_TEL_TELEFONKARTEN union
            select 309 pos , 'T_TEX_TEXTILREINIGUNG' table_name, count(*) cnt from T_TEX_TEXTILREINIGUNG union
            select 310 pos , 'T_DB_TXT_REPLACE' table_name, count(*) cnt from T_DB_TXT_REPLACE union
            select 311 pos , 'T_DB_TXT_REPLACE_CONTEXT' table_name, count(*) cnt from T_DB_TXT_REPLACE_CONTEXT union
            select 312 pos , 'T_DB_TXT_REPLACE_LOG' table_name, count(*) cnt from T_DB_TXT_REPLACE_LOG union
            select 313 pos , 'T_USM_USER' table_name, count(*) cnt from T_USM_USER union
            select 314 pos , 'T_VERK_BAHN' table_name, count(*) cnt from T_VERK_BAHN union
            select 315 pos , 'T_VERS_INSURANCE_YEARLY' table_name, count(*) cnt from T_VERS_INSURANCE_YEARLY union
            select 316 pos , 'T_VERS_RV_AUSZUG' table_name, count(*) cnt from T_VERS_RV_AUSZUG union
            select 317 pos , 'T_VERS_RV_AUSZUG_PAGE' table_name, count(*) cnt from T_VERS_RV_AUSZUG_PAGE union
            select 318 pos , 'T_VERS_RV_AUSZUG_PAGE_DET' table_name, count(*) cnt from T_VERS_RV_AUSZUG_PAGE_DET union
            select 319 pos , 'T_VER_VERTRAG' table_name, count(*) cnt from T_VER_VERTRAG union
            select 320 pos , 'T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK' table_name, count(*) cnt from T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK union
            select 321 pos , 'T_VER_VERTRAG_AUDI_FIN_POS' table_name, count(*) cnt from T_VER_VERTRAG_AUDI_FIN_POS union
            select 322 pos , 'T_VER_VERTRAG_MIETE' table_name, count(*) cnt from T_VER_VERTRAG_MIETE union
            select 323 pos , 'T_WET_NIEDERSCHLAGSMENGE' table_name, count(*) cnt from T_WET_NIEDERSCHLAGSMENGE union
            select 324 pos , 'T_WF_WORKFLOW' table_name, count(*) cnt from T_WF_WORKFLOW union
            select 325 pos , 'T_WF_WORKFLOW_DET' table_name, count(*) cnt from T_WF_WORKFLOW_DET union
            select 326 pos , 'T_WH_ART_ARTIKEL' table_name, count(*) cnt from T_WH_ART_ARTIKEL union
            select 327 pos , 'T_WH_ART_ARTIKELBESTANDTEILE' table_name, count(*) cnt from T_WH_ART_ARTIKELBESTANDTEILE union
            select 328 pos , 'T_WH_ART_ARTIKEL_BESTANDTEIL_INVENTURBESTAND' table_name, count(*) cnt from T_WH_ART_ARTIKEL_BESTANDTEIL_INVENTURBESTAND union
            select 329 pos , 'T_WH_ART_ARTIKEL_INVENTUR' table_name, count(*) cnt from T_WH_ART_ARTIKEL_INVENTUR union
            select 330 pos , 'T_WH_ART_ARTIKEL_INVENTURBESTAND' table_name, count(*) cnt from T_WH_ART_ARTIKEL_INVENTURBESTAND union
            select 331 pos , 'T_WH_ART_ARTIKEL_SOLLBESTAND' table_name, count(*) cnt from T_WH_ART_ARTIKEL_SOLLBESTAND union
            select 332 pos , 'T_WH_WAREN_BEWEGUNG' table_name, count(*) cnt from T_WH_WAREN_BEWEGUNG union
            select 333 pos , 'T_WH_WAREN_BEWEGUNG_DET' table_name, count(*) cnt from T_WH_WAREN_BEWEGUNG_DET union
            select 334 pos , 'ADR_ADDRESS' table_name, count(*) cnt from ADR_ADDRESS union
            select 335 pos , 'ADR_CITY' table_name, count(*) cnt from ADR_CITY union
            select 336 pos , 'ADR_COUNTRY' table_name, count(*) cnt from ADR_COUNTRY union
            select 337 pos , 'APL_ENGINE_TYPE' table_name, count(*) cnt from APL_ENGINE_TYPE union
            select 338 pos , 'APL_MAINT' table_name, count(*) cnt from APL_MAINT union
            select 339 pos , 'APL_MAINT_PROGR' table_name, count(*) cnt from APL_MAINT_PROGR union
            select 340 pos , 'APL_PLANE' table_name, count(*) cnt from APL_PLANE union
            select 341 pos , 'APL_PLANE_MODELL' table_name, count(*) cnt from APL_PLANE_MODELL union
            select 342 pos , 'APL_PLANE_TYPE' table_name, count(*) cnt from APL_PLANE_TYPE union
            select 343 pos , 'ARP_AIRPORT' table_name, count(*) cnt from ARP_AIRPORT union
            select 344 pos , 'BAK_BANKACCOUNT' table_name, count(*) cnt from BAK_BANKACCOUNT union
            select 345 pos , 'BAK_BANKACCOUNT_TYPE' table_name, count(*) cnt from BAK_BANKACCOUNT_TYPE union
            select 346 pos , 'BAS_BASIC' table_name, count(*) cnt from BAS_BASIC union
            select 347 pos , 'BAS_BASIC_GRP' table_name, count(*) cnt from BAS_BASIC_GRP union
            select 348 pos , 'BOR_BORD_LOG' table_name, count(*) cnt from BOR_BORD_LOG union
            select 349 pos , 'BOR_BORD_LOG_ENTRY' table_name, count(*) cnt from BOR_BORD_LOG_ENTRY union
            select 350 pos , 'BOR_BORD_LOG_ENTRY_ADD' table_name, count(*) cnt from BOR_BORD_LOG_ENTRY_ADD union
            select 351 pos , 'BOR_BORD_LOG_ENTRY_GRP' table_name, count(*) cnt from BOR_BORD_LOG_ENTRY_GRP union
            select 352 pos , 'BOR_BORD_LOG_ENTRY_HOB_RPM' table_name, count(*) cnt from BOR_BORD_LOG_ENTRY_HOB_RPM union
            select 353 pos , 'CON_CONTACT' table_name, count(*) cnt from CON_CONTACT union
            select 354 pos , 'CON_CONTACT_TYPE' table_name, count(*) cnt from CON_CONTACT_TYPE union
            select 355 pos , 'COST_COST_GRP' table_name, count(*) cnt from COST_COST_GRP union
            select 356 pos , 'DOC_DOCUMENT' table_name, count(*) cnt from DOC_DOCUMENT union
            select 357 pos , 'DOC_DOCUMENT_TYPE' table_name, count(*) cnt from DOC_DOCUMENT_TYPE union
            select 358 pos , 'DOC_USAGE_TYPE' table_name, count(*) cnt from DOC_USAGE_TYPE union
            select 359 pos , 'FLI_FLIGHT' table_name, count(*) cnt from FLI_FLIGHT union
            select 360 pos , 'FLI_FLIGHT_COMMENTS' table_name, count(*) cnt from FLI_FLIGHT_COMMENTS union
            select 361 pos , 'FLI_FLIGHT_DISCOUNT_REASONS' table_name, count(*) cnt from FLI_FLIGHT_DISCOUNT_REASONS union
            select 362 pos , 'FLI_FLIGHT_DISCOUNTS' table_name, count(*) cnt from FLI_FLIGHT_DISCOUNTS union
            select 363 pos , 'GAL_GAIN_AND_LOSS' table_name, count(*) cnt from GAL_GAIN_AND_LOSS union
            select 364 pos , 'HAN_HANGAR' table_name, count(*) cnt from HAN_HANGAR union
            select 365 pos , 'INV_INVOICE' table_name, count(*) cnt from INV_INVOICE union
            select 366 pos , 'INV_INVOICE_TYPE' table_name, count(*) cnt from INV_INVOICE_TYPE union
            select 367 pos , 'LAN_LANDING' table_name, count(*) cnt from LAN_LANDING union
            select 368 pos , 'MDT_MANDANT' table_name, count(*) cnt from MDT_MANDANT union
            select 369 pos , 'ORG_UNIT' table_name, count(*) cnt from ORG_UNIT union
            select 370 pos , 'ORG_UNIT_CHECK_OUT' table_name, count(*) cnt from ORG_UNIT_CHECK_OUT union
            select 371 pos , 'ORG_UNIT_REL_TYPE' table_name, count(*) cnt from ORG_UNIT_REL_TYPE union
            select 372 pos , 'ORG_UNIT_TYPE' table_name, count(*) cnt from ORG_UNIT_TYPE union
            select 373 pos , 'PAY_PAYMENT' table_name, count(*) cnt from PAY_PAYMENT union
            select 374 pos , 'PAY_PAYMENT_TYPE' table_name, count(*) cnt from PAY_PAYMENT_TYPE union
            select 375 pos , 'PLA_ENGINE_TYPE' table_name, count(*) cnt from PLA_ENGINE_TYPE union
            select 376 pos , 'REL_AIRPORT_LOCATION' table_name, count(*) cnt from REL_AIRPORT_LOCATION union
            select 377 pos , 'REL_BORD_LOG_ENTRY_PAY' table_name, count(*) cnt from REL_BORD_LOG_ENTRY_PAY union
            select 378 pos , 'REL_CONTACT_ADDRESS' table_name, count(*) cnt from REL_CONTACT_ADDRESS union
            select 379 pos , 'REL_CONTACT_BANKACCOUNT' table_name, count(*) cnt from REL_CONTACT_BANKACCOUNT union
            select 380 pos , 'REL_DOC_CONTACT' table_name, count(*) cnt from REL_DOC_CONTACT union
            select 381 pos , 'REL_DOC_FLIGHT' table_name, count(*) cnt from REL_DOC_FLIGHT union
            select 382 pos , 'REL_DOC_HANGAR' table_name, count(*) cnt from REL_DOC_HANGAR union
            select 383 pos , 'REL_DOC_PLANE' table_name, count(*) cnt from REL_DOC_PLANE union
            select 384 pos , 'REL_DOC_TYPE_USAGE_TYPE' table_name, count(*) cnt from REL_DOC_TYPE_USAGE_TYPE union
            select 385 pos , 'REL_INV_PL_FLI_CH' table_name, count(*) cnt from REL_INV_PL_FLI_CH union
            select 386 pos , 'REL_ORG_UNIT_CON' table_name, count(*) cnt from REL_ORG_UNIT_CON union
            select 387 pos , 'REL_ORG_UNIT_CON_ORG_REL_TYPE' table_name, count(*) cnt from REL_ORG_UNIT_CON_ORG_REL_TYPE union
            select 388 pos , 'REL_PAY_PLANE_FLI_CH' table_name, count(*) cnt from REL_PAY_PLANE_FLI_CH union
            select 389 pos , 'REL_PLANE_FLIGHT' table_name, count(*) cnt from REL_PLANE_FLIGHT union
            select 390 pos , 'REL_PLANE_FLIGHT_CHARTERER' table_name, count(*) cnt from REL_PLANE_FLIGHT_CHARTERER union
            select 391 pos , 'RES_RESERVATION' table_name, count(*) cnt from RES_RESERVATION union
            select 392 pos , 'AHNENTAFEL' table_name, count(*) cnt from AHNENTAFEL union
            select 393 pos , 'AHNENTAFEL_DISP' table_name, count(*) cnt from AHNENTAFEL_DISP union
            select 394 pos , 'BILDER' table_name, count(*) cnt from BILDER union
            select 395 pos , 'BILDER_TAB' table_name, count(*) cnt from BILDER_TAB union
            select 396 pos , 'ELTERN' table_name, count(*) cnt from ELTERN union
            select 397 pos , 'FAMILIE' table_name, count(*) cnt from FAMILIE union
            select 398 pos , 'FAMILIE_BILD' table_name, count(*) cnt from FAMILIE_BILD union
            select 399 pos , 'GESCHWISTER' table_name, count(*) cnt from GESCHWISTER union
            select 400 pos , 'LAND' table_name, count(*) cnt from LAND union
            select 401 pos , 'LEBENSPARTNER' table_name, count(*) cnt from LEBENSPARTNER union
            select 402 pos , 'LEBENSPARTNER_BILD' table_name, count(*) cnt from LEBENSPARTNER_BILD union
            select 403 pos , 'ORT' table_name, count(*) cnt from ORT union
            select 404 pos , 'PERSON' table_name, count(*) cnt from PERSON union
            select 405 pos , 'PERSON_BERUF' table_name, count(*) cnt from PERSON_BERUF union
            select 406 pos , 'PERSON_BILD' table_name, count(*) cnt from PERSON_BILD union
            select 407 pos , 'PERSON_FAMILIE' table_name, count(*) cnt from PERSON_FAMILIE union
            select 408 pos , 'PERSON_KONTAKTDATEN' table_name, count(*) cnt from PERSON_KONTAKTDATEN union
            select 409 pos , 'PERSON_OFFENE_PUNKTE' table_name, count(*) cnt from PERSON_OFFENE_PUNKTE union
            select 410 pos , 'PERSON_RELIGION' table_name, count(*) cnt from PERSON_RELIGION union
            select 411 pos , 'PERSON_WOHNORT' table_name, count(*) cnt from PERSON_WOHNORT union
            select 412 pos , 'PLZ_ORT' table_name, count(*) cnt from PLZ_ORT union
            select 413 pos , 'STD_PARAM' table_name, count(*) cnt from STD_PARAM union
            select 414 pos , 'STD_PARAM_ATTR' table_name, count(*) cnt from STD_PARAM_ATTR union
            select 415 pos , 'STRASSE' table_name, count(*) cnt from STRASSE union
            select 416 pos , 'TEST' table_name, count(*) cnt from TEST union
            select 417 pos , 'TREE_TAB1' table_name, count(*) cnt from TREE_TAB1 
),
transf as (
            select 1 pos1, 'ADR_CITY' table_name, max(transfer_date) max_transfer_date, min(transfer_date) min_transfer_date, sum (case when flg_transfered =1 then 1 else 0 end) cnt_transfered from ADR_CITY
            union
            select 2 pos1, 'ADR_COUNTRY' table_name, max(transfer_date) max_transfer_date, min(transfer_date) min_transfer_date, sum (case when flg_transfered =1 then 1 else 0 end) cnt_transfered from ADR_COUNTRY

)
select sysdate dt, oldt.datum old_datum, oldt.object_type old_object_type, oldt.fk_std_db_need_built old_fk_std_db_need_built,oldt.fk_std_db_need_regularly_upd old_fk_std_db_need_regularly_upd, oldt.table_name_new old_table_name_new,oldt.table_name_old old_table_name_old,
    oldt.object_status_old old_object_status_old, oldt.modul old_modul,
    oldt.pk_db_tab_table_content_count,   oldt.table_name old_table_name, oldt.cnt old_cnt, oldt.comm old_comm, oldt.datum_check_ok old_datum_check_ok, oldt.fk_std_db_check_status old_fk_std_db_check_status, oldt.fk_std_db_data_transfered  old_fk_std_db_data_transfered ,
    newt.pos new_pos, newt.table_name new_table_name, newt.cnt new_cnt, oldt.cnt - newt.cnt diff,
    obj.object_name, oldt.re_imp_nr old_re_imp_nr,
    transf.pos1 transf_pos1, transf.max_transfer_date transf_max_transf_date, transf.min_transfer_date transf_min_transf_date, transf.cnt_transfered transf_cnt_transfered
from old_tab oldt
    left join new_tab newt on oldt.table_name = newt.table_name
    join all_objects obj on obj.object_type = oldt.object_type and obj.object_name = oldt.table_name
    left join transf on transf.table_name = oldt.table_name
;
--------------------------------------------------------
--  DDL for View V_DB_CHECK_TABLE_CONTENT_LOAD
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DB_CHECK_TABLE_CONTENT_LOAD" ("DT", "OLD_DATUM", "OLD_OBJECT_TYPE", "OLD_FK_STD_DB_NEED_BUILT", "OLD_FK_STD_DB_NEED_REGULARLY_UPD", "OLD_TABLE_NAME_NEW", "OLD_TABLE_NAME_OLD", "OLD_OBJECT_STATUS_OLD", "OLD_MODUL", "PK_DB_TAB_TABLE_CONTENT_COUNT", "OLD_TABLE_NAME", "OLD_CNT", "OLD_COMM", "OLD_DATUM_CHECK_OK", "OLD_FK_STD_DB_CHECK_STATUS", "OLD_FK_STD_DB_DATA_TRANSFERED", "NEW_POS", "NEW_TABLE_NAME", "NEW_CNT", "DIFF", "OBJECT_NAME", "OLD_RE_IMP_NR", "TRANSF_POS1", "TRANSF_MAX_TRANSF_DATE", "TRANSF_MIN_TRANSF_DATE", "TRANSF_CNT_TRANSFERED", "CNT", "PK_DB_TAB_TABLE_CONTENT_COUNT_CNT", "PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD", "LOAD_DT", "CREATED_AT", "CONNECTION_STR", "DATUM_OK") AS 
  select vct."DT",vct."OLD_DATUM",vct."OLD_OBJECT_TYPE",vct."OLD_FK_STD_DB_NEED_BUILT",vct."OLD_FK_STD_DB_NEED_REGULARLY_UPD",vct."OLD_TABLE_NAME_NEW",vct."OLD_TABLE_NAME_OLD",vct."OLD_OBJECT_STATUS_OLD",vct."OLD_MODUL",vct."PK_DB_TAB_TABLE_CONTENT_COUNT",vct."OLD_TABLE_NAME",vct."OLD_CNT",vct."OLD_COMM",vct."OLD_DATUM_CHECK_OK",vct."OLD_FK_STD_DB_CHECK_STATUS",vct."OLD_FK_STD_DB_DATA_TRANSFERED",vct."NEW_POS",vct."NEW_TABLE_NAME",vct."NEW_CNT",vct."DIFF",vct."OBJECT_NAME",vct."OLD_RE_IMP_NR",vct."TRANSF_POS1",vct."TRANSF_MAX_TRANSF_DATE",vct."TRANSF_MIN_TRANSF_DATE",vct."TRANSF_CNT_TRANSFERED",
    1* tcc.cnt,
    tcc.PK_DB_TAB_TABLE_CONTENT_COUNT_cnt,
    tcl.PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD,
    tcl.load_dt,
    tcl.created_at,
    tcl.connection_str,
    tcc.datum_ok
 from v_db_check_table_content vct
  left join T_DB_TAB_TABLE_CONTENT_COUNT_cnt tcc on tcc.FK_DB_TAB_TABLE_CONTENT_COUNT = vct.pK_DB_TAB_TABLE_CONTENT_COUNT
  left join T_DB_TAB_TABLE_CONTENT_COUNT_LOAD tcl on tcl.pK_DB_TAB_TABLE_CONTENT_COUNT_LOAD  = tcc.FK_DB_TAB_TABLE_CONTENT_COUNT_LOAD
  -- new table count
union
    select vct."DT",vct."OLD_DATUM",vct."OLD_OBJECT_TYPE",vct."OLD_FK_STD_DB_NEED_BUILT",vct."OLD_FK_STD_DB_NEED_REGULARLY_UPD",vct."OLD_TABLE_NAME_NEW",vct."OLD_TABLE_NAME_OLD",vct."OLD_OBJECT_STATUS_OLD",vct."OLD_MODUL",vct."PK_DB_TAB_TABLE_CONTENT_COUNT",vct."OLD_TABLE_NAME",vct."OLD_CNT",vct."OLD_COMM",vct."OLD_DATUM_CHECK_OK",vct."OLD_FK_STD_DB_CHECK_STATUS",vct."OLD_FK_STD_DB_DATA_TRANSFERED",vct."NEW_POS",vct."NEW_TABLE_NAME",vct."NEW_CNT",vct."DIFF",vct."OBJECT_NAME",vct."OLD_RE_IMP_NR",vct."TRANSF_POS1",vct."TRANSF_MAX_TRANSF_DATE",vct."TRANSF_MIN_TRANSF_DATE",vct."TRANSF_CNT_TRANSFERED",
        1* tcc.cnt,
        tcc.PK_DB_TAB_TABLE_CONTENT_COUNT_cnt,
        tcl.PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD,
        
        tcl.load_dt,
        tcl.created_at,
        tcl.connection_str,
        tcc.datum_ok
    from v_db_check_table_content vct
      left join (select tcc.*, tc.table_name, tc.pk_db_tab_table_content_count  from T_DB_TAB_TABLE_CONTENT_COUNT_cnt tcc left join T_DB_TAB_TABLE_CONTENT_COUNT tc on tcc.fk_DB_TAB_TABLE_CONTENT_COUNT  = tc.PK_DB_TAB_TABLE_CONTENT_COUNT)   tcc on tcc.table_name = vct.old_table_name_new and vct.old_object_type = 'TABLE' and tcc.table_name<> vct.old_table_name_old
      left join T_DB_TAB_TABLE_CONTENT_COUNT_LOAD tcl on tcl.pK_DB_TAB_TABLE_CONTENT_COUNT_LOAD  = tcc.FK_DB_TAB_TABLE_CONTENT_COUNT_LOAD
  -- old table count
union
    select vct."DT",vct."OLD_DATUM",vct."OLD_OBJECT_TYPE",vct."OLD_FK_STD_DB_NEED_BUILT",vct."OLD_FK_STD_DB_NEED_REGULARLY_UPD",vct."OLD_TABLE_NAME_NEW",vct."OLD_TABLE_NAME_OLD",vct."OLD_OBJECT_STATUS_OLD",vct."OLD_MODUL",vct."PK_DB_TAB_TABLE_CONTENT_COUNT",vct."OLD_TABLE_NAME",vct."OLD_CNT",vct."OLD_COMM",vct."OLD_DATUM_CHECK_OK",vct."OLD_FK_STD_DB_CHECK_STATUS",vct."OLD_FK_STD_DB_DATA_TRANSFERED",vct."NEW_POS",vct."NEW_TABLE_NAME",vct."NEW_CNT",vct."DIFF",vct."OBJECT_NAME",vct."OLD_RE_IMP_NR",vct."TRANSF_POS1",vct."TRANSF_MAX_TRANSF_DATE",vct."TRANSF_MIN_TRANSF_DATE",vct."TRANSF_CNT_TRANSFERED",
        -1* tcc.cnt cnt,
        tcc.PK_DB_TAB_TABLE_CONTENT_COUNT_cnt,
        tcl.PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD,
        tcl.load_dt,
        tcl.created_at,
        tcl.connection_str,
        tcc.datum_ok
    from v_db_check_table_content vct
      left join (select tcc.*, tc.table_name, tc.pk_db_tab_table_content_count from T_DB_TAB_TABLE_CONTENT_COUNT_cnt tcc left join T_DB_TAB_TABLE_CONTENT_COUNT tc on tcc.fk_DB_TAB_TABLE_CONTENT_COUNT  = tc.PK_DB_TAB_TABLE_CONTENT_COUNT)   tcc on tcc.table_name = vct.old_table_name_old and vct.old_object_type = 'TABLE' and tcc.table_name<> vct.old_table_name_new
      left join T_DB_TAB_TABLE_CONTENT_COUNT_LOAD tcl on tcl.pK_DB_TAB_TABLE_CONTENT_COUNT_LOAD  = tcc.FK_DB_TAB_TABLE_CONTENT_COUNT_LOAD
;
--------------------------------------------------------
--  DDL for View V_DB_DEPENDENCY
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DB_DEPENDENCY" ("OWNER_SRC", "OBJECT_NAME_SRC", "OBJECT_TYPE_SRC", "LAST_DDL_TIME_SRC", "STATUS_SRC", "NAME", "TYPE", "REFERENCED_OWNER", "REFERENCED_NAME", "REFERENCED_TYPE", "REFERENCED_LINK_NAME", "SCHEMAID", "DEPENDENCY_TYPE", "OWNER_REF", "OBJECT_NAME_REF", "OBJECT_TYPE_REF", "LAST_DDL_TIME_REF", "STATUS_REF") AS 
  select
allob_src.owner owner_src,
allob_src.object_name object_name_src,
allob_src.object_type object_type_src,
allob_src.last_ddl_time last_ddl_time_src,
allob_src.status status_src,
dp."NAME",dp."TYPE",dp."REFERENCED_OWNER",dp."REFERENCED_NAME",dp."REFERENCED_TYPE",dp."REFERENCED_LINK_NAME",dp."SCHEMAID",dp."DEPENDENCY_TYPE",
allob_ref.owner owner_ref,
allob_ref.object_name object_name_ref,
allob_ref.object_type object_type_ref,
allob_ref.last_ddl_time last_ddl_time_ref,
allob_ref.status status_ref
from 
--1. Objekt src
all_objects allob_src
--2. Abhängigkeit
left join (select * from user_dependencies  WHERE REFERENCED_OWNER = 'COMPANY') dp on dp.name = allob_src.object_name
--3. abhängiges Objekt
left join all_objects allob_ref on allob_ref.object_type = dp.type and allob_ref.owner = dp.referenced_owner and allob_ref.object_name =  dp.referenced_name
;
--------------------------------------------------------
--  DDL for View V_DISP_AHNENTAFEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DISP_AHNENTAFEL" ("PK_PERSON", "NR_AHNENTAFEL", "VORNAME", "NAME", "GEBOREN_AM", "GESTORBEN_AM", "FK_GEBURTSORT", "FK_STERBEORT", "RELIGION", "GESCHLECHT") AS 
  select pk_person, nr_ahnentafel, vorname, nvl(geburtsname,name) name, geboren_am, gestorben_am, fk_geburtsort, fk_sterbeort, religion, geschlecht
from person per
 left join person_religion rel on per.pk_person = rel.fk_person
where nr_ahnentafel is not null
;
--------------------------------------------------------
--  DDL for View V_DISP_LEBENSPARTNER
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DISP_LEBENSPARTNER" ("LEBENSPARTNER_ID", "PK_PERSON", "NAME", "VORNAME", "GESCHLECHT", "GEBOREN_AM", "GESTORBEN_AM", "FK_GEBURTSORT", "GEBURTSNAME", "TITEL", "ADELSTITEL", "FK_STERBEORT", "RUFNAME", "NR_AHNENTAFEL", "STATUS", "DATUM_STANDESAMTLICH", "STANDESAMT", "DATUM_KIRCHLICH", "KIRCHE", "KOMMENTAR", "FK_ORT", "ORT", "LAND") AS 
  with lb as (
Select lb.pk_lebenspartner as lebenspartner_id
, p.pk_person
, p.NAME
, p.VORNAME
, p.GESCHLECHT
, p.GEBOREN_AM
, p.GESTORBEN_AM
, p.FK_GEBURTSORT
, p.GEBURTSNAME
, p.TITEL
, p.ADELSTITEL
, p.FK_STERBEORT
, p.RUFNAME
, p.NR_AHNENTAFEL
, lb.status
, lb.datum_standesamtlich
, lb.standesamt
, lb.datum_kirchlich
, lb.kirche
, lb.KOMMENTAR
, lb.fk_ort
, o.ort
, l.land
from Lebenspartner lb
 join Person p on lb.fk_lebenspartner = p.pk_person
 left join ort o on o.pk_ort = lb.fk_ort
 left join land l on l.pk_land = o.fk_land
Union
Select lb.pk_lebenspartner as lebenspartner_id	
, p.pk_person
, p.NAME
, p.VORNAME
, p.GESCHLECHT
, p.GEBOREN_AM
, p.GESTORBEN_AM
, p.fk_GEBURTSORT
, p.GEBURTSNAME
, p.TITEL
, p.ADELSTITEL
, p.fk_STERBEORT
, p.RUFNAME
, p.NR_AHNENTAFEL
, lb.status
, lb.datum_standesamtlich
, lb.standesamt
, lb.datum_kirchlich
, lb.kirche
, lb.KOMMENTAR
, lb.fk_ort
, o.ort
, l.land
from Lebenspartner lb
 join Person p on lb.fk_person = p.pk_person
 left join ort o on o.pk_ort = lb.fk_ort
 left join land l on l.pk_land = o.fk_land

)
select  lebenspartner_id
, pk_person
, NAME
, VORNAME
, GESCHLECHT
, GEBOREN_AM
, GESTORBEN_AM
, FK_GEBURTSORT
, GEBURTSNAME
, TITEL
, ADELSTITEL
, FK_STERBEORT
, RUFNAME
, NR_AHNENTAFEL
, status
, datum_standesamtlich
, standesamt
, datum_kirchlich
, kirche
, KOMMENTAR
, fk_ort
, ort
, land
from lb
;
--------------------------------------------------------
--  DDL for View V_DOC_MISS_INVAL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_DOC_MISS_INVAL" ("FK_ORG_UNIT", "PK_CON_CONTACT", "LIST_DOC_MISS", "LIST_DOC_INVALID") AS 
  with con as ( 
                        select *
                        from (select * from rel_org_unit_con  ) rel_org_con
                        left   join  (select * from con_contact  ) con  on rel_org_con.fk_con_contact = con.pk_con_contact
                        
                    

),
doc_us_type as (
                            select *
                            from (
                            select * 
                            from  REL_DOC_TYPE_USAGE_TYPE where fk_doc_usage_type = 2
                  
                            ) rel
                              left join  doc_usage_type doc_usage_type on rel.fk_doc_usage_type =doc_usage_type.pk_doc_usage_type
                              left join doc_document_type   doc_type  on rel.fk_doc_document_type = doc_type.pk_doc_document_type  
),
doc_us_type1 as (
                                select *
                                from doc_us_type, con
)

,

doc_type_con as (
                    select *
                    from doc_us_type1

                
),
con_doc as (
                      select *
                      from con
                       join rel_doc_contact reldoccon on reldoccon.fk_con_contact = con.pk_con_contact
                       
                       join doc_document doc on doc.pk_doc_document = reldoccon.fk_doc_document
                    ),
doc_miss_inval as (
select distinct

doc_type_con.fk_org_unit,
doc_type_con.pk_con_contact, 
case when (doc_type_con.required = 1 and con_doc.pk_con_contact is null) then  rownum || ' ' || doc_document_type || pk_rel_doc_type_usage_type end doc_miss,

case when (trunc(con_doc.valid_until) <= trunc(sysdate) ) then  pk_doc_document || ' ' || document_title || ' ' ||  valid_until  end doc_invalid


from doc_type_con
 left join con_doc on doc_type_con.fk_doc_document_type = con_doc.fk_doc_document_type and con_doc.pk_con_contact = doc_type_con.pk_con_contact
 left join (select * from bas_basic where fk_bas_basic_grp = 2) doc_bas  on doc_bas.basic_value = con_doc.FK_LAN_PROF_LEVEL
 )
 select 
 fk_org_unit,
pk_con_contact, 
listagg(doc_miss, ', ') within group (order by fk_org_unit, pk_con_contact) list_doc_miss,
listagg(doc_invalid,', ') within group (order by fk_org_unit, pk_con_contact) list_doc_invalid
 from doc_miss_inval
 group by  fk_org_unit,
pk_con_contact
;
--------------------------------------------------------
--  DDL for View V_FLI_FLIGHT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_FLI_FLIGHT" ("PK_FLI_FLIGHT", "FK_MDT_MANDANT", "DEPARTURE", "ARRIVAL", "DEPARTURE_TIME", "ARRIVAL_TIME", "DURATION", "ADDITIONAL_TIMESLOTS", "FK_ADDITIONAL_TIMESLOTTYPE", "FK_APL_PLANE", "PK_APL_PLANE") AS 
  select fli."PK_FLI_FLIGHT",fli."FK_MDT_MANDANT",fli."DEPARTURE",fli."ARRIVAL",fli."DEPARTURE_TIME",fli."ARRIVAL_TIME",fli."DURATION",fli."ADDITIONAL_TIMESLOTS",fli."FK_ADDITIONAL_TIMESLOTTYPE",fli."FK_APL_PLANE", pk_apl_plane
from apl_plane apl 
  left join fli_flight fli on apl.pk_apl_plane =fli.fk_apl_Plane
;
--------------------------------------------------------
--  DDL for View V_GET_ORACLE_VERSION
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_GET_ORACLE_VERSION" ("COMP_NAME", "D", "STATUS") AS 
  SELECT comp_name, version d, status
  FROM dba_registry
;
--------------------------------------------------------
--  DDL for View V_GET_SPLIT_NR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_GET_SPLIT_NR" ("SPLIT_NR_NEU", "SPLIT_NR", "FIN_FK_LEX_RELATION", "FLG_SPLIT_BUCH", "SPLIT_NR_MAN", "CNT", "SPLIT_OK", "FIN_RELATION_MAIN", "FIN_RELATION") AS 
  select  
    substr(fk_lex_relation_sub,length(substr(fk_lex_relation_sub,1,instr(fk_lex_relation_sub,'/',-1)))+1,4) split_nr_neu,  
    split_nr,
    substr(fk_lex_relation,length(substr(fk_lex_relation,1,instr(fk_lex_relation,'/',-1)))+1,4) fin_fk_relation,  
    flg_split_buch,
    SPLIT_NR_MAN,
    count(*) cnt,
    case when substr(fk_lex_relation_sub,length(substr(fk_lex_relation_sub,1,instr(fk_lex_relation_sub,'/',-1)))+1,4) > 0 then  sum(case when datum_split_ok is not null then 1 else 0 end) - count(*) end split_ok,
     nvl(substr(fk_lex_relation_main,length(substr(fk_lex_relation_main,1,instr(fk_lex_relation_main,'/',-1)))+1,4),0) fin_relation_main,
  fin_relation
from t_lex_kontenblatt kto
  full join (select fk_lex_relation_main, case when substr(relation,length(substr(relation,1,instr(relation,'/',-1)))+1,4) >0 then 1 else 0 end fin_relation from  t_lex_long where flg_split_buch = 1) ll on kto.fk_lex_relation = ll.fk_lex_relation_main
group by 

    substr(fk_lex_relation_sub,length(substr(fk_lex_relation_sub,1,instr(fK_lex_relation_sub,'/',-1)))+1,4) ,  
    split_nr,
    substr(fk_lex_relation,length(substr(fk_lex_relation,1,instr(fk_lex_relation,'/',-1)))+1,4) ,
    flg_split_buch,
    SPLIT_NR_MAN,
      nvl(substr(fk_lex_relation_main,length(substr(fk_lex_relation_main,1,instr(fk_lex_relation_main,'/',-1)))+1,4),0),
     fin_relation
;
--------------------------------------------------------
--  DDL for View V_GROUPING_SETS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_GROUPING_SETS" ("RECHNUNGSDATUM", "FK_PROJ_PROJEKT", "SUM_RECH", "AVG_RECH", "MIN_RECH", "MAX_RECH") AS 
  select 
rechnungsdatum, fk_proj_projekt, sum(rechnungsbetrag_netto) sum_rech, avg(rechnungsbetrag_netto) avg_rech, min(rechnungsbetrag_netto) min_rech, max(rechnungsbetrag_netto) max_rech
from t_re_rechnung
group by  
grouping sets (rechnungsdatum, fk_proj_projekt), ( fk_proj_projekt), ( )
order by 1
;
--------------------------------------------------------
--  DDL for View V_IMP_BEL_ZUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_IMP_BEL_ZUS" ("ART", "FK_IMP_BA_BEL", "PK_IMP_BA_ALLG_BEL", "BEZEICHNUNG", "KENNZEICHEN", "DATUM", "DATUM_VERGEHEN", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "BETRAG", "WAEHRUNG", "STEUERSATZ", "MWST_BETRAG", "NETTO", "ZAHLUNGSART", "BILD", "BILD1", "VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_PROJEKT", "WAEHRUNG_BETRAG", "FK_BAS_KAT_KATEGORIE", "KATEGORIE", "PROJEKT", "INVENTAR", "FK_BEL_BELEG_ABLAGE") AS 
  with bel as (
  SELECT
        'ALLG_BELEG' art,
        fk_imp_ba_bel,
        pk_imp_ba_allg_bel,
        bezeichnung,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_bas_Kal_arbeitstag fk_bas_kal_arbeitstag,
        fk_kto_buchung fk_kto_buchung,
        TO_CHAR(betrag) betrag,
        waehrung waehrung,
        TO_CHAR(steuersatz) steuersatz,
        NULL mwst_betrag,
        NULL netto,
        zahlungsart,
        bild,
        bild1,
        verwendungszweck,
        fk_inv_inventar fk_inv_inventar,
        fk_proj_projekt fk_proj_projekt,
        waehrung_betrag waehrung_betrag,
        fk_bas_kat_kategorie fk_bas_kat_kategorie,
        fk_bel_beleg_ablage fk_bel_beleg_ablage
    FROM
        imp_ba_allg_bel
    UNION all
    SELECT
        'AUTOERSATZTEILE' art,
        fk_imp_ba_bel,
        pk_car_auto_ersatzteile,
        geschaeft,
        kennzeichen,
        datum_uhrzeit,
        NULL,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL währung,
        steuersatz,
        NULL mwst_betrag,
        NULL netto,
        zahlungsart,
        null bild,
        null bild1,
        verwendungszweck,
        fk_inv_inventar,
        null fk_projekt,
        null währung_betrag,
        null fk_kategorie,
        fk_bel_beleg_ablage
    FROM
        t_car_auto_ersatzteile
    UNION all
    SELECT
        'BUSSGELDER' art,
        fk_imp_ba_bel,
        pk_imp_ba_bussgelder,
        ort,
        kennzeichen,
        datum,
        datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        zahlungsart,
        null bild,
        null bild1,
        verwendungszweck,
        fk_inv_inventar,
        fk_proj_projekt,
        null waehrung_betrag,
        null fk_kategorie,
        null fk_beleg_ablage
    FROM
        imp_ba_bussgelder
    UNION all
    SELECT
        'CARMIETE' art,
        fk_imp_ba_bel,
        pk_car_auto_vermietung,
        land
        || ' '
        || bemerkung,
        NULL kennzeichen,
        TO_CHAR(datum),
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        zahlungsart,        
        null bild,
        null bild1,
        null verwendungszweck,
        null fk_inv_inventar,
        null fk_proj_projekt,
        null waehrung_betrag,
        null fk_bas_kat_kategorie,
        null fk_bel_beleg_ablage
    FROM
        t_car_auto_vermietung
/*
    UNION all
    SELECT
        'COWORKING' art,
        fk_imp_ba_bel,
        pk_imp_ba_coworking,
        ort,
        NULL kennzeichen,
        TO_CHAR(datum),
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        null fk_inventar,
        fk_projekt,
        null währung_betrag,
        null fk_kategorie,
        null fk_beleg_ablage
    FROM
        imp_ba_coworking
    UNION all
    SELECT
        'ELEKTRONIK' art,
        fk_imp_ba_bel,
        pk_imp_ba_elektronik,
        bezeichnung,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null  verwendungszweck,
        fk_inventar,
        null fk_projekt,
        währung_betrag,
        null fk_kategorie,
        fk_beleg_ablage
    FROM
        imp_ba_elektronik
    UNION all

    SELECT
        'GRENZBELEGE' art,
        fk_imp_ba_bel,
        pk_imp_ba_grenzbelege,
        bezeichnung,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        fk_inventar,
        null fk_projekt,
        währung_betrag,
        null fk_kategorie,
        fk_beleg_ablage
    FROM
        imp_ba_grenzbelege
        */
    UNION all
    SELECT
        'HEIZUNGSABRECHNUNG' art,
        fk_imp_ba_bel,
        pk_abr_en_heizungsabrechnung,
        abrechnungszeitraum,
        NULL kennzeichen,
        abrechnungsdatum,
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(nachzahlungsbetrag),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        null fk_inventar,
        null fk_projekt,
        null waehrung_betrag,
        null fk_kategorie,
        null fk_beleg_ablage
    FROM
        t_abr_en_heizungsabrechnung
    UNION all
    SELECT
        'HOTELRECHNUNGEN' art,
        fk_imp_ba_bel,
        pk_re_sub_hotelrechnungen,
        hotel,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        bild,
        bild1,
        verwendungszweck,
        null fk_inv_inventar,
        fk_proj_projekt,
        waehrung_betrag,
        null fk_bas_kat_kategorie,
        null fk_bel_beleg_ablage
    FROM
        t_re_sub_hotelrechnungen
    UNION all
    SELECT
        'KFZ_VERSICHERUNGEN' art,
        fk_imp_ba_bel,
        pk_car_auto_versicherung,
        bezeichnung,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild, 
        null bild1,
        null verwendungszweck,
        fk_inv_inventar,
        null fk_proj_projekt,
        waehrung_betrag,
        null fk_bas_kat_kategorie,
        null fk_bel_beleg_ablage
    FROM
        t_car_auto_versicherung
    UNION all
    SELECT
        'KRANKENKASSE' art,
        fk_imp_ba_bel,
        pk_bei_kk_krankenkasse_det,
        buchungstext,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        bild,
        bild1,
        verwendungszweck,
        null fk_inv_inventar,
        null fk_proj_projekt,
        null waehrung_betrag,
        null fk_bas_kal_kategorie,
        null fk_bel_beleg_ablage
    FROM
        t_bei_kk_krankenkasse_det
 /*
    UNION all
    SELECT
        'OEFFENTL_TICKKETS' art,
        fk_imp_ba_bel,
        pk_imp_ba_oeffentl_tickets,
        verkehrsverbund,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        bild,
        null bild1,
        verwendungszweck,
        null fk_inventar,
        fk_projekt,
        null währung_betrag,
        null fk_kategorie,
        fk_beleg_ablage
    FROM
        imp_ba_oeffentl_tickets
    UNION all
    SELECT
        'PARKTICKETS' art,
        fk_imp_ba_bel,
        pk_imp_ba_parktickets,
        name,
        NULL kennzeichen,
        von
        || ' '
        || bis,
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(betrag),
        NULL währung,
        TO_CHAR(steuersatz),
        NULL mwst_betrag,
        NULL netto,
        zahlungsart,
        bild,
        null bild1,
        verwendungszweck,
        fk_inventar,
        fk_projekt,
        währung_betrag,
        null fk_kategorie,
    fk_beleg_ablage
    FROM
        imp_ba_parktickets
    UNION all
    SELECT
        'SONSTIGE_BELEGE' art,
        fk_imp_ba_bel,
        pk_imp_ba_sonstige_belege,
        art
        || ' '
        || firma,
        NULL kennzeichen,
        datum,
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        fk_inventar,
        fk_projekt,
        null währung_betrag,
        null fk_Kategorie,
    fk_beleg_ablage
    FROM
        imp_ba_sonstige_belege
    UNION all

    SELECT
        'TANKSTELLE' art,
        fk_imp_ba_bel,
        pk_imp_ba_tankstelle,
        tankstelle
        || ' '
        || ort,
        NULL kennzeichen,
        TO_CHAR(datum),
        NULL datum_vergehen,
        fk_arbeitstag,
        fk_buchung,
        TO_CHAR(eur),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        bild,
        null bild1,
        verwendungszweck,
        fk_inventar,
        fk_projekt,
        währung_betrag,
        null fk_kategorie,
       fk_beleg_ablage
    FROM
        imp_ba_tankstelle
        */
    UNION all
    SELECT
        'TEXTILREINIGUNG' art,
        fk_imp_ba_bel,
        pk_tex_textilreinigung,
        textilreinigung
        || ' '
        || typ,
        NULL kennzeichen,
        TO_CHAR(datum),
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(gesamtpreis),
        NULL waehrung,
        TO_CHAR(steuersatz),
        NULL mwst_betrag,
        NULL netto,
        zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        null fk_inv_inventar,
        fk_proj_projekt,
        null waehrung_betrag,
        null fk_bas_kal_kategorie,
        fk_bel_beleg_ablage
    FROM
        t_tex_textilreinigung
    UNION all
    SELECT
        'TEL_MOBILCOM' art,
        fk_imp_tel_bel,
        to_number(pk_imp_tel_mobilcom_rech_ov),
        "Rechnungsnummer",
        NULL kennzeichen,
        TO_CHAR(rechnungsdatum),
        NULL datum_vergehen,
        fk_bas_kal_rechnungsdatum,
        fk_kto_buchung,
        TO_CHAR("Brutto"),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        null  fk_inv_inventar,
        null fk_proj_projekt,
        null waehrung_betrag,
        null fk_bas_kat_kategorie,
        null fk_bel_beleg_ablage
    FROM
        t_imp_tel_mobilcom_rech_ov
    UNION all
    SELECT
        'TEL_O2' art,
        fk_imp_tel_bel,
        pk_imp_tel_o2,
        rechnungsnummer,
        NULL kennzeichen,
        TO_CHAR(rechnungsdatum),
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL währung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        null fk_inv_inventar,
        null fk_proj_projekt,
        null waehrung_betrag,
        null fk_kategorie,
        null fk_beleg_ablage
    FROM
        t_imp_tel_o2
    UNION all
    SELECT
        'TEL_VODAFONE' art,
        fk_imp_tel_bel,
        pk_imp_tel_vodafone,
        bezeichnung,
        NULL kennzeichen,
        TO_CHAR(datum),
        NULL datum_vergehen,
        fk_bas_kal_arbeitstag,
        fk_kto_buchung,
        TO_CHAR(betrag),
        NULL waehrung,
        NULL steuersatz,
        NULL mwst_betrag,
        NULL netto,
        null zahlungsart,
        null bild,
        null bild1,
        null verwendungszweck,
        null fk_inv_inventar,
        null fk_proj_projekt,
        null waehrung_betrag,
        null fk_bas_kat_kategorie,
        null fk_bel_beleg_ablage
    FROM
        t_imp_tel_vodafone

        )
        select 
        bel.art,
        bel.fk_imp_ba_bel,
        bel.pk_imp_ba_allg_bel,
        bel.bezeichnung,
        bel.kennzeichen,
        bel.datum,
        bel.datum_vergehen,
        bel.fk_bas_kal_arbeitstag,
        bel.fk_kto_buchung,
        bel.betrag,
        bel.waehrung,
        bel.steuersatz,
        bel.mwst_betrag,
        bel.netto,
        bel.zahlungsart,
        bel.bild,
        bel.bild1,
        bel.verwendungszweck,
        bel.fk_inv_inventar,
        bel.fk_proj_projekt,
        bel.waehrung_betrag,
        bel.fk_bas_kat_kategorie,
        kat.Kategorie,
        pr.Projekt,
        inv.inventar,
        fk_bel_beleg_ablage
        from bel
         left join t_inv_inventare inv on bel.fk_inv_inventar = inv.pk_inv_inventar
         left join t_proj_projekt pr on pr.pk_proj_projekt = bel.fk_proj_projekt
         left join t_bas_kat_kategorie kat on kat.pk_bas_kat_kategorie = bel.fk_bas_kat_kategorie
;
--------------------------------------------------------
--  DDL for View V_IMP_KONTEN_CHECK
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_IMP_KONTEN_CHECK" ("SOLLKONTO") AS 
  select sollkonto 
from (
select sollkonto
from t_lex
group by sollkonto
union
select habenkonto
from t_lex
group by habenkonto
) t1
 left join t_lex_kontenplan_konten kto on kto.konten_nr_ext = t1.sollkonto
 where kto.konten_nr_ext is null
;
--------------------------------------------------------
--  DDL for View V_IMP_KONTEN_CHEDK
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_IMP_KONTEN_CHEDK" ("SOLLKONTO") AS 
  select sollkonto 
from (
select sollkonto
from t_lex
group by sollkonto
union
select habenkonto
from t_lex
group by habenkonto
) t1
 left join t_lex_kontenplan_konten kto on kto.konten_nr_ext = t1.sollkonto
 where kto.konten_nr_ext is null
;
--------------------------------------------------------
--  DDL for View V_IMP_TEL_CONTROL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_IMP_TEL_CONTROL" ("ABRECHNUNGSMONAT", "COUNT(*)", "SUM(BETRAG)", "RECHNUNGSNUMMER", "NETTOBETRAG") AS 
  select a."ABRECHNUNGSMONAT",a."COUNT(*)",a."SUM(BETRAG)",a."RECHNUNGSNUMMER", b.betrag nettobetrag
from (
select abrechnungsmonat, count(*), sum(Betrag), rechnungsnummer
from t_imp_tel_mobilcom_rech_det
where detail not in (
'Nettosumme',
'Summe MwSt.Satz',
'Rechnungsbetrag gesamt'
)
group by abrechnungsmonat, rechnungsnummer
) a
left join (

select *
from t_imp_tel_mobilcom_rech_det
where detail in (
'Nettosumme'

)) b
on a.rechnungsnummer = b.rechnungsnummer
;
--------------------------------------------------------
--  DDL for View V_INP_BELEGE_ALL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_INP_BELEGE_ALL" ("PK_INP_BELEGE_ALL", "FK_LEX_BUCHUNG", "FK_BAS_KAT_KATEGORIE", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "FK_STD_KTO_ZAHLUNGSART", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_PROJEKT", "BELEGNUMMER", "BEZEICHNUNG", "FK_ADR_LAND", "FK_ADR_CITY", "BEL_DATUM", "VON", "BIS", "NETTO_BETRAG", "FK_BAS_STEU_STEUER_SATZ", "MWST_BETRAG", "BRUTTO_BETRAG", "FK_BAS_MON_WAEHRUNG", "STEUERNUMMER", "FK_BAS_MON_UMRECHNUNGSKURS", "COMM_REST_BELEG", "COMM_TEL_BELEG", "COMM_PRODUKTE", "COMM_BEGRUENDUNG", "COMM_SONSTIGES", "BELEG", "ZAHLUNGSBELEG", "LITER", "ZAPFSAEULE", "FK_LOC_LOCATION", "PERSOENLICH_VOR_ORT", "BELEG_UHRZEIT", "VON_UHRZEIT", "BIS_UHRZEIT", "FK_BAS_KAL_VON_ARBEITSTAG", "FK_BAS_KAL_BIS_ARBEITSTAG", "COMM_ADRESSE", "TANKSTELLEN_NR", "BRUTTO_BETRAG_INCL_TRINKG", "COMM_PARKTICKET", "FRMDW_NETTO_BETRAG", "FK_BAS_MON_FRMDW", "FK_BAS_MON_FRMDW_MWST_SATZ", "FRMDW_MWST_BETRAG", "FRMDW_BRUTTO_BETRAG", "FRMDW_BRUTTO_INCL_TRINKG", "MWST_BETRAG_EUR", "BRUTTO_BETRAG_EUR", "BRUTTO_INCL_TRINKG_EUR", "NETTO_BETRAG_EUR", "PREIS_PRO_MENGE", "MENGENEINHEIT", "LA_DATUM", "FK_LA_KONTO", "FK_LA_WDH", "FK_BAS_STD_STATUS", "COMM_VERGEHEN", "VERG_BEHOERDE", "VERG_CNT_PUNKTE", "FK_BEL_BELEG_ABLAGE", "FK_ABL_ORDNER_PAGE", "VERG_CNT_PUNKTE_GESCHAETZT", "VERG_PUNKTE_VON", "VERG_PUNKTE_BIS", "FK_LOC_LOCATION_VERG", "FK_IMP_BA_BEL_OLD", "VERG_GESCHW_IST", "VERG_GESCHW_SOLL", "VERG_GESCHW_UEBER_GRZ", "VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL", "VERG_CODE_BUSSGELD", "VERG_DESCR_BUSSGELD", "GEZAHLT_AM", "WEBSEITE", "KUNDENNUMMER", "FK_REAL_BELEG_EXIST", "VERG_DATUM_RECHTSKRAFT", "VERG_DATUM_TILGUNG", "VERG_NUMMER_FLENS", "VERG_AKTENZEICHEN", "VERG_TATBESTANDSNUMMER", "ZAHL_ART_VAL", "ZAHL_ART_NAME", "LA_WDH_VALUE", "LA_WDH_NAME", "STA_VALUE", "STA_NAME", "BEL_EX_VALUE", "BEL_EX_NAME", "PROJ_PK_PROJ_PROJEKT", "PROJ_FK_KON_AUFTRAGGEBER", "PROJ_FK_KON_PROJEKTPARTNER_1", "PROJ_FK_KON_PROJEKTPARTNER_2", "PROJ_PROJEKT", "PROJ_VON", "PROJ_BIS", "PROJ_AKTUELLER_STUNDENSATZ", "PROJ_PSP_ELEMENT", "PROJ_CREATED_BY", "PROJ_CREATED_AT", "PROJ_MODIFIED_BY", "PROJ_MODIFIED_AT", "PROJ_RECHNUNG_GESTELLT", "PROJ_ZAHLUNG_ABGESCHLOSSEN", "PROJ_BELEGE_ZUGEORDNET", "PROJ_KM_GERECHNET", "PROJ_PROJEKT_ABGESCHLOSSEN", "PROJ_PROJEKT_ART", "PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER", "PROJ_AUFT_GESCHAEFTSPARTNER", "PROJ_AUFT_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_AUFT_PK_ADR_ADRESSE", "PROJ_AUFT_STRASSE", "PROJ_AUFT_HSNR", "PROJ_AUFT_PLZ", "PROJ_AUFT_ORT", "PROJ_AUFT_LAND", "PROJ_AUFT_BESCHREIBUNG", "PROJ_AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PROJ_AUFT_GESCHAEFTSPARTNERTYP", "PROJ_PP1_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP1_GESCHAEFTSPARTNER", "PROJ_PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP1_PK_ADR_ADRESSE", "PROJ_PP1_STRASSE", "PROJ_PP1_HSNR", "PROJ_PP1_PLZ", "PROJ_PP1_ORT", "PROJ_PP1_LAND", "PROJ_PP1_BESCHREIBUNG", "PROJ_PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PROJ_PP1_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP2_GESCHAEFTSPARTNER", "PROJ_PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_ADR_ADRESSE", "PROJ_PP2_STRASSE", "PROJ_PP2_HSNR", "PROJ_PP2_PLZ", "PROJ_PP2_ORT", "PROJ_PP2_LAND", "PROJ_PP2_BESCHREIBUNG", "PROJ_PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PROJ_PP2_GESCHAEFTSPARTNERTYP", "PK_BAS_STD_VERWENDUNGSZWECK", "VERWENDUNGSZWECK", "PK_BAS_KAT_KATEGORIE", "KTOKAT_KATEGORIE", "KTOKAT_NEU_ALT", "KTOKAT_FK_BAS_KAT_OBERKATEGORIE", "KTOKAT_VALID", "ARB_PK_BAS_KAL_ARBEITSTAGE", "ARB_DATUM", "ARB_FK_BAS_KAL_ARBEITSTAG", "ARB_FK_STD_KAL_WOCHENENDE", "ARB_FK_STD_KAL_FEIERTAG", "ARB_FEIERTAG", "ARB_TAG", "ARB_MONAT", "ARB_JAHR", "ARB_VON_PK_BAS_KAL_ARBEITSTAGE", "ARB_VON_DATUM", "ARB_VON_FK_BAS_KAL_ARBEITSTAG", "ARB_VON_FK_STD_KAL_WOCHENENDE", "ARB_VON_FK_STD_KAL_FEIERTAG", "ARB_VON_FEIERTAG", "ARB_VON_TAG", "ARB_VON_MONAT", "ARB_VON_JAHR", "ARB_BIS_PK_BAS_KAL_ARBEITSTAGE", "ARB_BIS_DATUM", "ARB_BIS_FK_BAS_KAL_ARBEITSTAG", "ARB_BIS_FK_STD_KAL_WOCHENENDE", "ARB_BIS_FK_STD_KAL_FEIERTAG", "ARB_BIS_FEIERTAG", "ARB_BIS_TAG", "ARB_BIS_MONAT", "ARB_BIS_JAHR", "PK_ADR_LAND", "LAND", "PK_ADR_ORT", "ORT", "CI_PK_ADR_LAND", "CI_LAND", "STEU_STEUERSATZ", "STEU_LAND", "STEU_PK_ADR_LAND", "STEU_PK_BAS_STEU_STEUER_SATZ", "STEU_ZUS_ST", "STEU_FRMD_STEUERSATZ", "STEU_FRMD_LAND", "STEU_FRMD_PK_ADR_LAND", "STEU_FRMD_PK_BAS_STEU_STEUER_SATZ", "STEU_FRMD_ZUS_ST", "PK_BAS_MON_WAEHRUNG", "WAEHRUNG", "WAEHRUNG_LANG", "COMM", "ABL_ORD_J_PAGE_NUMBER", "ABL_ORD_PK_ABL_ORDNER_PAGE", "ABL_ORD_PAGE_NUMBER", "ABL_ORD_JAHR", "ABL_ORD_ORDNER_NAME", "ABL_ORD_PK_ABL_ORDNER", "VBEL_ART", "VBEL_FK_IMP_BA_BEL", "VBEL_PK_IMP_BA_ALLG_BEL", "VBEL_BEZEICHNUNG", "VBEL_KENNZEICHEN", "VBEL_DATUM", "VBEL_DATUM_VERGEHEN", "VBEL_FK_BAS_KAL_ARBEITSTAG", "VBEL_FK_KTO_BUCHUNG", "VBEL_BETRAG", "VBEL_WAEHRUNG", "VBEL_STEUERSATZ", "VBEL_MWST_BETRAG", "VBEL_NETTO", "VBEL_ZAHLUNGSART", "VBEL_BILD", "VBEL_BILD1", "VBEL_VERWENDUNGSZWECK", "VBEL_FK_INV_INVENTAR", "VBEL_FK_PROJ_PROJEKT", "VBEL_WAEHRUNG_BETRAG", "VBEL_FK_BAS_KAT_KATEGORIE", "VBEL_KATEGORIE", "VBEL_PROJEKT", "VBEL_INVENTAR", "VBEL_FK_BEL_BELEG_ABLAGE", "IBAN", "PK_KTO_BANKKONTO", "BANK", "PK_KTO_BANK", "VLOC_PK_LOC_LOCATION", "VLOC_LOCATION", "VLOC_FK_BAS_LOC_LOCATION_TYPE", "VLOC_FK_ADR_ADRESSE", "VLOC_CREATED_BY", "VLOC_CREATED_AT", "VLOC_MODIFIED_BY", "VLOC_MODIFIED_AT", "VLOC_LOCATION_TYPE", "VLOC_STRASSE", "VLOC_HSNR", "VLOC_BESCHREIBUNG", "VLOC_COMM", "VLOC_POSTFACH", "VLOC_PLZ", "VLOC_ORT", "VLOC_LAND", "VLOC_ADR", "VLOC_VERG_PK_LOC_LOCATION", "VLOC_VERG_LOCATION", "VLOC_VERG_FK_BAS_LOC_LOCATION_TYPE", "VLOC_VERG_FK_ADR_ADRESSE", "VLOC_VERG_CREATED_BY", "VLOC_VERG_CREATED_AT", "VLOC_VERG_MODIFIED_BY", "VLOC_VERG_MODIFIED_AT", "VLOC_VERG_LOCATION_TYPE", "VLOC_VERG_STRASSE", "VLOC_VERG_HSNR", "VLOC_VERG_BESCHREIBUNG", "VLOC_VERG_COMM", "VLOC_VERG_POSTFACH", "VLOC_VERG_PLZ", "VLOC_VERG_ORT", "VLOC_VERG_LAND", "VLOC_VERG_ADR", "INP_BEL_ALL_JAHR", "FK_STD_INP_ZAHLUNGSSTATUS", "BELEG_STATUS") AS 
  select 
    inpb."PK_INP_BELEGE_ALL",inpb."FK_LEX_BUCHUNG",
    inpb."FK_BAS_KAT_KATEGORIE",inpb."FK_BAS_KAL_ARBEITSTAG",inpb."FK_KTO_BUCHUNG",inpb."FK_STD_KTO_ZAHLUNGSART",
    inpb.FK_STD_VERW_VERWENDUNGSZWECK,inpb."FK_INV_INVENTAR",inpb."FK_PROJ_PROJEKT",inpb."BELEGNUMMER",
    inpb."BEZEICHNUNG",inpb."FK_ADR_LAND",inpb."FK_ADR_CITY",inpb."BEL_DATUM",inpb."VON",
    inpb."BIS",inpb."NETTO_BETRAG",inpb."FK_BAS_STEU_STEUER_SATZ",inpb."MWST_BETRAG",inpb."BRUTTO_BETRAG",
    inpb."FK_BAS_MON_WAEHRUNG",inpb."STEUERNUMMER",inpb."FK_BAS_MON_UMRECHNUNGSKURS",inpb."COMM_REST_BELEG",inpb."COMM_TEL_BELEG",
    inpb."COMM_PRODUKTE",inpb."COMM_BEGRUENDUNG",inpb."COMM_SONSTIGES",inpb."BELEG",inpb."ZAHLUNGSBELEG",inpb."LITER",
    inpb."ZAPFSAEULE",inpb."FK_LOC_LOCATION",inpb."PERSOENLICH_VOR_ORT",inpb."BELEG_UHRZEIT",inpb."VON_UHRZEIT",inpb."BIS_UHRZEIT",
    inpb."FK_BAS_KAL_VON_ARBEITSTAG",inpb."FK_BAS_KAL_BIS_ARBEITSTAG",inpb."COMM_ADRESSE",inpb."TANKSTELLEN_NR",inpb."BRUTTO_BETRAG_INCL_TRINKG",inpb."COMM_PARKTICKET",
    inpb."FRMDW_NETTO_BETRAG",inpb."FK_BAS_MON_FRMDW",inpb."FK_BAS_MON_FRMDW_MWST_SATZ",inpb."FRMDW_MWST_BETRAG",inpb."FRMDW_BRUTTO_BETRAG",inpb."FRMDW_BRUTTO_INCL_TRINKG",
    inpb."MWST_BETRAG_EUR",inpb."BRUTTO_BETRAG_EUR",inpb."BRUTTO_INCL_TRINKG_EUR",inpb."NETTO_BETRAG_EUR",inpb."PREIS_PRO_MENGE",inpb."MENGENEINHEIT",inpb."LA_DATUM",
    inpb."FK_LA_KONTO",inpb."FK_LA_WDH",inpb."FK_STD_INP_STATUS",inpb."COMM_VERGEHEN",inpb."VERG_BEHOERDE",inpb."VERG_CNT_PUNKTE",inpb."FK_BEL_BELEG_ABLAGE",inpb."FK_ABL_ORDNER_PAGE",
    inpb."VERG_CNT_PUNKTE_GESCHAETZT",inpb."VERG_PUNKTE_VON",inpb."VERG_PUNKTE_BIS",inpb."FK_LOC_LOCATION_VERG",inpb."FK_IMP_BA_BEL_OLD",inpb."VERG_GESCHW_IST",inpb."VERG_GESCHW_SOLL",
    inpb."VERG_GESCHW_UEBER_GRZ",inpb."VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL",inpb."VERG_CODE_BUSSGELD",inpb."VERG_DESCR_BUSSGELD",inpb."GEZAHLT_AM",
    inpb."WEBSEITE",inpb."KUNDENNUMMER",inpb."FK_REAL_BELEG_EXIST",
     inpb.VERG_DATUM_RECHTSKRAFT,
 inpb.VERG_DATUM_TILGUNG,
 inpb.VERG_NUMMER_FLENS,
 inpb.VERG_AKTENZEICHEN,
 inpb.VERG_TATBESTANDSNUMMER,
    zahl_art.std_value zahl_art_val,
    zahl_art.std_name zahl_art_name,
    la_wdh.std_value la_wdh_value,
    la_wdh.std_name la_wdh_name,
    sta.std_value sta_value,
    sta.std_name sta_name,
    bel_ex.std_value bel_ex_value,
    bel_ex.std_name bel_ex_name,
    proj.PK_PROJ_PROJEKT proj_PK_PROJ_PROJEKT,
    proj.FK_KON_AUFTRAGGEBER proj_FK_KON_AUFTRAGGEBER,
    proj.FK_KON_PROJEKTPARTNER_1 proj_FK_KON_PROJEKTPARTNER_1,
    proj.FK_KON_PROJEKTPARTNER_2 proj_FK_KON_PROJEKTPARTNER_2,
    proj.PROJEKT proj_PROJEKT,
    proj.VON proj_VON,
    proj.BIS proj_BIS,
    proj.AKTUELLER_STUNDENSATZ proj_AKTUELLER_STUNDENSATZ,
    proj.PSP_ELEMENT proj_PSP_ELEMENT,
    proj.CREATED_BY proj_CREATED_BY,
    proj.CREATED_AT proj_CREATED_AT,
    proj.MODIFIED_BY proj_MODIFIED_BY,
    proj.MODIFIED_AT proj_MODIFIED_AT,
    proj.RECHNUNG_GESTELLT proj_RECHNUNG_GESTELLT,
    proj.ZAHLUNG_ABGESCHLOSSEN proj_ZAHLUNG_ABGESCHLOSSEN,
    proj.BELEGE_ZUGEORDNET proj_BELEGE_ZUGEORDNET,
    proj.KM_GERECHNET proj_KM_GERECHNET,
    proj.PROJEKT_ABGESCHLOSSEN proj_PROJEKT_ABGESCHLOSSEN,
    proj.PROJEKT_ART proj_PROJEKT_ART,
    proj.AUFT_PK_KON_GESCHAEFTSPARTNER proj_AUFT_PK_KON_GESCHAEFTSPARTNER,
    proj.AUFT_GESCHAEFTSPARTNER proj_AUFT_GESCHAEFTSPARTNER,
    proj.AUFT_FK_BAS_KON_GESCHAEFTSPARTNERTYP proj_AUFT_FK_BAS_GESCHAEFTSPARTNERTYP,
    proj.AUFT_PK_ADR_ADRESSE proj_AUFT_PK_ADR_ADRESSE,
    proj.AUFT_STRASSE proj_AUFT_STRASSE,
    proj.AUFT_HSNR proj_AUFT_HSNR,
    proj.AUFT_PLZ proj_AUFT_PLZ,
    proj.AUFT_ORT proj_AUFT_ORT,
    proj.AUFT_LAND proj_AUFT_LAND,
    proj.AUFT_BESCHREIBUNG proj_AUFT_BESCHREIBUNG,
    proj.AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT proj_AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
    proj.AUFT_GESCHAEFTSPARTNERTYP proj_AUFT_GESCHAEFTSPARTNERTYP,
    proj.PP1_PK_KON_GESCHAEFTSPARTNER proj_PP1_PK_KON_GESCHAEFTSPARTNER,
    proj.PP1_GESCHAEFTSPARTNER proj_PP1_GESCHAEFTSPARTNER,
    proj.PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP proj_PP1_FK_BAS_GESCHAEFTSPARTNERTYP,
    proj.PP1_PK_ADR_ADRESSE proj_PP1_PK_ADR_ADRESSE,
    proj.PP1_STRASSE proj_PP1_STRASSE,
    proj.PP1_HSNR proj_PP1_HSNR,
    proj.PP1_PLZ proj_PP1_PLZ,
    proj.PP1_ORT proj_PP1_ORT,
    proj.PP1_LAND proj_PP1_LAND,
    proj.PP1_BESCHREIBUNG proj_PP1_BESCHREIBUNG,
    proj.PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT proj_PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
    proj.PP1_GESCHAEFTSPARTNERTYP proj_PP1_GESCHAEFTSPARTNERTYP,
    proj.PP2_PK_KON_GESCHAEFTSPARTNER proj_PP2_PK_KON_GESCHAEFTSPARTNER,
    proj.PP2_GESCHAEFTSPARTNER proj_PP2_GESCHAEFTSPARTNER,
    proj.PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP proj_PP2_FK_BAS_GESCHAEFTSPARTNERTYP,
    proj.PP2_PK_ADR_ADRESSE proj_PP2_PK_ADRESSE,
    proj.PP2_STRASSE proj_PP2_STRASSE,
    proj.PP2_HSNR proj_PP2_HSNR,
    proj.PP2_PLZ proj_PP2_PLZ,
    proj.PP2_ORT proj_PP2_ORT,
    proj.PP2_LAND proj_PP2_LAND,
    proj.PP2_BESCHREIBUNG proj_PP2_BESCHREIBUNG,
    proj.PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT proj_PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
    proj.PP2_GESCHAEFTSPARTNERTYP proj_PP2_GESCHAEFTSPARTNERTYP,
    ver.std_value pk_bas_verw_verwendungszweck,
    ver.std_name verwendungszweck,
    ktokat.pk_bas_kat_kategorie,
    ktokat.Kategorie ktokat_Kategorie,
    ktokat.neu_alt ktokat_neu_alt,
    ktokat.FK_BAS_kat_Oberkategorie ktokat_fk_oberkategorie,
    ktokat.valid ktokat_valid,
    arb.PK_BAS_kal_ARBEITSTAGE arb_PK_BAS_kal_ARBEITSTAGE,
    arb.DATUM arb_DATUM,
    arb.FK_STD_KAL_ARBEITSTAG arb_FK_STD_KAL_ARBEITSTAG,
    arb.FK_STD_KAL_WOCHENENDE arb_FK_STD_KAL_WOCHENENDE,
    arb.FK_STD_KAL_FEIERTAG arb_FK_STD_KAL_FEIERTAG,
    arb.FEIERTAG arb_FEIERTAG,
    arb.TAG arb_TAG,
    arb.MONAT arb_MONAT,
    arb.JAHR arb_JAHR,
    arb_von.PK_BAS_kal_ARBEITSTAGE arb_von_PK_BAS_kal_ARBEITSTAGE,
    arb_von.DATUM arb_von_DATUM,
    arb_von.FK_STD_KAL_ARBEITSTAG arb_von_FK_STD_KAL_ARBEITSTAG,
    arb_von.FK_STD_KAL_WOCHENENDE arb_von_FK_STD_KAL_WOCHENENDE,
    arb_von.FK_STD_KAL_FEIERTAG arb_von_FK_STD_KAL_FEIERTAG,
    arb_von.FEIERTAG arb_von_FEIERTAG,
    arb_von.TAG arb_von_TAG,
    arb_von.MONAT arb_von_MONAT,
    arb_von.JAHR arb_von_JAHR,
    arb_bis.PK_BAS_kal_ARBEITSTAGE arb_bis_PK_BAS_kal_ARBEITSTAGE,
    arb_bis.DATUM arb_bis_DATUM,
    arb_bis.FK_STD_KAL_ARBEITSTAG arb_bis_FK_STD_KAL_ARBEITSTAG,
    arb_bis.FK_STD_KAL_WOCHENENDE arb_bis_FK_STD_KAL_WOCHENENDE,
    arb_bis.FK_STD_KAL_FEIERTAG arb_bis_FK_STD_KAL_FEIERTAG,
    arb_bis.FEIERTAG arb_bis_FEIERTAG,
    arb_bis.TAG arb_bis_TAG,
    arb_bis.MONAT arb_bis_MONAT,
    arb_bis.JAHR arb_bis_JAHR,
    la.pk_adr_land,
    la.land,
    ci.pk_adr_ort,
    ci.ort,
    ci.pk_adr_land ci_pk_land,
    ci.land ci_land,
    steu.STEUERSATZ steu_STEUERSATZ,
    steu.LAND steu_LAND,
    steu.PK_adr_LAND steu_PK_adr_LAND,
    steu.PK_BAS_steu_STEUER_SATZ steu_PK_BAS_steu_STEUER_SATZ,
    steu.ZUS_ST steu_ZUS_ST,
    steu_frmd.STEUERSATZ steu_frmd_STEUERSATZ,
    steu_frmd.LAND steu_frmd_LAND,
    steu_frmd.PK_adr_LAND steu_frmd_PK_adr_LAND,
    steu_frmd.PK_BAS_steu_STEUER_SATZ steu_frmd_PK_BAS_steu_STEUER_SATZ,
    steu_frmd.ZUS_ST steu_frmd_ZUS_ST,
    wae.pk_bas_mon_waehrung,
    wae.waehrung,
    wae.waehrung_lang,
    wae.comm,
    abl_ord.j_page_number abl_ord_j_page_number, 
    abl_ord.pk_abl_ordner_page abl_ord_pk_abl_ordner_page, 
    abl_ord.page_number abl_ord_page_number, 
    abl_ord.jahr abl_ord_jahr, 
    abl_ord.ordner_name abl_ord_ordner_name, 
    abl_ord.pk_abl_ordner abl_ord_pk_abl_ordner,
    vbel.ART vbel_ART,
    vbel.FK_IMP_BA_BEL vbel_FK_IMP_BA_BEL,
    vbel.PK_IMP_BA_ALLG_BEL vbel_PK_IMP_BA_ALLG_BEL,
    vbel.BEZEICHNUNG vbel_BEZEICHNUNG,
    vbel.KENNZEICHEN vbel_KENNZEICHEN,
    vbel.DATUM vbel_DATUM,
    vbel.DATUM_VERGEHEN vbel_DATUM_VERGEHEN,
    vbel.FK_BAS_kal_ARBEITSTAG vbel_FK_BAS_kal_ARBEITSTAG,
    vbel.FK_KTO_BUCHUNG vbel_FK_KTO_BUCHUNG,
    vbel.BETRAG vbel_BETRAG,
    vbel.WAEHRUNG vbel_WÄHRUNG,
    vbel.STEUERSATZ vbel_STEUERSATZ,
    vbel.MWST_BETRAG vbel_MWST_BETRAG,
    vbel.NETTO vbel_NETTO,
    vbel.ZAHLUNGSART vbel_ZAHLUNGSART,
    vbel.BILD vbel_BILD,
    vbel.BILD1 vbel_BILD1,
    vbel.VERWENDUNGSZWECK vbel_VERWENDUNGSZWECK,
    vbel.FK_INV_INVENTAR vbel_FK_INV_INVENTAR,
    vbel.FK_PROJ_PROJEKT vbel_FK_PROJ_PROJEKT,
    vbel.WAEHRUNG_BETRAG vbel_WAEHRUNG_BETRAG,
    vbel.FK_BAS_kat_KATEGORIE vbel_FK_BAS_kat_KATEGORIE,
    vbel.Kategorie vbel_Kategorie,
    vbel.PROJEKT vbel_PROJEKT,
    vbel.INVENTAR vbel_INVENTAR,
    vbel.FK_BEL_BELEG_ABLAGE vbel_FK_BEL_BELEG_ABLAGE,
    bakto.Iban, bakto.pk_kto_bankkonto, 
    bakto.bank, bakto.pk_kto_bank,
    vloc.PK_loc_LOCATION vloc_PK_loc_LOCATION,
    vloc.LOCATION vloc_LOCATION,
    vloc.FK_bas_loc_LOCATION_TYPE vloc_FK_bas_loc_LOCATION_TYPE,
    vloc.FK_adr_ADRESSE vloc_FK_adr_ADRESSE,
    vloc.CREATED_BY vloc_CREATED_BY,
    vloc.CREATED_AT vloc_CREATED_AT,
    vloc.MODIFIED_BY vloc_MODIFIED_BY,
    vloc.MODIFIED_AT vloc_MODIFIED_AT,
    vloc.LOCATION_TYPE vloc_LOCATION_TYPE,
    vloc.STRASSE vloc_STRASSE,
    vloc.HSNR vloc_HSNR,
    vloc.BESCHREIBUNG vloc_BESCHREIBUNG,
    vloc.COMM vloc_COMM,
    vloc.POSTFACH vloc_POSTFACH,
    vloc.PLZ vloc_PLZ,
    vloc.ORT vloc_ORT,
    vloc.LAND vloc_LAND,
    vloc.ADR vloc_ADR,
    vloc_verg.PK_loc_LOCATION vloc_verg_PK_loc_LOCATION,
    vloc_verg.LOCATION vloc_verg_LOCATION,
    vloc_verg.FK_bas_loc_LOCATION_TYPE vloc_verg_FK_bas_loc_LOCATION_TYPE,
    vloc_verg.FK_adr_ADRESSE vloc_verg_FK_adr_ADRESSE,
    vloc_verg.CREATED_BY vloc_verg_CREATED_BY,
    vloc_verg.CREATED_AT vloc_verg_CREATED_AT,
    vloc_verg.MODIFIED_BY vloc_verg_MODIFIED_BY,
    vloc_verg.MODIFIED_AT vloc_verg_MODIFIED_AT,
    vloc_verg.LOCATION_TYPE vloc_verg_LOCATION_TYPE,
    vloc_verg.STRASSE vloc_verg_STRASSE,
    vloc_verg.HSNR vloc_verg_HSNR,
    vloc_verg.BESCHREIBUNG vloc_verg_BESCHREIBUNG,
    vloc_verg.COMM vloc_verg_COMM,
    vloc_verg.POSTFACH vloc_verg_POSTFACH,
    vloc_verg.PLZ vloc_verg_PLZ,
    vloc_verg.ORT vloc_verg_ORT,
    vloc_verg.LAND vloc_verg_LAND,
    vloc_verg.ADR vloc_verg_ADR,
    substr(inpb.bel_datum,7,4) inp_bel_all_jahr,
    inpb.fk_std_inp_zahlungsstatus,
    sta1.std_name  beleg_status
    

from t_inp_belege_all inpb
  left join v_proj_projekte proj on inpb.FK_PROJ_PROJEKT = proj.PK_PROJ_PROJEKT
  left join (select  * from t_std where fk_std_group = 9) ver on ver.std_value= inpb.FK_STD_VERW_VERWENDUNGSZWECK
  left join t_bas_kat_kategorie ktokat on ktokat.pk_bas_kat_kategorie = inpb.FK_BAS_kat_KATEGORIE
  left join t_bas_kal_arbeitstage arb on arb.pk_bas_kal_arbeitstage = inpb.FK_BAS_kal_ARBEITSTAG
  left join t_bas_kal_arbeitstage arb_von on arb_von.pk_bas_kal_arbeitstage = inpb.FK_BAS_kal_VON_ARBEITSTAG
  left join t_bas_kal_arbeitstage arb_bis on arb_bis.pk_bas_kal_arbeitstage = inpb.FK_BAS_kal_BIS_ARBEITSTAG
  left join ( select std_name, std_value
              from t_std
              where fk_std_group = 22) zahl_art on zahl_art.std_value = inpb.FK_STD_KTO_ZAHLUNGSART
  left join t_adr_land la on la.pk_adr_land = inpb.FK_ADR_LAND
  left join (select * from  t_adr_ort ci join t_adr_land la on ci.FK_ADR_LAND = la.pk_adr_land) ci on ci.pk_adr_ort = inpb.FK_ADR_CITY
  left join v_steu_steuer_satz steu on steu.PK_BAS_STEU_STEUER_SATZ = inpb.FK_BAS_STEU_STEUER_SATZ
  left join v_steu_steuer_satz steu_frmd on steu_frmd.PK_BAS_STEU_STEUER_SATZ = inpb.fk_bas_mon_frmdw_mwst_satz
  left join t_bas_mon_waehrung wae on wae.pk_bas_mon_waehrung = FK_BAS_mon_WAEHRUNG
  left join (select jahr || ' ' || page_number j_page_number, pk_abl_ordner_page, page_number, jahr, ordner_name, pk_abl_ordner
            from T_ABL_ORDNER abl_ord
            left join T_ABL_ORDNER_PAGE abl_ord_p on abl_ord.pk_abl_ordner = abl_ord_p.fk_abl_ordner
            ) abl_ord on abl_ord.pk_abl_ordner_page = inpb.fk_abl_ordner_page
  left join v_imp_bel_zus vbel on vbel.fk_imp_ba_bel = inpb.fk_imp_ba_bel_old
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 27) bel_ex on bel_ex.std_value = inpb.fk_real_beleg_exist
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 26) sta on sta.std_value = inpb.fk_std_inp_zahlungsstatus
  left join v_loc_location vloc on vloc.pk_loc_location = inpb.fk_loc_location
  left join v_loc_location vloc_verg on vloc_verg.pk_loc_location = inpb.FK_loc_LOCATION_VERG
  --lastschriftkonto
  left join (select Iban, pk_kto_bankkonto, bank, pk_kto_bank
                from t_kto_bankKonto kto join t_kto_bank ba on kto.fk_kto_bank = ba.pk_kto_bank) bakto on bakto.pk_kto_bankkonto = inpb.fk_la_konto 
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 23) la_wdh on la_wdh.std_value = inpb.fk_la_wdh
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 101) sta1 on sta1.std_value = inpb.fk_std_inp_status
;
--------------------------------------------------------
--  DDL for View V_INP_BELEGE_ALL_IMP
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_INP_BELEGE_ALL_IMP" ("PK_INP_BELEGE_ALL", "FK_LEX_BUCHUNG", "FK_BAS_KAT_KATEGORIE", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "FK_STD_KTO_ZAHLUNGSART", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_PROJEKT", "BELEGNUMMER", "BEZEICHNUNG", "FK_ADR_LAND", "FK_ADR_CITY", "BEL_DATUM", "VON", "BIS", "NETTO_BETRAG", "FK_BAS_STEUER_SATZ", "MWST_BETRAG", "BRUTTO_BETRAG", "FK_BAS_MON_WAEHRUNG", "STEUERNUMMER", "FK_BAS_MON_UMRECHNUNGSKURS", "COMM_REST_BELEG", "COMM_TEL_BELEG", "COMM_PRODUKTE", "COMM_BEGRUENDUNG", "COMM_SONSTIGES", "BELEG", "ZAHLUNGSBELEG", "LITER", "ZAPFSAEULE", "FK_ADR_LOCATION", "PERSOENLICH_VOR_ORT", "BELEG_UHRZEIT", "VON_UHRZEIT", "BIS_UHRZEIT", "FK_BAS_KAL_VON_ARBEITSTAG", "FK_BAS_KAL_BIS_ARBEITSTAG", "COMM_ADRESSE", "TANKSTELLEN_NR", "BRUTTO_BETRAG_INCL_TRINKG", "COMM_PARKTICKET", "FRMDW_NETTO_BETRAG", "FK_BAS_FRMDW", "FK_BAS_FRMDW_MWST_SATZ", "FRMDW_MWST_BETRAG", "FRMDW_BRUTTO_BETRAG", "FRMDW_BRUTTO_INCL_TRINKG", "MWST_BETRAG_EUR", "BRUTTO_BETRAG_EUR", "BRUTTO_INCL_TRINKG_EUR", "NETTO_BETRAG_EUR", "PREIS_PRO_MENGE", "MENGENEINHEIT", "LA_DATUM", "FK_LA_KONTO", "FK_LA_WDH", "FK_STD_INP_STATUS", "COMM_VERGEHEN", "VERG_BEHOERDE", "CNT_PUNKTE", "FK_BEL_BELEG_ABLAGE", "FK_ABL_ORDNER_PAGE", "CNT_PUNKTE_GESCHAETZT", "PUNKTE_VON", "PUNKTE_BIS", "FK_ADR_LOCATION_VERG", "FK_IMP_BA_BEL_OLD", "GESCHW_IST", "GESCHW_SOLL", "GESCHW_UEBER_GRZ", "GESCHW_UEBER_GRZ_ABZGL_MESSTOL", "CODE_BUSSGELD", "DESCR_BUSSGELD", "GEZAHLT_AM", "WEBSEITE", "KUNDENNUMMER", "FK_REAL_BELEG_EXIST", "ZAHL_ART_VAL", "ZAHL_ART_NAME", "LA_WDH_VALUE", "LA_WDH_NAME", "STA_VALUE", "STA_NAME", "BEL_EX_VALUE", "BEL_EX_NAME", "PROJ_PK_PROJ_PROJEKT", "PROJ_FK_KON_AUFTRAGGEBER", "PROJ_FK_KON_PROJEKTPARTNER_1", "PROJ_FK_KON_PROJEKTPARTNER_2", "PROJ_PROJEKT", "PROJ_VON", "PROJ_BIS", "PROJ_AKTUELLER_STUNDENSATZ", "PROJ_PSP_ELEMENT", "PROJ_CREATED_BY", "PROJ_CREATED_AT", "PROJ_MODIFIED_BY", "PROJ_MODIFIED_AT", "PROJ_RECHNUNG_GESTELLT", "PROJ_ZAHLUNG_ABGESCHLOSSEN", "PROJ_BELEGE_ZUGEORDNET", "PROJ_KM_GERECHNET", "PROJ_PROJEKT_ABGESCHLOSSEN", "PROJ_PROJEKT_ART", "PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER", "PROJ_AUFT_GESCHAEFTSPARTNER", "PROJ_AUFT_FK_BAS_GESCHAEFTSPARTNERTYP", "PROJ_AUFT_PK_ADR_ADRESSE", "PROJ_AUFT_STRASSE", "PROJ_AUFT_HSNR", "PROJ_AUFT_PLZ", "PROJ_AUFT_ORT", "PROJ_AUFT_LAND", "PROJ_AUFT_BESCHREIBUNG", "PROJ_AUFT_PK_REL_GP_KONT", "PROJ_AUFT_GESCHAEFTSPARTNERTYP", "PROJ_PP1_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP1_GESCHAEFTSPARTNER", "PROJ_PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP1_pk_adr_adresse", "PROJ_PP1_STRASSE", "PROJ_PP1_HSNR", "PROJ_PP1_PLZ", "PROJ_PP1_ORT", "PROJ_PP1_LAND", "PROJ_PP1_BESCHREIBUNG", "PROJ_PP1_PK_REL_GP_KONT", "PROJ_PP1_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP2_GESCHAEFTSPARTNER", "PROJ_PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_ADR_ADRESSE", "PROJ_PP2_STRASSE", "PROJ_PP2_HSNR", "PROJ_PP2_PLZ", "PROJ_PP2_ORT", "PROJ_PP2_LAND", "PROJ_PP2_BESCHREIBUNG", "PROJ_PP2_PK_REL_GP_KONT", "PROJ_PP2_GESCHAEFTSPARTNERTYP", "PK_BAS_STD_VERWENDUNGSZWECK", "VERWENDUNGSZWECK", "PK_BAS_KAT_KONTO_BUCH_KAT", "KTOKAT_KATEGORIE", "KTOKAT_NEU_ALT", "KTOKAT_FK_BAS_KAT_OBERKATEGORIE", "KTOKAT_VALID", "ARB_PK_BAS_KAL_ARBEITSTAGE", "ARB_DATUM", "ARB_FK_BAS_KAL_ARBEITSTAG", "ARB_FK_STD_KAL_WOCHENENDE", "ARB_FK_STD_KAL_FEIERTAG", "ARB_FEIERTAG", "ARB_TAG", "ARB_MONAT", "ARB_JAHR", "ARB_VON_PK_BAS_KAL_ARBEITSTAGE", "ARB_VON_DATUM", "ARB_VON_FK_BAS_STD_ARBEITSTAG", "ARB_VON_FK_STD_WOCHENENDE", "ARB_VON_FK_STD_FEIERTAG", "ARB_VON_FEIERTAG", "ARB_VON_TAG", "ARB_VON_MONAT", "ARB_VON_JAHR", "ARB_BIS_FK_STD_KAL_FEIERTAG", "ARB_BIS_DATUM", "ARB_BIS_FK_BAS_KAL_ARBEITSTAG", "ARB_BIS_FK_STD_KAL_WOCHENENDE", "ARB_BIS_FEIERTAG", "ARB_BIS_TAG", "ARB_BIS_MONAT", "ARB_BIS_JAHR", "PK_ADR_LAND", "LAND", "PK_ADR_ORT", "ORT", "CI_PK_ADR_LAND", "CI_LAND", "STEU_STEUERSATZ", "STEU_LAND", "STEU_PK_ADR_LAND", "STEU_PK_BAS_STEU_STEUER_SATZ", "STEU_ZUS_ST", "STEU_FRMD_STEUERSATZ", "STEU_FRMD_LAND", "STEU_FRMD_PK_ADR_LAND", "STEU_FRMD_PK_BAS_STEU_STEUER_SATZ", "STEU_FRMD_ZUS_ST", "PK_BAS_MON_WAEHRUNG", "WAEHRUNG", "WAEHRUNG_LANG", "COMM", "ABL_ORD_J_PAGE_NUMBER", "ABL_ORD_PK_ABL_ORDNER_PAGE", "ABL_ORD_PAGE_NUMBER", "ABL_ORD_JAHR", "ABL_ORD_ORDNER_NAME", "ABL_ORD_PK_ABL_ORDNER", "VBEL_ART", "VBEL_FK_IMP_BA_BEL", "VBEL_PK_IMP_BA_ALLG_BEL", "VBEL_BEZEICHNUNG", "VBEL_KENNZEICHEN", "VBEL_DATUM", "VBEL_DATUM_VERGEHEN", "VBEL_FK_BAS_KAL_ARBEITSTAG", "VBEL_FK_KTO_BUCHUNG", "VBEL_BETRAG", "VBEL_WAEHRUNG", "VBEL_STEUERSATZ", "VBEL_MWST_BETRAG", "VBEL_NETTO", "VBEL_ZAHLUNGSART", "VBEL_BILD", "VBEL_BILD1", "VBEL_VERWENDUNGSZWECK", "VBEL_FK_INV_INVENTAR", "VBEL_FK_PROJ_PROJEKT", "VBEL_WAEHRUNG_BETRAG", "VBEL_FK_BAS_KATEGORIE", "VBEL_KATEGORIE", "VBEL_PROJEKT", "VBEL_INVENTAR", "VBEL_FK_BEL_BELEG_ABLAGE", "IBAN", "PK_KTO_BANKKONTO", "BANK", "PK_KTO_BANK", "VLOC_PK_ADR_LOCATION", "VLOC_LOCATION", "VLOC_FK_BAS_LOCATION_TYPE", "VLOC_FK_ADR_ADRESSE", "VLOC_CREATED_BY", "VLOC_CREATED_AT", "VLOC_MODIFIED_BY", "VLOC_MODIFIED_AT", "VLOC_LOCATION_TYPE", "VLOC_STRASSE", "VLOC_HSNR", "VLOC_BESCHREIBUNG", "VLOC_COMM", "VLOC_POSTFACH", "VLOC_PLZ", "VLOC_ORT", "VLOC_LAND", "VLOC_ADR", "VLOC_VERG_PK_LOC_LOCATION", "VLOC_VERG_LOCATION", "VLOC_VERG_FK_BAS_LOC_LOCATION_TYPE", "VLOC_VERG_FK_ADR_ADRESSE", "VLOC_VERG_CREATED_BY", "VLOC_VERG_CREATED_AT", "VLOC_VERG_MODIFIED_BY", "VLOC_VERG_MODIFIED_AT", "VLOC_VERG_LOCATION_TYPE", "VLOC_VERG_STRASSE", "VLOC_VERG_HSNR", "VLOC_VERG_BESCHREIBUNG", "VLOC_VERG_COMM", "VLOC_VERG_POSTFACH", "VLOC_VERG_PLZ", "VLOC_VERG_ORT", "VLOC_VERG_LAND", "VLOC_VERG_ADR", "INP_BEL_ALL_JAHR", "FK_STD_INP_ZAHLUNGSSTATUS", "BELEG_STATUS") AS 
  select
  
    inpb."PK_IMP_INP_BELEGE_ALL",inpb."FK_LEX_BUCHUNG",inpb."FK_BAS_KAT_KATEGORIE",inpb."FK_BAS_KAL_ARBEITSTAG",inpb."FK_KTO_BUCHUNG",inpb."FK_STD_KTO_ZAHLUNGSART",
    inpb."FK_STD_VERW_VERWENDUNGSZWECK",inpb."FK_INV_INVENTAR",inpb."FK_PROJ_PROJEKT",inpb."BELEGNUMMER",inpb."BEZEICHNUNG",inpb."FK_ADR_LAND",inpb."FK_ADR_CITY",
    inpb."BEL_DATUM",inpb."VON",inpb."BIS",inpb."NETTO_BETRAG",inpb."FK_BAS_STEU_STEUER_SATZ",inpb."MWST_BETRAG",inpb."BRUTTO_BETRAG",inpb."FK_BAS_MON_WAEHRUNG",inpb."STEUERNUMMER",
    inpb."FK_BAS_MON_UMRECHNUNGSKURS",inpb."COMM_REST_BELEG",inpb."COMM_TEL_BELEG",inpb."COMM_PRODUKTE",inpb."COMM_BEGRUENDUNG",inpb."COMM_SONSTIGES",inpb."BELEG",inpb."ZAHLUNGSBELEG",
    inpb."LITER",inpb."ZAPFSAEULE",inpb."FK_LOC_LOCATION",inpb."PERSOENLICH_VOR_ORT",inpb."BELEG_UHRZEIT",inpb."VON_UHRZEIT",inpb."BIS_UHRZEIT",inpb."FK_BAS_KAL_VON_ARBEITSTAG",
    inpb."FK_BAS_KAL_BIS_ARBEITSTAG",inpb."COMM_ADRESSE",inpb."TANKSTELLEN_NR",inpb."BRUTTO_BETRAG_INCL_TRINKG",inpb."COMM_PARKTICKET",inpb."FRMDW_NETTO_BETRAG",inpb."FK_BAS_MON_FRMDW",
    inpb."FK_BAS_MON_FRMDW_MWST_SATZ",inpb."FRMDW_MWST_BETRAG",inpb."FRMDW_BRUTTO_BETRAG",inpb."FRMDW_BRUTTO_INCL_TRINKG",inpb."MWST_BETRAG_EUR",inpb."BRUTTO_BETRAG_EUR",inpb."BRUTTO_INCL_TRINKG_EUR",
    inpb."NETTO_BETRAG_EUR",inpb."PREIS_PRO_MENGE",inpb."MENGENEINHEIT",inpb."LA_DATUM",inpb."FK_LA_KONTO",inpb."FK_LA_WDH",inpb."FK_STD_INP_STATUS",inpb."COMM_VERGEHEN",inpb."VERG_BEHOERDE",inpb."CNT_PUNKTE",inpb."FK_BEL_BELEG_ABLAGE",
    inpb."FK_ABL_ORDNER_PAGE",inpb."CNT_PUNKTE_GESCHAETZT",inpb."PUNKTE_VON",inpb."PUNKTE_BIS",inpb."FK_LOC_LOCATION_VERG",inpb."FK_IMP_BA_BEL_OLD",inpb."GESCHW_IST",inpb."GESCHW_SOLL",inpb."GESCHW_UEBER_GRZ",inpb."GESCHW_UEBER_GRZ_ABZGL_MESSTOL",
    inpb."CODE_BUSSGELD",inpb."DESCR_BUSSGELD",inpb."GEZAHLT_AM",inpb."WEBSEITE",inpb."KUNDENNUMMER",inpb."FK_REAL_BELEG_EXIST",
    zahl_art.std_value zahl_art_val,
    zahl_art.std_name zahl_art_name,
    la_wdh.std_value la_wdh_value,
    la_wdh.std_name la_wdh_name,
    sta.std_value sta_value,
    sta.std_name sta_name,
    bel_ex.std_value bel_ex_value,
    bel_ex.std_name bel_ex_name,
    proj.pk_proj_projekt PROJ_PK_PROJ_PROJEKT,
    proj.fk_kon_auftraggeber PROJ_FK_KON_AUFTRAGGEBER,
    proj.FK_KOn_PROJEKTPARTNER_1 PROJ_FK_KON_PROJEKTPARTNER_1,
    proj.FK_KOn_PROJEKTPARTNER_2 PROJ_FK_KON_PROJEKTPARTNER_2,
    proj.PROJEKT proj_PROJEKT,
    proj.VON proj_VON,
    proj.BIS proj_BIS,
    proj.AKTUELLER_STUNDENSATZ proj_AKTUELLER_STUNDENSATZ,
    proj.PSP_ELEMENT proj_PSP_ELEMENT,
    proj.CREATED_BY proj_CREATED_BY,
    proj.CREATED_AT proj_CREATED_AT,
    proj.MODIFIED_BY proj_MODIFIED_BY,
    proj.MODIFIED_AT proj_MODIFIED_AT,
    proj.RECHNUNG_GESTELLT proj_RECHNUNG_GESTELLT,
    proj.ZAHLUNG_ABGESCHLOSSEN proj_ZAHLUNG_ABGESCHLOSSEN,
    proj.BELEGE_ZUGEORDNET proj_BELEGE_ZUGEORDNET,
    proj.KM_GERECHNET proj_KM_GERECHNET,
    proj.PROJEKT_ABGESCHLOSSEN proj_PROJEKT_ABGESCHLOSSEN,
    proj.PROJEKT_ART proj_PROJEKT_ART,
    proj.auft_pk_kon_geschaeftspartner PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER,
    proj.AUFT_GESCHAEFTSPARTNER proj_AUFT_GESCHAEFTSPARTNER,
    proj.AUFT_fk_bas_kon_geschaeftspartnertyp PROJ_AUFT_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
    proj.AUFT_pk_adr_adresse PROJ_AUFT_PK_ADR_ADRESSE,
    proj.AUFT_STRASSE proj_AUFT_STRASSE,
    proj.AUFT_HSNR proj_AUFT_HSNR,
    proj.AUFT_PLZ proj_AUFT_PLZ,
    proj.AUFT_ORT proj_AUFT_ORT,
    proj.AUFT_LAND proj_AUFT_LAND,
    proj.AUFT_BESCHREIBUNG proj_AUFT_BESCHREIBUNG,
    proj.AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT proj_AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
    proj.AUFT_GESCHAEFTSPARTNERTYP proj_AUFT_GESCHAEFTSPARTNERTYP,
    proj.pp1_pk_kon_geschaeftspartner PROJ_PP1_PK_KON_GESCHAEFTSPARTNER,
    proj.PP1_GESCHAEFTSPARTNER proj_PP1_GESCHAEFTSPARTNER,
    proj.PP1_fk_bas_kon_geschaeftspartnertyp PROJ_PP1_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
    proj.PP1_pk_adr_adresse proj_PP1_pk_adr_adresse,
    proj.PP1_STRASSE proj_PP1_STRASSE,
    proj.PP1_HSNR proj_PP1_HSNR,
    proj.PP1_PLZ proj_PP1_PLZ,
    proj.PP1_ORT proj_PP1_ORT,
    proj.PP1_LAND proj_PP1_LAND,
    proj.PP1_BESCHREIBUNG proj_PP1_BESCHREIBUNG,
    proj.PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT proj_PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
    proj.PP1_GESCHAEFTSPARTNERTYP proj_PP1_GESCHAEFTSPARTNERTYP,
    proj.pp2_pk_kon_geschaeftspartner PROJ_PP2_PK_KON_GESCHAEFTSPARTNER,
    proj.PP2_GESCHAEFTSPARTNER proj_PP2_GESCHAEFTSPARTNER,
    proj.PP2_fk_bas_kon_geschaeftspartnertyp PROJ_PP2_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
    proj.PP2_pk_adr_adresse PROJ_PP2_PK_ADR_ADRESSE,
    proj.PP2_STRASSE proj_PP2_STRASSE,
    proj.PP2_HSNR proj_PP2_HSNR,
    proj.PP2_PLZ proj_PP2_PLZ,
    proj.PP2_ORT proj_PP2_ORT,
    proj.PP2_LAND proj_PP2_LAND,
    proj.PP2_BESCHREIBUNG proj_PP2_BESCHREIBUNG,
    proj.PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT proj_PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
    proj.PP2_GESCHAEFTSPARTNERTYP proj_PP2_GESCHAEFTSPARTNERTYP,
    ver.std_value PK_BAS_std_VERWENDUNGSZWECK,
    ver.std_name verwendungszweck,
    ktokat.PK_BAS_kat_kategorie,
    ktokat.Kategorie ktokat_Kategorie,
    ktokat.neu_alt ktokat_neu_alt,
    ktokat.FK_BAS_kat_Oberkategorie kTOKAT_FK_BAS_kat_OBERKATEGORIE,
    ktokat.valid ktokat_valid,
    arb.PK_BAS_kal_ARBEITSTAGE ARB_PK_BAS_kal_ARBEITSTAGE,
    arb.DATUM arb_DATUM,
    arb.FK_STD_KAL_ARBEITSTAG arb_FK_STD_KAL_ARBEITSTAG,
    arb.FK_STD_KAL_WOCHENENDE ARB_FK_STD_KAL_WOCHENENDE,
    arb.FK_STD_KAl_FEIERTAG ARB_FK_STD_KAL_FEIERTAG,
    arb.FEIERTAG arb_FEIERTAG,
    arb.TAG arb_TAG,
    arb.MONAT arb_MONAT,
    arb.JAHR arb_JAHR,
    arb_von.PK_BAS_kal_ARBEITSTAGE ARB_VON_PK_BAS_kal_ARBEITSTAGE,
    arb_von.DATUM arb_von_DATUM,
    arb_von.FK_STD_KAL_ARBEITSTAG arb_von_FK_STD_KAL_ARBEITSTAG,
    arb_von.FK_STD_KAL_WOCHENENDE ARB_VON_FK_STD_KAL_WOCHENENDE,
    arb_von.FK_STD_KAL_FEIERTAG ARB_VON_FK_STD_KAL_FEIERTAG,
    arb_von.FEIERTAG arb_von_FEIERTAG,
    arb_von.TAG arb_von_TAG,
    arb_von.MONAT arb_von_MONAT,
    arb_von.JAHR arb_von_JAHR,
    arb_bis.PK_BAS_kal_ARBEITSTAGE ARB_BIS_PK_BAS_kal_ARBEITSTAGE,
    arb_bis.DATUM arb_bis_DATUM,
    arb_bis.FK_STD_KAL_ARBEITSTAG arb_bis_FK_STD_KAL_ARBEITSTAG,
    arb_bis.FK_STD_KAL_WOCHENENDE arb_bis_FK_STD_KAL_WOCHENENDE,

    arb_bis.FEIERTAG arb_bis_FEIERTAG,
    arb_bis.TAG arb_bis_TAG,
    arb_bis.MONAT arb_bis_MONAT,
    arb_bis.JAHR arb_bis_JAHR,
    la.PK_ADR_LAND,
    la.land,
    ci.PK_ADR_ORT,
    ci.ort,
    ci.PK_ADR_LAND ci_PK_ADR_LAND,
    ci.land ci_land,
    steu.STEUERSATZ steu_STEUERSATZ,
    steu.LAND steu_LAND,
    steu.PK_ADR_LAND steu_PK_ADR_LAND,
    steu.pk_bas_steu_steuer_satz steu_pk_bas_steu_steuer_satz,
    steu.ZUS_ST steu_ZUS_ST,
    steu_frmd.STEUERSATZ steu_frmd_STEUERSATZ,
    steu_frmd.LAND steu_frmd_LAND,
    steu_frmd.PK_ADR_LAND steu_frmd_PK_ADR_LAND,
    steu_frmd.pk_bas_steu_steuer_satz STEU_FRMD_PK_BAS_steu_STEUER_SATZ,
    steu_frmd.ZUS_ST steu_frmd_ZUS_ST,
    wae.PK_BAS_mon_WAEHRUNG,
    wae.waehrung,
    wae.waehrung_lang,
    wae.comm,
    abl_ord.j_page_number abl_ord_j_page_number, 
    abl_ord.pk_abl_ordner_page abl_ord_pk_abl_ordner_page, 
    abl_ord.page_number abl_ord_page_number, 
    abl_ord.jahr abl_ord_jahr, 
    abl_ord.ordner_name abl_ord_ordner_name, 
    abl_ord.pk_abl_ordner abl_ord_pk_abl_ordner,
    vbel.ART vbel_ART,
    vbel.FK_IMP_BA_BEL vbel_FK_IMP_BA_BEL,
    vbel.PK_IMP_BA_ALLG_BEL vbel_PK_IMP_BA_ALLG_BEL,
    vbel.BEZEICHNUNG vbel_BEZEICHNUNG,
    vbel.KENNZEICHEN vbel_KENNZEICHEN,
    vbel.DATUM vbel_DATUM,
    vbel.DATUM_VERGEHEN vbel_DATUM_VERGEHEN,
    vbel.FK_BAS_kal_ARBEITSTAG vbel_FK_BAS_kal_ARBEITSTAG,
    vbel.FK_KTO_BUCHUNG vbel_FK_KTO_BUCHUNG,
    vbel.BETRAG vbel_BETRAG,
    vbel.waehrung VBEL_WAEHRUNG,
    vbel.STEUERSATZ vbel_STEUERSATZ,
    vbel.MWST_BETRAG vbel_MWST_BETRAG,
    vbel.NETTO vbel_NETTO,
    vbel.ZAHLUNGSART vbel_ZAHLUNGSART,
    vbel.BILD vbel_BILD,
    vbel.BILD1 vbel_BILD1,
    vbel.VERWENDUNGSZWECK vbel_VERWENDUNGSZWECK,
    vbel.FK_INV_INVENTAR vbel_FK_INV_INVENTAR,
    vbel.FK_PROJ_PROJEKT vbel_FK_PROJ_PROJEKT,
    vbel.waehrung_betrag VBEL_WAEHRUNG_BETRAG,
    vbel.FK_BAS_kat_KATEGORIE vbel_FK_BAS_kat_KATEGORIE,
    vbel.Kategorie vbel_Kategorie,
    vbel.PROJEKT vbel_PROJEKT,
    vbel.INVENTAR vbel_INVENTAR,
    vbel.FK_BEL_BELEG_ABLAGE vbel_FK_BEL_BELEG_ABLAGE,
    bakto.Iban, bakto.PK_KTO_BANKkonto, bakto.bank, bakto.PK_KTO_BANK,
    vloc.pk_loc_location VLOC_PK_loc_LOCATION,
    vloc.LOCATION vloc_LOCATION,
    vloc.fk_bas_loc_location_type vloc_fk_bas_loc_location_type,
    vloc.fk_adr_adresse VLOC_FK_ADR_ADRESSE,
    vloc.CREATED_BY vloc_CREATED_BY,
    vloc.CREATED_AT vloc_CREATED_AT,
    vloc.MODIFIED_BY vloc_MODIFIED_BY,
    vloc.MODIFIED_AT vloc_MODIFIED_AT,
    vloc.LOCATION_TYPE vloc_LOCATION_TYPE,
    vloc.STRASSE vloc_STRASSE,
    vloc.HSNR vloc_HSNR,
    vloc.BESCHREIBUNG vloc_BESCHREIBUNG,
    vloc.COMM vloc_COMM,
    vloc.POSTFACH vloc_POSTFACH,
    vloc.PLZ vloc_PLZ,
    vloc.ORT vloc_ORT,
    vloc.LAND vloc_LAND,
    vloc.ADR vloc_ADR,
    vloc_verg.pk_loc_location VLOC_VERG_PK_loc_LOCATION,
    vloc_verg.LOCATION vloc_verg_LOCATION,
    vloc_verg.fk_bas_loc_location_type vloc_verg_fk_bas_loc_location_type,
    vloc_verg.fk_adr_adresse VLOC_VERG_FK_ADR_ADRESSE,
    vloc_verg.CREATED_BY vloc_verg_CREATED_BY,
    vloc_verg.CREATED_AT vloc_verg_CREATED_AT,
    vloc_verg.MODIFIED_BY vloc_verg_MODIFIED_BY,
    vloc_verg.MODIFIED_AT vloc_verg_MODIFIED_AT,
    vloc_verg.LOCATION_TYPE vloc_verg_LOCATION_TYPE,
    vloc_verg.STRASSE vloc_verg_STRASSE,
    vloc_verg.HSNR vloc_verg_HSNR,
    vloc_verg.BESCHREIBUNG vloc_verg_BESCHREIBUNG,
    vloc_verg.COMM vloc_verg_COMM,
    vloc_verg.POSTFACH vloc_verg_POSTFACH,
    vloc_verg.PLZ vloc_verg_PLZ,
    vloc_verg.ORT vloc_verg_ORT,
    vloc_verg.LAND vloc_verg_LAND,
    vloc_verg.ADR vloc_verg_ADR,
    substr(inpb.bel_datum,7,4) inp_bel_all_jahr,
    inpb.FK_std_inp_ZAHLungsSTATUS,
    sta1.std_name  beleg_status
    

from t_imp_inp_belege_all inpb
  left join v_proj_projekte proj on inpb.FK_PROJ_PROJEKT = proj.pk_proj_projekt
  left join (select * from t_std where fk_std_group = 9) ver on ver.std_value = inpb.FK_STD_VERW_VERWENDUNGSZWECK
  left join t_bas_kat_kategorie ktokat on ktokat.PK_BAS_kat_kategorie = inpb.FK_BAS_kat_KATEGORIE
  left join t_bas_kal_arbeitstage arb on arb.PK_BAS_kal_ARBEITSTAGE = inpb.FK_BAS_kal_ARBEITSTAG
  left join t_bas_kal_arbeitstage arb_von on arb_von.PK_BAS_kal_ARBEITSTAGE = inpb.FK_BAS_kal_VON_ARBEITSTAG
  left join t_bas_kal_arbeitstage arb_bis on arb_bis.PK_BAS_kal_ARBEITSTAGE = inpb.FK_BAS_kal_BIS_ARBEITSTAG
  left join ( select std_name, std_value
              from t_std
              where fk_std_group = 22) zahl_art on zahl_art.std_value = inpb.FK_std_kto_ZAHLUNGSART
  left join t_adr_land la on la.PK_ADR_LAND = inpb.FK_ADR_LAND
  left join (select * from  t_adr_ort ci join t_adr_land la on ci.FK_ADR_LAND = la.PK_ADR_LAND) ci on ci.PK_ADR_ORT = inpb.FK_ADR_CITY
  left join v_steu_steuer_satz steu on steu.pk_bas_steu_steuer_satz = inpb.FK_BAS_steu_STEUER_SATZ
  left join v_steu_steuer_satz steu_frmd on steu_frmd.pk_bas_steu_steuer_satz = inpb.FK_BAS_mon_FRMDW_mwst_satz
  left join t_bas_mon_waehrung wae on wae.PK_BAS_mon_WAEHRUNG = FK_BAS_mon_WAEHRUNG
  left join (select jahr || ' ' || page_number j_page_number, pk_abl_ordner_page, page_number, jahr, ordner_name, pk_abl_ordner
            from T_ABL_ORDNER abl_ord
            left join T_ABL_ORDNER_PAGE abl_ord_p on abl_ord.pk_abl_ordner = abl_ord_p.fk_abl_ordner
            ) abl_ord on abl_ord.pk_abl_ordner_page = inpb.fk_abl_ordner_page
  left join v_imp_bel_zus vbel on vbel.fk_imp_ba_bel = inpb.fk_imp_ba_bel_old
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 27) bel_ex on bel_ex.std_value = inpb.fk_real_beleg_exist
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 26) sta on sta.std_value = inpb.FK_std_inp_ZAHLungsSTATUS
  left join v_loc_location vloc on vloc.pk_loc_location = inpb.FK_loc_LOCATION
  left join v_loc_location vloc_verg on vloc_verg.pk_loc_location = inpb.FK_loc_LOCATION_verg 
  --lastschriftkonto
  left join (select Iban, PK_KTO_BANKkonto, bank, PK_KTO_BANK
                from t_kto_bankKonto kto join t_kto_bank ba on kto.fk_kto_bank = ba.PK_KTO_BANK) bakto on bakto.PK_KTO_BANKkonto = inpb.fk_la_konto 
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 23) la_wdh on la_wdh.std_value = inpb.fk_la_wdh
  left join (select std_name, std_value
                from t_std
                where fk_std_group = 101) sta1 on sta1.std_value = inpb.FK_std_inp_STATUS
;
--------------------------------------------------------
--  DDL for View V_INV_INVENTARE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_INV_INVENTARE" ("PK_INV_INVENTAR", "INVENTAR", "ANSCHAFFUNGSDATUM", "ANSCHAFFUNGSJAHR", "ABSCHREIBUNGSDAUER", "RESTBUCHWERT_2018", "CREATED_BY", "CREATED_AT", "MODIFIED_BY", "MODIFIED_AT", "PREIS_NETTO", "MWST", "FK_BAS_STEU_STEUER_SATZ", "PREIS_BRUTTO", "COMM", "LIZENZNUMMER", "ANFORDERUNGSCODE", "FK_BAS_INV_INVENTARTYP", "KFZ_KENNZEICHEN", "FAHRGESTELLNR", "BEMERKUNGEN", "BILD", "ABGANGSJAHR", "ABGANGSDATUM", "ABGANGSWERT", "FK_BAS_VERWENDUNGSZWECK", "GWG", "RESTBUCHWERT_2017", "ABGANGSGRUND", "MAC_ADRESSE", "SERIENNUMMER", "GERAETENAME", "OK", "OK_BEMERKUNGEN", "RESTBUCHWERT_2019", "INV_BILD", "INVENTARTYP", "PK_INV_SUB_ELEKTRONIK", "BEZEICHNUNG", "GWG_YN") AS 
  select inv."PK_INV_INVENTAR",inv."INVENTAR",inv."ANSCHAFFUNGSDATUM",inv."ANSCHAFFUNGSJAHR",inv."ABSCHREIBUNGSDAUER",inv."RESTBUCHWERT_2018",inv."CREATED_BY",inv."CREATED_AT",inv."MODIFIED_BY",inv."MODIFIED_AT",inv."PREIS_NETTO",inv."MWST",inv."FK_BAS_STEU_STEUER_SATZ",inv."PREIS_BRUTTO",inv."COMM",
  inv."LIZENZNUMMER",inv."ANFORDERUNGSCODE",inv."FK_BAS_INV_INVENTARTYP",inv."KFZ_KENNZEICHEN",inv."FAHRGESTELLNR",inv."BEMERKUNGEN",inv."BILD",inv."ABGANGSJAHR",inv."ABGANGSDATUM",inv."ABGANGSWERT",
  verw.std_name "FK_BAS_VERW_VERWENDUNGSZWECK",inv."GWG",inv."RESTBUCHWERT_2017",inv."ABGANGSGRUND",
  inv."MAC_ADRESSE",inv."SERIENNUMMER",inv."GERAETENAME",inv."RESTBUCHWERT_2019",inv."INV_BILD", invtyp.INVENTARTYP, pk_inv_sub_elektronik, 
  ok,
  ok_bemerkungen, restbuchwert_2019
  bezeichnung, gwg.std_name gwg_yn
from t_inv_inventare inv
  left join t_bas_inv_inventartyp invtyp on inv.fk_bas_inv_inventartyp = invtyp.pk_bas_inv_inventartyp
  left join (
      select pk_inv_inventar, pk_inv_sub_elektronik , bezeichnung
      from t_inv_inventare inv
       join t_inv_sub_elektronik el on inv.pk_inv_inventar = el.fk_inv_inventar
     where instr(inventar, 'GWG')>0
   
 
 ) el on el.pk_inv_inventar = inv.pk_inv_inventar
 left join (select * from t_std where fk_std_group = 9) verw on verw.std_value = inv.FK_STD_VERW_VERWENDUNGSZWECK
 left join (select * from t_std where fk_std_group = 61) gwg on gwg.std_value = inv.gwg
;
--------------------------------------------------------
--  DDL for View V_KON_GESCHAEFTSPARTNER
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KON_GESCHAEFTSPARTNER" ("PK_KON_GESCHAEFTSPARTNER", "GESCHAEFTSPARTNER", "FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PK_ADR_ADRESSE", "STRASSE", "HSNR", "PLZ", "ORT", "LAND", "BESCHREIBUNG", "PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "GESCHAEFTSPARTNERTYP") AS 
  select pk_kon_geschaeftspartner, geschaeftspartner, fk_bas_kon_geschaeftspartnertyp, pk_adr_adresse, strasse, hsnr, plz, ort, land, beschreibung,PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT, gept.geschaeftspartnertyp
from t_kon_geschaeftspartner gep
  left join T_REL_KON_GESCHAEFTSPARTNER_KONTAKT kon_adr on kon_adr.fk_kon_geschaeftspartner = gep.pk_kon_geschaeftspartner
  left join v_adr_adresse ad on ad.pk_adr_adresse = kon_adr.fk_adr_adresse
  left join t_bas_kon_geschaeftspartnertyp gept on gep.fk_bas_kon_geschaeftspartnertyp = gept.pk_bas_kon_geschaeftspartnertyp
;
--------------------------------------------------------
--  DDL for View V_KONTR_CNT_LEX_ZAHL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KONTR_CNT_LEX_ZAHL" ("FK_MAIN_KEY", "CNT") AS 
  select fk_main_key, count(*) cnt
from t_lex
where storno = 0 and ok =1 and fk_main_key is not null
group by fk_Main_key
having count(*)>1
;
--------------------------------------------------------
--  DDL for View V_KONTR_CNT_LEX_ZAHL_bel
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KONTR_CNT_LEX_ZAHL_bel" ("FK_IMP_BA_BEL", "CNT") AS 
  select fk_imp_ba_bel, count(*) cnt
from t_lex
where storno = 0 and ok =1 and fk_imp_ba_bel is not null
group by fk_imp_ba_bel
having count(*)>1
;
--------------------------------------------------------
--  DDL for View V_KONTR_DUPL_BUCHUNGSTEXT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KONTR_DUPL_BUCHUNGSTEXT" ("BUCHUNGSTEXT", "CNT", "LIS") AS 
  select buchungstext, count(*) cnt, listagg(sollkonto, ',') within group (order by pk_lex) lis
from t_lex 
where ok = 1 and storno = 0
group by buchungstext
having count(*) >1
;
--------------------------------------------------------
--  DDL for View V_KONTR_DUPL_DATUM_BETRAG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KONTR_DUPL_DATUM_BETRAG" ("BELEGDATUM", "BUCHUNGSBETRAG", "CNT") AS 
  select belegdatum, buchungsbetrag, count(*) cnt
from t_lex 
where ok = 1 and storno = 0
group by belegdatum, buchungsbetrag
having count(*) >1
;
--------------------------------------------------------
--  DDL for View V_KONTR_OK_LEX
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KONTR_OK_LEX" ("BUCHT_JAHR", "CNT_JAHR", "CNT_LEX") AS 
  select bucht_jahr, count(*) cnt_jahr, sum(case when pk_lex is not null then 1 else 0 end) cnt_lex
from v_kto_konten_zus ktozus
 left join (select * from t_lex where ok = 1 and storno = 0)  lex on ktozus.fk_main_key = lex.fk_main_key
group by bucht_jahr
;
--------------------------------------------------------
--  DDL for View V_KTO_BUCHUNG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_BUCHUNG" ("PK_REL_KTO_KONT_BUCH_KONT_BUCH", "FK_KTO_KONTO_BUCH1", "FK_KTO_KONTO_BUCH2", "CREATED_BY", "CREATED_AT", "MODIFIED_BY", "MODIFIED_AT", "BEMERKUNG", "FK_STD_KTO_BUCHUNGSVORGANG", "VON_FK_MAIN_KEY", "VON_ID", "VON_BUCHUNGSTAG", "VON_BETRAG", "VON_BUCHUNGSTEXT", "VON_FK_BAS_KAT_KATEGORIE", "VON_FK_BAS_VERW_VERWENDUNGSZWECK", "VON_FK_STD_KTO_KONTOTYP", "VON_FK_BAS_KAL_BUCHUNGSTAG", "VON_FK_BAS_KAL_WERTSTELLUNG", "VON_KONTOTYP", "VON_KATEGORIE", "VON_VERWENDUNGSZWECK", "NACH_FK_MAIN_KEY", "NACH_ID", "NACH_BUCHUNGSTAG", "NACH_BETRAG", "NACH_BUCHUNGSTEXT", "NACH_FK_BAS_KAT_KATEGORIE", "NACH_FK_BAS_VERW_VERWENDUNGSZWECK", "NACH_FK_STD_KTO_KONTOTYP", "NACH_FK_BAS_KAL_BUCHUNGSTAG", "NACH_FK_BAS_KAL_WERTSTELLUNG", "NACH_KONTOTYP", "NACH_KATEGORIE", "NACH_VERWENDUNGSZWECK") AS 
  select buch."PK_REL_KTO_KONT_BUCH_KONT_BUCH",
  buch."FK_KTO_KONTO_BUCH1"
  ,buch."FK_KTO_KONTO_BUCH2"
  ,buch."CREATED_BY",
  buch."CREATED_AT",
  buch."MODIFIED_BY",
  buch."MODIFIED_AT",
  buch."BEMERKUNG",
  buch.fk_std_buchungsvorgang,
--von
von.FK_MAIN_KEY von_fk_main_key, 
von.ID von_id, 
von."Buchungstag" von_Buchungstag, 
von."Betrag" von_betrag,
von.BUCHUNGSTEXT von_buchungstext, 
von.FK_bas_KAT_Kategorie von_fk_bas_kat_kategorie, 
von.FK_STD_VERW_VERWENDUNGSZWECK von_fk_bas_verw_Verwendungszweck,
von.FK_std_KTO_Kontotyp von_fk_bas_kto_kontotyp,
von.FK_bas_KAL_BUCHUNGSTAG von_fk_bas_kto_buchungstag,
von.FK_bas_KAL_WERTSTELLUNG von_fk_bas_kto_wertstellung,
von.Kontotyp von_kontotyp,
von.Kategorie von_Kategorie,
von.verwendungszweck von_verwendungszweck,
--nach
nach.FK_MAIN_KEY nach_fk_main_key, 
nach.ID nach_id, 
nach."Buchungstag" nach_Buchungstag, 
nach."Betrag" nach_betrag, 
nach.BUCHUNGSTEXT nach_Buchungstext, 
nach.FK_bas_KAT_Kategorie nach_fk_bas_kat_kategorie , 
nach.FK_STD_VERW_VERWENDUNGSZWECK nach_fk_bas_verw_verwendungszweck, 
nach.fK_std_KTO_Kontotyp nach_fk_kontotyp, 
nach.FK_bas_KAL_BUCHUNGSTAG nach_fk_buchungstag, 
nach.FK_bas_KAL_WERTSTELLUNG nach_fk_wertstellung,
nach.Kontotyp nach_kontotyp,
nach.Kategorie nach_kategorie,
nach.verwendungszweck nach_verwendungszweck




from t_rel_kto_kont_buch_kont_buch buch
  left join v_kto_konten_zus von on von.fk_main_key = buch.fk_kto_konto_buch1
  left join v_kto_konten_zus nach on nach.fk_main_key = buch.fk_kto_konto_buch2
;
--------------------------------------------------------
--  DDL for View V_KTO_KONTEN_ZUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_KONTEN_ZUS" ("FK_MAIN_KEY", "ID", "Buchungstag", "Betrag", "WAEHRUNG", "FREMDWAEHRUNGSBETRAG", "FREMDWAEHRUNG", "BUCHUNGSTEXT", "FK_BAS_KAT_KATEGORIE", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_STD_KTO_KONTOTYP", "FK_BAS_KAL_BUCHUNGSTAG", "FK_BAS_KAL_WERTSTELLUNG", "VERWENDUNGSZWECK", "KATEGORIE", "BUCHT_TAG", "BUCHT_MONAT", "BUCHT_JAHR", "BUCHT_DATUM", "WERTT_TAG", "WERTT_MONAT", "WERTT_JAHR", "WERTT_DATUM", "KONTOTYP", "FK_KTO_VORGANG", "WIEDERHOLUNG", "NAECHSTE_ZAHLUNG", "FK_BUCHUNG_STEUER", "FK_KTO_BANKKONTO", "KTO_BEZEICHNUNG", "IBAN", "BANK", "DATUM_LEX_BUCHUNG_OK", "TBL") AS 
  WITH 
  /*gir AS (
        SELECT
            *
        FROM
            t_KTO_GIROKONTO
    ),
    kred AS (
        SELECT
            *
        FROM
            t_KTO_KREDITKARTE
    ),
    tages AS (
        SELECT
            *
        FROM
            t_KTO_TAGESGELDKONTO
    ),
    paypal AS (
        SELECT
            *
        FROM
            T_KTO_PAYPAL
    ),
    kas as (select * from kas_kasse),
    */
    un_all AS (
        SELECT
            fk_main_key,
            id,
            "Buchungstag",
            "Betrag",
            Waehrung,
            NULL Fremdwaehrungsbetrag,
            NULL Fremdwaehrung,
            buchungstext,
            FK_BAS_Kat_KATEGORIE,  
            FK_STD_VERW_VERWENDUNGSZWECK,
            FK_std_kto_KONTOTYP,
            fk_bas_kal_buchungstag,
            fk_bas_kal_wertstellung,
            fk_kto_vorgang,
            wiederholung,
            naechste_zahlung,
            fk_buchung_steuer,
            fk_kto_bankkonto,
            datum_lex_buchung_ok,
            'kto_girokonto' tbl

        FROM
           t_kto_girokonto
        UNION
        SELECT
            fk_main_key,
            id,
            "Buchungstag",
            "Betrag",
            Waehrung,
            "Betrag Ursprung"    Fremdwaehrungsbetrag,
            Waehrung_Ursprung   Fremdwaehrung,
            "Unternehmen",
            FK_bas_kat_Kategorie,
            FK_STD_VERW_VERWENDUNGSZWECK,
            FK_std_kto_Kontotyp,
            fk_bas_kal_buchungstag,
            fk_bel_beleg,
            fk_kto_vorgang,
            wiederholung,
            naechste_zahlung,
            fk_buchung_steuer,
            fk_kto_bankkonto,
            datum_lex_buchung_ok,
            'kto_kreditkarte'
        FROM
            t_kto_kreditkarte
        UNION
        SELECT
            fk_main_key,
            id,
            "Buchungstag",
            "Betrag",
            Waehrung,
            NULL "Fremdwaehrungsbetrag",
            NULL "Fremdwaehrung",
            buchungstext,
            FK_BAS_kat_Kategorie,
            FK_STD_VERW_VERWENDUNGSZWECK,
            fk_BAS_kto_kontotyp,
            fk_BAS_kal_buchungstag,
            fk_BAS_kal_wertstellung,
            null as fk_vorgang,
            wiederholung,
            naechste_zahlung,
            fk_buchung_steuer,
            fk_kto_bankkonto,
            datum_lex_buchung_ok,
            'kto_tagesgeldkonto'
        FROM
            t_kto_tagesgeldkonto
        UNION
        SELECT
            fk_main_key,
            id,
            "Datum",
            "Brutto",
            Waehrung,
            NULL Fremdwaehrungsbetrag,
            NULL Fremdwaehrung,
            "Betreff",
            FK_bas_kat_Kategorie,
            FK_STD_VERW_VERWENDUNGSZWECK,
            FK_std_kto_Kontotyp,
            fk_bas_kal_arbeitstag,
            fk_bas_kal_arbeitstag,
            fk_kto_vorgang,
            wiederholung,
            naechste_zahlung,
            fk_buchung_steuer,
            fk_kto_bankkonto,
            datum_lex_buchung_ok,
            'kto_paypal'
        FROM
           t_kto_paypal
        UNION
        SELECT
            fk_main_key,
            pk_kto_kas_kasse,
            Datum,
            Betrag,
            'EUR',
            Fremdwaehrungsbetrag Fremdwaehrungsbetrag,
            fk_bas_mon_fremdwaehrung Fremdwaehrung,
            Buchungstext,
            FK_bas_kat_Kategorie,
            FK_STD_VERW_VERWENDUNGSZWECK,
            FK_std_kto_Kontotyp,
            fk_bas_kal_arbeitstag,
            fk_bas_kal_arbeitstag,
            null, --vorgang
            null, --wiederholung
            null, --nächstezahlung
            null, --fk_buchung_steuer
            fk_kto_bankkonto,
            datum_lex_buchung_ok,
            'kas_kasse'
        FROM
           t_kto_kas_kasse
    )
    SELECT
        un_all.fk_main_key,
        un_all.id,
        un_all."Buchungstag",
        un_all."Betrag",
        un_all.Waehrung,
        un_all.Fremdwaehrungsbetrag,
        un_all.Fremdwaehrung,
        un_all.buchungstext,
        un_all.FK_bas_kat_Kategorie,
        un_all.FK_STD_VERW_VERWENDUNGSZWECK,
        un_all.FK_std_kto_Kontotyp fk_std_kto_kontotyp,
        un_all.fk_bas_kal_buchungstag,
        un_all.fk_bas_kal_wertstellung,
        verw.std_name verwendungszweck,
        kat.Kategorie   kategorie,
        bucht.tag         bucht_tag,
        bucht.monat       bucht_monat,
        bucht.jahr        bucht_jahr,
        bucht.datum       bucht_datum,
        wertt.tag         wertt_tag,
        wertt.monat       wertt_monat,
        wertt.jahr        wertt_jahr,
        wertt.datum       wertt_datum,
        kto_typ.std_name Kontotyp,
        un_all.fk_kto_vorgang,
        un_all.wiederholung,
        un_all.naechste_zahlung naechste_Zahlung,
        un_all.fk_buchung_steuer,
        un_all.fk_kto_bankkonto,
        kto.bez kto_bezeichnung,
        kto.iban,
        bk.bank,
        un_all.datum_lex_buchung_ok,
        un_all.tbl
    FROM
        un_all 
        LEFT JOIN (select * from t_std where fk_std_group = 24)  kto_typ ON kto_typ.std_value = un_all.FK_std_kto_Kontotyp
        LEFT JOIN t_bas_kal_arbeitstage bucht ON bucht.pk_bas_kal_arbeitstage = un_all.fk_bas_kal_buchungstag
        LEFT JOIN t_bas_kal_arbeitstage wertt ON wertt.pk_bas_kal_arbeitstage = un_all.fk_bas_kal_wertstellung
        LEFT JOIN t_bas_kat_kategorie kat ON kat.pk_bas_kat_kategorie = un_all.FK_bas_kat_Kategorie
        LEFT JOIN (select * from t_std where fk_std_group = 9) verw ON verw.std_value = un_all.FK_STD_VERW_VERWENDUNGSZWECK
        left join t_kto_bankkonto kto on kto.pk_kto_bankkonto = un_all.fk_kto_bankkonto
        left join t_kto_bank bk on bk.pk_kto_bank = kto.fk_kto_bank
;
--------------------------------------------------------
--  DDL for View V_KTO_KONTO_AUSZUG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_KONTO_AUSZUG" ("PK_KTO_KONTO_AUSZUG", "FK_KTO_BANKKONTO", "FK_KTO_KONTO_AUSZUG", "JAHR", "MONAT", "FK_BAS_KAL_ANFANGSDATUM", "FK_BAS_KAL_ENDDATUM", "FK_BAS_KAL_ABHOLDATUM", "FK_BEL_BELEG", "KOMMENTAR", "ANFANGSBETRAG", "ENDBETRAG", "ANFANGSDATUM", "ENDDATUM", "ABHOLDATUM", "PK_KTO_BANKKONTO", "FK_KTO_BANK", "IBAN", "BIC", "KONTONR", "BLZ", "CREATED_BY", "CREATED_AT", "MODIFIED_BY", "MODIFIED_AT", "KREDITKARTENNR", "BEZ", "FK_STD_KTO_KONTOTYP", "KREDITLINIE", "EROEFFUNGSDATUM", "SCHLUSSDATUM", "ZUGANG", "PIN", "DIBA_KEY", "TELEBANKING_PIN", "BEMERKUNGEN", "KARTENSPERRUNG", "VALID", "VALID_FROM", "VALID_TO", "GLAEUBIGER_ID", "MANDATSREFERENZ_SEPA", "FK_LASTSCHRIFT_KTO_VON", "DIFF_SOLL", "SUM_BUCH", "DIFF_IST", "DATUM_OK", "FK_KTO_KONTO_AUSZUG_TYPE", "KONTO_AUSZUG_TYPE") AS 
  select 
    kto_aus."PK_KTO_KONTO_AUSZUG", 
    kto_aus."FK_KTO_BANKKONTO",
    kto_aus."FK_KTO_KONTO_AUSZUG",
    kto_aus."JAHR",
    kto_aus."MONAT",
    kto_aus."FK_BAS_KAL_ANFANGSDATUM",
    kto_aus."FK_BAS_KAL_ENDDATUM",
    kto_aus."FK_BAS_KAL_ABHOLDATUM",
    kto_aus."FK_BEL_BELEG",
    kto_aus."KOMMENTAR",


    kto_aus.Anfangsbetrag,
    kto_aus.Endbetrag,
    kto_aus.Anfangsdatum, 
    kto_aus.Enddatum,
    kto_aus.Abholdatum,
    kto."PK_KTO_BANKKONTO",kto."FK_KTO_BANK",kto."IBAN",kto."BIC",kto."KONTONR",kto."BLZ",kto."CREATED_BY",kto."CREATED_AT",kto."MODIFIED_BY",kto."MODIFIED_AT",kto."KREDITKARTENNR",
    kto."BEZ",kto."FK_STD_KTO_KONTOTYP",kto."KREDITLINIE",kto."EROEFFUNGSDATUM",kto."SCHLUSSDATUM",kto."ZUGANG",kto."PIN",kto."DIBA_KEY",kto."TELEBANKING_PIN",
    kto."BEMERKUNGEN",kto."KARTENSPERRUNG",kto."VALID",kto."VALID_FROM",kto."VALID_TO",kto."GLAEUBIGER_ID",kto."MANDATSREFERENZ_SEPA",kto."FK_LASTSCHRIFT_KTO_VON",
    (kto_aus.endbetrag-kto_aus.anfangsbetrag) diff_soll,
    sum_buch.sum_buch,
    (kto_aus.endbetrag-kto_aus.anfangsbetrag) - nvl(sum_buch.sum_buch,0) diff_ist,
    datum_ok,
    kto_aus.fk_std_konto_auszug_type,
    std.std_name konto_auszug_type
    
from T_kto_KONTO_AUSZUG kto_aus
  left join t_kto_bankkonto kto on kto.pk_kto_bankkonto = kto_aus.fk_kto_bankkonto
  left join (
                 select round(sum(gir."Betrag"),2) sum_buch, fk_kto_konto_auszug
                 from t_rel_kto_konto_auszug_gir kto_gir
                     left join V_kto_KONTEN_ZUS gir on kto_gir.fk_main_key = gir.FK_MAIN_KEY
                 group by fk_kto_konto_auszug
             ) sum_buch on sum_buch.fk_kto_konto_auszug = kto_aus.pk_kto_konto_auszug
left join (select * from t_std where fk_std_group = 181) std on std.std_value = kto_aus.fk_STD_konto_auszug_type
;
--------------------------------------------------------
--  DDL for View V_KTO_KONTO_AUSZUG_BUCH
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_KONTO_AUSZUG_BUCH" ("PK_KTO_KONTO_AUSZUG", "FK_KTO_BANKKONTO", "FK_KTO_KONTO_AUSZUG", "JAHR", "MONAT", "ANFANGSDATUM", "ENDDATUM", "ABHOLDATUM", "FK_BEL_BELEG", "KOMMENTAR", "CREATED_BY", "CREATED_AT", "MODIFIED_BY", "MODIFIED_AT", "ANFANGSBETRAG", "ENDBETRAG", "FK_BAS_KAL_ABHOLDATUM", "FK_BAS_KAL_ANFANGSDATUM", "FK_BAS_KAL_ENDDATUM", "FK_MAIN_KEY", "ID", "BUCHUNGSTAG", "BETRAG", "WAEHRUNG", "FREMDWAEHRUNGSBETRAG", "FREMDWAEHRUNG", "BUCHUNGSTEXT", "FK_BAS_KAT_KATEGORIE", "FK_BAS_VERW_VERWENDUNGSZWECK", "FK_STD_KTO_KONTOTYP", "FK_BUCHUNGSTAG", "FK_WERTSTELLUNG", "VERWENDUNGSZWECK", "KATEGORIE", "BUCHT_TAG", "BUCHT_MONAT", "BUCHT_JAHR", "BUCHT_DATUM", "WERTT_TAG", "WERTT_MONAT", "WERTT_JAHR", "WERTT_DATUM", "KONTOTYP", "FK_KTO_VORGANG", "WIEDERHOLUNG", "NAECHSTE_ZAHLUNG", "FK_BUCHUNG_STEUER", "WERT", "DIFF") AS 
  select kto_aus."PK_KTO_KONTO_AUSZUG",kto_aus."FK_KTO_BANKKONTO",kto_aus."FK_KTO_KONTO_AUSZUG",kto_aus."JAHR",kto_aus."MONAT",kto_aus."ANFANGSDATUM",kto_aus."ENDDATUM",
  kto_aus."ABHOLDATUM",kto_aus."FK_BEL_BELEG",kto_aus."KOMMENTAR",kto_aus."CREATED_BY",kto_aus."CREATED_AT",kto_aus."MODIFIED_BY",kto_aus."MODIFIED_AT",kto_aus."ANFANGSBETRAG",
  kto_aus."ENDBETRAG",kto_aus."FK_BAS_KAL_ABHOLDATUM",kto_aus."FK_BAS_KAL_ANFANGSDATUM",kto_aus."FK_BAS_KAL_ENDDATUM", gir."FK_MAIN_KEY",gir."ID",gir."Buchungstag",gir."Betrag",gir.Waehrung,gir.Fremdwaehrungsbetrag,
  gir.Fremdwaehrung,gir."BUCHUNGSTEXT",gir.FK_bas_kat_Kategorie,gir.FK_STD_VERW_VERWENDUNGSZWECK,gir.fK_std_kto_Kontotyp,gir."FK_BAS_KAL_BUCHUNGSTAG",gir."FK_BAS_KAL_WERTSTELLUNG",gir."VERWENDUNGSZWECK",gir."KATEGORIE",gir."BUCHT_TAG",
  gir."BUCHT_MONAT",gir."BUCHT_JAHR",gir."BUCHT_DATUM",gir."WERTT_TAG",gir."WERTT_MONAT",gir."WERTT_JAHR",gir."WERTT_DATUM",gir.Kontotyp,gir."FK_KTO_VORGANG",gir."WIEDERHOLUNG",gir."NAECHSTE_ZAHLUNG",gir."FK_BUCHUNG_STEUER", round(gir."Betrag",2) wert, endbetrag-anfangsbetrag diff
from t_kto_konto_auszug kto_aus
  join t_rel_kto_konto_auszug_gir  kto_aus_gir on kto_aus.pk_kto_konto_auszug = kto_aus_gir.fk_kto_konto_auszug
  join v_kto_kontEN_ZUS Gir on kto_aus_gir.fk_main_key =  gir.fk_main_key
;
--------------------------------------------------------
--  DDL for View V_KTO_KONTO_AUSZUG_OV
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_KONTO_AUSZUG_OV" ("FK_MAIN_KEY", "ID", "BUCHUNGSTAG", "BETRAG", "WAEHRUNG", "FREMDWAEHRUNGSBETRAG", "FREMDWAEHRUNG", "BUCHUNGSTEXT", "FK_BAS_KAT_KATEGORIE", "FK_BAS_VERW_VERWENDUNGSZWECK", "FK_BAS_KTO_KONTOTYP", "FK_BAS_KAL_BUCHUNGSTAG", "FK_BAS_KAL_WERTSTELLUNG", "VERWENDUNGSZWECK", "KATEGORIE", "BUCHT_TAG", "BUCHT_MONAT", "BUCHT_JAHR", "BUCHT_DATUM", "WERTT_TAG", "WERTT_MONAT", "WERTT_JAHR", "WERTT_DATUM", "ZUS_KONTOTYP", "FK_KTO_VORGANG", "WIEDERHOLUNG", "NAECHSTE_ZAHLUNG", "FK_BUCHUNG_STEUER", "FK_KTO_BANKKONTO", "KTO_BEZEICHNUNG", "IBAN", "BANK", "BUCH", "BUCH_STATUS", "BUCH_STORNO", "INP_BEL_STATUS", "BEL_STATUS", "PG", "KTOAUS", "FK_KTO_KONTO_AUSZUG", "REL_BETRAG", "SUM_BETRAG", "SUM_SOLLBETRAG", "SUM_HABENBETRAG", "SUM_DIFF", "DIFF", "FK_LEX_KONTO", "FK_LEX_KONTO_IN", "BAR_AUSZAHLUNG", "FK_MAIN_KEY_BANKKONTO", "KAS_FK_MAIN_KEY", "KAS_BETRAG", "UEBERWEISUNG", "KONTOTYP") AS 
  Select Zus.Fk_Main_Key,
      Id,
       
       "Buchungstag",
       round("Betrag",2)  "Betrag",
       zus.Waehrung,
       zus.Fremdwaehrungsbetrag,
       Fremdwaehrung,
       zus.Buchungstext,
       zus.FK_bas_kat_Kategorie,
       zus.FK_STD_VERW_VERWENDUNGSZWECK,
       zus.FK_bas_kto_Kontotyp,
       zus.Fk_bas_kal_Buchungstag,
       zus.Fk_bas_kal_Wertstellung,
       zus.Verwendungszweck,
       zus.Kategorie,
       Bucht_Tag,
       Bucht_Monat,
       Bucht_Jahr,
       Bucht_Datum,
       Wertt_Tag,
       Wertt_Monat,
       Wertt_Jahr,
       Wertt_Datum,
       zus.Kontotyp zus_kontotyp,
       Fk_kto_Vorgang,
       Wiederholung,
       Naechste_Zahlung,
       Fk_Buchung_Steuer,
       zus.Fk_kto_bankKonto,
       Kto_Bezeichnung,
       Iban,
       Bank       ,
       buch,
       buch_status,
       buch_storno,
       inp_bel_status,
       bel_status,
       pg
      ,    Ktoaus.Fk_bas_kal_Jahr || ' ' || Ktoaus.Fk_bas_kal_Monat || '/' || Ktoaus.Fk_bas_kal_Monat || ' ' || Ktoaus.std_name || ' ' ||  Anfangsdatum || ' ' || Enddatum || ' (' || Anfangsbetrag ||  ' - ' || Endbetrag ||   ') ' || Nvl(Endbetrag - Anfangsbetrag,0)  Ktoaus
      ,   Fk_kto_Konto_Auszug,
      ktobel.Betrag rel_betrag,
      sum_Betrag,
      sum_sollbetrag,
      sum_habenbetrag,
      sum_diff
      ,
      round(abs(  "Betrag")-abs(sum_Betrag),0) diff,
      fk_lex_konto,
      case when instr(buch,fk_lex_konto)>0 then 1 else 0 end fk_lex_konto_in,
      case when fk_main_key_bankkonto is not null then 1 else 0 end bar_auszahlung,
      fk_main_key_bankkonto,
      kas.fk_main_key kas_fk_main_key,
      kas.betrag kas_betrag,
      case when pk_rel_kto_kont_buch_kont_buch is not null then 1 else 0 end ueberweisung,
     relkto.kontotyp
  From V_kto_Konten_Zus Zus
  Left Join  (
                    select 
                            fk_main_key , 
                            listagg ( kontonummer || '/' || gegenkonto || ' (' ||  ok || ')' ||  case when rnr1=1 then  chr(10) || chr(10) || ':' || Buchungsnummer || ' ' || buchungstext || ' ' || fk_lex_relation end  ,chr(10)) within group (order by fk_main_key) buch,
                            listagg ( case when rnr1=1 then  Buchungsnummer  ||  ' (' ||  ok || ')' end ,chr(10)) within group (order by fk_main_key) buch_status,
                            listagg ( case when rnr1=1 then  Buchungsnummer  || ' (' ||  buchungsstatus || ')' end  ,chr(10)) within group (order by fk_main_key) buch_storno,
                            listagg ( case when rnr=1 then pk_inp_belege_all || ' ' || Inp_Bel_Status end,',') within group  (order by fk_main_key) inp_bel_status,
                            listagg ( case when rnr=1 then  pk_inp_belege_all || ' ' || Bel_Status end,',') within group  (order by fk_main_key) bel_status,
                            listagg ( case when rnr=1 then  pk_inp_belege_all || ' ' || Ordner_Page end,',') within group  (order by fk_main_key) pg,
                            listagg ( case when rnr1 = 1 then fk_lex_relation || ' ' || Betrag end , ',')   within group  (order by fk_main_key) Betrag,                          
                            sum(case when rnr1 = 1 and status is null then Betrag else 0 end)    sum_Betrag,
                            sum(case when rnr1 = 1 and status is null then solleur else 0 end)    sum_sollBetrag,
                            sum(case when rnr1 = 1 and status is null then   habeneur else 0 end)    sum_habenBetrag,
                            sum(case when rnr1 = 1 and status is null then diff else 0 end) sum_diff
                    from (
                             select a.*,  
                                    row_number() over (partition by fk_main_key order by fk_main_key, jahr, buchungsnummer desc, belegnummer desc) rnr,
                                    row_number() over (partition by fk_main_key, fk_lex_relation order by fk_main_key, jahr, buchungsnummer desc, belegnummer desc) rnr1,
                                    row_number() over (partition by fk_main_key,  pk_inp_belege_all order by pk_inp_belege_all) rnr2

                             from (
                                     Select   Kto.Buchungsnummer,  Kto.Buchungsstatus, Kto.Ok,Kto.Jahr , Kto.Buchungstext, kto.kontonummer, kto.gegenkonto, Std_Status.Std_Name Inp_Bel_Status, Std_Bel.Std_Name Bel_Status , pg.Ordner_Page, kto.belegnummer, relbel.fk_main_key,
                                        bel.pk_inp_belege_all, relbel.fk_lex_relation, ll.Betrag, ll.habeneur, ll.solleur, ll.status, case when status is null then case when to_number(kontonummer) = to_number(ll.sollkto) then  ll.betrag else -ll.betrag end end diff
                                     From t_lex_Kontenblatt  Kto
                                       Left Join T_Rel_Lex_Kto_Bel relBel On Instr(Kto.Jahr || '/' || Kto.Buchungsnummer|| '/0', relBel.Fk_lex_Relation)>0
                                       Left Join T_Lex_Long Ll On relBel.Fk_lex_Relation = Ll.Relation
                                       left join t_inp_belege_all bel on bel.pk_inp_belege_all = relbel.fk_inp_belege_all
                                       Left Join (Select * From T_Std Where Fk_Std_Group = 101) Std_Status On Std_Status.Std_Value = Bel.Fk_bas_std_Status
                                       Left Join (Select * From T_Std Where Fk_Std_Group = 27) Std_Bel On Std_Bel.Std_Value = Bel.Fk_Real_Beleg_Exist
                                       Left Join V_abl_Ordner_Page Pg On Pg.Pk_Abl_Ordner_Page = Bel.Fk_Abl_Ordner_Page
                                     Where relbel.Fk_Main_Key Is Not Null
                                    /* Group By 
                                         Kto.Buchungsnummer,  Kto.Buchungsstatus, Kto.Ok,Kto.Jahr , Kto.Buchungstext, kto.kontonummer, kto.gegenkonto, relbel.fk_relation, 
                                         relbel.Fk_Main_Key, kto.belegnummer,bel.Pk_Inp_Belege_All, bel.Fk_Status, bel.Fk_Abl_Ordner_Page,bel.Fk_Real_Beleg_Exist , Std_Status.Std_Name , Std_Bel.Std_Name , pg.Ordner_Page, relbel.fk_relation, ll.Betrag
                                        , ll.habeneur, ll.solleur, ll.status
                                   */
                             ) a
                     ) where rnr <=20
                     group by fk_main_key
               ) Ktobel On Ktobel.Fk_Main_Key = Zus.Fk_Main_Key
   Left Join T_Rel_kto_Konto_Auszug_Gir Gir On Gir.Fk_Main_Key = Zus.Fk_Main_Key
   Left Join (Select Fk_bas_kal_Jahr, Fk_bas_kal_Monat, Anfangsdatum, Enddatum, Anfangsbetrag, Endbetrag, Pk_kto_Konto_Auszug, std_name From T_kto_Konto_Auszug ktoaus left join (select * from  t_std where fk_std_group = 181) std on ktoaus.fk_std_konto_auszug_type = std.std_value ) Ktoaus On Ktoaus.Pk_kto_Konto_Auszug = Gir.Fk_kto_Konto_Auszug
   left join (select * from t_rel_lex_lex_bankkonto where valid = 1) kto on zus.fk_kto_bankkonto = kto.fk_kto_bankkonto and trunc(zus."Buchungstag") between valid_from and valid_to
   left join t_kto_kas_kasse kas on kas.fk_main_key_bankkonto = zus.fk_main_key
   left join  ( 
               select kto.* , zus1.Kontotyp || '/' || zus1.fk_main_key || ' (' || round(zus1."Betrag",2) || ')' || chr(10) || zus2.Kontotyp || '/' || zus2.fk_main_key || ' (' || round(zus2."Betrag",2) || ')' kontotyp
               from t_rel_kto_kont_buch_kont_buch kto
                   left join v_kto_konten_zus zus1 on kto.fk_kto_konto_buch1 = zus1.fk_main_key
                   left join v_kto_konten_zus zus2 on kto.fk_kto_konto_buch2 = zus2.fk_main_key
               where fk_std_type = 1
      ) relkto on relkto.fk_kto_konto_buch1 = zus.fk_main_key  or relkto.fk_kto_konto_buch2 = zus.fk_main_key
;
--------------------------------------------------------
--  DDL for View V_KTO_STAND_GIR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_STAND_GIR" ("ID", "Betrag", "LFD_SUM") AS 
  select id, "Betrag", sum("Betrag") over (order by "Buchungstag", id) lfd_sum
from "T_KTO_GIROKONTO"
;
--------------------------------------------------------
--  DDL for View V_KTO_ZAHLUNGSWIEDERHOLUNG
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_KTO_ZAHLUNGSWIEDERHOLUNG" ("KAT", "BEZEICHNUNG", "BETRAG_GESAMT", "DATUM", "KENNZEICHEN", "WIEDERHOLUNG") AS 
  select 'KFZ Versicherung/Steuern' kat, bezeichnung, betrag_gesamt,datum, Kennzeichen,wiederholung 
        from T_car_auto_versicherung
        where wiederholung is not null and wiederholung <> 'einmalig'
        union
        select 'Krankenversicherung' , buchungstext, betrag, datum, null, wiederholung
        from t_bei_kk_krankenkasse_det
        where Buchungstext = 'Beitrag'
;
--------------------------------------------------------
--  DDL for View V_LEX_BUCH_CHECK
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_BUCH_CHECK" ("KONTOTYP", "Betrag", "BT1", "BT2", "FK_MAIN_KEY", "BELEGNUMMER", "PK_LEX") AS 
  select Kontotyp, "Betrag", t_lex.Buchungstext bt1, ktozus.buchungstext bt2, t_lex.fk_main_key, t_lex.belegnummer, t_lex.pk_lex

from v_kto_konten_zus ktozus
  left join t_lex  on ktozus.fk_buchung_steuer = t_lex.belegnummer
where (storno is null or storno = 0)
and ok=1 and Kontotyp <> 'Paypal'
union
select Kontotyp, "Betrag", t_lex.Buchungstext bt1, ktozus.buchungstext bt2, t_lex.fk_main_key, t_lex.belegnummer, t_lex.pk_lex

from v_kto_konten_zus ktozus
 right join t_lex  on ktozus.fk_buchung_steuer = t_lex.belegnummer
where (storno is null or storno = 0)
and ok=1 and Kontotyp <> 'Paypal'
;
--------------------------------------------------------
--  DDL for View V_LEX_BUCH_KTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_BUCH_KTO" ("FK_MAIN_KEY", "BT", "KAT", "VER", "Betrag", "BTEXT", "KONTOTYP", "BELEGDATUM", "BUCHUNGSDATUM", "BUCHUNGSPERIODE", "BELEGNUMMERNKREIS", "BELEGNUMMER", "BUCHUNGSTEXT", "BUCHUNGSBETRAG", "SOLLKONTO", "HABENKONTO", "STEUERSCHLE", "KOSTENSTELLE", "KOSTENTR", "BUCHUNGSBETRAG_EUR", "WRUNG", "ZUSATZANGABEN") AS 
  select
fk_main_key,
"Buchungstag" bt, 
Kategorie kat, 
Verwendungszweck ver,
"Betrag",
Buchungstext btext,
Kontotyp,
--
  "Buchungstag" Belegdatum,	
sysdate Buchungsdatum,
bucht_monat Buchungsperiode,
null Belegnummernkreis,
null Belegnummer,	
Buchungstext,
"Betrag" Buchungsbetrag,
null Sollkonto,	
case when Kontotyp = 'Girokonto' then 1700 
when Kontotyp = 'Kreditkarte' then 1710
else null
end Habenkonto,	 
null Steuerschle,
null Kostenstelle,
null  Kostentr,
"Betrag" Buchungsbetrag_EUR,
'EUR' Wrung	,
null Zusatzangaben
from v_kto_konten_zus
where bucht_jahr  = 2017
and fk_buchung_steuer is null
and "Betrag" !=     0
;
--------------------------------------------------------
--  DDL for View V_LEX_BUCH_KTO_BEL_ALL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_BUCH_KTO_BEL_ALL" ("PK_REL_LEX_KTO_BEL", "FK_LEX_OLD", "FK_LEX_RELATION", "FK_IMP_BA_BEL", "FK_INP_BELEGE_ALL", "CREATED_AT", "MODIFIED_AT", "KTO_ZUS_FK_MAIN_KEY", "KTO_ZUS_ID", "KTO_ZUS_BUCHUNGSTAG", "KTO_ZUS_BETRAG", "KTO_ZUS_WAEHRUNG", "KTO_ZUS_FREMDWAEHRUNGSBETRAG", "KTO_ZUS_FREMDWAEHRUNG", "KTO_ZUS_BUCHUNGSTEXT", "KTO_ZUS_FK_BAS_KAT_KATEGORIE", "KTO_ZUS_FK_STD_VERW_VERWENDUNGSZWECK", "KTO_ZUS_FK_BAS_KTO_KONTOTYP", "KTO_ZUS_FK_BAS_KAL_BUCHUNGSTAG", "KTO_ZUS_FK_BAS_KAL_WERTSTELLUNG", "KTO_ZUS_VERWENDUNGSZWECK", "KTO_ZUS_KATEGORIE", "KTO_ZUS_BUCHT_TAG", "KTO_ZUS_BUCHT_MONAT", "KTO_ZUS_BUCHT_JAHR", "KTO_ZUS_BUCHT_DATUM", "KTO_ZUS_WERTT_TAG", "KTO_ZUS_WERTT_MONAT", "KTO_ZUS_WERTT_JAHR", "KTO_ZUS_WERTT_DATUM", "KTO_ZUS_KONTOTYP", "KTO_ZUS_FK_KTO_VORGANG", "KTO_ZUS_WIEDERHOLUNG", "KTO_ZUS_NAECHSTE_ZAHLUNG", "KTO_ZUS_FK_BUCHUNG_STEUER", "OK", "OK_DATUM", "ART", "STD_NAME", "KTO_BEL_COMM_1", "FK_REL_LEX_KTO_BEL", "VBEL_BEZEICHNUNG_1", "LEXL_BUCHTXT", "LEXL_BETRAG", "SOLLKTO", "HABENKTO", "OLD_BEL_BETRAG", "LEXL_JAHR", "JAHR_BELEG", "LEXL_BEMERKUNGEN", "PK_INP_BELEGE_ALL", "FK_LEX_BUCHUNG", "FK_BAS_KAT_KATEGORIE", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "FK_BAS_STD_ZAHLUNGSART", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_PROJEKT", "BELEGNUMMER", "BEZEICHNUNG", "FK_ADR_LAND", "FK_ADR_CITY", "BEL_DATUM", "VON", "BIS", "NETTO_BETRAG", "FK_BAS_STEU_STEUER_SATZ", "MWST_BETRAG", "BRUTTO_BETRAG", "FK_BAS_MON_WAEHRUNG", "STEUERNUMMER", "FK_BAS_MON_UMRECHNUNGSKURS", "COMM_REST_BELEG", "COMM_TEL_BELEG", "COMM_PRODUKTE", "COMM_BEGRUENDUNG", "COMM_SONSTIGES", "BELEG", "ZAHLUNGSBELEG", "LITER", "ZAPFSAEULE", "FK_LOC_LOCATION", "PERSOENLICH_VOR_ORT", "BELEG_UHRZEIT", "VON_UHRZEIT", "BIS_UHRZEIT", "FK_BAS_KAL_VON_ARBEITSTAG", "FK_BAS_KAL_BIS_ARBEITSTAG", "COMM_ADRESSE", "TANKSTELLEN_NR", "BRUTTO_BETRAG_INCL_TRINKG", "COMM_PARKTICKET", "FRMDW_NETTO_BETRAG", "FK_BAS_MON_FRMDW", "FK_BAS_MON_FRMDW_MWST_SATZ", "FRMDW_MWST_BETRAG", "FRMDW_BRUTTO_BETRAG", "FRMDW_BRUTTO_INCL_TRINKG", "MWST_BETRAG_EUR", "BRUTTO_BETRAG_EUR", "BRUTTO_INCL_TRINKG_EUR", "NETTO_BETRAG_EUR", "PREIS_PRO_MENGE", "MENGENEINHEIT", "LA_DATUM", "FK_LA_KONTO", "FK_LA_WDH", "FK_BAS_STD_STATUS", "COMM_VERGEHEN", "VERG_BEHOERDE", "CNT_PUNKTE", "FK_BEL_BELEG_ABLAGE", "FK_ABL_ORDNER_PAGE", "CNT_PUNKTE_GESCHAETZT", "PUNKTE_VON", "PUNKTE_BIS", "FK_LOC_LOCATION_VERG", "FK_IMP_BA_BEL_OLD", "GESCHW_IST", "GESCHW_SOLL", "GESCHW_UEBER_GRZ", "GESCHW_UEBER_GRZ_ABZGL_MESSTOL", "CODE_BUSSGELD", "DESCR_BUSSGELD", "GEZAHLT_AM", "WEBSEITE", "KUNDENNUMMER", "FK_REAL_BELEG_EXIST", "ZAHL_ART_VAL", "ZAHL_ART_NAME", "LA_WDH_VALUE", "LA_WDH_NAME", "STA_VALUE", "STA_NAME", "BEL_EX_VALUE", "BEL_EX_NAME", "PROJ_PK_PROJ_PROJEKT", "PROJ_FK_KON_AUFTRAGGEBER", "PROJ_FK_KON_PROJEKTPARTNER_1", "PROJ_FK_KON_PROJEKTPARTNER_2", "PROJ_PROJEKT", "PROJ_VON", "PROJ_BIS", "PROJ_AKTUELLER_STUNDENSATZ", "PROJ_PSP_ELEMENT", "PROJ_CREATED_BY", "PROJ_CREATED_AT", "PROJ_MODIFIED_BY", "PROJ_MODIFIED_AT", "PROJ_RECHNUNG_GESTELLT", "PROJ_ZAHLUNG_ABGESCHLOSSEN", "PROJ_BELEGE_ZUGEORDNET", "PROJ_KM_GERECHNET", "PROJ_PROJEKT_ABGESCHLOSSEN", "PROJ_PROJEKT_ART", "PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER", "PROJ_AUFT_GESCHAEFTSPARTNER", "PROJ_AUFT_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_AUFT_PK_ADR_ADRESSE", "PROJ_AUFT_STRASSE", "PROJ_AUFT_HSNR", "PROJ_AUFT_PLZ", "PROJ_AUFT_ORT", "PROJ_AUFT_LAND", "PROJ_AUFT_BESCHREIBUNG", "PROJ_AUFT_PK_REL_GP_KONT", "PROJ_AUFT_GESCHAEFTSPARTNERTYP", "PROJ_PP1_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP1_GESCHAEFTSPARTNER", "PROJ_PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP1_PK_ADR_ADRESSE", "PROJ_PP1_STRASSE", "PROJ_PP1_HSNR", "PROJ_PP1_PLZ", "PROJ_PP1_ORT", "PROJ_PP1_LAND", "PROJ_PP1_BESCHREIBUNG", "PROJ_PP1_PK_REL_GP_KONT", "PROJ_PP1_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP2_GESCHAEFTSPARTNER", "PROJ_PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_ADR_ADRESSE", "PROJ_PP2_STRASSE", "PROJ_PP2_HSNR", "PROJ_PP2_PLZ", "PROJ_PP2_ORT", "PROJ_PP2_LAND", "PROJ_PP2_BESCHREIBUNG", "PROJ_PP2_PK_REL_GP_KONT", "PROJ_PP2_GESCHAEFTSPARTNERTYP", "PK_BAS_STD_VERWENDUNGSZWECK", "VERWENDUNGSZWECK", "PK_BAS_KAT_KONTO_BUCH", "KTOKAT_KATEGORIE", "KTOKAT_NEU_ALT", "KTOKAT_FK_BAS_KAT_OBERKATEGORIE", "KTOKAT_VALID", "ARB_PK_BAS_KAL_ARBEITSTAGE", "ARB_DATUM", "ARB_FK_BAS_KAL_ARBEITSTAG", "ARB_FK_STD_KAL_WOCHENENDE", "ARB_FK_STD_KAL_FEIERTAG", "ARB_FEIERTAG", "ARB_TAG", "ARB_MONAT", "ARB_JAHR", "ARB_VON_PK_BAS_KAL_ARBEITSTAGE", "ARB_VON_DATUM", "ARB_VON_FK_BAS_KAL_ARBEITSTAG", "ARB_VON_FK_STD_KAL_WOCHENENDE", "ARB_VON_FK_STD_KAL_FEIERTAG", "ARB_VON_FEIERTAG", "ARB_VON_TAG", "ARB_VON_MONAT", "ARB_VON_JAHR", "ARB_BIS_PK_BAS_KAL_ARBEITSTAGE", "ARB_BIS_DATUM", "ARB_BIS_FK_BAS_KAL_ARBEITSTAG", "ARB_BIS_FK_STD_KAL_WOCHENENDE", "ARB_BIS_FK_STD_KAL_FEIERTAG", "ARB_BIS_FEIERTAG", "ARB_BIS_TAG", "ARB_BIS_MONAT", "ARB_BIS_JAHR", "PK_ADR_LAND", "LAND", "PK_ADR_ORT", "ORT", "CI_PK_ADR_LAND", "CI_LAND", "STEU_STEUERSATZ", "STEU_LAND", "STEU_PK_ADR_LAND", "STEU_PK_BAS_STEU_STEUER_SATZ", "STEU_ZUS_ST", "STEU_FRMD_STEUERSATZ", "STEU_FRMD_LAND", "STEU_FRMD_PK_ADR_LAND", "STEU_FRMD_PK_BAS_STEU_STEUER_SATZ", "STEU_FRMD_ZUS_ST", "PK_BAS_MON_WAEHRUNG", "WAEHRUNG", "WAEHRUNG_LANG", "COMM", "ABL_ORD_J_PAGE_NUMBER", "ABL_ORD_PK_ABL_ORDNER_PAGE", "ABL_ORD_PAGE_NUMBER", "ABL_ORD_JAHR", "ABL_ORD_ORDNER_NAME", "ABL_ORD_PK_ABL_ORDNER", "VBEL_ART", "VBEL_FK_IMP_BA_BEL", "VBEL_PK_IMP_BA_ALLG_BEL", "VBEL_BEZEICHNUNG", "VBEL_KENNZEICHEN", "VBEL_DATUM", "VBEL_DATUM_VERGEHEN", "VBEL_FK_BAS_KAL_ARBEITSTAG", "VBEL_FK_KTO_BUCHUNG", "VBEL_BETRAG", "VBEL_WAEHRUNG", "VBEL_STEUERSATZ", "VBEL_MWST_BETRAG", "VBEL_NETTO", "VBEL_ZAHLUNGSART", "VBEL_BILD", "VBEL_BILD1", "VBEL_VERWENDUNGSZWECK", "VBEL_FK_INV_INVENTAR", "VBEL_FK_PROJ_PROJEKT", "VBEL_WAEHRUNG_BETRAG", "VBEL_FK_BAS_KAT_KATEGORIE", "VBEL_KATEGORIE", "VBEL_PROJEKT", "VBEL_INVENTAR", "VBEL_FK_BEL_BELEG_ABLAGE", "IBAN", "PK_KTO_BANKKONTO", "BANK", "PK_KTO_BANK", "VLOC_PK_LOC_LOCATION", "VLOC_LOCATION", "VLOC_FK_BAS_LOC_LOCATION_TYPE", "VLOC_FK_ADR_ADRESSE", "VLOC_CREATED_BY", "VLOC_CREATED_AT", "VLOC_MODIFIED_BY", "VLOC_MODIFIED_AT", "VLOC_LOCATION_TYPE", "VLOC_STRASSE", "VLOC_HSNR", "VLOC_BESCHREIBUNG", "VLOC_COMM", "VLOC_POSTFACH", "VLOC_PLZ", "VLOC_ORT", "VLOC_LAND", "VLOC_ADR", "VLOC_VERG_PK_LOC_LOCATION", "VLOC_VERG_LOCATION", "VLOC_VERG_FK_BAS_LOC_LOCATION_TYPE", "VLOC_VERG_FK_ADR_ADRESSE", "VLOC_VERG_CREATED_BY", "VLOC_VERG_CREATED_AT", "VLOC_VERG_MODIFIED_BY", "VLOC_VERG_MODIFIED_AT", "VLOC_VERG_LOCATION_TYPE", "VLOC_VERG_STRASSE", "VLOC_VERG_HSNR", "VLOC_VERG_BESCHREIBUNG", "VLOC_VERG_COMM", "VLOC_VERG_POSTFACH", "VLOC_VERG_PLZ", "VLOC_VERG_ORT", "VLOC_VERG_LAND", "VLOC_VERG_ADR", "INP_BEL_ALL_JAHR") AS 
  select 
kto_bel."PK_REL_LEX_KTO_BEL", 
kto_bel."FK_LEX_OLD",
kto_bel."FK_LEX_RELATION",
--kto_bel."FK_MAIN_KEY",
kto_bel."FK_IMP_BA_BEL",
kto_bel."FK_INP_BELEGE_ALL",
kto_bel."CREATED_AT",
kto_bel."MODIFIED_AT",
kto_zus.FK_MAIN_KEY kto_zus_FK_MAIN_KEY,
kto_zus.ID kto_zus_ID,
kto_zus."Buchungstag" kto_zus_Buchungstag,
kto_zus."Betrag" kto_zus_Betrag,
kto_zus.Waehrung kto_zus_Waehrung,
kto_zus.Fremdwaehrungsbetrag kto_zus_Fremdwaehrungsbetrag,
kto_zus.Fremdwaehrung kto_zus_Fremdwaehrung,
kto_zus.BUCHUNGSTEXT kto_zus_BUCHUNGSTEXT,
kto_zus.FK_bas_kat_Kategorie kto_zus_FK_bas_kat_Kategorie,
kto_zus.FK_STD_VERW_VERWENDUNGSZWECK kto_zus_FK_STD_VERW_VERWENDUNGSZWECK,
kto_zus.FK_bas_kto_Kontotyp kto_zus_FK_bas_kto_Kontotyp,
kto_zus.FK_BAS_kal_BUCHUNGSTAG kto_zus_FK_bas_kal_BUCHUNGSTAG,
kto_zus.FK_bas_kal_WERTSTELLUNG kto_zus_FK_bas_kal_WERTSTELLUNG,
kto_zus.VERWENDUNGSZWECK kto_zus_VERWENDUNGSZWECK,
kto_zus.KATEGORIE kto_zus_KATEGORIE,
kto_zus.BUCHT_TAG kto_zus_BUCHT_TAG,
kto_zus.BUCHT_MONAT kto_zus_BUCHT_MONAT,
kto_zus.BUCHT_JAHR kto_zus_BUCHT_JAHR,
kto_zus.BUCHT_DATUM kto_zus_BUCHT_DATUM,
kto_zus.WERTT_TAG kto_zus_WERTT_TAG,
kto_zus.WERTT_MONAT kto_zus_WERTT_MONAT,
kto_zus.WERTT_JAHR kto_zus_WERTT_JAHR,
kto_zus.WERTT_DATUM kto_zus_WERTT_DATUM,
kto_zus.Kontotyp kto_zus_Kontotyp,
kto_zus.FK_kto_VORGANG kto_zus_FK_kto_VORGANG,
kto_zus.WIEDERHOLUNG kto_zus_WIEDERHOLUNG,
kto_zus.NAECHSTE_ZAHLUNG kto_zus_NAECHSTE_ZAHLUNG,
kto_zus.FK_BUCHUNG_STEUER kto_zus_FK_BUCHUNG_STEUER,

kto_bel.ok,
kto_bel.ok_datum,
vbel.art,
std.std_name,
kto_bel.COMM kto_bel_comm_1,
kto_bel.FK_REL_LEX_KTO_BEL,
vbel.bezeichnung vbel_bezeichnung_1,
lexl.buchungstext lexl_buchtxt,
lexl.betrag lexl_betrag,
lexl.sollkto,
lexl.habenkto,
vbel.betrag old_bel_betrag,
lexl.JAHR lexl_jahr,
lexl.JAHR_BELEG ,
lexl.BEMERKUNGEN lexl_bemerkungen,
vinp."PK_INP_BELEGE_ALL",vinp."FK_LEX_BUCHUNG",vinp."FK_BAS_KAT_KATEGORIE",vinp."FK_BAS_KAL_ARBEITSTAG",vinp."FK_KTO_BUCHUNG",vinp."FK_BAS_STD_ZAHLUNGSART",vinp."FK_STD_VERW_VERWENDUNGSZWECK",
vinp."FK_INV_INVENTAR",vinp."FK_PROJ_PROJEKT",vinp."BELEGNUMMER",vinp."BEZEICHNUNG",vinp."FK_ADR_LAND",vinp."FK_ADR_CITY",vinp."BEL_DATUM",vinp."VON",vinp."BIS",vinp."NETTO_BETRAG",
vinp."FK_BAS_STEU_STEUER_SATZ",vinp."MWST_BETRAG",vinp."BRUTTO_BETRAG",vinp."FK_BAS_MON_WAEHRUNG",vinp."STEUERNUMMER",vinp."FK_BAS_MON_UMRECHNUNGSKURS",vinp."COMM_REST_BELEG",vinp."COMM_TEL_BELEG",
vinp."COMM_PRODUKTE",vinp."COMM_BEGRUENDUNG",vinp."COMM_SONSTIGES",vinp."BELEG",vinp."ZAHLUNGSBELEG",vinp."LITER",vinp."ZAPFSAEULE",vinp."FK_LOC_LOCATION",vinp."PERSOENLICH_VOR_ORT",
vinp."BELEG_UHRZEIT",vinp."VON_UHRZEIT",vinp."BIS_UHRZEIT",vinp."FK_BAS_KAL_VON_ARBEITSTAG",vinp."FK_BAS_KAL_BIS_ARBEITSTAG",vinp."COMM_ADRESSE",vinp."TANKSTELLEN_NR",vinp."BRUTTO_BETRAG_INCL_TRINKG",
vinp."COMM_PARKTICKET",vinp."FRMDW_NETTO_BETRAG",vinp."FK_BAS_MON_FRMDW",vinp."FK_BAS_MON_FRMDW_MWST_SATZ",vinp."FRMDW_MWST_BETRAG",vinp."FRMDW_BRUTTO_BETRAG",vinp."FRMDW_BRUTTO_INCL_TRINKG",vinp."MWST_BETRAG_EUR",
vinp."BRUTTO_BETRAG_EUR",vinp."BRUTTO_INCL_TRINKG_EUR",vinp."NETTO_BETRAG_EUR",vinp."PREIS_PRO_MENGE",vinp."MENGENEINHEIT",vinp."LA_DATUM",vinp."FK_LA_KONTO",vinp."FK_LA_WDH",vinp."FK_BAS_STD_STATUS",
vinp."COMM_VERGEHEN",vinp."VERG_BEHOERDE",vinp."CNT_PUNKTE",vinp."FK_BEL_BELEG_ABLAGE",vinp."FK_ABL_ORDNER_PAGE",vinp."CNT_PUNKTE_GESCHAETZT",vinp."PUNKTE_VON",vinp."PUNKTE_BIS",vinp."FK_LOC_LOCATION_VERG",
vinp."FK_IMP_BA_BEL_OLD",vinp."GESCHW_IST",vinp."GESCHW_SOLL",vinp."GESCHW_UEBER_GRZ",vinp."GESCHW_UEBER_GRZ_ABZGL_MESSTOL",vinp."CODE_BUSSGELD",vinp."DESCR_BUSSGELD",vinp."GEZAHLT_AM",vinp."WEBSEITE",
vinp."KUNDENNUMMER",vinp."FK_REAL_BELEG_EXIST",vinp."ZAHL_ART_VAL",vinp."ZAHL_ART_NAME",vinp."LA_WDH_VALUE",vinp."LA_WDH_NAME",vinp."STA_VALUE",vinp."STA_NAME",vinp."BEL_EX_VALUE",vinp."BEL_EX_NAME",
vinp."PROJ_PK_PROJ_PROJEKT",vinp."PROJ_FK_KON_AUFTRAGGEBER",vinp."PROJ_FK_KON_PROJEKTPARTNER_1",vinp."PROJ_FK_KON_PROJEKTPARTNER_2",vinp."PROJ_PROJEKT",vinp."PROJ_VON",vinp."PROJ_BIS",vinp."PROJ_AKTUELLER_STUNDENSATZ",
vinp."PROJ_PSP_ELEMENT",vinp."PROJ_CREATED_BY",vinp."PROJ_CREATED_AT",vinp."PROJ_MODIFIED_BY",vinp."PROJ_MODIFIED_AT",vinp."PROJ_RECHNUNG_GESTELLT",vinp."PROJ_ZAHLUNG_ABGESCHLOSSEN",vinp."PROJ_BELEGE_ZUGEORDNET",
vinp."PROJ_KM_GERECHNET",vinp."PROJ_PROJEKT_ABGESCHLOSSEN",vinp."PROJ_PROJEKT_ART",vinp."PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER",vinp."PROJ_AUFT_GESCHAEFTSPARTNER",vinp."PROJ_AUFT_FK_BAS_KON_GESCHAEFTSPARTNERTYP",vinp."PROJ_AUFT_PK_ADR_ADRESSE",
vinp."PROJ_AUFT_STRASSE",vinp."PROJ_AUFT_HSNR",vinp."PROJ_AUFT_PLZ",vinp."PROJ_AUFT_ORT",vinp."PROJ_AUFT_LAND",vinp."PROJ_AUFT_BESCHREIBUNG",vinp."PROJ_AUFT_PK_REL_GP_KONT",vinp."PROJ_AUFT_GESCHAEFTSPARTNERTYP",
vinp."PROJ_PP1_PK_KON_GESCHAEFTSPARTNER",vinp."PROJ_PP1_GESCHAEFTSPARTNER",vinp."PROJ_PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP",vinp."PROJ_PP1_PK_ADR_ADRESSE",vinp."PROJ_PP1_STRASSE",vinp."PROJ_PP1_HSNR",vinp."PROJ_PP1_PLZ",vinp."PROJ_PP1_ORT",vinp."PROJ_PP1_LAND",
vinp."PROJ_PP1_BESCHREIBUNG",vinp."PROJ_PP1_PK_REL_GP_KONT",vinp."PROJ_PP1_GESCHAEFTSPARTNERTYP",vinp."PROJ_PP2_PK_KON_GESCHAEFTSPARTNER",vinp."PROJ_PP2_GESCHAEFTSPARTNER",vinp."PROJ_PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP",vinp."PROJ_PP2_PK_ADR_ADRESSE",
vinp."PROJ_PP2_STRASSE",vinp."PROJ_PP2_HSNR",vinp."PROJ_PP2_PLZ",vinp."PROJ_PP2_ORT",vinp."PROJ_PP2_LAND",vinp."PROJ_PP2_BESCHREIBUNG",vinp."PROJ_PP2_PK_REL_GP_KONT",vinp."PROJ_PP2_GESCHAEFTSPARTNERTYP",vinp."PK_BAS_STD_VERWENDUNGSZWECK",
vinp."VERWENDUNGSZWECK",vinp."PK_BAS_KAT_KONTO_BUCH",vinp."KTOKAT_KATEGORIE",vinp."KTOKAT_NEU_ALT",vinp."KTOKAT_FK_BAS_KAT_OBERKATEGORIE",vinp."KTOKAT_VALID",vinp."ARB_PK_BAS_KAL_ARBEITSTAGE",vinp."ARB_DATUM",vinp."ARB_FK_BAS_KAL_ARBEITSTAG",
vinp."ARB_FK_STD_KAL_WOCHENENDE",vinp."ARB_FK_STD_KAL_FEIERTAG",vinp."ARB_FEIERTAG",vinp."ARB_TAG",vinp."ARB_MONAT",vinp."ARB_JAHR",vinp."ARB_VON_PK_BAS_KAL_ARBEITSTAGE",vinp."ARB_VON_DATUM",vinp."ARB_VON_FK_BAS_KAL_ARBEITSTAG",vinp."ARB_VON_FK_STD_KAL_WOCHENENDE",
vinp."ARB_VON_FK_STD_KAL_FEIERTAG",vinp."ARB_VON_FEIERTAG",vinp."ARB_VON_TAG",vinp."ARB_VON_MONAT",vinp."ARB_VON_JAHR",vinp."ARB_BIS_PK_BAS_KAL_ARBEITSTAGE",vinp."ARB_BIS_DATUM",vinp."ARB_BIS_FK_BAS_KAL_ARBEITSTAG",vinp."ARB_BIS_FK_STD_KAL_WOCHENENDE",
vinp."ARB_BIS_FK_STD_KAL_FEIERTAG",vinp."ARB_BIS_FEIERTAG",vinp."ARB_BIS_TAG",vinp."ARB_BIS_MONAT",vinp."ARB_BIS_JAHR",vinp."PK_ADR_LAND",vinp."LAND",vinp."PK_ADR_ORT",vinp."ORT",vinp."CI_PK_ADR_LAND",vinp."CI_LAND",vinp."STEU_STEUERSATZ",
vinp."STEU_LAND",vinp."STEU_PK_ADR_LAND",vinp."STEU_PK_BAS_STEU_STEUER_SATZ",vinp."STEU_ZUS_ST",vinp."STEU_FRMD_STEUERSATZ",vinp."STEU_FRMD_LAND",vinp."STEU_FRMD_PK_ADR_LAND",vinp."STEU_FRMD_PK_BAS_STEU_STEUER_SATZ",vinp."STEU_FRMD_ZUS_ST",vinp."PK_BAS_MON_WAEHRUNG",
vinp."WAEHRUNG",vinp."WAEHRUNG_LANG",vinp."COMM",vinp."ABL_ORD_J_PAGE_NUMBER",vinp."ABL_ORD_PK_ABL_ORDNER_PAGE",vinp."ABL_ORD_PAGE_NUMBER",vinp."ABL_ORD_JAHR",vinp."ABL_ORD_ORDNER_NAME",vinp."ABL_ORD_PK_ABL_ORDNER",
vinp."VBEL_ART",vinp."VBEL_FK_IMP_BA_BEL",vinp."VBEL_PK_IMP_BA_ALLG_BEL",vinp."VBEL_BEZEICHNUNG",vinp."VBEL_KENNZEICHEN",vinp."VBEL_DATUM",vinp."VBEL_DATUM_VERGEHEN",vinp."VBEL_FK_BAS_KAL_ARBEITSTAG",vinp."VBEL_FK_KTO_BUCHUNG",
vinp."VBEL_BETRAG",vinp."VBEL_WAEHRUNG",vinp."VBEL_STEUERSATZ",vinp."VBEL_MWST_BETRAG",vinp."VBEL_NETTO",vinp."VBEL_ZAHLUNGSART",vinp."VBEL_BILD",vinp."VBEL_BILD1",vinp."VBEL_VERWENDUNGSZWECK",vinp."VBEL_FK_INV_INVENTAR",
vinp."VBEL_FK_PROJ_PROJEKT",vinp."VBEL_WAEHRUNG_BETRAG",vinp."VBEL_FK_BAS_KAT_KATEGORIE",vinp."VBEL_KATEGORIE",vinp."VBEL_PROJEKT",vinp."VBEL_INVENTAR",vinp."VBEL_FK_BEL_BELEG_ABLAGE",vinp."IBAN",vinp."PK_KTO_BANKKONTO",vinp."BANK",
vinp."PK_KTO_BANK",vinp."VLOC_PK_LOC_LOCATION",vinp."VLOC_LOCATION",vinp."VLOC_FK_BAS_LOC_LOCATION_TYPE",vinp."VLOC_FK_ADR_ADRESSE",vinp."VLOC_CREATED_BY",vinp."VLOC_CREATED_AT",vinp."VLOC_MODIFIED_BY",vinp."VLOC_MODIFIED_AT",vinp."VLOC_LOCATION_TYPE",
vinp."VLOC_STRASSE",vinp."VLOC_HSNR",vinp."VLOC_BESCHREIBUNG",vinp."VLOC_COMM",vinp."VLOC_POSTFACH",vinp."VLOC_PLZ",vinp."VLOC_ORT",vinp."VLOC_LAND",vinp."VLOC_ADR",vinp."VLOC_VERG_PK_LOC_LOCATION",vinp."VLOC_VERG_LOCATION",
vinp."VLOC_VERG_FK_BAS_LOC_LOCATION_TYPE",vinp."VLOC_VERG_FK_ADR_ADRESSE",vinp."VLOC_VERG_CREATED_BY",vinp."VLOC_VERG_CREATED_AT",vinp."VLOC_VERG_MODIFIED_BY",vinp."VLOC_VERG_MODIFIED_AT",vinp."VLOC_VERG_LOCATION_TYPE",vinp."VLOC_VERG_STRASSE",
vinp."VLOC_VERG_HSNR",vinp."VLOC_VERG_BESCHREIBUNG",vinp."VLOC_VERG_COMM",vinp."VLOC_VERG_POSTFACH",vinp."VLOC_VERG_PLZ",vinp."VLOC_VERG_ORT",vinp."VLOC_VERG_LAND",vinp."VLOC_VERG_ADR",vinp."INP_BEL_ALL_JAHR"
--,
--lexl.*
--,
--vbel.*
from "T_REL_LEX_KTO_BEL"  kto_bel
 left join v_kto_konten_zus kto_zus on kto_zus.fk_main_key = kto_bel.fk_main_key
 left join t_lex_long lexl on lexl.relation = kto_bel.fk_lex_relation
 left join v_imp_bel_zus vbel on vbel.fk_imp_ba_bel = kto_bel.fk_imp_ba_bel
 left join v_inp_belege_all vinp on vinp.pk_inp_belege_all = kto_bel.fk_inp_belege_all
 left join (select * from t_std where fk_std_group = 27) std on std.std_value = kto_bel.ok
;
--------------------------------------------------------
--  DDL for View V_LEX_BUCH_KTO_NEU
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_BUCH_KTO_NEU" ("BELEGDATUM", "BELEGNUMMER", "BELEGNUMMERNKREIS", "BEMERKUNGEN", "BEZEICHNUNG", "BUCHTEXT", "BUCHT_DATUM", "BUCHT_JAHR", "BUCHT_MONAT", "BUCHT_TAG", "BUCHUNGSBETRAG", "BUCHUNGSBETRAG_EURO", "BUCHUNGSDATUM", "BUCHUNGSPERIODE", "BUCHUNGSTEXT", "BETRAG", "BUCHUNGSTAG", "DIFF", "FK_BAS_KAL_BUCHUNGSTAG", "FK_BAS_KAT_KATEGORIE", "FK_BAS_KAL_WERTSTELLUNG", "FK_STD_KTO_KONTOTYP", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_BUCHUNG_STEUER", "FK_IMP_BA_BEL", "FK_KTO_VORGANG", "FK_MAIN_KEY", "FREMDWAEHRUNG", "FREMDWAEHRUNGSBETRAG", "HABENKONTO", "ID", "INVENTAR", "KATEGORIE", "KONTOTYP", "KOSTENSTELLE", "KOSTENTRAEGER", "MWST_PROZ", "NAECHSTE_ZAHLUNG", "OK", "PK_INV_INVENTAR", "PK_LEX", "PK_PROJ_PROJEKT", "PROJEKT", "SEL_OK", "SOLLKONTO", "STEUERSCHLUESSEL", "STORNO", "SUM_BETRAG", "VERWENDUNGSZWECK", "WAEHRUNG", "WERT", "WERTT_DATUM", "WERTT_JAHR", "WERTT_MONAT", "WERTT_TAG", "WIEDERHOLUNG", "ZUSATZANGABEN") AS 
  select distinct
  

       lex_kto."BELEGDATUM",lex_kto."BUCHUNGSDATUM",lex_kto."BUCHUNGSPERIODE",lex_kto."BELEGNUMMERNKREIS",lex_kto."BELEGNUMMER",lex_kto."BUCHTEXT",lex_kto."BUCHUNGSBETRAG",
       lex_kto."SOLLKONTO",lex_kto."HABENKONTO",lex_kto."STEUERSCHLUESSEL",lex_kto."KOSTENSTELLE",lex_kto."KOSTENTRAEGER",lex_kto."BUCHUNGSBETRAG_EURO",
       lex_kto."ZUSATZANGABEN",lex_kto."OK",lex_kto."FK_MAIN_KEY",lex_kto."ID",lex_kto."Buchungstag",lex_kto."Betrag",lex_kto."WAEHRUNG",lex_kto.FremdWAEHRUNGsbetrag,
       lex_kto.FremdWAEHRUNG,lex_kto."BUCHUNGSTEXT",lex_kto.FK_bas_kat_Kategorie,lex_kto.FK_STD_VERW_VERWENDUNGSZWECK,lex_kto.FK_std_kto_Kontotyp,lex_kto."FK_BAS_KAL_BUCHUNGSTAG",lex_kto."FK_BAS_KAL_WERTSTELLUNG",
       lex_kto."VERWENDUNGSZWECK",lex_kto."KATEGORIE",lex_kto."BUCHT_TAG",lex_kto."BUCHT_MONAT",lex_kto."BUCHT_JAHR",lex_kto."BUCHT_DATUM",lex_kto."WERTT_TAG",lex_kto."WERTT_MONAT",
       lex_kto."WERTT_JAHR",lex_kto."WERTT_DATUM",lex_kto.Kontotyp,lex_kto."FK_KTO_VORGANG",lex_kto."WIEDERHOLUNG",lex_kto."NAECHSTE_ZAHLUNG",lex_kto."FK_BUCHUNG_STEUER",lex_kto."STORNO",lex_kto."PK_LEX",lex_kto."BEMERKUNGEN",lex_kto."FK_IMP_BA_BEL",
       round(lex_kto."Betrag",2) wert,
       apex_item.checkbox2(1, pk_lex,'CHECKED') sel_ok,
       case when    "STEUERSCHLUESSEL" = 8 then '7' 
            when    "STEUERSCHLUESSEL" = 9 then '19'
            else null
       end mwst_proz,
       inv.pk_inv_inventar,
       inv.inventar,
       pr.pk_proj_projekt,
       pr.projekt,

       lex_sum.sum_betrag - abs(round(lex_kto."Betrag",2)) diff,

       konten.bezeichnung,

       lex_sum.sum_betrag

  from 
        (
        select 
           BELEGDATUM,
           BUCHUNGSDATUM,
           BUCHUNGSPERIODE,
           BELEGNUMMERNKREIS,
           BELEGNUMMER,
           lex.BUCHUNGSTEXT buchtext,
           BUCHUNGSBETRAG,
           SOLLKONTO,
           HABENKONTO,
           lex."STEUERSCHLUESSEL",
           KOSTENSTELLE,
           "KOSTENTRAEGER",
           BUCHUNGSBETRAG_EURO,
           lex.WAEHRUNG lex_waehrung,
           lex.ZUSATZANGABEN,
           lex.ok,
           kto.*,
    
    
           storno,
           pk_lex,
    
           lex.bemerkungen,
    
           lex.fk_imp_ba_bel 
        from T_LEX lex
              full  join v_kto_konten_zus kto on kto.fk_main_key= lex.fk_main_key
        ) lex_kto
        left join t_rel_inv_inventar_zahlung invzahl on lex_kto.fk_main_key = invzahl.fk_main_key
        left join t_inv_inventare inv on inv.pk_inv_inventar = invzahl.fk_inv_inventar
        left join t_rel_proj_project_payment przahl on przahl.fk_main_key =lex_kto.fk_main_key
        left join t_proj_projekt pr on pr.pk_proj_projekt = przahl.fk_proj_projekt
        left join t_lex_kontenplan_konten konten on konten.konten_nr_ext = lex_kto.sollkonto
        left join (select sum(buchungsbetrag) sum_betrag, fk_main_key from t_lex where storno is null or storno = 0 group by fk_main_key ) lex_sum on lex_sum.fk_main_key = lex_kto.fk_main_key
;
--------------------------------------------------------
--  DDL for View V_LEX_DUPL_JAHR_BETR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_DUPL_JAHR_BETR" ("JAHR", "BETRAG", "CNT") AS 
  select jahr,betrag, count(*) cnt from t_lex_long where  status is null group by betrag, jahr having count(*) >1
;
--------------------------------------------------------
--  DDL for View V_LEX_FORMAT_BELEGDAT_1
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_FORMAT_BELEGDAT_1" ("DAT") AS 
  select length(trim(substr(belegdat,1,10))) dat
 from t_lex_long
 where length(trim(substr(belegdat,1,10)))<10
 group by length(trim(substr(belegdat,1,10)))
;
--------------------------------------------------------
--  DDL for View V_LEX_FORMAT_BELEGDAT_2
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_FORMAT_BELEGDAT_2" ("DAT1", "DAT2") AS 
  select substr(trim(substr(belegdat,1,10)),7,2) dat1, substr(trim(substr(belegdat,1,10)),1,6)  || '20' ||  substr(trim(substr(belegdat,1,10)),7,2) dat2
 from t_lex_long
 where length(trim(substr(belegdat,1,10)))<10
 group by substr(trim(substr(belegdat,1,10)),7,2),  substr(trim(substr(belegdat,1,10)),1,6)  || '20' ||  substr(trim(substr(belegdat,1,10)),7,2)
;
--------------------------------------------------------
--  DDL for View V_LEX_HOTEL_SUB_BUCH
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_HOTEL_SUB_BUCH" ("BUCHUNGSNUMMER", "KONTONUMMER", "KONTOBEZEICHNUNG", "BELEGDATUM", "BELEGNUMMER", "BUCHUNGSTEXT", "GEGENKONTO", "SOLLBETRAG_EUR", "HABENBETRAG_EUR", "USTKONTO", "UST", "DATUM_OK", "OK", "SOLLBETRAG_EUR1", "ID", "BUCHUNGSSTATUS", "JAHR", "KST", "KTR", "FK_BEL_LEX_BELEGDATUM", "FK_PROJ_PROJEKT", "FK_KON_GESCHAEFTSPARTNER", "FK_INV_INVENTAR", "FK_LOC_LOCATION", "FK_BAS_KAT_KATEGORIE", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_LEX_RELATION", "FK_LEX_RELATION_SUB", "DATUM_STEUER_OK", "SPLIT_NR", "FLG_SPLIT_BUCH", "SPLIT_NR_MAN", "DATUM_SPLIT_OK", "DATUM_DUPL_OK", "DUPL_BEMERKUNG", "FK_CONTR_DUPL_STATUS", "FK_STEU_STEUER_MONAT", "FK_STEU_STEUER_VORANMELDG", "DATUM_STEUERB_ÜBERG", "DATUM_FINANZAMT_ÜBERG", "LEX_BUCHUNGSTEXT", "SOLLKTO", "LEX_JAHR", "FK_INP_BELEGE_ALL", "BELPOS_FK_BAS_KAT_KATEGORIE", "PK_INP_BELEGE_POS_ALL", "PK_INP_BELEGE_ALL", "BRUTTO_BETRAG") AS 
  select 
        kto."BUCHUNGSNUMMER",kto."KONTONUMMER",kto."KONTOBEZEICHNUNG",kto."BELEGDATUM",kto."BELEGNUMMER",kto."BUCHUNGSTEXT",
        kto."GEGENKONTO",kto."SOLLBETRAG_EUR",kto."HABENBETRAG_EUR",kto."USTKONTO",kto."UST",kto."DATUM_OK",kto."OK",kto."SOLLBETRAG_EUR1",
        kto."ID",kto."BUCHUNGSSTATUS",kto."JAHR",kto."KST",kto."KTR",kto."FK_BAS_KAL_BELEGDATUM",kto."FK_PROJ_PROJEKT",kto."FK_KON_GESCHAEFTSPARTNER",kto."FK_INV_INVENTAR",
        kto."FK_LOC_LOCATION",kto."FK_BAS_KAT_KATEGORIE",kto."FK_STD_VERW_VERWENDUNGSZWECK",kto."FK_LEX_RELATION",kto."FK_LEX_RELATION_SUB",kto."DATUM_STEUER_OK",kto."SPLIT_NR",
        kto."FLG_SPLIT_BUCH",kto."SPLIT_NR_MAN",kto."DATUM_SPLIT_OK",kto."DATUM_DUPL_OK",kto."DUPL_BEMERKUNG",kto."FK_CONTR_DUPL_STATUS",kto."FK_STEU_STEUER_MONAT",kto."FK_STEU_STEUER_VORANMELDG",kto."DATUM_STEUERB_ÜBERG",kto."DATUM_FINANZAMT_ÜBERG",
        ll.buchungstext lex_buchungstext,
        ll.sollkto, 
        ll.jahr lex_jahr, 
        relbel.fk_inp_belege_all, 
        belpos.fk_bas_kat_kategorie belpos_fk_bas_kat_kategorie, 
        belpos.pk_inp_belege_pos_all, 
        bel.pk_inp_belege_all, 
        belpos.brutto_betrag
from (select * from t_lex_kontenblatt where kontonummer = 6680 and jahr = 2018 and buchungsstatus = 1) kto
 left join (select distinct fk_lex_relation, fk_inp_belege_all from t_rel_lex_kto_bel) relbel on relbel.fk_lex_relation = kto.fk_lex_relation
 left join (select * from t_lex_long where status is null and sollkto = 6680) ll on ll.fk_lex_relation_main = relbel.fK_lex_relation
 left join t_inp_belege_all bel on relbel.fk_inp_belege_all = bel.pk_inp_belege_all
 left join (select * from t_inp_belege_pos_all where fk_bas_kat_kategorie = 314 or fk_bas_kat_kategorie is null)   belpos on belpos.fk_inp_belege_all = bel.pk_inp_belege_all
order by relation
;
--------------------------------------------------------
--  DDL for View V_LEX_KTBL_DIFF_YEARS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LEX_KTBL_DIFF_YEARS" ("FK_BAS_KAL_BELEGDATUM", "JAHR", "KTO_JAHR", "ID", "MONAT", "TAG", "BELEGDATUM") AS 
  select fk_bas_kal_belegdatum, arb.jahr, kto.jahr kto_jahr, kto.id, monat, tag, belegdatum

from t_lex_kontenblatt kto
 left join t_bas_kal_arbeitstage arb  on kto.fk_bas_kal_belegdatum = arb.pk_bas_kal_arbeitstage
where 
--kontonummer = 2103 and
  kto.jahr <> arb.jahr
;
--------------------------------------------------------
--  DDL for View V_LOC_LOCATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_LOC_LOCATION" ("PK_LOC_LOCATION", "LOCATION", "FK_BAS_LOC_LOCATION_TYPE", "FK_ADR_ADRESSE", "CREATED_BY", "CREATED_AT", "MODIFIED_BY", "MODIFIED_AT", "LOCATION_TYPE", "STRASSE", "HSNR", "BESCHREIBUNG", "COMM", "POSTFACH", "PLZ", "ORT", "LAND", "ADR", "PK_ADR_LAND", "PK_ADR_ORT", "PK_ADR_PLZ_ORT", "PK_BAS_LOCATION_TYPE", "FK_MDT_MANDANT") AS 
  select 
    loc."PK_LOC_LOCATION",
    loc."LOCATION",
    loc."FK_BAS_LOC_LOCATION_TYPE",
    loc."FK_ADR_ADRESSE",
    loc."CREATED_BY",
    loc."CREATED_AT",
    loc."MODIFIED_BY",
    loc."MODIFIED_AT",
    loc_type.location_type,
    adr.strasse,
    adr.hsnr,
    adr.beschreibung,
    adr.comm,
    adr.postfach,

    plz_ort.plz,
    ort.ort,
    la.land,
    adr.strasse || ' ' || adr.hsnr || ', ' || plz_ort.plz || ' ' || ort.ort || ', ' || la.land adr,
    pk_adr_land,
    pk_adr_ort,
    pk_adr_plz_ort,
    pk_bas_loc_location_type,
    fk_mdt_mandant
from t_loc_location loc
  left join t_bas_loc_location_type  loc_type on loc.fk_bas_loc_location_type = loc_type.pk_bas_loc_location_type
  left join t_adr_adresse adr on adr.pk_adr_adresse = loc.fk_adr_adresse
  left join t_adr_plz_ort plz_ort on plz_ort.pk_adr_plz_ort = adr.fk_adr_plz_ort
  left join t_adr_ort ort on ort.pk_adr_ort  = plz_ort.fk_adr_ort
  left join t_adr_land la on la.pk_adr_land = ort.fk_adr_land
;
--------------------------------------------------------
--  DDL for View V_PROJ_LEBENSLAUF
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_PROJ_LEBENSLAUF" ("DD", "PROJEKT", "DESCR") AS 
  select to_char(von, 'MM / YYYY') || ' - ' ||  to_char(bis, 'MM / YYYY') dd, projekt, descr from t_proj_projekt where lebenslauf_rel = 1 order by von desc
;
--------------------------------------------------------
--  DDL for View V_PROJ_PROJEKTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_PROJ_PROJEKTE" ("PK_PROJ_PROJEKT", "FK_KON_AUFTRAGGEBER", "FK_KON_PROJEKTPARTNER_1", "FK_KON_PROJEKTPARTNER_2", "PROJEKT", "VON", "BIS", "AKTUELLER_STUNDENSATZ", "PSP_ELEMENT", "CREATED_BY", "CREATED_AT", "MODIFIED_BY", "MODIFIED_AT", "RECHNUNG_GESTELLT", "ZAHLUNG_ABGESCHLOSSEN", "BELEGE_ZUGEORDNET", "KM_GERECHNET", "PROJEKT_ABGESCHLOSSEN", "PROJEKT_ART", "AUFT_PK_KON_GESCHAEFTSPARTNER", "AUFT_GESCHAEFTSPARTNER", "AUFT_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "AUFT_PK_ADR_ADRESSE", "AUFT_STRASSE", "AUFT_HSNR", "AUFT_PLZ", "AUFT_ORT", "AUFT_LAND", "AUFT_BESCHREIBUNG", "AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "AUFT_GESCHAEFTSPARTNERTYP", "PP1_PK_KON_GESCHAEFTSPARTNER", "PP1_GESCHAEFTSPARTNER", "PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PP1_PK_ADR_ADRESSE", "PP1_STRASSE", "PP1_HSNR", "PP1_PLZ", "PP1_ORT", "PP1_LAND", "PP1_BESCHREIBUNG", "PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PP1_GESCHAEFTSPARTNERTYP", "PP2_PK_KON_GESCHAEFTSPARTNER", "PP2_GESCHAEFTSPARTNER", "PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PP2_PK_ADR_ADRESSE", "PP2_STRASSE", "PP2_HSNR", "PP2_PLZ", "PP2_ORT", "PP2_LAND", "PP2_BESCHREIBUNG", "PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PP2_GESCHAEFTSPARTNERTYP") AS 
  select 

    pr."PK_PROJ_PROJEKT", 
    pr."FK_KON_AUFTRAGGEBER",
    pr."FK_KON_PROJEKTPARTNER_1",
    pr."FK_KON_PROJEKTPARTNER_2",
    pr."PROJEKT",
    pr."VON",
    pr."BIS",
    pr."AKTUELLER_STUNDENSATZ",
    pr."PSP_ELEMENT",
    pr."CREATED_BY",
    pr."CREATED_AT",
    pr."MODIFIED_BY",
    pr."MODIFIED_AT",
    pr.RECHNUNG_GESTELLT,
    pr.ZAHLUNG_ABGESCHLOSSEN,
    pr.BELEGE_ZUGEORDNET,
    pr.KM_GERECHNET,
    pr.PROJEKT_ABGESCHLOSSEN,
    prart.std_name projekt_art,
 auft.PK_KON_GESCHAEFTSPARTNER auft_PK_GESCHAEFTSPARTNER,
auft.GESCHAEFTSPARTNER auft_GESCHAEFTSPARTNER,
auft.FK_bas_kon_GESCHAEFTSPARTNERTYP auft_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
auft.PK_ADR_ADRESSE auft_PK_ADRESSE,
auft.STRASSE auft_STRASSE,
auft.HSNR auft_HSNR,
auft.PLZ auft_PLZ,
auft.ORT auft_ORT,
auft.LAND auft_LAND,
auft.BESCHREIBUNG auft_BESCHREIBUNG,
auft.PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT auft_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
auft.GESCHAEFTSPARTNERTYP auft_GESCHAEFTSPARTNERTYP,

pp1.PK_KON_GESCHAEFTSPARTNER pp1_PK_GESCHAEFTSPARTNER,
pp1.GESCHAEFTSPARTNER pp1_GESCHAEFTSPARTNER,
pp1.FK_BAS_kon_GESCHAEFTSPARTNERTYP pp1_FK_bas_kon_GESCHAEFTSPARTNERTYP,
pp1.PK_ADR_ADRESSE pp1_PK_ADR_ADRESSE,
pp1.STRASSE pp1_STRASSE,
pp1.HSNR pp1_HSNR,
pp1.PLZ pp1_PLZ,
pp1.ORT pp1_ORT,
pp1.LAND pp1_LAND,
pp1.BESCHREIBUNG pp1_BESCHREIBUNG,
pp1.PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT pp1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
pp1.GESCHAEFTSPARTNERTYP pp1_GESCHAEFTSPARTNERTYP,
pp2.PK_KON_GESCHAEFTSPARTNER pp2_PK_Kon_GESCHAEFTSPARTNER,
pp2.GESCHAEFTSPARTNER pp2_GESCHAEFTSPARTNER,
pp2.FK_bas_kon_GESCHAEFTSPARTNERTYP pp2_FK_bas_kon_GESCHAEFTSPARTNERTYP,
pp2.PK_ADR_ADRESSE pp2_PK_ADR_ADRESSE,
pp2.STRASSE pp2_STRASSE,
pp2.HSNR pp2_HSNR,
pp2.PLZ pp2_PLZ,
pp2.ORT pp2_ORT,
pp2.LAND pp2_LAND,
pp2.BESCHREIBUNG pp2_BESCHREIBUNG,
pp2.PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT pp2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
pp2.GESCHAEFTSPARTNERTYP pp2_GESCHAEFTSPARTNERTYP

from T_proj_PROJEKT pr
 left join (select * from t_std where fk_std_group = 523)  prart on pr.fk_std_proj_projekt_art = prart.std_value
 left join v_kon_geschaeftspartner auft on auft.pk_kon_geschaeftspartner = pr.fk_kon_auftraggeber
 left join v_kon_geschaeftspartner pp1 on pp1.pk_kon_geschaeftspartner = pr.fk_kon_projektpartner_1
 left join v_kon_geschaeftspartner pp2 on pp2.pk_kon_geschaeftspartner = pr.fk_kon_projektpartner_2
;
--------------------------------------------------------
--  DDL for View V_REL_LEX
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REL_LEX" ("PK_REL_LEX_KTO_BEL", "BELEGDAT", "LEX_BELEG", "BETRAGEUR", "BUCHDAT", "NR", "HABENEUR", "JOUR_DAT", "RELATION", "SOLLEUR", "SOLL", "UST", "UST_KTO", "UST_KTO_H", "UST_KTO_S", "PERIODE", "BELEGNR", "BUCHUNGSTEXT", "BETRAG", "WHRG", "SOLLKTO", "HABENKTO", "KST", "KTR", "JAHR", "ABL_ORD_JAHR", "ABL_ORD_J_PAGE_NUMBER", "ABL_ORD_ORDNER_NAME", "ABL_ORD_PAGE_NUMBER", "ABL_ORD_PK_ABL_ORDNER", "ABL_ORD_PK_ABL_ORDNER_PAGE", "ARB_BIS_DATUM", "ARB_BIS_FK_BAS_KAL_ARBEITSTAG", "ARB_BIS_JAHR", "ARB_BIS_MONAT", "ARB_BIS_TAG", "ARB_DATUM", "ARB_FK_BAS_KAL_ARBEITSTAG", "ARB_JAHR", "ARB_MONAT", "ARB_TAG", "ARB_VON_DATUM", "ARB_VON_JAHR", "ARB_VON_MONAT", "ARB_VON_TAG", "BANK", "BEL_DATUM", "BELEG", "BELEGNUMMER", "BELEG_UHRZEIT", "BEL_EX_NAME", "BEL_EX_VALUE", "BEZEICHNUNG", "BIS", "BIS_UHRZEIT", "BRUTTO_BETRAG", "BRUTTO_BETRAG_EUR", "BRUTTO_BETRAG_INCL_TRINKG", "BRUTTO_INCL_TRINKG_EUR", "CI_LAND", "CI_PK_ADR_LAND", "CNT_PUNKTE", "CNT_PUNKTE_GESCHAETZT", "FK_ADR_CITY", "FK_BAS_MON_FRMDW", "FK_BAS_MON_FRMDW_MWST_SATZ", "FK_IMP_BA_BEL_OLD", "FK_INV_INVENTAR", "FK_BAS_KAT_KATEGORIE", "FK_LA_KONTO", "FK_ADR_LAND", "FK_LA_WDH", "FK_LEX_BUCHUNG", "FK_LOC_LOCATION", "FK_LOC_LOCATION_VERG", "FK_PROJ_PROJEKT", "FK_REAL_BELEG_EXIST", "FK_STD_STATUS", "FK_BAS_STEU_STEUER_SATZ", "FK_BAS_MON_UMRECHNUNGSKURS", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_BAS_KAL_VON_ARBEITSTAG", "FK_BAS_MON_WAEHRUNG", "FK_STD_KTO_ZAHLUNGSART", "FRMDW_BRUTTO_BETRAG", "FRMDW_BRUTTO_INCL_TRINKG", "FRMDW_MWST_BETRAG", "FRMDW_NETTO_BETRAG", "IBAN", "INP_BEL_ALL_JAHR", "KTOKAT_KATEGORIE", "KUNDENNUMMER", "LA_DATUM", "LAND", "LA_WDH_NAME", "LA_WDH_VALUE", "LITER", "MENGENEINHEIT", "MWST_BETRAG", "MWST_BETRAG_EUR", "NETTO_BETRAG", "NETTO_BETRAG_EUR", "ORT", "PERSOENLICH_VOR_ORT", "PK_KTO_BANK", "PK_KTO_BANKKONTO", "PK_INP_BELEGE_ALL", "PK_BAS_KAT_KONTO_BUCH", "PK_ADR_LAND", "PK_ADR_ORT", "PK_BAS_VERW_VERWENDUNGSZWECK", "PK_BAS_MON_WAEHRUNG", "PREIS_PRO_MENGE", "PROJ_AUFT_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_AUFT_GESCHAEFTSPARTNER", "PROJ_AUFT_GESCHAEFTSPARTNERTYP", "PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER", "PROJ_AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PROJ_BIS", "PROJ_FK_KON_AUFTRAGGEBER", "PROJ_FK_KON_PROJEKTPARTNER_1", "PROJ_FK_KON_PROJEKTPARTNER_2", "PROJ_KM_GERECHNET", "PROJ_PK_PROJ_PROJEKT", "PROJ_PP1_BESCHREIBUNG", "PROJ_PP1_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP1_GESCHAEFTSPARTNER", "PROJ_PP1_GESCHAEFTSPARTNERTYP", "PROJ_PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PROJ_PP2_FK_BAS_KON_GESCHAEFTSPARTNERTYP", "PROJ_PP2_GESCHAEFTSPARTNER", "PROJ_PP2_GESCHAEFTSPARTNERTYP", "PROJ_PP2_PK_KON_GESCHAEFTSPARTNER", "PROJ_PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT", "PROJ_PROJEKT", "PROJ_PROJEKT_ABGESCHLOSSEN", "PROJ_PROJEKT_ART", "PROJ_PSP_ELEMENT", "PROJ_RECHNUNG_GESTELLT", "PROJ_VON", "PROJ_ZAHLUNG_ABGESCHLOSSEN", "PUNKTE_BIS", "PUNKTE_VON", "STA_NAME", "STA_VALUE", "STEUERNUMMER", "STEU_FRMD_LAND", "STEU_FRMD_PK_ADR_LAND", "STEU_FRMD_PK_BAS_STEUER_SATZ", "STEU_FRMD_STEUERSATZ", "STEU_FRMD_ZUS_ST", "STEU_LAND", "STEU_PK_ADR_LAND", "STEU_PK_BAS_STEUERSATZ", "STEU_STEUERSATZ", "STEU_ZUS_ST", "TANKSTELLEN_NR", "VBEL_ART", "VBEL_BETRAG", "VBEL_BEZEICHNUNG", "VBEL_DATUM", "VBEL_DATUM_VERGEHEN", "VBEL_FK_BAS_KAL_ARBEITSTAG", "VBEL_FK_KTO_BUCHUNG", "VBEL_FK_IMP_BA_BEL", "VBEL_FK_INV_INVENTAR", "VBEL_FK_BAS_KAT_KATEGORIE", "VBEL_FK_PROJ_PROJEKT", "VBEL_INVENTAR", "VBEL_KATEGORIE", "VBEL_KENNZEICHEN", "VBEL_MWST_BETRAG", "VBEL_NETTO", "VBEL_PK_IMP_BA_ALLG_BEL", "VBEL_PROJEKT", "VBEL_STEUERSATZ", "VBEL_VERWENDUNGSZWECK", "VBEL_WAEHRUNG", "VBEL_WAEHRUNG_BETRAG", "VBEL_ZAHLUNGSART", "VERWENDUNGSZWECK", "VLOC_ADR", "VLOC_BESCHREIBUNG", "VLOC_FK_ADR_ADRESSE", "VLOC_FK_BAS_LOC_LOCATION_TYPE", "VLOC_HSNR", "VLOC_LAND", "VLOC_LOCATION", "VLOC_LOCATION_TYPE", "VLOC_ORT", "VLOC_PK_LOC_LOCATION", "VLOC_PLZ", "VLOC_POSTFACH", "VLOC_STRASSE", "VLOC_VERG_ADR", "VLOC_VERG_BESCHREIBUNG", "VLOC_VERG_FK_ADR_ADRESSE", "VLOC_VERG_FK_BAS_LOC_LOCATION_TYPE", "VLOC_VERG_HSNR", "VLOC_VERG_LAND", "VLOC_VERG_LOCATION", "VLOC_VERG_LOCATION_TYPE", "VLOC_VERG_ORT", "VLOC_VERG_PK_LOC_LOCATION", "VLOC_VERG_PLZ", "VLOC_VERG_POSTFACH", "VLOC_VERG_STRASSE", "VON", "VON_UHRZEIT", "WAEHRUNG_LANG", "ZAHL_ART_NAME", "ZAHL_ART_VAL", "ZAHLUNGSBELEG", "ZAPFSAEULE", "FK_MAIN_KEY", "KTO_ID", "Buchungstag", "KTO_BETRAG", "WAEHRUNG", "FREMDWAEHRUNGSBETRAG", "FREMDWAEHRUNG", "KTO_BUCHUNGSTEXT", "FK_BAS_KTO_KONTOTYP", "FK_BAS_KAL_BUCHUNGSTAG", "FK_BAS_KAL_WERTSTELLUNG", "KTO_VERWENDUNGSZWECK", "KTO_KATEGORIE", "BUCHT_TAG", "BUCHT_MONAT", "BUCHT_JAHR", "BUCHT_DATUM", "WERTT_TAG", "WERTT_MONAT", "WERTT_JAHR", "WERTT_DATUM", "KONTOTYP", "FK_KTO_VORGANG", "WIEDERHOLUNG", "NAECHSTE_ZAHLUNG", "FK_BUCHUNG_STEUER", "FK_IMP_BA_BEL", "FK_REL_LEX_KTO_BEL", "STATUS", "FK_BAS_STD_ZAHLUNGSSTATUS", "FK_INP_BELEGE_POS_ALL", "FK_INP_BELEGE_ALL", "FK_LEX_RELATION") AS 
  select 
        pk_rel_lex_kto_bel,
        BELEGDAT,
        lex.BELEG lex_Beleg,
        BETRAGEUR,
        BUCHDAT,
        NR,
        HABENEUR,
        JOUR_DAT,
        RELATION,
        SOLLEUR,
        SOLL,
        UST,
        UST_KTO,
        UST_KTO_H,
        UST_KTO_S,
        PERIODE,
        BELEGNR,
        lex.BUCHUNGSTEXT,
        lex.BETRAG,
        WHRG,
        SOLLKTO,
        HABENKTO,
        KST,
        KTR,
        JAHR,
        ABL_ORD_JAHR,
        ABL_ORD_J_PAGE_NUMBER,
        ABL_ORD_ORDNER_NAME,
        ABL_ORD_PAGE_NUMBER,
        ABL_ORD_PK_ABL_ORDNER,
        ABL_ORD_PK_ABL_ORDNER_PAGE,
        ARB_BIS_DATUM,
        
        ARB_BIS_FK_bas_kal_ARBEITSTAG,
        
        ARB_BIS_JAHR,
        ARB_BIS_MONAT,
        
        ARB_BIS_TAG,
        ARB_DATUM,
        
        ARB_FK_bas_kal_ARBEITSTAG,
        
        ARB_JAHR,
        ARB_MONAT,
        
        ARB_TAG,
        ARB_VON_DATUM,
        
        ARB_VON_JAHR,
        ARB_VON_MONAT,
        
        ARB_VON_TAG,
        kto.BANK,
        BEL_DATUM,
        vinp.BELEG,
        BELEGNUMMER,
        BELEG_UHRZEIT,
        BEL_EX_NAME,
        BEL_EX_VALUE,
        vinp.BEZEICHNUNG,
        BIS,
        BIS_UHRZEIT,
        BRUTTO_BETRAG,
        BRUTTO_BETRAG_EUR,
        BRUTTO_BETRAG_INCL_TRINKG,
        BRUTTO_INCL_TRINKG_EUR,
        CI_LAND,
        CI_PK_adr_LAND,
        vinp.VERG_CNT_PUNKTE,
        vinp.VERG_CNT_PUNKTE_GESCHAETZT,
        
        
        FK_adr_CITY,
        FK_bas_mon_FRMDW,
        FK_bas_mon_FRMDW_MWST_SATZ,
        FK_IMP_BA_BEL_OLD,
        vinp.FK_inv_INVENTAR,
        vinp.FK_bas_kat_KATEGORIE,
        FK_LA_KONTO,
        FK_adr_LAND,
        FK_LA_WDH,
        FK_LEX_BUCHUNG,
        FK_loc_LOCATION,
        FK_loc_LOCATION_VERG,
        vinp.FK_proj_PROJEKT,
        vinp.FK_REAL_BELEG_EXIST,
        FK_bas_std_STATUS,
        FK_bas_steu_STEUER_SATZ,
        FK_bas_mon_UMRECHNUNGSKURS,
        vinp.FK_STD_VERW_VERWENDUNGSZWECK,
        FK_bas_kal_VON_ARBEITSTAG,
        FK_bas_mon_WAEHRUNG,
        FK_std_kto_ZAHLUNGSART,
        FRMDW_BRUTTO_BETRAG,
        FRMDW_BRUTTO_INCL_TRINKG,
        FRMDW_MWST_BETRAG,
        FRMDW_NETTO_BETRAG,
        
        
        kto.IBAN,
        INP_BEL_ALL_JAHR,
        
        KTOKAT_KATEGORIE,
        
        KUNDENNUMMER,
        LA_DATUM,
        LAND,
        LA_WDH_NAME,
        LA_WDH_VALUE,
        LITER,
        MENGENEINHEIT,
        vinp.MWST_BETRAG,
        MWST_BETRAG_EUR,
        NETTO_BETRAG,
        NETTO_BETRAG_EUR,
        ORT,
        PERSoeNLICH_VOR_ORT,
        PK_kto_BANK,
        PK_kto_BANKKONTO,
        PK_INP_BELEGE_ALL,
        PK_bas_kat_kategorie,
        PK_ADR_LAND,
        PK_ADR_ORT,
        PK_bas_std_VERWENDUNGSZWECK,
        PK_bas_mon_WAEHRUNG,
        PREIS_PRO_MENGE,
        
        PROJ_AUFT_FK_bas_kon_GESCHAEFTSPARTNERTYP,
        PROJ_AUFT_GESCHAEFTSPARTNER,
        PROJ_AUFT_GESCHAEFTSPARTNERTYP,
        
        PROJ_AUFT_PK_kon_GESCHAEFTSPARTNER,
        PROJ_AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
        
        PROJ_BIS,
        
        PROJ_FK_kon_AUFTRAGGEBER,
        PROJ_FK_kon_PROJEKTPARTNER_1,
        PROJ_FK_kon_PROJEKTPARTNER_2,
        PROJ_KM_GERECHNET,
        
        PROJ_PK_proj_PROJEKT,
        PROJ_PP1_BESCHREIBUNG,
        PROJ_PP1_FK_bas_kon_GESCHAEFTSPARTNERTYP,
        PROJ_PP1_GESCHAEFTSPARTNER,
        PROJ_PP1_GESCHAEFTSPARTNERTYP,
        
        PROJ_PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
        
        PROJ_PP2_FK_bas_kon_GESCHAEFTSPARTNERTYP,
        PROJ_PP2_GESCHAEFTSPARTNER,
        PROJ_PP2_GESCHAEFTSPARTNERTYP,
        
        PROJ_PP2_PK_kon_GESCHAEFTSPARTNER,
        PROJ_PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
        
        PROJ_PROJEKT,
        PROJ_PROJEKT_ABGESCHLOSSEN,
        PROJ_PROJEKT_ART,
        PROJ_PSP_ELEMENT,
        PROJ_RECHNUNG_GESTELLT,
        PROJ_VON,
        PROJ_ZAHLUNG_ABGESCHLOSSEN,
        VERG_PUNKTE_BIS,
        VERG_PUNKTE_VON,
        STA_NAME,
        STA_VALUE,
        STEUERNUMMER,
        STEU_FRMD_LAND,
        STEU_FRMD_PK_adr_LAND,
        STEU_FRMD_PK_bas_steu_STEUER_SATZ,
        STEU_FRMD_STEUERSATZ,
        STEU_FRMD_ZUS_ST,
        STEU_LAND,
        STEU_PK_adr_LAND,
        STEU_PK_bas_steu_STEUER_SATZ,
        STEU_STEUERSATZ,
        STEU_ZUS_ST,
        TANKSTELLEN_NR,
        VBEL_ART,
        VBEL_BETRAG,
        VBEL_BEZEICHNUNG,
        
        VBEL_DATUM,
        VBEL_DATUM_VERGEHEN,
        VBEL_FK_bas_kal_ARBEITSTAG,
        
        VBEL_FK_kto_BUCHUNG,
        VBEL_FK_IMP_BA_BEL,
        VBEL_FK_inv_INVENTAR,
        VBEL_FK_bas_kat_KATEGORIE,
        VBEL_FK_proj_PROJEKT,
        VBEL_INVENTAR,
        VBEL_KATEGORIE,
        VBEL_KENNZEICHEN,
        VBEL_MWST_BETRAG,
        VBEL_NETTO,
        VBEL_PK_IMP_BA_ALLG_BEL,
        VBEL_PROJEKT,
        VBEL_STEUERSATZ,
        VBEL_VERWENDUNGSZWECK,
        VBEL_WaeHRUNG,
        VBEL_WaeHRUNG_BETRAG,
        VBEL_ZAHLUNGSART,
        
        vinp.VERWENDUNGSZWECK,
        VLOC_ADR,
        VLOC_BESCHREIBUNG,
        
        VLOC_FK_adr_ADRESSE,
        VLOC_FK_bas_loc_LOCATION_TYPE,
        VLOC_HSNR,
        VLOC_LAND,
        VLOC_LOCATION,
        VLOC_LOCATION_TYPE,
        
        VLOC_ORT,
        VLOC_PK_loc_LOCATION,
        VLOC_PLZ,
        VLOC_POSTFACH,
        VLOC_STRASSE,
        VLOC_VERG_ADR,
        VLOC_VERG_BESCHREIBUNG,
        
        VLOC_VERG_FK_adr_ADRESSE,
        VLOC_VERG_FK_bas_loc_LOCATION_TYPE,
        VLOC_VERG_HSNR,
        VLOC_VERG_LAND,
        VLOC_VERG_LOCATION,
        VLOC_VERG_LOCATION_TYPE,
        
        VLOC_VERG_ORT,
        VLOC_VERG_PK_loc_LOCATION,
        VLOC_VERG_PLZ,
        VLOC_VERG_POSTFACH,
        VLOC_VERG_STRASSE,
        VON,
        VON_UHRZEIT,
     --   WAEHRUNG,
        WAEHRUNG_LANG,
        
        ZAHL_ART_NAME,
        ZAHL_ART_VAL,
        ZAHLUNGSBELEG,
        ZAPFSaeULE,
        kto.FK_MAIN_KEY, kto.ID kto_id, kto."Buchungstag",
        kto."Betrag" kto_betrag, 
        kto.Waehrung, 
        kto.Fremdwaehrungsbetrag, kto.Fremdwaehrung, kto.BUCHUNGSTEXT kto_buchungstext, 
       -- FK_bas_Kategorie, 
       -- FK_bas_Verwendungszweck,
        FK_std_kto_Kontotyp, 
        FK_bas_kal_BUCHUNGSTAG, 
        FK_bas_kal_WERTSTELLUNG, 
        kto.VERWENDUNGSZWECK kto_verwendungszweck, kto.KATEGORIE kto_kategorie, BUCHT_TAG, BUCHT_MONAT, 
        BUCHT_JAHR, BUCHT_DATUM, WERTT_TAG, WERTT_MONAT, WERTT_JAHR, 
        WERTT_DATUM, Kontotyp, FK_KTO_VORGANG, WIEDERHOLUNG,
        NAECHSTE_ZAHLUNG, FK_BUCHUNG_STEUER,
        rel.fk_imp_ba_bel,
        rel.fk_rel_lex_kto_bel,
        lex.status,
        vinp.fk_std_inp_zahlungsstatus,
        rel.fk_inp_belege_pos_all,
        rel.fk_inp_belege_all,
        rel.fk_lex_relation
from t_rel_lex_kto_bel rel
  left join (
                select
                        BELEGDAT,
                        BELEG,
                        BETRAGEUR,
                        BUCHDAT,
                        NR,
                        HABENEUR,
                        JOUR_DAT,
                        RELATION,
                        SOLLEUR,
                        SOLL,
                        UST,
                        UST_KTO,
                        UST_KTO_H,
                        UST_KTO_S,
                        PERIODE,
                        BELEGNR,
                        BUCHUNGSTEXT,
                        BETRAG,
                        WHRG,
                        SOLLKTO,
                        HABENKTO,
                        KST,
                        KTR,
                        JAHR,
                        JAHR_BELEG,
                        Status
                        
                    

                from   t_lex_long 
                ) lex on rel.fk_lex_relation = lex.relation
   left join v_kto_konten_zus kto on kto.fk_main_key = rel.fk_main_key
   left join v_imp_bel_zus bel on bel.fk_imp_ba_bel = rel.fk_imp_ba_bel
   left join (
                select
                   ABL_ORD_JAHR,
                ABL_ORD_J_PAGE_NUMBER,
                ABL_ORD_ORDNER_NAME,
                ABL_ORD_PAGE_NUMBER,
                ABL_ORD_PK_ABL_ORDNER,
                ABL_ORD_PK_ABL_ORDNER_PAGE,
                ARB_BIS_DATUM,
                
                ARB_BIS_FK_bas_kal_ARBEITSTAG,
                
                ARB_BIS_JAHR,
                ARB_BIS_MONAT,
                
                ARB_BIS_TAG,
                ARB_DATUM,
                
                ARB_FK_bas_kal_ARBEITSTAG,
                
                ARB_JAHR,
                ARB_MONAT,
                
                ARB_TAG,
                ARB_VON_DATUM,
                
                ARB_VON_JAHR,
                ARB_VON_MONAT,
                
                ARB_VON_TAG,
                BANK,
                BEL_DATUM,
                BELEG,
                BELEGNUMMER,
                BELEG_UHRZEIT,
                BEL_EX_NAME,
                BEL_EX_VALUE,
                BEZEICHNUNG,
                BIS,
                BIS_UHRZEIT,
                BRUTTO_BETRAG,
                BRUTTO_BETRAG_EUR,
                BRUTTO_BETRAG_INCL_TRINKG,
                BRUTTO_INCL_TRINKG_EUR,
                CI_LAND,
                CI_PK_adr_LAND,
                VERG_CNT_PUNKTE,
                VERG_CNT_PUNKTE_GESCHAETZT,
                
                
                FK_adr_CITY,
                FK_bas_mon_FRMDW,
                FK_bas_mon_FRMDW_MWST_SATZ,
                FK_IMP_BA_BEL_OLD,
                FK_inv_INVENTAR,
                FK_bas_kat_KATEGORIE,
                FK_LA_KONTO,
                FK_adr_LAND,
                FK_LA_WDH,
                FK_LEX_BUCHUNG,
                FK_loc_LOCATION,
                FK_loc_LOCATION_VERG,
                FK_proj_PROJEKT,
                FK_REAL_BELEG_EXIST,
                FK_bas_std_STATUS,
                FK_bas_steu_STEUER_SATZ,
                FK_bas_mon_UMRECHNUNGSKURS,
                FK_STD_VERW_VERWENDUNGSZWECK,
                FK_bas_kal_VON_ARBEITSTAG,
                FK_bas_mon_WAEHRUNG,
                FK_std_kto_ZAHLUNGSART,
                FRMDW_BRUTTO_BETRAG,
                FRMDW_BRUTTO_INCL_TRINKG,
                FRMDW_MWST_BETRAG,
                FRMDW_NETTO_BETRAG,
                
                
                IBAN,
                INP_BEL_ALL_JAHR,
                
                KTOKAT_KATEGORIE,
                
                KUNDENNUMMER,
                LA_DATUM,
                LAND,
                LA_WDH_NAME,
                LA_WDH_VALUE,
                LITER,
                MENGENEINHEIT,
                MWST_BETRAG,
                MWST_BETRAG_EUR,
                NETTO_BETRAG,
                NETTO_BETRAG_EUR,
                ORT,
                PERSoeNLICH_VOR_ORT,
                PK_kto_BANK,
                PK_kto_BANKKONTO,
                PK_INP_BELEGE_ALL,
                PK_bas_KAT_KATEGORIE,
                PK_adr_LAND,
                PK_adr_oRT,
                PK_bas_std_VERWENDUNGSZWECK,
                PK_bas_mon_WAEHRUNG,
                PREIS_PRO_MENGE,
                
                PROJ_AUFT_FK_bas_kon_GESCHAEFTSPARTNERTYP,
                PROJ_AUFT_GESCHAEFTSPARTNER,
                PROJ_AUFT_GESCHAEFTSPARTNERTYP,
                
                PROJ_AUFT_PK_kon_GESCHAEFTSPARTNER,
                PROJ_AUFT_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
                
                PROJ_BIS,
                
                PROJ_FK_kon_AUFTRAGGEBER,
                PROJ_FK_kon_PROJEKTPARTNER_1,
                PROJ_FK_kon_PROJEKTPARTNER_2,
                PROJ_KM_GERECHNET,
                
                PROJ_PK_proj_PROJEKT,
                PROJ_PP1_BESCHREIBUNG,
                PROJ_PP1_FK_bas_kon_GESCHAEFTSPARTNERTYP,
                PROJ_PP1_GESCHAEFTSPARTNER,
                PROJ_PP1_GESCHAEFTSPARTNERTYP,
                
                PROJ_PP1_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
                
                PROJ_PP2_FK_bas_kon_GESCHAEFTSPARTNERTYP,
                PROJ_PP2_GESCHAEFTSPARTNER,
                PROJ_PP2_GESCHAEFTSPARTNERTYP,
                
                PROJ_PP2_PK_kon_GESCHAEFTSPARTNER,
                PROJ_PP2_PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT,
                
                PROJ_PROJEKT,
                PROJ_PROJEKT_ABGESCHLOSSEN,
                PROJ_PROJEKT_ART,
                PROJ_PSP_ELEMENT,
                PROJ_RECHNUNG_GESTELLT,
                PROJ_VON,
                PROJ_ZAHLUNG_ABGESCHLOSSEN,
                VERG_PUNKTE_BIS,
                VERG_PUNKTE_VON,
                STA_NAME,
                STA_VALUE,
                STEUERNUMMER,
                STEU_FRMD_LAND,
                STEU_FRMD_PK_adr_LAND,
                STEU_FRMD_PK_bas_steu_STEUER_SATZ,
                STEU_FRMD_STEUERSATZ,
                STEU_FRMD_ZUS_ST,
                STEU_LAND,
                STEU_PK_adr_LAND,
                STEU_PK_bas_steu_STEUER_SATZ,
                STEU_STEUERSATZ,
                STEU_ZUS_ST,
                TANKSTELLEN_NR,
                VBEL_ART,
                VBEL_BETRAG,
                VBEL_BEZEICHNUNG,
                
                VBEL_DATUM,
                VBEL_DATUM_VERGEHEN,
                VBEL_FK_bas_kal_ARBEITSTAG,
                
                VBEL_FK_kto_BUCHUNG,
                VBEL_FK_IMP_BA_BEL,
                VBEL_FK_inv_INVENTAR,
                VBEL_FK_bas_kat_KATEGORIE,
                VBEL_FK_proj_PROJEKT,
                VBEL_INVENTAR,
                VBEL_KATEGORIE,
                VBEL_KENNZEICHEN,
                VBEL_MWST_BETRAG,
                VBEL_NETTO,
                VBEL_PK_IMP_BA_ALLG_BEL,
                VBEL_PROJEKT,
                VBEL_STEUERSATZ,
                VBEL_VERWENDUNGSZWECK,
                VBEL_WAEHRUNG,
                VBEL_WAEHRUNG_BETRAG,
                VBEL_ZAHLUNGSART,
                
                VERWENDUNGSZWECK,
                VLOC_ADR,
                VLOC_BESCHREIBUNG,
                
                VLOC_FK_ADR_ADRESSE,
                VLOC_FK_BAS_loc_LOCATION_TYPE,
                VLOC_HSNR,
                VLOC_LAND,
                VLOC_LOCATION,
                VLOC_LOCATION_TYPE,
                
                VLOC_ORT,
                VLOC_PK_loc_LOCATION,
                VLOC_PLZ,
                VLOC_POSTFACH,
                VLOC_STRASSE,
                VLOC_VERG_ADR,
                VLOC_VERG_BESCHREIBUNG,
                
                VLOC_VERG_FK_adr_ADRESSE,
                VLOC_VERG_FK_bas_loc_LOCATION_TYPE,
                VLOC_VERG_HSNR,
                VLOC_VERG_LAND,
                VLOC_VERG_LOCATION,
                VLOC_VERG_LOCATION_TYPE,
                
                VLOC_VERG_ORT,
                VLOC_VERG_PK_loc_LOCATION,
                VLOC_VERG_PLZ,
                VLOC_VERG_POSTFACH,
                VLOC_VERG_STRASSE,
                VON,
                VON_UHRZEIT,
                WAEHRUNG,
                WAEHRUNG_LANG,
                
                ZAHL_ART_NAME,
                ZAHL_ART_VAL,
                ZAHLUNGSBELEG,
                ZAPFSAEULE ,
                fk_std_inp_zahlungsstatus
                
            from v_inp_belege_all
        ) vinp on vinp.pk_inp_belege_all = rel.fk_inp_belege_all
;
--------------------------------------------------------
--  DDL for View V_REL_LEX_KTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REL_LEX_KTO" ("FK_MAIN_KEY", "ID", "Buchungstag", "Betrag", "WAEHRUNG", "FREMDWAEHRUNGSBETRAG", "FREMDWAEHRUNG", "BUCHUNGSTEXT", "FK_BAS_KAT_KATEGORIE", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_BAS_KTO_KONTOTYP", "FK_BAS_KAL_BUCHUNGSTAG", "FK_BAS_KAL_WERTSTELLUNG", "VERWENDUNGSZWECK", "KATEGORIE", "BUCHT_TAG", "BUCHT_MONAT", "BUCHT_JAHR", "BUCHT_DATUM", "WERTT_TAG", "WERTT_MONAT", "WERTT_JAHR", "WERTT_DATUM", "KONTOTYP", "FK_KTO_VORGANG", "WIEDERHOLUNG", "NAECHSTE_ZAHLUNG", "FK_BUCHUNG_STEUER", "FK_MAIN_KEY_SUB", "BUCHUNGSTAG_SUB", "BUCHUNGSTEXT_SUB", "KONTOTYP_SUB", "WERT_SUB", "WERT_MAIN") AS 
  select 
kto_zus_Main."FK_MAIN_KEY",
kto_zus_Main."ID",
kto_zus_Main."Buchungstag",
kto_zus_Main."Betrag",kto_zus_Main.Waehrung,
kto_zus_Main.Fremdwaehrungsbetrag,
kto_zus_Main.Fremdwaehrung,
kto_zus_Main."BUCHUNGSTEXT",
kto_zus_Main.FK_BAS_kat_Kategorie,
kto_zus_Main.FK_STD_VERW_VERWENDUNGSZWECK,
kto_zus_Main.FK_STD_KTO_KONTOTYP, --FK_bas_kto_Kontotyp,
kto_zus_Main.FK_bas_kal_BUCHUNGSTAG,
kto_zus_Main.FK_bas_kal_WERTSTELLUNG,
kto_zus_Main."VERWENDUNGSZWECK",
kto_zus_Main."KATEGORIE",
kto_zus_Main."BUCHT_TAG",
kto_zus_Main."BUCHT_MONAT",
kto_zus_Main."BUCHT_JAHR",
kto_zus_Main."BUCHT_DATUM",
kto_zus_Main."WERTT_TAG",
kto_zus_Main."WERTT_MONAT",
kto_zus_Main."WERTT_JAHR",
kto_zus_Main."WERTT_DATUM",
kto_zus_Main.Kontotyp,kto_zus_Main."FK_KTO_VORGANG",kto_zus_Main."WIEDERHOLUNG",
kto_zus_Main."NAECHSTE_ZAHLUNG",kto_zus_Main."FK_BUCHUNG_STEUER", 
 kto_zus_sub.fk_main_key fk_main_key_sub, kto_zus_sub."Buchungstag" Buchungstag_sub,
 kto_zus_sub.Buchungstext buchungstext_sub, kto_zus_sub.Kontotyp kontotyp_sub,
round(kto_zus_sub."Betrag",2) wert_sub,
round(kto_zus_main."Betrag",2) wert_main

 from v_kto_konten_zus kto_zus_main
 left join t_rel_kto_kont_BUCH_KONT_BUCH REL_KTO on rel_kto.fk_kto_konto_buch1 = kto_zus_main.fk_main_key
 left join v_kto_konten_zus kto_zus_sub on rel_kto.fk_kto_konto_buch2 = kto_zus_sub.fk_main_key

;
--------------------------------------------------------
--  DDL for View V_REL_LEX_KTO_BEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REL_LEX_KTO_BEL" ("FK_MAIN_KEY", "FK_INP_BELEGE_ALL", "CNT_FK_LEX_RELATION") AS 
  select distinct  fk_main_key, fk_inp_belege_all, sum(case when fk_lex_relation is null then 0 else 1 end) over (partition by  fk_main_key, fk_inp_belege_all) cnt_fk_lex_relation 
from t_rel_lex_kto_bel
;
--------------------------------------------------------
--  DDL for View V_REL_LEX_REL_BEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REL_LEX_REL_BEL" ("FK_LEX_RELATION", "FK_INP_BELEGE_ALL", "CNT_FK_MAIN_KEY") AS 
  select distinct fk_lex_relation, fk_inp_belege_all, sum(case when fk_main_key is null then 0 else 1 end) over (partition by  fk_lex_relation, fk_inp_belege_all) cnt_fk_main_key 
from t_rel_lex_kto_bel
;
--------------------------------------------------------
--  DDL for View V_REL_LEX_REL_KTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REL_LEX_REL_KTO" ("FK_LEX_RELATION", "FK_MAIN_KEY", "CNT_INP_BELEGE_ALL", "BELEGDAT", "ABSCHLUSS", "BELEG", "BENUTZER", "BETRAGDM", "BETRAGEUR", "BUCHDAT", "NR", "HABENDM", "HABENEUR", "HABEN", "JOUR_DAT", "RELATION", "SOLLDM", "SOLLEUR", "SOLL", "SPERRE", "STAPEL", "STATUS", "STATUS_DAT", "UST_H_DM", "UST_H_EUR", "UST_HABEN", "UST_S_DM", "UST_S_EUR", "UST_SOLL", "UST_DM", "UST_EUR", "UST", "UST_KTO", "UST_KTO_H", "UST_KTO_S", "UST_PROZ", "UST_TEXT", "PERIODE", "BELEGNR", "BUCHUNGSTEXT", "BETRAG", "WHRG", "SOLLKTO", "HABENKTO", "ZUSATZANG", "NOTIZ", "KST", "KTR", "JAHR", "JAHR_BELEG", "STATUS_S1", "STATUS_S0", "FK_REL_LEX_KTO_BEL") AS 
  select distinct kto_bel.fk_lex_relation,
             kto_bel.fk_main_key, 
             sum(case when fk_inp_belege_all is null then 0 else 1 end) over (partition by  kto_bel.fk_lex_relation, kto_bel.fk_main_key) cnt_inp_belege_all , 
             lexl."BELEGDAT",lexl."ABSCHLUSS",lexl."BELEG",lexl."BENUTZER",lexl."BETRAGDM",lexl."BETRAGEUR",lexl."BUCHDAT",
             lexl."NR",lexl."HABENDM",lexl."HABENEUR",lexl."HABEN",lexl."JOUR_DAT",lexl."RELATION",lexl."SOLLDM",lexl."SOLLEUR",lexl."SOLL",
             lexl."SPERRE",lexl."STAPEL",lexl."STATUS",lexl."STATUS_DAT",lexl."UST_H_DM",lexl."UST_H_EUR",lexl."UST_HABEN",lexl."UST_S_DM",lexl."UST_S_EUR",
             lexl."UST_SOLL",lexl."UST_DM",lexl."UST_EUR",lexl."UST",lexl."UST_KTO",lexl."UST_KTO_H",lexl."UST_KTO_S",lexl."UST_PROZ",lexl."UST_TEXT",
             lexl."PERIODE",lexl."BELEGNR",lexl."BUCHUNGSTEXT",lexl."BETRAG",lexl."WHRG",lexl."SOLLKTO",lexl."HABENKTO",lexl."ZUSATZANG",lexl."NOTIZ",lexl."KST",lexl."KTR",lexl."JAHR",lexl."JAHR_BELEG",
            -- kto_zus.*,
           case when status is not null then 1 else 0 end status_s1, 
           case when status is null  and fk_lex_relation is not null then 1 else 0 end status_s0,
           fk_rel_lex_kto_bel
from t_rel_lex_kto_bel kto_bel
        left join t_lex_long lexl on kto_bel.fk_lex_relation = lexl.relation
        left join v_kto_konten_zus  kto_zus on kto_zus.fk_main_key = kto_bel.fk_main_key
;
--------------------------------------------------------
--  DDL for View V_REL_LEX1
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REL_LEX1" ("PK_REL_LEX_KTO_BEL") AS 
  select 
        pk_rel_lex_kto_bel
        
from t_rel_lex_kto_bel rel
  left join (
                select
                        BELEGDAT,
                        BELEG,
                        BETRAGEUR,
                        BUCHDAT,
                        NR,
                        HABENEUR,
                        JOUR_DAT,
                        RELATION,
                        SOLLEUR,
                        SOLL,
                        UST,
                        UST_KTO,
                        UST_KTO_H,
                        UST_KTO_S,
                        PERIODE,
                        BELEGNR,
                        BUCHUNGSTEXT,
                        BETRAG,
                        WHRG,
                        SOLLKTO,
                        HABENKTO,
                        KST,
                        KTR,
                        JAHR,
                        JAHR_BELEG,
                        Status
                        
                    

                from   t_lex_long
                ) lex on rel.fk_lex_relation = lex.relation
   left join v_kto_konten_zus kto on kto.fk_main_key = rel.fk_main_key
   left join v_imp_bel_zus bel on bel.fk_imp_ba_bel = rel.fk_imp_ba_bel
   left join (
                select
                  ABL_ORD_JAHR,
                ABL_ORD_J_PAGE_NUMBER,
                ABL_ORD_ORDNER_NAME,
                ABL_ORD_PAGE_NUMBER,
                ABL_ORD_PK_ABL_ORDNER,
                ABL_ORD_PK_ABL_ORDNER_PAGE,
                ARB_BIS_DATUM,
                
                ARB_BIS_FK_BAS_kal_ARBEITSTAG,
                
                ARB_BIS_JAHR,
                ARB_BIS_MONAT,
                
                ARB_BIS_TAG,
                ARB_DATUM,
                
                ARB_FK_BAS_kal_ARBEITSTAG,
                
                ARB_JAHR,
                ARB_MONAT,
                
                ARB_TAG,
                ARB_VON_DATUM,
                
                ARB_VON_JAHR,
                ARB_VON_MONAT,
                
                ARB_VON_TAG,
                BANK,
                BEL_DATUM,
                BELEG,
                BELEGNUMMER,
                BELEG_UHRZEIT,
                BEL_EX_NAME,
                BEL_EX_VALUE,
                BEZEICHNUNG,
                BIS,
                BIS_UHRZEIT,
                BRUTTO_BETRAG,
                BRUTTO_BETRAG_EUR,
                BRUTTO_BETRAG_INCL_TRINKG,
                BRUTTO_INCL_TRINKG_EUR,
                CI_LAND,
                CI_PK_ADR_LAND,
                CNT_PUNKTE,
                CNT_PUNKTE_GESCHAETZT,
                
                
                FK_ADR_CITY,
                FK_BAS_MON_FRMDW,
                FK_BAS_MON_FRMDW_MWST_SATZ,
                FK_IMP_BA_BEL_OLD,
                FK_INV_INVENTAR,
                FK_BAS_KAT_KATEGORIE,
                FK_LA_KONTO,
                FK_ADR_LAND,
                FK_LA_WDH,
                FK_LEX_BUCHUNG,
                FK_LOC_LOCATION,
                FK_LOC_LOCATION_VERG,
                FK_PROJ_PROJEKT,
                FK_REAL_BELEG_EXIST,
                FK_bas_STD_STATUS,
                FK_BAS_steu_STEUER_SATZ,
                FK_BAS_MON_UMRECHNUNGSKURS,
                FK_STD_VERW_VERWENDUNGSZWECK,
                FK_BAS_kal_VON_ARBEITSTAG,
                FK_BAS_mon_WAEHRUNG,
                FK_bas_STD_ZAHLUNGSART,
                FRMDW_BRUTTO_BETRAG,
                FRMDW_BRUTTO_INCL_TRINKG,
                FRMDW_MWST_BETRAG,
                FRMDW_NETTO_BETRAG,
                
                
                IBAN,
                INP_BEL_ALL_JAHR,
                
                KTOKAt_KATEGORIE,
                
                KUNDENNUMMER,
                LA_DATUM,
                LAND,
                LA_WDH_NAME,
                LA_WDH_VALUE,
                LITER,
                MENGENEINHEIT,
                MWST_BETRAG,
                MWST_BETRAG_EUR,
                NETTO_BETRAG,
                NETTO_BETRAG_EUR,
                ORT,
                PERSOENLICH_VOR_ORT,
                PK_KTO_BANK,
                PK_KTO_BANKKONTO,
                PK_INP_BELEGE_ALL,
                PK_BAS_KAT_KONTO_BUCH,
                PK_ADR_LAND,
                PK_ADR_ORT,
                PK_BAS_std_VERWENDUNGSZWECK,
                PK_BAS_mon_WAEHRUNG,
                PREIS_PRO_MENGE,
                
                PROJ_AUFT_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
                PROJ_AUFT_GESCHAEFTSPARTNER,
                PROJ_AUFT_GESCHAEFTSPARTNERTYP,
                
                PROJ_AUFT_PK_KON_GESCHAEFTSPARTNER,
                PROJ_AUFT_PK_REL_GP_KONT,
                
                PROJ_BIS,
                
                PROJ_FK_KON_AUFTRAGGEBER,
                PROJ_FK_KON_PROJEKTPARTNER_1,
                PROJ_FK_KON_PROJEKTPARTNER_2,
                PROJ_KM_GERECHNET,
                
                PROJ_PK_PROJ_PROJEKT,
                PROJ_PP1_BESCHREIBUNG,
                PROJ_PP1_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
                PROJ_PP1_GESCHAEFTSPARTNER,
                PROJ_PP1_GESCHAEFTSPARTNERTYP,
                
                PROJ_PP1_PK_REL_GP_KONT,
                
                PROJ_PP2_FK_BAS_kon_GESCHAEFTSPARTNERTYP,
                PROJ_PP2_GESCHAEFTSPARTNER,
                PROJ_PP2_GESCHAEFTSPARTNERTYP,
                
                PROJ_PP2_PK_KON_GESCHAEFTSPARTNER,
                PROJ_PP2_PK_REL_GP_KONT,
                
                PROJ_PROJEKT,
                PROJ_PROJEKT_ABGESCHLOSSEN,
                PROJ_PROJEKT_ART,
                PROJ_PSP_ELEMENT,
                PROJ_RECHNUNG_GESTELLT,
                PROJ_VON,
                PROJ_ZAHLUNG_ABGESCHLOSSEN,
                PUNKTE_BIS,
                PUNKTE_VON,
                STA_NAME,
                STA_VALUE,
                STEUERNUMMER,
                STEU_FRMD_LAND,
                STEU_FRMD_PK_ADR_LAND,
                STEU_FRMD_PK_BAS_STEU_STEUER_SATZ,
                STEU_FRMD_STEUERSATZ,
                STEU_FRMD_ZUS_ST,
                STEU_LAND,
                STEU_PK_ADR_LAND,
                STEU_PK_BAS_steu_STEUER_SATZ,
                STEU_STEUERSATZ,
                STEU_ZUS_ST,
                TANKSTELLEN_NR,
                VBEL_ART,
                VBEL_BETRAG,
                VBEL_BEZEICHNUNG,
                
                VBEL_DATUM,
                VBEL_DATUM_VERGEHEN,
                VBEL_FK_BAS_kal_ARBEITSTAG,
                
                VBEL_FK_KTO_BUCHUNG,
                VBEL_FK_IMP_BA_BEL,
                VBEL_FK_INV_INVENTAR,
                VBEL_FK_BAS_kat_KATEGORIE,
                VBEL_FK_PROJ_PROJEKT,
                VBEL_INVENTAR,
                VBEL_KATEGORIE,
                VBEL_KENNZEICHEN,
                VBEL_MWST_BETRAG,
                VBEL_NETTO,
                VBEL_PK_IMP_BA_ALLG_BEL,
                VBEL_PROJEKT,
                VBEL_STEUERSATZ,
                VBEL_VERWENDUNGSZWECK,
                VBEL_WAEHRUNG,
                VBEL_WAEHRUNG_BETRAG,
                VBEL_ZAHLUNGSART,
                
                VERWENDUNGSZWECK,
                VLOC_ADR,
                VLOC_BESCHREIBUNG,
                
                VLOC_FK_ADR_ADRESSE,
                VLOC_FK_BAS_loc_LOCATION_TYPE,
                VLOC_HSNR,
                VLOC_LAND,
                VLOC_LOCATION,
                VLOC_LOCATION_TYPE,
                
                VLOC_ORT,
                VLOC_PK_loc_LOCATION,
                VLOC_PLZ,
                VLOC_POSTFACH,
                VLOC_STRASSE,
                VLOC_VERG_ADR,
                VLOC_VERG_BESCHREIBUNG,
                
                VLOC_VERG_FK_ADR_ADRESSE,
                VLOC_VERG_FK_BAS_loc_LOCATION_TYPE,
                VLOC_VERG_HSNR,
                VLOC_VERG_LAND,
                VLOC_VERG_LOCATION,
                VLOC_VERG_LOCATION_TYPE,
                
                VLOC_VERG_ORT,
                VLOC_VERG_PK_loc_LOCATION,
                VLOC_VERG_PLZ,
                VLOC_VERG_POSTFACH,
                VLOC_VERG_STRASSE,
                VON,
                VON_UHRZEIT,
                WAEHRUNG,
                WAEHRUNG_LANG,
                
                ZAHL_ART_NAME,
                ZAHL_ART_VAL,
                ZAHLUNGSBELEG,
                ZAPFSAEULE ,
                fk_bas_std_zahlstatus
                
            from v_inp_belege_all
        ) vinp on vinp.pk_inp_belege_all = rel.fk_inp_belege_all
;
--------------------------------------------------------
--  DDL for View V_REP_AHNENTAFEL_DISP
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REP_AHNENTAFEL_DISP" ("NR_LEV", "TR", "TD", "AUSFÜHRUNG", "FK_PERS") AS 
  with tg as (
                select 
                  at.lev
                  , at.nr_lev
                  , at.fk_eltern
                  , at.fk_kind
                  --, at.anfangstag  || nvl(pers, at.fk_eltern) || at.endtag as td 
                  , at.anfangstag  || at.endtag as td 
                  , at.fk_pers
                  , at.ausführung
                from ahnentafel at 
                  /*
				  left join V_REP_AHNENTAFEL vat on (
                                                      at.pk_ahnentafel = vat.pk_ahnentafel 
                                                      and at.fk_pers = vat.fk_pers
                                                      and at.ausführung = vat.ausführung
                                                      and at.lev <> -1 
                                                      and at.nr_lev <>0
                                                    ) 
													*/
                where at.anfangstag is not null
            )
select nr_lev
 , '<tr>' ||  listagg(td,'') within group (order by lev,nr_lev) || '</tr>' tr
 , listagg(td,'') within group (order by lev) td
 , ausführung
 , fk_pers
from tg
group by nr_lev, ausführung, fk_pers
order by nr_lev

;
--------------------------------------------------------
--  DDL for View V_REP_CONTR_FOTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_REP_CONTR_FOTO" ("PK_PERSON", "NAME", "VORNAME", "FK_BILD") AS 
  with pb as ( select * from person_bild where fk_bild <> 81)
  select pk_person, name, vorname, fk_bild
from person p
  left join  pb on p.pk_person = pb.fk_person
;
--------------------------------------------------------
--  DDL for View V_RE_RATIO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_RE_RATIO" ("RECHNUNGSDATUM", "FK_PROJ_PROJEKT", "RECHNUNGSBETRAG_NETTO", "ANTEIL_UMSATZ", "SUM_UMSATZ", "SUM_WERT", "SUM_WERT2", "SUM_WERT1") AS 
  select 
rechnungsdatum, 
 fk_proj_projekt, 
rechnungsbetrag_netto,
 RATIO_TO_REPORT(rechnungsbetrag_netto) over (partition by fk_proj_projekt) * 100 as ANTEIL_UMSATZ
,  SUM(rechnungsbetrag_netto) over (partition by fk_proj_projekt order by fk_proj_projekt rows between unbounded preceding and current row) as SUM_UMSATZ
, sum(rechnungsbetrag_netto) over(order by fk_proj_projekt) sum_wert
, sum(rechnungsbetrag_netto) over(order by rownum) sum_wert2
, sum(rechnungsbetrag_netto) over(order by rownum, fk_proj_projekt) sum_wert1
from t_re_rechnung
order by rechnungsdatum, fk_proj_projekt
;
--------------------------------------------------------
--  DDL for View V_RE_RENR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_RE_RENR" ("TP", "JA", "LETZTE_NR", "NEUE_NR", "NEUE_RENR") AS 
  select tp, ja, letzte_nr, neue_nr, tp || '-' || neue_nr || '-MON-' || ja || '-VW=>PROJ' neue_renr
from (
select tp,  ja, max(nr) letzte_nr, max(nr) +1 neue_nr
from (select *
from (with stri as (select pk_re_rechnung, level lev, regexp_substr(rechnungsnummer,'[^-]+', 1, level) str from t_re_rechnung 
    connect by  regexp_substr(rechnungsnummer, '[^-]+', 1, level) is not null)
select lev, str, pk_re_rechnung
from stri
group by lev, str, pk_re_rechnung)
pivot (max(str) for (lev) in (1 as tp,2 as nr,3 as mon,4 as ja,5)))
group by tp, ja)
;
--------------------------------------------------------
--  DDL for View V_ROLLUP
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_ROLLUP" ("RECHNUNGSDATUM", "SUM_RECH", "AVG_RECH", "MIN_RECH", "MAX_RECH") AS 
  select 
rechnungsdatum, sum(rechnungsbetrag_netto) sum_rech, avg(rechnungsbetrag_netto) avg_rech, min(rechnungsbetrag_netto) min_rech, max(rechnungsbetrag_netto) max_rech
from t_re_rechnung
group by rollup (rechnungsdatum)
order by 1
;
--------------------------------------------------------
--  DDL for View V_STEU_STEUER_DATUM_OK
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_STEU_STEUER_DATUM_OK" ("KONTONUMMER", "CNT", "CNT_DATUM_STEUER_OK", "DIFF_DATUM_STEUER_OK", "JAHR") AS 
  select kontonummer, count(*) cnt,  sum(case when datum_steuer_ok is not null then 1 else 0 end) cnt_datum_steuer_ok,count(*)- sum(case when datum_steuer_ok is not null then 1 else 0 end)  diff_datum_steuer_ok , jahr from t_lex_kontenblatt group by kontonummer, jahr
;
--------------------------------------------------------
--  DDL for View V_STEU_STEUER_GES
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_STEU_STEUER_GES" ("SRT", "POS", "KATEGORIE", "BETRAG", "JAHR", "MONAT") AS 
  With zeitr as (select * from dual),

ein as (

        select 
            100 srt, 
            'Einnahmen' Pos,
            null Kategorie, 
            sum(rechnungsbetrag_brutto) Betrag, 
            to_char(zahlungseingang,'YYYY') jahr, 
            to_char(to_number(to_char(zahlungseingang,'MM'))) monat 
        from t_re_rechnung 
        where fk_std_re_rechnungstyp = 2 
        group by  
            to_char(zahlungseingang,'YYYY') , 
            to_char( to_number(to_char(zahlungseingang,'MM')))
    ),
ein_mwst as (
                select 
                    200 srt, 
                    'Einnahmen_MWST' Pos,
                    null Kategorie,
                    sum(mwst) betrag, 
                    to_char(zahlungseingang,'YYYY') jahr, 
                   to_char( to_number(to_char(zahlungseingang,'MM'))) monat
                from t_re_rechnung 
                where fk_std_re_rechnungstyp = 2 
                group by   
                  to_char(zahlungseingang,'YYYY') , 
                  to_char( to_number(to_char(zahlungseingang,'MM')))
            ),
ausg_mwst_bel as (
                select 
                  310 srt,
                  'AUSGABEN_MWST_BEL' pos, 
                  null kategorie , 
                  sum(mwst) betrag ,
                  to_char(jahr) jahr, 
                  to_char(monat) monat
                from t_bel_beleg
                 left join t_bas_kal_arbeitstage on t_bel_beleg.fk_bas_kal_arbeitstag = t_bas_kal_arbeitstage.pk_bas_kal_arbeitstage
                where  fk_std_steu_einkommensteuerrelevant= 1 or fk_std_steu_unternehmenssteuerrelevant = 1 or fk_std_steu_vorsteuerrelevant =1
                 group by fk_bas_bel_belegart, jahr, monat

),
ausg_mwst_zahl as (
                    select 
                      320 srt,
                     'AUSGABEN_MWST_ZAHL' pos, 
                     t_bas_kat_konto_buch.Kategorie kategorie,
                     sum("Betrag") betrag, 
                     to_char(jahr) jahr, 
                     to_char(monat) monat
                    from v_kto_konten_zus zus
                     left join t_bas_kal_arbeitstage on zus.fk_bas_kal_buchungstag = t_bas_kal_arbeitstage.pk_bas_kal_arbeitstage
                     left join t_bas_kat_konto_buch on t_bas_kat_konto_buch.pk_bas_kat_konto_buch =zus.FK_bas_kat_Kategorie
                    where  zus.FK_bas_kat_Kategorie = 46                    
                    group by 
                     t_bas_kat_konto_buch.Kategorie  , 
                     jahr, 
                     monat

),
ausg_mwst_gut as (
                    select 
                      330 srt,
                      'AUSGABEN_MWST_GUT' pos, 
                      t_bas_kat_konto_buch.Kategorie  kategorie,
                      sum("Betrag") betrag, 
                      to_char(jahr) jahr, 
                      to_char(monat) monat
                    from v_kto_konten_zus zus
                     left join t_bas_kal_arbeitstage on zus.fk_bas_kal_buchungstag = t_bas_kal_arbeitstage.pk_bas_kal_arbeitstage
                     left join t_bas_kat_konto_buch on t_bas_kat_konto_buch.pk_bas_kat_konto_buch = zus.FK_bas_kat_Kategorie
                    where  zus.FK_bas_kat_Kategorie= 47 
                    
                     group by 
                      t_bas_kat_konto_buch.Kategorie                      ,
                      jahr,
                      monat

),
ausg as (

            select 
             400 srt,
             'AUSGABEN' pos, 
             t_bas_bel_belegart.belegart kategorie, 
             sum(betrag_brutto) betrag , 
             to_char(jahr) jahr, 
             to_char(monat) monat
            from t_bel_beleg
             left join t_bas_kal_arbeitstage on t_bel_beleg.fk_bas_kal_arbeitstag = t_bas_kal_arbeitstage.pk_bas_kal_arbeitstage           
             left join t_bas_bel_belegart on t_bel_beleg.fk_bas_bel_belegart = t_bas_bel_belegart.pk_bas_bel_belegart
            where 
              (fk_std_steu_einkommensteuerrelevant= 1 or fk_std_steu_unternehmenssteuerrelevant = 1 or fk_std_steu_vorsteuerrelevant =1)
              and (fk_bas_bel_belegart not in (112,
                61,
                161)
                )
             group by 
               belegart, 
               jahr, 
               monat

),
vorst_anm as (
  select
   392 srt,
   'VORSTEUER_VORANMELDUNG' pos,
   null kategorie,
   sum(UMSATZSTVORAUSZLG_UEBERSCHUSS) betrag,
    to_char(MELDEMONAT,'YYYY') jahr, 
    to_char(to_number(to_char(MELDEMONAT,'MM'))) monat 
   
   from T_steu_STEUER_VORANMLDG
   group by 
    to_char(MELDEMONAT,'YYYY') ,
    to_char(to_number(to_char(MELDEMONAT,'MM'))) 

),
vorst_anm_stpf_ums as (
  select
   210 srt,
   'STEUERPFLICHTIGE UMSAETZE' pos,
   null kategorie,
   sum(STEUERPFL_UMSAETZE) betrag,
    to_char(MELDEMONAT,'YYYY') jahr, 
    to_char(to_number(to_char(MELDEMONAT,'MM'))) monat 
   
   from T_steu_STEUER_VORANMLDG
   group by 
    to_char(MELDEMONAT,'YYYY') ,
    to_char(to_number(to_char(MELDEMONAT,'MM'))) 

),
vorst_anm_abz_betr as (
  select
   360 srt,
   'VORST ABZIEHBARE_BETRAEGE' pos,
   null kategorie,
   sum(ABZIEHBARE_VORSTEUERBETR) betrag,
    to_char(MELDEMONAT,'YYYY') jahr, 
    to_char(to_number(to_char(MELDEMONAT,'MM'))) monat 
   
   from T_steu_STEUER_VORANMLDG
   group by 
    to_char(MELDEMONAT,'YYYY') ,
    to_char(to_number(to_char(MELDEMONAT,'MM'))) 

)

--=== Monatswerte ===
select 
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from ein
union 
select 
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from ein_mwst
union 
select 
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from ausg_mwst_bel
union
select 
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from ausg
union
select 
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from ausg_mwst_zahl
union
select 
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from ausg_mwst_gut
union
select
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT

from vorst_anm
union
select
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from vorst_anm_stpf_ums 
union
select
SRT,
POS,
KATEGORIE,
BETRAG,
JAHR,
MONAT
from vorst_anm_abz_betr
union
--=== Jahreswerte ===
select 
SRT,
POS,
KATEGORIE,
SUM(BETRAG) BETRAG,
JAHR,
'ALL' MONAT
from ein
group by
SRT,
POS,
KATEGORIE,
JAHR
union 
select 
SRT,
POS,
KATEGORIE,
SUM(BETRAG) BETRAG,
JAHR,
'ALL' MONAT
from ein_mwst
group by
SRT,
POS,
KATEGORIE,
JAHR
union 
select 
SRT,
POS,
KATEGORIE,
SUM(BETRAG) BETRAG,
JAHR,
'ALL' MONAT
from ausg_mwst_bel
group by
SRT,
POS,
KATEGORIE,
JAHR
union
select 
SRT,
POS,
KATEGORIE,
SUM(BETRAG) BETRAG,
JAHR,
'ALL' MONAT
from ausg
group by
SRT,
POS,
KATEGORIE,
JAHR
union
select 
SRT,
POS,
KATEGORIE,
SUM(BETRAG) BETRAG,
JAHR,
'ALL' MONAT
from ausg_mwst_zahl
group by
SRT,
POS,
KATEGORIE,
JAHR
union
select 
SRT,
POS,
KATEGORIE,
SUM(BETRAG) BETRAG,
JAHR,
'ALL' MONAT
from ausg_mwst_gut
group by
SRT,
POS,
KATEGORIE,
JAHR
union
select
SRT,
POS,
KATEGORIE,
sum(BETRAG) betrag,
JAHR,
'ALL' MONAT

from vorst_anm
group by
SRT,
POS,
KATEGORIE,
JAHR
union
select
SRT,
POS,
KATEGORIE,
sum(BETRAG) betrag,
JAHR,
'ALL' MONAT

from vorst_anm_stpf_ums
group by
SRT,
POS,
KATEGORIE,
JAHR
union
select
SRT,
POS,
KATEGORIE,
sum(BETRAG) betrag,
JAHR,
'ALL' MONAT

from vorst_anm_abz_betr
group by
SRT,
POS,
KATEGORIE,
JAHR
;
--------------------------------------------------------
--  DDL for View V_STEU_STEUER_SATZ
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_STEU_STEUER_SATZ" ("STEUERSATZ", "LAND", "PK_ADR_LAND", "PK_BAS_STEU_STEUER_SATZ", "ZUS_ST") AS 
  select STEUERSATZ, land, pk_adr_land, pk_bas_steu_steuer_satz,  STEUERSATZ || ' (' || land || ')' zus_st
  from t_bas_steu_steuer_satz st
    left join t_adr_land la on st.fk_adr_land = la.pk_adr_land
;
--------------------------------------------------------
--  DDL for View V_STEU_STEUER_VERPFL_ROUTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_STEU_STEUER_VERPFL_ROUTE" ("D", "RNR") AS 
  select '1' || ',' || 3 || ',' || koordinaten || ',' ||  chr(39) ||  row_number() over (order by vdet.datum_verpfl_mehraufwd, vort.pk_rel_steu_steuer_verpfl_beleg_ort) || ' - ' || 
  ort || '-' || vdet.datum_verpfl_mehraufwd || chr(39) || ',' || 'Company' || ',' || 'Firma' || ',0,' d,row_number() over (order by vdet.datum_verpfl_mehraufwd, vort.pk_rel_steu_steuer_verpfl_beleg_ort) rnr
from t_steu_steuer_verpfl_mehraufwd_det vdet
 left join t_steu_steuer_verpfl_mehraufwd v on vdet.fk_steu_steuer_verpfl_mehraufwd = v.pk_steu_steuer_verpfl_mehraufwd
 left join t_rel_steu_steuer_verpfl_beleg_ort vort on vort.fk_steu_steuer_verpfl_mehraufwd_det = vdet.pk_steu_steuer_verpfl_mehraufwd_det
 left join t_adr_ort ort on ort.pk_adr_ort = vort.fk_adr_ort
where v.monat = 1 and jahr = 2020
 order by vdet.datum_verpfl_mehraufwd, vort.pk_rel_steu_steuer_verpfl_beleg_ort
;
--------------------------------------------------------
--  DDL for View V_STEU_STEUER_VORANMELD_ZUORD_KAS_SPLIT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_STEU_STEUER_VORANMELD_ZUORD_KAS_SPLIT" ("PK_KTO_KAS_KTO_KASSE", "FK_KTO_KONTOTYP", "FK_EIN_AUS", "DATUM", "BETRAG", "BUCHUNGSTEXT", "COMM", "JAHR", "CREATION_DATE", "FK_MAIN_KEY", "FK_KTO_BANKKONTO", "FREMDWAEHRUNGSBETRAG", "FK_BAS_MON_FREMDWAEHRUNG", "FK_BAS_KAL_ARBEITSTAG", "FK_BAS_KAT_KATEGORIE", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_LOC_LOCATION", "FK_MAIN_KEY_BANKKONTO", "DATUM_DUPL_OK", "DUPL_BEMERKUNG", "FK_CONTR_DUPL_STATUS", "FK_STEU_STEUER_MONAT", "FK_STEU_STEUER_VORANMELDG", "DATUM_STEUERB_UEBERG", "DATUM_FINANZAMT_UEBERG") AS 
  select "PK_KTO_KAS_KASSE", FK_STD_KTO_KONTOTYP "FK_BAS_KTO_KONTOTYP","FK_EIN_AUS",
  "DATUM","BETRAG","BUCHUNGSTEXT","COMM","JAHR","CREATION_DATE",
  "FK_MAIN_KEY","FK_KTO_BANKKONTO","FREMDWAEHRUNGSBETRAG","FK_BAS_MON_FREMDWAEHRUNG","FK_BAS_KAL_ARBEITSTAG",
  "FK_BAS_KAT_KATEGORIE","FK_STD_VERW_VERWENDUNGSZWECK","FK_INV_INVENTAR","FK_LOC_LOCATION","FK_MAIN_KEY_BANKKONTO","DATUM_DUPL_OK","DUPL_BEMERKUNG",
  "FK_CONTR_DUPL_STATUS","FK_STEU_STEUER_MONAT","FK_STEU_STEUER_VORANMELDG","DATUM_STEUERB_UEBERG","DATUM_FINANZAMT_UEBERG"
  from t_kto_kas_kasse
  where creation_date <= '07.02.2020' and  jahr = 2020 and substr(datum, 4,2) = '01'

;
--------------------------------------------------------
--  DDL for View V_TXT_SPLIT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V_TXT_SPLIT" ("ID", "DATA", "SPALTENNAME") AS 
  with 
txt_ as 
	(Select From_Txt
	From T_DB_TXT_REPLACE_CONTEXT
	Where PK_DB_TXT_REPLACE_CONTEXT = 123),
lin_ as 
	( SELECT LEVEL AS id, REGEXP_SUBSTR(from_txt,'[^' || chr(13) || ']+' -- '[^,]+' 
	, 1, LEVEL) AS data
	FROM txt_
	CONNECT BY REGEXP_SUBSTR(from_txt,'[^' || chr(13) || ']+' -- '[^,]+' 
	, 1, LEVEL) IS NOT NULL)
select lin_."ID",lin_."DATA", substr(data,instr(data,' ',-1),length(data) -instr(data,' ',-1))  spaltenname
from lin_

;
--------------------------------------------------------
--  DDL for View VU_AIRPORTS_IATA_BUCHSTABEN
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."VU_AIRPORTS_IATA_BUCHSTABEN" ("LET1", "LET2", "CNT", "COLUMN1", "COLUMN2", "IATA", "ICAO", "FLUGHAFEN", "ORT", "REGION", "LAND", "BUCHSTABEN") AS 
  with 
 --alphabet first letter
 lett1 as ( select chr(rownum+64) let1 from all_objects where rownum <=26),
 --alphabet two letters
  lett2 as ( select l1.let1 , l1.let1 || l2.let1 let2 from lett1 l1 join lett1 l2 on 1=1),
--aiports with counts by airport_nr
 airp as (
  select c.column1, c.column2, 
a.IATA, a.ICAO, 
a.FLUGHAFEN, a.ORT, 
a.REGION, a.LAND, 
a.BUCHSTABEN
from airort_nr c
join airports a
    on c.column1 = a.BUCHSTABEN
order by c.column1, a.IATA
),
--airport list sumed up
airp_sum as (
select buchstaben, count(*) cnt 
from airp
group by buchstaben
)
select lett1.let1,
lett2.let2,
airp_sum.cnt,
airp."COLUMN1",airp."COLUMN2",airp."IATA",airp."ICAO",airp."FLUGHAFEN",airp."ORT",airp."REGION",airp."LAND",airp."BUCHSTABEN"
from lett1 
 join lett2 on lett1.let1 = lett2.let1
 left join airp_sum on lett2.let2 = substr(airp_sum.buchstaben,1,2)
 left join airp on airp.buchstaben = airp_sum.buchstaben
;
--------------------------------------------------------
--  DDL for View V1
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPANY"."V1" ("FK_MAIN_KEY", "ID", "Buchungstag", "STEUERGRUNDBETRAG", "ZAHL_MWST_SATZ", "ZAHL_MWST", "ZAHL_NETTOBETRAG", "Betrag", "KTO_WAEHRUNG", "FREMDWAEHRUNGSBETRAG", "FREMDWAEHRUNG", "BUCHUNGSTEXT", "KTO_FK_BAS_KAT_KATEGORIE", "FK_STD_VERW_VERWENDUNGSZWECK", "FK_STD_KTO_KONTOTYP", "FK_BAS_KAL_BUCHUNGSTAG", "FK_BAS_KAL_WERTSTELLUNG", "KTO_VERWENDUNGSZWECK", "KTO_KATEGORIE", "BUCHT_TAG", "BUCHT_MONAT", "BUCHT_JAHR", "BUCHT_DATUM", "WERTT_TAG", "WERTT_MONAT", "WERTT_JAHR", "WERTT_DATUM", "KONTOTYP", "CNT_RE", "SUM_REL_TEIL", "PAYPAL_VORG", "LINK_BUCHUNG", "Name", "Artikelbezeichnung", "ART", "FK_IMP_BA_BEL", "PK_IMP_BA_ALLG_BEL", "BEZEICHNUNG", "KENNZEICHEN", "DATUM", "DATUM_VERGEHEN", "FK_BAS_KAL_ARBEITSTAG", "FK_KTO_BUCHUNG", "BETRAG", "WAEHRUNG", "STEUERSATZ", "MWST_BETRAG", "NETTO", "ZAHLUNGSART", "BILD", "BILD1", "VERWENDUNGSZWECK", "FK_INV_INVENTAR", "FK_PROJ_PROJEKT", "WAEHRUNG_BETRAG", "FK_BAS_KAT_KATEGORIE", "KATEGORIE", "PROJEKT", "INVENTAR", "FK_BEL_BELEG_ABLAGE", "LINK_BELEG", "RELEVANTER_TEILBETRAG", "BEMERKUNG", "PK_RE_RECHNUNG", "RECHNUNGSNUMMER", "RECHNUNG", "RECHNUNGSDATUM", "ZEITRAUM_VON", "ZEITRAUM_BIS", "RECHNUNGSBETRAG_NETTO", "RE_FK_BAS_STEU_STEUER_SATZ", "RE_MWST_BETRAG", "RECHNUNGSBETRAG_BRUTTO", "FK_STD_RE_RECHNUNGSTYP", "FK_STD_KTO_ZAHLUNGSART", "SKONTOBETRAG", "SKONTOSATZ", "RE_ZAHLUNG_ABGESCHL", "VORSTEUER_BEZAHLT", "STEUERENDABRECHNUNG", "PK_PROJ_PROJEKT", "FK_KON_AUFTRAGGEBER", "FK_KON_PROJEKTPARTNER_1", "FK_KON_PROJEKTPARTNER_2", "PR_PROJEKT", "VON", "BIS", "AKTUELLER_STUNDENSATZ", "PSP_ELEMENT", "RECHNUNG_GESTELLT", "PR_ZAHLUNG_ABGESCHL", "PROJEKT_ABGESCHLOSSEN", "PK_INV_INVENTAR", "INV_INVENTAR", "ANSCHAFFUNGSDATUM", "ANSCHAFFUNGSJAHR", "ABSCHREIBUNGSDAUER", "RESTBUCHWERT_2017", "RESTBUCHWERT_2018", "RESTBUCHWERT_2019", "RESTBUCHWERT_2020", "PREIS_NETTO", "MWST", "FK_BAS_STEU_STEUER_SATZ", "PREIS_BRUTTO", "COMM", "LIZENZNUMMER", "ANFORDERUNGSCODE", "FK_BAS_INV_INVENTARTYP", "KFZ_KENNZEICHEN", "FAHRGESTELLNR") AS 
  SELECT

     kto.fk_main_key,
     id, 
     
  ---
     TO_CHAR("Buchungstag") "Buchungstag",
     
     to_char(nvl(belzus.betrag,round(kto."Betrag",2))) steuergrundbetrag,
    
     steuersatz zahl_mwst_satz,
     null  zahl_mwst,
     netto zahl_nettobetrag,
 ---
 
     round(kto."Betrag",2) "Betrag",
     kto.Waehrung kto_waehrung,
     round(Fremdwaehrungsbetrag,2) Fremdwaehrungsbetrag,
     Fremdwaehrung,
     buchungstext,
     kto.FK_bas_kat_Kategorie kto_fk_bas_kat_kategorie,
     kto.FK_std_verw_Verwendungszweck,
     kto.FK_std_kto_Kontotyp,
     kto.fk_bas_kal_buchungstag,
     kto.fk_bas_kal_wertstellung,
     kto.verwendungszweck kto_verwendungszweck,
     kto.kategorie kto_kategorie,
     bucht_tag,
     bucht_monat,
     bucht_jahr,
     bucht_datum,
     wertt_tag,
     wertt_monat,
     wertt_jahr,
     wertt_datum,
     Kontotyp,
     rreza.cnt_re,
     rreza.rel_teil   sum_rel_teil,
     pp.fk_kto_vorgang    paypal_vorg,
     CASE
         WHEN FK_std_kto_Kontotyp = 1 THEN '<a href=''f?p=:111:::NO:RP:P111_ID:'
                                     || id
                                     || CHR(39)
                                     || '> '
                                     || buchungstext
                                     || '</a>'
         WHEN FK_std_kto_Kontotyp = 2 THEN '<a href=''f?p=:114:::NO:RP:P114_ID:'
                                     || id
                                     || CHR(39)
                                     || '>'
                                     || buchungstext
                                     || '</a>'
         WHEN FK_std_kto_Kontotyp = 3 THEN '<a href=''f?p=:116:::NO:RP:P116_ID:'
                                     || id
                                     || CHR(39)
                                     || '>'
                                     || buchungstext
                                     || '</a>'
         WHEN FK_std_kto_Kontotyp = 4 THEN '<a href=''f?p=:77:::NO:RP:P77_ID:'
                                     || id
                                     || CHR(39)
                                     || '>'
                                     || buchungstext
                                     || '</a>'
     END link_buchung,
     pp."Name",
     pp."Artikelbezeichnung",

     belzus."ART",belzus."FK_IMP_BA_BEL",belzus."PK_IMP_BA_ALLG_BEL",belzus."BEZEICHNUNG",belzus."KENNZEICHEN",belzus."DATUM",belzus."DATUM_VERGEHEN",belzus."FK_BAS_KAL_ARBEITSTAG",belzus."FK_KTO_BUCHUNG",belzus."BETRAG",belzus."WAEHRUNG",belzus."STEUERSATZ",belzus."MWST_BETRAG",belzus."NETTO",belzus."ZAHLUNGSART",belzus."BILD",belzus."BILD1",belzus."VERWENDUNGSZWECK",belzus."FK_INV_INVENTAR",belzus."FK_PROJ_PROJEKT",belzus."WAEHRUNG_BETRAG",belzus."FK_BAS_KAT_KATEGORIE",belzus."KATEGORIE",belzus."PROJEKT",belzus."INVENTAR",belzus."FK_BEL_BELEG_ABLAGE",
     CASE
         WHEN belzus.art = 'ALLG_BELEG' THEN '<a href=''f?p=:111:::NO:RP:P111_FK_IMP_BA_BEL:'
                                             || belzus.fk_imp_ba_bel
                                             || CHR(39)
                                             || '> '
                                             || belzus.bezeichnung
                                             || '</a>'
         WHEN belzus.art = 'ALLG_BELEG' THEN '<a href=''f?p=:114:::NO:RP:P114_FK_IMP_BA_BEL:'
                                             || belzus.fk_imp_ba_bel
                                             || CHR(39)
                                             || '>'
                                             || belzus.bezeichnung
                                             || '</a>'
         WHEN belzus.art = 'ALLG_BELEG' THEN '<a href=''f?p=:116:::NO:RP:P116_FK_IMP_BA_BEL:'
                                             || belzus.fk_imp_ba_bel
                                             || CHR(39)
                                             || '>'
                                             || belzus.bezeichnung
                                             || '</a>'
         WHEN belzus.art = 'ALLG_BELEG' THEN '<a href=''f?p=:77:::NO:RP:P77_FK_IMP_BA_BEL:'
                                             || belzus.fk_imp_ba_bel
                                             || CHR(39)
                                             || '>'
                                             || belzus.bezeichnung
                                             || '</a>'
     END link_beleg,
     reza.RELEVANTER_TEILBETRAG, 
     reza.BEMERKUNG,
     re.PK_re_RECHNUNG, 
     re.RECHNUNGSNUMMER, 
     re.RECHNUNG, 
     re.RECHNUNGSDATUM, 
     re.ZEITRAUM_VON, 
     re.ZEITRAUM_BIS, 
     re.RECHNUNGSBETRAG_NETTO, 
     re.FK_bas_steu_STEUER_SATZ re_fk_bas_steu_steuer_satz, 
     re.MWST re_mwst_betrag, 
     re.RECHNUNGSBETRAG_BRUTTO, 
     re.FK_std_re_RECHNUNGSTYP, 
     re.FK_std_kto_ZAHLUNGSART, 
     re.SKONTOBETRAG, 
     re.SKONTOSATZ, 
     re.ZAHLUNG_ABGESCHLOSSEN re_zahlung_abgeschl, 
     re.VORSTEUER_BEZAHLT, 
     re.STEUERENDABRECHNUNG,
     pr.PK_proj_PROJEKT, 
     pr.FK_kon_AUFTRAGGEBER, 
     pr.FK_KON_PROJEKTPARTNER_1, 
     pr.FK_KON_PROJEKTPARTNER_2, 
     pr.PROJEKT pr_projekt, 
     pr.VON, 
     pr.BIS, 
     pr.AKTUELLER_STUNDENSATZ, 
     pr.PSP_ELEMENT,
     pr.RECHNUNG_GESTELLT, 
     pr.ZAHLUNG_ABGESCHLOSSEN pr_zahlung_abgeschl, 
     pr.PROJEKT_ABGESCHLOSSEN,
     inv.PK_INV_INVENTAR, 
     inv.INVENTAR inv_inventar, 
     inv.ANSCHAFFUNGSDATUM, 
     inv.ANSCHAFFUNGSJAHR, 
     inv.ABSCHREIBUNGSDAUER, 
     inv.RESTBUCHWERT_2017, 
          inv.RESTBUCHWERT_2018, 
               inv.RESTBUCHWERT_2019, 
                    inv.RESTBUCHWERT_2020, 
     inv.PREIS_NETTO, 
     inv.MWST, 
     inv.FK_BAS_STEU_STEUER_SATZ, 
     inv.PREIS_BRUTTO, 
     inv.COMM, 
     inv.LIZENZNUMMER, 
     inv.ANFORDERUNGSCODE, 
     inv.FK_BAS_INV_INVENTARTYP, 
     inv.KFZ_KENNZEICHEN, 
     inv.FAHRGESTELLNR
    FROM
     v_KTO_konten_zus kto
     LEFT JOIN (
         SELECT
             fk_KTO_vorgang,
             fk_main_key,
             art,
             bezeichnung,
             "Name",
             "Artikelbezeichnung"
         FROM
             T_KTO_Paypal pp
             JOIN v_imp_bel_zus bzus ON pp.fk_main_key = bzus.fk_KTO_buchung
         GROUP BY
             fk_KTO_vorgang,
             fk_main_key,
             art,
             bezeichnung,
             "Name",
             "Artikelbezeichnung"
     ) pp ON pp.fk_KTO_vorgang = kto.fk_KTO_vorgang
     LEFT JOIN v_imp_bel_zus belzus ON belzus.fk_KTO_buchung = kto.fk_main_key
     left join t_rel_RE_rechnung_zahlung reza on reza.fk_main_key = kto.fk_main_key
     left join t_RE_rechnung re on re.pk_RE_rechnung = reza.fk_RE_rechnung
     left join t_PROJ_projekt pr on pr.pk_PROJ_Projekt = re.fk_PROJ_projekt
     left join t_rel_INV_inventar_zahlung reinza on reinza.fk_main_key = kto.fk_main_key
     left join t_INV_inventare inv on inv.pk_INV_inventar = reinza.fk_INV_inventar
     LEFT JOIN (
         SELECT
             fk_main_key,
             COUNT(*) cnt_re,
             SUM(relevanter_teilbetrag) rel_teil
         FROM
             t_rel_RE_rechnung_zahlung
         GROUP BY
             fk_main_key
     ) rreza ON rreza.fk_main_key = kto.fk_main_key
     LEFT JOIN (
         SELECT
             kto.fk_main_key
         FROM
             t_STEU_steuer_lohnsteuerkarte lo
             LEFT JOIN t_rel_STEU_steuer_lohn_zahlUNG loz ON lo.pk_STEU_steuer_lohnsteuerkarte = loz.fk_STEU_steuer_lohnsteuerkarte
             LEFT JOIN v_KTO_konten_zus kto ON kto.fk_main_key = loz.fk_main_key
     ) lo ON lo.fk_main_key = kto.fk_main_key
;
--------------------------------------------------------
--  DDL for Index IMP_RE_LEXWARE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_RE_LEXWARE_PK" ON "COMPANY"."T_IMP_LEX_RE" ("PK_IMP_RE_LEXWARE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_GESCHAEFTSPARTNER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_GESCHAEFTSPARTNER_PK" ON "COMPANY"."T_KON_GESCHAEFTSPARTNER" ("PK_KON_GESCHAEFTSPARTNER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_DB_OBJ_OBJECT_LIST_PART_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART_PK" ON "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART" ("PK_REL_DB_OBJ_OBJECT_LIST_PART") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_TERMINE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_TERMINE_PK" ON "COMPANY"."T_KAL_TERMINE" ("PK_KAL_TERMIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_PROJEKT_ART
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_PROJEKT_ART" ON "COMPANY"."T_BAS_PROJ_PROJEKT_ART_OLD" ("PK_BAS_PROJ_PROJEKT_ART") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_VORANMLDG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_VORANMLDG_PK" ON "COMPANY"."T_STEU_STEUER_VORANMLDG" ("PK_STEU_STEUER_VORANMLDG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_ARTIKELTYP_ARTIKELTY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_ARTIKELTYP_ARTIKELTY_PK" ON "COMPANY"."T_REL_WH_ARTIKELTYP_ARTIKELTYP" ("PK_REL_WH_ARTIKELTYP_ARTIKELTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PROJ_PROJEKT_ANGEBOT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PROJ_PROJEKT_ANGEBOT_PK" ON "COMPANY"."T_PROJ_PROJEKT_ANGEBOT" ("PK_PROJ_PROJEKT_ANGEBOT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_TEL_RECHNUNG_DET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_TEL_RECHNUNG_DET_PK" ON "COMPANY"."T_TEL_RECHNUNG_DET" ("PK_TEL_RECHNUNG_DET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTINENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTINENT_PK" ON "COMPANY"."T_ADR_KONTINENT" ("PK_ADR_KONTINENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_HOTEL_BOOKING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_HOTEL_BOOKING_PK" ON "COMPANY"."T_IMP_HOTEL_BOOKING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_ELEKTRONIK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_ELEKTRONIK_PK" ON "COMPANY"."T_INV_SUB_ELEKTRONIK" ("PK_INV_SUB_ELEKTRONIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PP_DOWNLOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PP_DOWNLOAD_PK" ON "COMPANY"."T_KTO_DOWNLOAD" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KZ_KENNZAHLEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KZ_KENNZAHLEN_PK" ON "COMPANY"."T_KZ_KENNZAHLEN" ("PK_KZ_KENNZAHLEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_PK" ON "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" ("PK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_GESCHAEFTSP_KONT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_GESCHAEFTSP_KONT_PK" ON "COMPANY"."T_REL_KON_GESCHAEFTSPARTNER_KONTAKT" ("PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INV_VERBRAUCHSMAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INV_VERBRAUCHSMAT_PK" ON "COMPANY"."T_REL_INV_INVENTAR_VERBRAUCHSMAT" ("PK_REL_INV_VERBRAUCHSMAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_MONAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_MONAT_PK" ON "COMPANY"."T_STEU_STEUER_MONAT" ("PK_STEU_STEUER_MONAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_TXT_REPLACE_CONTEXT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_TXT_REPLACE_CONTEXT_PK" ON "COMPANY"."T_DB_TXT_REPLACE_CONTEXT" ("PK_DB_TXT_REPLACE_CONTEXT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LEX_LONG_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LEX_LONG_UK1" ON "COMPANY"."T_LEX_LONG" ("RELATION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_MASCH_PROJ_INBETRIEBNAHME
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_MASCH_PROJ_INBETRIEBNAHME" ON "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHME" ("PK_MASCH_PROJ_INBETRIEBNAHME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_INVENTARE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_INVENTARE_PK" ON "COMPANY"."T_INV_INVENTARE" ("PK_INV_INVENTAR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index A3_Zus_Gruppierung_Ein_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."A3_Zus_Gruppierung_Ein_PK" ON "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_OV" ("PK_IMP_TEL_MOBILCOM_RECH_OV") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BUENDELUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BUENDELUNG_PK" ON "COMPANY"."T_BAS_WH_ART_ARTIKELBUENDELUNG" ("PK_BAS_WH_ART_ARTIKELBUENDELUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CONTR_KATEGORIE_ZAHLUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CONTR_KATEGORIE_ZAHLUNG_PK" ON "COMPANY"."T_CONTR_KATEGORIE_ZAHLUNG" ("PK_CONTR_KATEGORIE_ZAHLUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTO_AUSZUG_GIR_UK3
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTO_AUSZUG_GIR_UK3" ON "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" ("FK_MAIN_KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_KFZ_VERSICHERUNGEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_KFZ_VERSICHERUNGEN_PK" ON "COMPANY"."T_CAR_AUTO_VERSICHERUNG" ("PK_CAR_AUTO_VERSICHERUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_COMP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_COMP_PK" ON "COMPANY"."T_INV_KOMP_KOMPONENTEN" ("PK_INV_KOMPONENTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_KONTEN_GRP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_KONTEN_GRP_PK" ON "COMPANY"."T_LEX_KONTENPLAN_KONTEN_GRP" ("PK_LEX_KONTENPLAN_KONTEN_GRP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_RECHNUNG_ZAHLUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_RECHNUNG_ZAHLUNG_PK" ON "COMPANY"."T_REL_RE_RECHNUNG_ZAHLUNG" ("PK_REL_RE_RECHNUNG_ZAHLUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_COWORKING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_COWORKING_PK" ON "COMPANY"."IMP_BA_COWORKING" ("PK_IMP_BA_COWORKING") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ORGANISATIONSEINHEIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ORGANISATIONSEINHEIT_PK" ON "COMPANY"."T_BAS_ORG_ORG_UNIT" ("PK_ORGANISATIONSEINHEIT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BELEGPOSITION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BELEGPOSITION_PK" ON "COMPANY"."T_BEL_BELEGPOSITION" ("PK_BEL_BELEGPOSITION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_REL_INVENTAR_ZAHLUNG
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_REL_INVENTAR_ZAHLUNG" ON "COMPANY"."T_REL_INV_INVENTAR_ZAHLUNG" ("PK_REL_INV_ZAHLUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LEX_LONG_COMM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LEX_LONG_COMM_PK" ON "COMPANY"."T_LEX_LONG_COMM" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_WAEHRUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_WAEHRUNG_PK" ON "COMPANY"."T_BAS_MON_WAEHRUNG" ("PK_BAS_MON_WAEHRUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTO_AUSZUG_BILD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTO_AUSZUG_BILD_PK" ON "COMPANY"."T_REL_KTO_KONTO_AUSZUG_BILD" ("PK_KTO_KONTO_AUSZUG_BILD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STD_GROUP_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STD_GROUP_UK1" ON "COMPANY"."T_STD_GROUP" ("STD_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STD_GROUP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STD_GROUP_PK" ON "COMPANY"."T_STD_GROUP" ("PK_STD_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTROLLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTROLLE_PK" ON "COMPANY"."T_CONTR_KONTROLLE" ("PK_CONTR_KONTROLLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONT_BUCH_LEX_BUCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONT_BUCH_LEX_BUCH_PK" ON "COMPANY"."T_REL_KTO_KONT_BUCH_LEX_BUCH" ("PK_REL_KTO_KONT_BUCH_LEX_BUCH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_RECHNUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_RECHNUNG_PK" ON "COMPANY"."T_RE_RECHNUNG" ("PK_RE_RECHNUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_KRANKENKASSE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_KRANKENKASSE_PK" ON "COMPANY"."T_STEU_STEUER_KRANKENKASSE" ("PK_STEU_STEUER_KRANKENKASSE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_TEXTILREINIGUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_TEXTILREINIGUNG_PK" ON "COMPANY"."T_TEX_TEXTILREINIGUNG" ("PK_TEX_TEXTILREINIGUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ADDFRIEND_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ADDFRIEND_PK" ON "COMPANY"."PROJ1_ADDFRIEND" ("FRIEND_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_RECHNUNG_BELEG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_RECHNUNG_BELEG_PK" ON "COMPANY"."T_REL_RE_RECHNUNG_BELEG" ("PK_REL_RE_RECHNUNG_BELEG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BELEGSEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BELEGSEL_PK" ON "COMPANY"."T_BEL_BELEGSEL" ("PK_BEL_BELEGSEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DL_IMP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."DL_IMP_PK" ON "COMPANY"."T_IMP_ADR" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_PARKTICKETS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_PARKTICKETS_PK" ON "COMPANY"."IMP_BA_PARKTICKETS" ("PK_IMP_BA_PARKTICKETS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index KTO_TAGESGELDKONTO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."KTO_TAGESGELDKONTO_PK" ON "COMPANY"."T_KTO_TAGESGELDKONTO" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_SOL_SOLUTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_SOL_SOLUTION_PK" ON "COMPANY"."T_SOL_SOLUTION" ("PK_SOL_SOLUTION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_TXT_REPLACED_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_TXT_REPLACED_PK" ON "COMPANY"."T_REL_DB_TXT_REPLACED" ("PK_REL_DB_TXT_REPLACED") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_OFFENE_EINGANGSRECHNUNGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_OFFENE_EINGANGSRECHNUNGE_PK" ON "COMPANY"."T_RE_RECHNUNG_MAHNUNG" ("PK_OFFENE_RECHNUNGEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_BARGELD_BELEG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_BARGELD_BELEG_PK" ON "COMPANY"."T_REL_BEL_BARGELD_BELEG" ("PK_REL_BARGELD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTAKTPERSON_ADRESSE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTAKTPERSON_ADRESSE_PK" ON "COMPANY"."T_REL_KON_KONTAKTPERSON_ADRESSE" ("PK_REL_KONTP_ADR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_HOTELRECHNUNGEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_HOTELRECHNUNGEN_PK" ON "COMPANY"."T_RE_SUB_HOTELRECHNUNGEN" ("PK_RE_SUB_HOTELRECHNUNGEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_USER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_USER_PK" ON "COMPANY"."T_USM_USER" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STUNDEN_BELEG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STUNDEN_BELEG_PK" ON "COMPANY"."T_REL_PROJ_STUNDEN_BELEG" ("FK_STUNDENZETTEL", "FK_BELEG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MENGENEINHEIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MENGENEINHEIT_PK" ON "COMPANY"."T_BAS_BAS_MENGENEINHEIT" ("PK_MENGENEINHEIT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CON_PROJ_LOC
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CON_PROJ_LOC" ON "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" ("FK_PROJ_PROJEKT", "FK_LOC_LOCATION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_INTERNETPORTAL_APP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_INTERNETPORTAL_APP_PK" ON "COMPANY"."T_INT_INTERNETPORTAL_APP" ("PK_INT_INTERNETPORTAL_APP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MASCH_BAND_STATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MASCH_BAND_STATION_PK" ON "COMPANY"."T_MASCH_BAND_STATIONEN" ("PK_MASCH_BAND_STATIONEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STROMABLESUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STROMABLESUNG_PK" ON "COMPANY"."T_ABR_EN_STROMABLESUNG" ("PK_ABR_EN_STROMABLESUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BAHN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BAHN_PK" ON "COMPANY"."T_VERK_BAHN" ("PK_BAHN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FLI_AIR_AIRPORTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FLI_AIR_AIRPORTS_PK" ON "COMPANY"."T_FLI_AIR_AIRPORTS" ("PK_FLI_AIR_AIRPORTS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_LOHN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_LOHN_PK" ON "COMPANY"."T_STEU_STEUER_LOHN" ("PK_STEU_STEUER_LOHN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_MDT_MANDANT_STD_GROUP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_MDT_MANDANT_STD_GROUP_PK" ON "COMPANY"."T_REL_MDT_MANDANT_STD_GROUP" ("PK_REL_MDT_MANDANT_STD_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FARBE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FARBE_PK" ON "COMPANY"."T_BAS_BAS_FARBE" ("PK_FARBE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DUPLIKAT_CHECK_KONTROLLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DUPLIKAT_CHECK_KONTROLLE_PK" ON "COMPANY"."T_CONTR_DUPLIKAT_CHECK_KONTR" ("PK_DUPLIKAT_CHECK_KONTROLLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTO_AUSZUG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTO_AUSZUG_PK" ON "COMPANY"."T_KTO_KONTO_AUSZUG" ("PK_KTO_KONTO_AUSZUG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LOCATION_TYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LOCATION_TYPE_PK" ON "COMPANY"."T_BAS_LOC_LOCATION_TYPE" ("PK_BAS_LOC_LOCATION_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_LOHNSTEUERKARTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_LOHNSTEUERKARTE_PK" ON "COMPANY"."T_STEU_STEUER_LOHNSTEUERKARTE" ("PK_STEU_STEUER_LOHNSTEUERKARTE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FLI_FLIGHT_STEPS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FLI_FLIGHT_STEPS_PK" ON "COMPANY"."T_FLI_FLI_FLIGHT_STEPS" ("PK_FLI_FLIGHT_STEPS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_EINSENDEAUFGABE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_EINSENDEAUFGABE_PK" ON "COMPANY"."T_LEHR_EINSENDEAUFGABE" ("PK_LEHR_EINSENDEAUFGABE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_VERPFLEGUNGSMEHRAUFWAND_DET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_DET_PK" ON "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" ("PK_STEU_STEUER_VERPFL_MEHRAUFWD_DET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_INVENTARTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_INVENTARTYP_PK" ON "COMPANY"."T_BAS_INV_INVENTARTYP" ("PK_BAS_INV_INVENTARTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ARTIKELBESTANDTEILTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ARTIKELBESTANDTEILTYP_PK" ON "COMPANY"."T_BAS_WH_ART_ARTIKELBESTANDTEILTYP" ("PK_BAS_WH_ART_ARTIKELBESTTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_TANKSTELLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_TANKSTELLE_PK" ON "COMPANY"."IMP_BA_TANKSTELLE" ("PK_IMP_BA_TANKSTELLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_LEX_LEX_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_LEX_LEX_UK1" ON "COMPANY"."T_REL_LEX_LEX" ("FK_BEL_BELEGNR1", "FK_BEL_BELEGNR2") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_VERTRAG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_VERTRAG_PK" ON "COMPANY"."T_VER_VERTRAG" ("PK_VER_VERTRAG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PACKUNGSTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PACKUNGSTYP_PK" ON "COMPANY"."T_BAS_WH_PACKUNGSTYP" ("PK_PACKKUNGSTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_GESCHAEFTSPARTNERTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_GESCHAEFTSPARTNERTYP_PK" ON "COMPANY"."T_BAS_KON_GESCHAEFTSPARTNERTYP" ("PK_BAS_KON_GESCHAEFTSPARTNERTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PROD_PRODUCT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PROD_PRODUCT_PK" ON "COMPANY"."T_PROD_PRODUCT" ("PK_PROD_PRODUCT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_GRENZBELEGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_GRENZBELEGE_PK" ON "COMPANY"."IMP_BA_GRENZBELEGE" ("PK_IMP_BA_GRENZBELEGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PLZ_ORT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PLZ_ORT_PK" ON "COMPANY"."T_ADR_PLZ_ORT" ("PK_ADR_PLZ_ORT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_RECHNUNG_STUNDENZETTEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_RECHNUNG_STUNDENZETTEL_PK" ON "COMPANY"."T_REL_RE_RECHNUNG_STUNDENZETTEL" ("PK_REL_RE_STDZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_LAGERORT_ARTIKEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_LAGERORT_ARTIKEL_PK" ON "COMPANY"."T_REL_WH_LAGERORT_ARTIKEL" ("PK_REL_LAGO_ART") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ARTIKELBESTANDTEILE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ARTIKELBESTANDTEILE_PK" ON "COMPANY"."T_WH_ART_ARTIKELBESTANDTEILE" ("PK_ARTIKELBEST") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_PK" ON "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" ("PK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INVENTAR_BARZAHL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INVENTAR_BARZAHL_PK" ON "COMPANY"."T_REL_INV_INVENTAR_BARZAHL" ("PK_REL_INV_BARZAHL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_IMP_TEL_CONGSTAR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_IMP_TEL_CONGSTAR_PK" ON "COMPANY"."T_IMP_TEL_CONGSTAR_RECH" ("T_IMP_TEL_CONGSTAR_RECH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_KONTEN_KL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_KONTEN_KL_PK" ON "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KL" ("PK_KONTENPLAN_KONTEN_KL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FLI_FLI_FLIGHT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FLI_FLI_FLIGHT_PK" ON "COMPANY"."T_FLI_FLI_FLIGHT" ("PK_FLI_FLIGHT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LÖSUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LÖSUNG_PK" ON "COMPANY"."T_LEHR_LOESUNG" ("PK_LEHR_LOESUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_LEX_SUSA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_LEX_SUSA_PK" ON "COMPANY"."T_LEX_SUSA" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INV_INVENTAR_KOMPONENTEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INV_INVENTAR_KOMPONENTEN_PK" ON "COMPANY"."T_REL_INV_INVENTAR_KOMPONENTEN" ("PK_REL_INV_INVENTAR_KOMPONENTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_MASCH_PROJ_MATERIAL
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_MASCH_PROJ_MATERIAL" ON "COMPANY"."T_MASCH_PROJ_MATERIAL" ("PK_MASCH_PROJ_MATERIAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_IMP_BEL_BEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_IMP_BEL_BEL_PK" ON "COMPANY"."T_REL_IMP_BEL_BEL" ("PK_REL_IMP_BEL_BEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_BEL_LEX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_BEL_LEX_PK" ON "COMPANY"."T_REL_BEL_LEX" ("PK_REL_BEL_LEX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STEU_STEUER_VERPFL_BELEG_SRC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_SRC_PK" ON "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_SRC" ("PK_REL_STEU_STEUER_VERPFL_BELEG_SRC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_REL_BELEGART_GRP
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_REL_BELEGART_GRP" ON "COMPANY"."T_REL_BEL_BELEGART_GRP" ("PK_REL_BELEGART_GRP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index KTO_KREDITKARTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."KTO_KREDITKARTE_PK" ON "COMPANY"."T_KTO_KREDITKARTE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MASCH_MATERIAL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MASCH_MATERIAL_PK" ON "COMPANY"."T_MASCH_MATERIAL" ("PK_MASCH_MATERIAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTAKT_KONTAKTTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTAKT_KONTAKTTYP_PK" ON "COMPANY"."T_REL_KON_KONTAKT_KONTAKTTYP" ("PK_REL_KON_KONT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ABL_ORDNER_PAGE_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ABL_ORDNER_PAGE_UK1" ON "COMPANY"."T_ABL_ORDNER_PAGE" ("PAGE_NUMBER", "FK_ABL_ORDNER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index KTO_PAYPAL_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."KTO_PAYPAL_PK1" ON "COMPANY"."T_KTO_PAYPAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTO_AUSZUG_GIR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTO_AUSZUG_GIR_PK" ON "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" ("PK_REL_KTO_KONTO_AUSZUG_GIR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTENPLAN_KTO_KTO_K_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTENPLAN_KTO_KTO_K_PK" ON "COMPANY"."T_REL_LEX_KONTENPLAN_KTO_KTO_KAT" ("PK_REL_LEX_KONTENPLAN_KTO_KTO_KAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_ALLG_BEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_ALLG_BEL_PK" ON "COMPANY"."IMP_BA_ALLG_BEL" ("PK_IMP_BA_ALLG_BEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BUCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BUCH_PK" ON "COMPANY"."T_BUCH_BUCH" ("PK_BUCH_BUCH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TABLE1_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."TABLE1_PK" ON "COMPANY"."T_REL_STEU_STEUER_LOHN_INP_BEL" ("PK_REL_STEU_STEUER_LOHN_INP_BEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DB_TAB_TABLE_CONTENT_COUNT_CNT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT_PK" ON "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT" ("PK_DB_TAB_TABLE_CONTENT_COUNT_CNT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BILD_BILDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BILD_BILDER_PK" ON "COMPANY"."T_BILD_BILDER" ("PK_BILD_BILDER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PP_VORGANG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PP_VORGANG_PK" ON "COMPANY"."T_KTO_PP_VORGANG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ARBEITSTAGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ARBEITSTAGE_PK" ON "COMPANY"."T_BAS_KAL_ARBEITSTAGE" ("PK_BAS_KAL_ARBEITSTAGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_AUDI_FIN_VERTRAG_POS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_AUDI_FIN_VERTRAG_POS_PK" ON "COMPANY"."T_VER_VERTRAG_AUDI_FIN_POS" ("PK_VER_VERTRAG_AUDI_FIN_POS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_MASCH_PROJ_FREMDLEISTUNGEN
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_MASCH_PROJ_FREMDLEISTUNGEN" ON "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNGEN" ("PK_MASCH_PROJ_FREMDLEISTUNGEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PROJEKT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PROJEKT_PK" ON "COMPANY"."T_PROJ_PROJEKT" ("PK_PROJ_PROJEKT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_RV_AUSZUG_PAGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_RV_AUSZUG_PAGE_PK" ON "COMPANY"."T_VERS_RV_AUSZUG_PAGE" ("PK_RV_AUSZUG_PAGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index KTO_GIROKONTO_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."KTO_GIROKONTO_PK1" ON "COMPANY"."T_KTO_GIROKONTO" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_JAHR_TODO_GRP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_JAHR_TODO_GRP_PK" ON "COMPANY"."T_STEU_STEUER_JAHR_TODO_GRP" ("PK_STEU_STEUER_JAHR_TODO_GRP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KAT_KATEGORIE_BUCH_BELEG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KAT_KATEGORIE_BUCH_BELEG_PK" ON "COMPANY"."T_REL_KAT_KATEGORIE_BUCH_BELEG" ("PK_REL_KAT_KATEGORIE_BUCH_BELEG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ARTIKELTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ARTIKELTYP_PK" ON "COMPANY"."T_BAS_WH_ART_ARTIKELTYP" ("PK_BAS_WH_ART_ARTIKELTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LEHRGANG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LEHRGANG_PK" ON "COMPANY"."T_LEHR_LEHRGANG" ("PK_LEHR_LEHRGANG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STEUER_MONAT_BEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STEUER_MONAT_BEL_PK" ON "COMPANY"."T_REL_STEU_STEUER_MONAT_BEL" ("PK_REL_STEU_STEUER_MONAT_BEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONTINENT_LAND_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONTINENT_LAND_PK" ON "COMPANY"."T_REL_ADR_KONTINENT_LAND" ("PK_REL_KONTINENT_LAND") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CON_ORT
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CON_ORT" ON "COMPANY"."T_ADR_ORT" ("ORT", "FK_ADR_LAND") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ADRESSE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ADRESSE_PK" ON "COMPANY"."T_ADR_ADRESSE" ("PK_ADR_ADRESSE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ADRESSE_NEU_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ADRESSE_NEU_PK" ON "COMPANY"."T_ADR_ADRESSE_SCHNELL" ("PK_ADR_ADRESSE_SCHNELL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTAKTTYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTAKTTYP_PK" ON "COMPANY"."T_BAS_KON_KONTAKTTYP" ("PK_KONTAKTTYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index KAS_KASSE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."KAS_KASSE_PK" ON "COMPANY"."T_KTO_KAS_KASSE" ("PK_KTO_KAS_KASSE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_UNTERLAGEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_UNTERLAGEN_PK" ON "COMPANY"."T_DOC_DOCUMENT" ("PK_DOC_DOCUMENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_REL_PROJ_LOCATION
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_REL_PROJ_LOCATION" ON "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" ("PK_REL_PROJ_PROJECT_LOCATION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_RV_AUSZUG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_RV_AUSZUG_PK" ON "COMPANY"."T_VERS_RV_AUSZUG" ("PK_RV_AUSZUG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_BELEG_LOCATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_BELEG_LOCATION_PK" ON "COMPANY"."T_REL_BEL_BELEG_LOCATION" ("PK_REL_BEL_LOC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_KONTEN_KAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_KONTEN_KAT_PK" ON "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT" ("PK_LEX_KONTENPLAN_KONTEN_KAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LAND_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LAND_PK" ON "COMPANY"."T_ADR_LAND" ("PK_ADR_LAND") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_BELEG_ARTIKEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_BELEG_ARTIKEL_PK" ON "COMPANY"."T_REL_BEL_BELEG_ARTIKEL" ("PK_REL_BEL_BELEG_ARTIKEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_AUTOERSATZTEILE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_AUTOERSATZTEILE_PK" ON "COMPANY"."T_CAR_AUTO_ERSATZTEILE" ("PK_CAR_AUTO_ERSATZTEILE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_TEL_MOBILCOM_RECH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_TEL_MOBILCOM_RECH_PK" ON "COMPANY"."T_IMP_TEL_MOBILCOM_RECH" ("PK_IMP_TEL_MOBILCOM_RECH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_NIEDERSCHLAGSMENGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_NIEDERSCHLAGSMENGE_PK" ON "COMPANY"."T_WET_NIEDERSCHLAGSMENGE" ("PK_WET_NIEDERSCHLAGSMENGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_VERS_VERSICHERUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_VERS_VERSICHERUNG_PK" ON "COMPANY"."T_VERS_VERSICHERUNG" ("PK_VERS_VERSICHERUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CON_LOCATION
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CON_LOCATION" ON "COMPANY"."T_LOC_LOCATION" ("LOCATION", "FK_BAS_LOC_LOCATION_TYPE", "FK_ADR_ADRESSE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BELEG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BELEG_PK" ON "COMPANY"."T_BEL_BELEG" ("PK_BEL_BELEG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_PK" ON "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" ("PK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STEUER_MONAT_RECH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STEUER_MONAT_RECH_PK" ON "COMPANY"."T_REL_STEU_STEUER_MONAT_RECH" ("PK_REL_STEU_STEUER_MONAT_RECH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FLI_APL_MAINT_PROGR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FLI_APL_MAINT_PROGR_PK" ON "COMPANY"."T_FLI_APL_MAINT_PROGR" ("PK_APL_MAINT_PROGR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DUPLIKAT_CHECK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DUPLIKAT_CHECK_PK" ON "COMPANY"."T_CONTR_DUPLIKAT_CHECK" ("PK_DUPLIKAT_CHECK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ARTIKEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ARTIKEL_PK" ON "COMPANY"."T_WH_ART_ARTIKEL" ("PK_WH_ART_ARTIKEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INVENTAR_ARTIKEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INVENTAR_ARTIKEL_PK" ON "COMPANY"."T_REL_INV_INVENTAR_ARTIKEL" ("PK_REL_INV_ART") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INP_BELEGE_ALL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."INP_BELEGE_ALL_PK" ON "COMPANY"."T_INP_BELEGE_ALL" ("PK_INP_BELEGE_ALL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUERSATZ_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUERSATZ_PK" ON "COMPANY"."T_BAS_STEU_STEUER_SATZ" ("PK_BAS_STEU_STEUER_SATZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STEUER_LOHN_ZAHL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STEUER_LOHN_ZAHL_PK" ON "COMPANY"."T_REL_STEU_STEUER_LOHN_ZAHLUNG" ("PK_REL_STEU_STEUER_LOHN_ZAHLUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_MONAT_TODO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_MONAT_TODO_PK" ON "COMPANY"."T_STEU_STEUER_MONAT_TODO" ("PK_STEU_STEUER_MONAT_TODO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STEUER_SATZ_GÜLT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STEUER_SATZ_GÜLT_PK" ON "COMPANY"."T_REL_STEU_STEUER_SATZ_GUELT" ("PK_REL_STEU_STEUER_SATZ_GUELT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_REL_PROJ_ZAHLUNG
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_REL_PROJ_ZAHLUNG" ON "COMPANY"."T_REL_PROJ_PROJECT_PAYMENT" ("PK_REL_PROJ_ZAHLUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_VERPFLEGUNGSMEHRAUFWAND_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_VERPFLEGUNGSMEHRAUFWAND_PK" ON "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" ("PK_STEU_STEUER_VERPFL_MEHRAUFWD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MDT_MANDANT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MDT_MANDANT_PK" ON "COMPANY"."T_MDT_MANDANT" ("PK_MDT_MANDANT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_LEX_KTO_BEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_LEX_KTO_BEL_PK" ON "COMPANY"."T_REL_LEX_KTO_BEL" ("PK_REL_LEX_KTO_BEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ORT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ORT_PK" ON "COMPANY"."T_ADR_ORT" ("PK_ADR_ORT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTAKT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTAKT_PK" ON "COMPANY"."T_KON_KONTAKT" ("PK_KON_KONTAKT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LEX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LEX_PK" ON "COMPANY"."T_LEX" ("PK_LEX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_KONTEN_TYP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_KONTEN_TYP_PK" ON "COMPANY"."T_LEX_KONTENPLAN_KONTEN_TYP" ("PK_KONTENPLAN_KONTEN_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_TXT_REPLACE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_TXT_REPLACE_PK" ON "COMPANY"."T_DB_TXT_REPLACE" ("PK_DB_TXT_REPLACE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STUNDENZETTEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STUNDENZETTEL_PK" ON "COMPANY"."T_PROJ_STUNDENZETTEL" ("PK_PROJ_STUNDENZETTEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index STD_OBERKATEGORIE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."STD_OBERKATEGORIE_PK" ON "COMPANY"."T_BAS_KAT_OBERKATEGORIE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_KONTENBLATT_2018_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_KONTENBLATT_2018_PK" ON "COMPANY"."T_LEX_KONTENBLATT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_JAHR_TODO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_JAHR_TODO_PK" ON "COMPANY"."T_STEU_STEUER_JAHR_TODO" ("PK_STEU_STEUER_JAHR_TODO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_PK" ON "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" ("PK_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DB_OBJECT_LIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DB_OBJECT_LIST_PK" ON "COMPANY"."T_DB_OBJ_OBJECT_LIST" ("PK_DB_OBJ_OBJECT_LIST") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STD_PK" ON "COMPANY"."T_STD" ("PK_STD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CON_LOC_TYPE
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CON_LOC_TYPE" ON "COMPANY"."T_BAS_LOC_LOCATION_TYPE" ("LOCATION_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_KRANKENKASSE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_KRANKENKASSE_PK" ON "COMPANY"."T_BEI_KK_KRANKENKASSE_DET" ("PK_BEI_KK_KRANKENKASSE_DET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_INSURANCE_YEARLY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_INSURANCE_YEARLY_PK" ON "COMPANY"."T_VERS_INSURANCE_YEARLY" ("PK_INSURANCE_YEARLY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_BEL_KONT_BUCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_BEL_KONT_BUCH_PK" ON "COMPANY"."T_REL_BEL_KONT_BUCH" ("PK_REL_BEL_KONT_BUCH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INP_BELEGE_POS_ALL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."INP_BELEGE_POS_ALL_PK" ON "COMPANY"."T_INP_BELEGE_POS_ALL" ("PK_INP_BELEGE_POS_ALL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTOAUSZUG_BUCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTOAUSZUG_BUCH_PK" ON "COMPANY"."T_KTO_KONTO_BUCH" ("PK_KTO_KONTO_BUCH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_SEPA_VORLAGEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_SEPA_VORLAGEN_PK" ON "COMPANY"."T_KTO_SEPA_VORLAGEN" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_BUSSGELDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_BUSSGELDER_PK" ON "COMPANY"."IMP_BA_BUSSGELDER" ("PK_IMP_BA_BUSSGELDER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STD_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STD_UK1" ON "COMPANY"."T_STD" ("FK_STD_GROUP", "STD_VALUE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_UMTAUSCHKURS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_UMTAUSCHKURS_PK" ON "COMPANY"."T_BAS_MON_UMTAUSCHKURS" ("PK_T_UMTAUSCHKURS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_PK" ON "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" ("PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BELEGART_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BELEGART_PK" ON "COMPANY"."T_BAS_BEL_BELEGART" ("PK_BAS_BEL_BELEGART") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DUPLIKAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DUPLIKAT_PK" ON "COMPANY"."T_CONTR_DUPLIKAT" ("PK_DUPLIKAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONT_BUCH_IMP_BEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONT_BUCH_IMP_BEL_PK" ON "COMPANY"."T_REL_KTO_KONT_BUCH_IMP_BEL" ("PK_REL_KTO_KONT_BUCH_IMP_BEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_KONTEN_KAT_GR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_KONTEN_KAT_GR_PK" ON "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT_GRP" ("PK_LEX_KONTENPLAN_KONTEN_KAT_GRP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_PK" ON "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD" ("PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MASCH_KOMPONENTEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MASCH_KOMPONENTEN_PK" ON "COMPANY"."T_MASCH_KOMPONENTEN" ("PK_MASCH_KOMPONENTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTO_BUCH_KAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTO_BUCH_KAT_PK" ON "COMPANY"."T_BAS_KAT_KATEGORIE" ("PK_BAS_KAT_KATEGORIE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ABL_ORDNER_PAGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ABL_ORDNER_PAGE_PK" ON "COMPANY"."T_ABL_ORDNER_PAGE" ("PK_ABL_ORDNER_PAGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LOCATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LOCATION_PK" ON "COMPANY"."T_LOC_LOCATION" ("PK_LOC_LOCATION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUERNUMMER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUERNUMMER_PK" ON "COMPANY"."T_STEU_STEUER_STEUERNUMMER" ("PK_STEU_STEUERNUMMER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_KONTEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_KONTEN_PK" ON "COMPANY"."T_LEX_KONTENPLAN_KONTEN" ("PK_LEX_KONTENPLAN_KONTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MIETVERTRAG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MIETVERTRAG_PK" ON "COMPANY"."T_VER_VERTRAG_MIETE" ("PK_VER_VERTRAG_MIETE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BEITRAG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BEITRAG_PK" ON "COMPANY"."T_ORG_BEITRAG" ("PK_BEITRAG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_RV_AUSZUG_PAGE_DET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_RV_AUSZUG_PAGE_DET_PK" ON "COMPANY"."T_VERS_RV_AUSZUG_PAGE_DET" ("PK_RV_AUSZUG_PAGE_DET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST_PK" ON "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" ("PK_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BANK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BANK_PK" ON "COMPANY"."T_KTO_BANK" ("PK_KTO_BANK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_IMMO_OBJEKT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_IMMO_OBJEKT_PK" ON "COMPANY"."T_IMMO_OBJEKT" ("T_IMMO_OBJEKT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_KONTENPLAN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_KONTENPLAN_PK" ON "COMPANY"."T_LEX_KONTENPLAN_GRP" ("PK_KONTENPLAN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_CARMIETE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_CARMIETE_PK" ON "COMPANY"."T_CAR_AUTO_VERMIETUNG" ("PK_CAR_AUTO_VERMIETUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STUNDENZETTEL_BELEG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STUNDENZETTEL_BELEG_PK" ON "COMPANY"."T_REL_PROJ_STUNDENZETTEL_BELEG" ("PK_REL_PROJ_STUNDENZETTEL_BELEG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DB_TAB_TABLE_CONTENT_COUNT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_PK" ON "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT" ("PK_DB_TAB_TABLE_CONTENT_COUNT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ABL_ORDNER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ABL_ORDNER_PK" ON "COMPANY"."T_ABL_ORDNER" ("PK_ABL_ORDNER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CON_PLZ_ORT
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CON_PLZ_ORT" ON "COMPANY"."T_ADR_PLZ_ORT" ("PLZ", "OT", "FK_ADR_ORT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BAS_KAT_IMMO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BAS_KAT_IMMO_PK" ON "COMPANY"."T_BAS_KAT_IMMO" ("PK_BAS_KAT_IMMO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUERSATZ_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUERSATZ_UK1" ON "COMPANY"."T_BAS_STEU_STEUER_SATZ" ("STEUERSATZ", "FK_ADR_LAND") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_STEUER_VERPFL_BELEG_ORT1_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_STEUER_VERPFL_BELEG_ORT1_PK" ON "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_ORT" ("PK_REL_STEU_STEUER_VERPFL_BELEG_ORT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_PK" ON "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE" ("PK_REL_MASCH_ANL_ANLAGE_KOMPONENTE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INP_BELEGE_BEL_TYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE_PK" ON "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE" ("PK_REL_INP_BELEGE_BEL_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_SATZ_LEX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_SATZ_LEX_PK" ON "COMPANY"."T_STEU_STEUER_SATZ_LEX" ("PK_STEU_STEUER_SATZ_LEX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_IMP_BEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_IMP_BEL_PK" ON "COMPANY"."T_IMP_BEL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN_PK" ON "COMPANY"."T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" ("PK_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_OEFFENTL_TICKETS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_OEFFENTL_TICKETS_PK" ON "COMPANY"."IMP_BA_OEFFENTL_TICKETS" ("PK_IMP_BA_OEFFENTL_TICKETS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_HEIZUNGSABLESUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_HEIZUNGSABLESUNG_PK" ON "COMPANY"."T_ABR_EN_HEIZUNGSABLESUNG_DETAILS" ("PK_ABR_HEIZUNGSABLESUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_DB_RENAME_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_DB_RENAME_PK" ON "COMPANY"."T_DB_RENAME" ("PK_DB_RENAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_TELEFONKARTEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_TELEFONKARTEN_PK" ON "COMPANY"."T_TEL_TELEFONKARTEN" ("PK_TEL_TELEFONKARTEN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_LOC_LOCATION_SUB_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_LOC_LOCATION_SUB_PK" ON "COMPANY"."T_LOC_LOCATION_SUB" ("PK_LOC_LOCATION_SUB") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_LEX_LEX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_LEX_LEX_PK" ON "COMPANY"."T_REL_LEX_LEX" ("PK_REL_LEX_LEX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONT_BUCH_KONT_BUCH_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONT_BUCH_KONT_BUCH_UK1" ON "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" ("FK_KTO_KONTO_BUCH1", "FK_KTO_KONTO_BUCH2") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_KONT_BUCH_KONT_BUCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_KONT_BUCH_KONT_BUCH_PK" ON "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" ("PK_REL_KTO_KONT_BUCH_KONT_BUCH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_SONSTIGE_BELEGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_SONSTIGE_BELEGE_PK" ON "COMPANY"."IMP_BA_SONSTIGE_BELEGE" ("PK_IMP_BA_SONSTIGE_BELEGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PK" ON "COMPANY"."T_REL_LEX_LEX_BANKKONTO" ("PK_REL_LEX_LEX_BANKKONTO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_BELEG_INVENTAR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_BELEG_INVENTAR_PK" ON "COMPANY"."T_REL_BEL_BELEG_INVENTAR" ("PK_REL_BEL_BELEG_INVENTAR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CON_LAND
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."CON_LAND" ON "COMPANY"."T_ADR_LAND" ("LAND") 
  PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_TEL_VODAFONE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_TEL_VODAFONE_PK" ON "COMPANY"."T_IMP_TEL_VODAFONE" ("PK_IMP_TEL_VODAFONE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_KFZ_VERSICHERUNG_POS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_KFZ_VERSICHERUNG_POS_PK" ON "COMPANY"."T_CAR_AUTO_VERSICHERUNG_POS" ("PK_CAR_AUTO_VERSICHERUNG_POS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_IMP_TEL_MOBILCOM_RECH_DET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET_PK" ON "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET" ("PK_IMP_TEL_MOBILCOM_RECH_DET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_TEL_O2_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_TEL_O2_PK" ON "COMPANY"."T_IMP_TEL_O2" ("PK_IMP_TEL_O2") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_STEUER_JAHR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_STEUER_JAHR_PK" ON "COMPANY"."T_STEU_STEUER_JAHR" ("PK_STEU_STEUER_JAHR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_BELEGART_GRP
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PK_T_BELEGART_GRP" ON "COMPANY"."T_BAS_BEL_BELEGART_GRP" ("PK_BAS_BEL_BELEGART_GRP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_TXT_REPLACED_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_TXT_REPLACED_PK" ON "COMPANY"."T_DB_TXT_REPLACE_LOG" ("PK_DB_TXT_REPLACE_LOG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ADR_BUNDESLAND_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ADR_BUNDESLAND_PK" ON "COMPANY"."T_ADR_REGION" ("T_ADR_REGION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FRAGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FRAGE_PK" ON "COMPANY"."T_LEHR_FRAGE" ("PK_LEHR_FRAGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_PERSON_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_PERSON_PK" ON "COMPANY"."T_KON_PERSON" ("PK_KON_PERSON") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_BANKKONTO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_BANKKONTO_PK" ON "COMPANY"."T_KTO_BANKKONTO" ("PK_KTO_BANKKONTO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PP_VORGANG_DOWNLOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."PP_VORGANG_DOWNLOAD_PK" ON "COMPANY"."T_KTO_PP_VORGANG_DOWNLOAD" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_INV_RESTBUCHWERT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_INV_RESTBUCHWERT_PK" ON "COMPANY"."T_INV_ANL_RESTBUCHWERT" ("T_INV_RESTBUCHWERT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_ADDFRIEND_RELATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_ADDFRIEND_RELATIONS_PK" ON "COMPANY"."PROJ1_ADDFRIEND_RELATIONS" ("ADDFRIEND_RELATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_FLI_APL_PLANE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_FLI_APL_PLANE_PK" ON "COMPANY"."T_FLI_APL_PLANE" ("PK_FLI_APL_PLANE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_MATCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_MATCH_PK" ON "COMPANY"."T_CALC_MATCH" ("PK_MATCH") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_BA_HEIZUNGSABRECHNUNG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_BA_HEIZUNGSABRECHNUNG_PK" ON "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG" ("PK_ABR_EN_HEIZUNGSABRECHNUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_FRAGE_LÖS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_FRAGE_LÖS_PK" ON "COMPANY"."T_REL_LEHR_FRAGE_LOESUNG" ("PK_LEHR_FRAGE_LOESEUNG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index T_REL_MASCH_BAND_STATION_MATERIAL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_PK" ON "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" ("PK_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMP_LOG_LOAD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMPANY"."IMP_LOG_LOAD_PK" ON "COMPANY"."T_IMP_LOG_LOAD" ("PK_IMP_LOG_LOAD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger IMP_BA_GRENZBELEGE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."IMP_BA_GRENZBELEGE_TRG" 
BEFORE INSERT ON IMP_BA_GRENZBELEGE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_IMP_BA_GRENZBELEGE IS NULL THEN
      SELECT IMP_BA_GRENZBELEGE_SEQ.NEXTVAL INTO :NEW.PK_IMP_BA_GRENZBELEGE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."IMP_BA_GRENZBELEGE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_ABL_ORDNER_PAGE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_ABL_ORDNER_PAGE_TRG" 
BEFORE INSERT ON T_ABL_ORDNER_PAGE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_ABL_ORDNER_PAGE IS NULL THEN
      SELECT T_ABL_ORDNER_PAGE_SEQ.NEXTVAL INTO :NEW.PK_ABL_ORDNER_PAGE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_ABL_ORDNER_PAGE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_ADR_ADRESSE_SCHNELL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_ADR_ADRESSE_SCHNELL_TRG" 
BEFORE INSERT ON T_ADR_ADRESSE_SCHNELL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_ADR_ADRESSE_SCHNELL IS NULL THEN
      SELECT T_ADR_ADRESSE_SCHNELL_SEQ.NEXTVAL INTO :NEW.PK_ADR_ADRESSE_SCHNELL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_ADR_ADRESSE_SCHNELL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_ADR_ADRESSE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_ADR_ADRESSE_TRG" 
BEFORE INSERT ON T_ADR_ADRESSE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_ADR_ADRESSE IS NULL THEN
      SELECT T_ADR_ADRESSE_SEQ.NEXTVAL INTO :NEW.PK_ADR_ADRESSE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_ADR_ADRESSE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_ADR_LAND_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_ADR_LAND_TRG" 
BEFORE INSERT ON T_ADR_LAND 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_ADR_LAND IS NULL THEN
      SELECT T_ADR_LAND_SEQ.NEXTVAL INTO :NEW.PK_ADR_LAND FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_ADR_LAND_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_ADR_ORT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_ADR_ORT_TRG" 
BEFORE INSERT ON T_ADR_ORT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_ADR_ORT IS NULL THEN
      SELECT T_ADR_ORT_SEQ.NEXTVAL INTO :NEW.PK_ADR_ORT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_ADR_ORT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_ADR_PLZ_ORT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_ADR_PLZ_ORT_TRG" 
BEFORE INSERT ON T_ADR_PLZ_ORT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_ADR_PLZ_ORT IS NULL THEN
      SELECT T_ADR_PLZ_ORT_SEQ.NEXTVAL INTO :NEW.PK_ADR_PLZ_ORT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_ADR_PLZ_ORT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_BAS_STEU_STEUER_SATZ_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_BAS_STEU_STEUER_SATZ_TRG" 
BEFORE INSERT ON T_BAS_STEU_STEUER_SATZ 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_BAS_STEU_STEUER_SATZ IS NULL THEN
      SELECT T_BAS_STEU_STEUER_SATZ_SEQ.NEXTVAL INTO :NEW.PK_BAS_STEU_STEUER_SATZ FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_BAS_STEU_STEUER_SATZ_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_BEI_KK_KRANKENKASSE_DET_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_BEI_KK_KRANKENKASSE_DET_TRG" 
BEFORE INSERT ON T_BEI_KK_KRANKENKASSE_DET 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_BEI_KK_KRANKENKASSE_DET IS NULL THEN
      SELECT T_BEI_KK_KRANKENKASSE_DET_SEQ.NEXTVAL INTO :NEW.PK_BEI_KK_KRANKENKASSE_DET FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_BEI_KK_KRANKENKASSE_DET_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DB_OBJ_OBJECT_LIST_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_DB_OBJ_OBJECT_LIST_TRG" 
BEFORE INSERT ON T_DB_OBJ_OBJECT_LIST 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_DB_OBJ_OBJECT_LIST IS NULL THEN
      SELECT T_DB_OBJ_OBJECT_LIST_SEQ.NEXTVAL INTO :NEW.PK_DB_OBJ_OBJECT_LIST FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_DB_OBJ_OBJECT_LIST_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DB_TAB_TABLE_CONTENT_COUNT_CNT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT_TRG" 
BEFORE INSERT ON T_DB_TAB_TABLE_CONTENT_COUNT_CNT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_DB_TAB_TABLE_CONTENT_COUNT_CNT IS NULL THEN
      SELECT T_DB_TAB_TABLE_CONTENT_COUNT_CNT_SEQ.NEXTVAL INTO :NEW.PK_DB_TAB_TABLE_CONTENT_COUNT_CNT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_TRG" 
BEFORE INSERT ON T_DB_TAB_TABLE_CONTENT_COUNT_LOAD 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DB_TAB_TABLE_CONTENT_COUNT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_TRG" 
BEFORE INSERT ON T_DB_TAB_TABLE_CONTENT_COUNT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_DB_TAB_TABLE_CONTENT_COUNT IS NULL THEN
      SELECT T_DB_TAB_TABLE_CONTENT_COUNT_SEQ.NEXTVAL INTO :NEW.PK_DB_TAB_TABLE_CONTENT_COUNT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_FLI_AIR_AIRPORTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_FLI_AIR_AIRPORTS_TRG" 
BEFORE INSERT ON T_FLI_AIR_AIRPORTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_FLI_AIR_AIRPORTS IS NULL THEN
      SELECT T_FLI_AIR_AIRPORTS_SEQ.NEXTVAL INTO :NEW.PK_FLI_AIR_AIRPORTS FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_FLI_AIR_AIRPORTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_FLI_APL_PLANE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_FLI_APL_PLANE_TRG" 
BEFORE INSERT ON T_FLI_APL_PLANE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_FLI_APL_PLANE IS NULL THEN
      SELECT T_FLI_APL_PLANE_SEQ.NEXTVAL INTO :NEW.PK_FLI_APL_PLANE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_FLI_APL_PLANE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_IMP_LOG_LOAD_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_IMP_LOG_LOAD_TRG" 
BEFORE INSERT ON T_IMP_LOG_LOAD 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_IMP_LOG_LOAD_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_IMP_LOG_LOAD_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_IMP_LOG_LOAD_TRG1" 
BEFORE INSERT ON T_IMP_LOG_LOAD 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_IMP_LOG_LOAD IS NULL THEN
      SELECT T_IMP_LOG_LOAD_SEQ.NEXTVAL INTO :NEW.PK_IMP_LOG_LOAD FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_IMP_LOG_LOAD_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_INP_BELEGE_ALL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG" 
BEFORE INSERT ON T_INP_BELEGE_ALL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_INP_BELEGE_ALL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG1" 
BEFORE INSERT ON T_INP_BELEGE_ALL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_INP_BELEGE_ALL_TRG2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG2" 
BEFORE INSERT ON T_INP_BELEGE_ALL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG2" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_INP_BELEGE_ALL_TRG3
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG3" 
BEFORE INSERT ON T_INP_BELEGE_ALL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_INP_BELEGE_ALL IS NULL THEN
      SELECT T_INP_BELEGE_ALL_SEQ.NEXTVAL INTO :NEW.PK_INP_BELEGE_ALL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_INP_BELEGE_ALL_TRG3" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_KAL_TERMINE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_KAL_TERMINE_TRG" 
BEFORE INSERT ON T_KAL_TERMINE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_KAL_TERMINE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_KON_GESCHAEFTSPARTNER_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_KON_GESCHAEFTSPARTNER_TRG" 
BEFORE INSERT ON T_KON_GESCHAEFTSPARTNER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_KON_GESCHAEFTSPARTNER IS NULL THEN
      SELECT T_KON_GESCHAEFTSPARTNER_SEQ.NEXTVAL INTO :NEW.PK_KON_GESCHAEFTSPARTNER FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_KON_GESCHAEFTSPARTNER_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_KTO_GIROKONTO_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_KTO_GIROKONTO_TRG" 
BEFORE INSERT ON T_KTO_GIROKONTO 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT T_KTO_GIROKONTO_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_KTO_GIROKONTO_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_KTO_KAS_KASSE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_KTO_KAS_KASSE_TRG" 
BEFORE INSERT ON T_KTO_KAS_KASSE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_KTO_KAS_KASSE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_KTO_KAS_KASSE_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_KTO_KAS_KASSE_TRG1" 
BEFORE INSERT ON T_KTO_KAS_KASSE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_KTO_KAS_KASSE IS NULL THEN
      SELECT T_KTO_KAS_KASSE_SEQ.NEXTVAL INTO :NEW.PK_KTO_KAS_KASSE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_KTO_KAS_KASSE_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_KTO_KONTO_AUSZUG_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_KTO_KONTO_AUSZUG_TRG" 
BEFORE INSERT ON T_KTO_KONTO_AUSZUG 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_KTO_KONTO_AUSZUG IS NULL THEN
      SELECT T_KTO_KONTO_AUSZUG_SEQ.NEXTVAL INTO :NEW.PK_KTO_KONTO_AUSZUG FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_KTO_KONTO_AUSZUG_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LEX_KONTENBLATT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_LEX_KONTENBLATT_TRG" 
BEFORE INSERT ON T_LEX_KONTENBLATT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT T_LEX_KONTENBLATT_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_LEX_KONTENBLATT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LEX_SUSA_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_LEX_SUSA_TRG" 
BEFORE INSERT ON T_LEX_SUSA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT T_LEX_SUSA_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_LEX_SUSA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LOC_LOCATION_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_LOC_LOCATION_TRG" 
BEFORE INSERT ON T_LOC_LOCATION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_LOC_LOCATION IS NULL THEN
      SELECT T_LOC_LOCATION_SEQ.NEXTVAL INTO :NEW.PK_LOC_LOCATION FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_LOC_LOCATION_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MASCH_KOMPONENTEN_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MASCH_KOMPONENTEN_TRG" 
BEFORE INSERT ON T_MASCH_KOMPONENTEN 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_MASCH_KOMPONENTEN IS NULL THEN
      SELECT T_MASCH_KOMPONENTEN_SEQ.NEXTVAL INTO :NEW.PK_MASCH_KOMPONENTEN FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_MASCH_KOMPONENTEN_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MASCH_MATERIAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MASCH_MATERIAL_TRG" 
BEFORE INSERT ON T_MASCH_MATERIAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_MASCH_MATERIAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MASCH_MATERIAL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MASCH_MATERIAL_TRG1" 
BEFORE INSERT ON T_MASCH_MATERIAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_MASCH_MATERIAL IS NULL THEN
      SELECT T_MASCH_MATERIAL_SEQ.NEXTVAL INTO :NEW.PK_MASCH_MATERIAL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_MASCH_MATERIAL_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MASCH_PROJ_FREMDLEISTUNGEN_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNGEN_TRG" 
BEFORE INSERT ON T_MASCH_PROJ_FREMDLEISTUNGEN 
FOR EACH ROW 
BEGIN
	--
	select T_MASCH_PROJ_FREMDLEISTUNG_SEQ.NEXTVAL
	INTO :NEW.PK_MASCH_PROJ_FREMDLEISTUNGEN 
	FROM DUAL;
	--
END;

/
ALTER TRIGGER "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNGEN_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MASCH_PROJ_INBETRIEBNAHME_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHME_TRG" 
BEFORE INSERT ON T_MASCH_PROJ_INBETRIEBNAHME 
FOR EACH ROW 
BEGIN
	--
	select T_MASCH_PROJ_INBETRIEBNAHM_SEQ.NEXTVAL
	INTO :NEW.PK_MASCH_PROJ_INBETRIEBNAHME 
	FROM DUAL;
	--
END;

/
ALTER TRIGGER "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHME_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MASCH_PROJ_MATERIAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MASCH_PROJ_MATERIAL_TRG" 
BEFORE INSERT ON T_MASCH_PROJ_MATERIAL 
FOR EACH ROW 
BEGIN
	--
	select T_MASCH_PROJ_MATERIAL_SEQ.NEXTVAL
	INTO :NEW.PK_MASCH_PROJ_MATERIAL 
	FROM DUAL;
	--
END;

/
ALTER TRIGGER "COMPANY"."T_MASCH_PROJ_MATERIAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_MDT_MANDANT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_MDT_MANDANT_TRG" 
BEFORE INSERT ON T_MDT_MANDANT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_MDT_MANDANT IS NULL THEN
      SELECT T_MDT_MANDANT_SEQ.NEXTVAL INTO :NEW.PK_MDT_MANDANT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_MDT_MANDANT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_TRG" 
BEFORE INSERT ON T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT IS NULL THEN
      SELECT T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_SEQ.NEXTVAL INTO :NEW.PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PROD_PRODUCT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_PROD_PRODUCT_TRG" 
BEFORE INSERT ON T_PROD_PRODUCT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_PROD_PRODUCT IS NULL THEN
      SELECT T_PROD_PRODUCT_SEQ.NEXTVAL INTO :NEW.PK_PROD_PRODUCT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_PROD_PRODUCT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PROJ_PROJEKT_ANGEBOT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_PROJ_PROJEKT_ANGEBOT_TRG" 
BEFORE INSERT ON T_PROJ_PROJEKT_ANGEBOT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_PROJ_PROJEKT_ANGEBOT IS NULL THEN
      SELECT T_PROJ_PROJEKT_ANGEBOT_SEQ.NEXTVAL INTO :NEW.PK_PROJ_PROJEKT_ANGEBOT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_PROJ_PROJEKT_ANGEBOT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PROJ_PROJEKT_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_PROJ_PROJEKT_TRG" 
BEFORE INSERT ON T_PROJ_PROJEKT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_PROJ_PROJEKT IS NULL THEN
      SELECT T_PROJ_PROJEKT_SEQ.NEXTVAL INTO :NEW.PK_PROJ_PROJEKT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_PROJ_PROJEKT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_TRG" 
BEFORE INSERT ON T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_TRG1" 
BEFORE INSERT ON T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL IS NULL THEN
      SELECT T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_SEQ.NEXTVAL INTO :NEW.PK_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_TRG" 
BEFORE INSERT ON "T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_TRG1" 
BEFORE INSERT ON "T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_INP_INPUT_BELEGE_ALL_INPUT_BELEGE_ALL_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_KTO_KONTO_AUSZUG_GIR_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR_TRG" 
BEFORE INSERT ON T_REL_KTO_KONTO_AUSZUG_GIR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_KTO_KONTO_AUSZUG_GIR IS NULL THEN
      SELECT T_REL_KTO_KONTO_AUSZUG_GIR_SEQ.NEXTVAL INTO :NEW.PK_REL_KTO_KONTO_AUSZUG_GIR FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_LEX_KTO_BEL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_LEX_KTO_BEL_TRG" 
BEFORE INSERT ON T_REL_LEX_KTO_BEL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_LEX_KTO_BEL IS NULL THEN
      SELECT T_REL_LEX_KTO_BEL_SEQ.NEXTVAL INTO :NEW.PK_REL_LEX_KTO_BEL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_LEX_KTO_BEL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_TRG" 
BEFORE INSERT ON T_REL_MASCH_ANL_ANLAGE_KOMPONENTE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_MASCH_ANL_ANLAGE_KOMPONENTE IS NULL THEN
      SELECT T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_SEQ.NEXTVAL INTO :NEW.PK_REL_MASCH_ANL_ANLAGE_KOMPONENTE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_TRG" 
BEFORE INSERT ON T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_TRG2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_TRG2" 
BEFORE INSERT ON T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL IS NULL THEN
      SELECT T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_SEQ.NEXTVAL INTO :NEW.PK_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL_TRG2" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_BAND_STATION_MATERIAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_TRG" 
BEFORE INSERT ON "T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_BAND_STATION_MATERIAL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_TRG1" 
BEFORE INSERT ON "T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_MASCH_BAND_STATION_MATERIAL IS NULL THEN
      SELECT T_REL_MASCH_BAND_STATION_MATERIAL_SEQ.NEXTVAL INTO :NEW.PK_REL_MASCH_BAND_STATION_MATERIAL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_BAND_STATION_MATERIAL_TRG1" DISABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_TRG" 
BEFORE INSERT ON T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_TRG1" 
BEFORE INSERT ON T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL IS NULL THEN
      SELECT T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_SEQ.NEXTVAL INTO :NEW.PK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_TRG" 
BEFORE INSERT ON T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN IS NULL THEN
      SELECT T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_SEQ.NEXTVAL INTO :NEW.PK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_TRG" 
BEFORE INSERT ON T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN IS NULL THEN
      SELECT T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_SEQ.NEXTVAL INTO :NEW.PK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_STD_GROUP_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_STD_GROUP_TRG" 
BEFORE INSERT ON T_STD_GROUP 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_STD_GROUP IS NULL THEN
      SELECT T_STD_GROUP_SEQ.NEXTVAL INTO :NEW.PK_STD_GROUP FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_STD_GROUP_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_STD_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_STD_TRG" 
BEFORE INSERT ON T_STD 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_STD IS NULL THEN
      SELECT T_STD_SEQ.NEXTVAL INTO :NEW.PK_STD FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_STD_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_STEU_STEUER_VORANMLDG_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_STEU_STEUER_VORANMLDG_TRG" 
BEFORE INSERT ON T_STEU_STEUER_VORANMLDG 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_STEU_STEUER_VORANMLDG IS NULL THEN
      SELECT T_STEU_STEUER_VORANMLDG_SEQ.NEXTVAL INTO :NEW.PK_STEU_STEUER_VORANMLDG FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_STEU_STEUER_VORANMLDG_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_TEL_TELEFONKARTEN_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_TEL_TELEFONKARTEN_TRG" 
BEFORE INSERT ON T_TEL_TELEFONKARTEN 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_TEL_TELEFONKARTEN_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_TEL_TELEFONKARTEN_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_TEL_TELEFONKARTEN_TRG1" 
BEFORE INSERT ON T_TEL_TELEFONKARTEN 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PK_TEL_TELEFONKARTEN IS NULL THEN
      SELECT T_TEL_TELEFONKARTEN_SEQ.NEXTVAL INTO :NEW.PK_TEL_TELEFONKARTEN FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_TEL_TELEFONKARTEN_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VER_VERTRAG_MIETE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_VER_VERTRAG_MIETE_TRG" 
BEFORE INSERT ON T_VER_VERTRAG_MIETE 
FOR EACH ROW 
BEGIN
	--
	select T_VER_VERTRAG_MIETE_SEQ.NEXTVAL
	INTO :NEW.PK_VER_VERTRAG_MIETE 
	FROM DUAL;
	--
	<<COLUMN_SEQUENCES>>
	BEGIN
		NULL;
	END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "COMPANY"."T_VER_VERTRAG_MIETE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VER_VERTRAG_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPANY"."T_VER_VERTRAG_TRG" 
BEFORE INSERT ON T_VER_VERTRAG 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "COMPANY"."T_VER_VERTRAG_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure GETCOMPINPBELEGEALL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."GETCOMPINPBELEGEALL" (p_inp_belege_all_old number, p_inp_belege_all_new number) 
is
v_comp_inp_belege_all  ty_comp_inp_belege_all;

 v_inp number;
begin 

 v_inp := 5;
 dbms_output.put_line(v_inp);


end;


/
--------------------------------------------------------
--  DDL for Procedure LOAD_KTBL_2018
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."LOAD_KTBL_2018" as
    begin
    begin

    pkg_ktbl.p_add_kontenblatt_mit_ssis (2018);
    end;

    begin

pkg_ktbl.p_add_date;
end;

begin
pkg_ktbl.p_set_relation_initial;
end;

begin 
  pkg_ktbl.p_upd_kontenblatt;
end;


begin 
pkg_ktbl.p_del_duplicates;
end;
end;


/
--------------------------------------------------------
--  DDL for Procedure LOAD_KTBL_2019
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."LOAD_KTBL_2019" as
    begin
    begin

    pkg_ktbl.p_add_kontenblatt_ohne_ssis(2019);
    end;

    begin

pkg_ktbl.p_add_date;
end;

begin
pkg_ktbl.p_set_relation_initial;
end;

--update imp_kontenblatt_2018 set belegdatum =  substr(belegdatum,9,2) || substr(belegdatum,3,4) || '2019'   where substr(belegdatum,1,3) = '19.';
--commit;

--update imp_kontenblatt_2018 set belegdatum = substr(belegdatum,1,6) || '2019'  where substr(belegdatum, 1,3) = '19.';
--commit;


begin 
  pkg_ktbl.p_upd_kontenblatt;
end;


begin 
pkg_ktbl.p_del_duplicates;
end;
end;


/
--------------------------------------------------------
--  DDL for Procedure LOAD_KTBL_2020
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."LOAD_KTBL_2020" as

    begin
    begin

    pkg_ktbl.p_add_kontenblatt_mit_ssis (2020);
    end;

    begin

pkg_ktbl.p_add_date;
end;

begin
pkg_ktbl.p_set_relation_initial;
end;

--update imp_kontenblatt_2018 set belegdatum =  substr(belegdatum,9,2) || substr(belegdatum,3,4) || '2020'   where substr(belegdatum,1,3) = '20.' and substr(belegdatum,6,3) ='.00' ;


--commit;

--update imp_kontenblatt_2018 set belegdatum = substr(belegdatum,1,6) || '2020'  where substr(belegdatum, 7,4) = 0020;
--commit;

--update imp_kontenblatt_2018 set belegdatum = substr(belegdatum,1,6) || '2020'  where substr(belegdatum, 7,4) = 0020;
--commit;

begin 
  pkg_ktbl.p_upd_kontenblatt;
end;


begin 
pkg_ktbl.p_del_duplicates;
end;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_INP_BEL_ALL_FROM_ZUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_INP_BEL_ALL_FROM_ZUS" ( p_FK_ABL_ORDNER_PAGE number,p_fk_main_key number)as
begin
INSERT INTO inp_belege_all (


    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
 --   fk_zahlungsart,
    fk_verwendungszweck,
    fk_location,

    bezeichnung,
    bel_datum,
    brutto_betrag,
   -- fk_waehrung,
    comm_sonstiges,
    beleg_uhrzeit,

    brutto_betrag_incl_trinkg,
   -- fk_frmdw,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    brutto_betrag_eur,

    brutto_incl_trinkg_eur,
    la_datum,
    fk_la_wdh,
    fk_status,
    FK_ABL_ORDNER_PAGE
)   
select 

    zus."FK_Kategorie",
    zus.fk_buchungstag,
    zus.fk_main_key, --fk_buchung,
    --umsatzart fk_zahlungsart,
    zus."FK_Verwendungszweck",  
    fk_location,

    zus.buchungstext, --bezeichnung,
    zus."Buchungstag", --bel_datum,
    abs(zus."Betrag"), ---brutto_betrag,
    zus.fk_main_key || chr(10) || zus."Buchungstag", --comm_sonstiges,
    zus."Buchungstag", --bel_datum,

    zus."Betrag", ---brutto_betrag_incl_trinkg,
   -- zus."Fremdwährung", --fk_frmdw,
    abs(zus."Fremdwährungsbetrag"), --frmdw_brutto_betrag,
    abs(zus."Fremdwährungsbetrag"), --frmdw_brutto_incl_trinkg,
    abs(zus."Betrag"), ---brutto_betrag_eur,

    abs(zus."Betrag"), ---brutto_incl_trinkg_eur, 
    zus.wertt_tag ||'.'||zus.wertt_monat||'.'|| zus.wertt_jahr, 
    zus.wiederholung,    
    10 ,  --fk_status
    p_FK_ABL_ORDNER_PAGE
    from  v_konten_zus zus 
      left join kto_girokonto gir on zus.fk_main_key = gir.fk_main_key
      left join kto_kreditkarte kred on kred.fk_main_key = zus.fk_main_key

    where zus.fk_main_key = p_fk_main_key;  -- :PK_beleg;
    commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_INP_BEL_ALL_FROM_ZUS2
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_INP_BEL_ALL_FROM_ZUS2" ( p_FK_ABL_ORDNER_PAGE number,p_fk_main_key number)as
begin
INSERT INTO inp_belege_all (


    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
 --   fk_zahlungsart,
    fk_verwendungszweck,
    fk_location,

    bezeichnung,
   -- bel_datum,
    brutto_betrag,
   -- fk_waehrung,
    comm_sonstiges,
   -- beleg_uhrzeit,

   brutto_betrag_incl_trinkg,
   -- fk_frmdw,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    brutto_betrag_eur,

    brutto_incl_trinkg_eur,
   -- la_datum,
   -- fk_la_wdh,
    fk_status,
    FK_ABL_ORDNER_PAGE
)   
select 

    zus."FK_Kategorie",
    zus.fk_buchungstag,
    zus.fk_main_key, --fk_buchung,
    --umsatzart fk_zahlungsart,
    zus."FK_Verwendungszweck",  
    fk_location,

    zus.buchungstext, --bezeichnung,
    --zus."Buchungstag", --bel_datum,
    abs(zus."Betrag"), ---brutto_betrag,
    zus.fk_main_key, --comm_sonstiges,
  --  zus."Buchungstag", --bel_datum,

    zus."Betrag", ---brutto_betrag_incl_trinkg,
   -- zus."Fremdwährung", --fk_frmdw,
    abs(zus."Fremdwährungsbetrag"), --frmdw_brutto_betrag,
    abs(zus."Fremdwährungsbetrag"), --frmdw_brutto_incl_trinkg,
    abs(zus."Betrag"), ---brutto_betrag_eur,

    abs(zus."Betrag"), ---brutto_incl_trinkg_eur, 
 --   zus.wertt_tag ||'.'||zus.wertt_monat||'.'|| zus.wertt_jahr, 
   -- zus.wiederholung,    
    10 ,  --fk_status
    p_FK_ABL_ORDNER_PAGE
    from  v_konten_zus zus 
      left join kto_girokonto gir on zus.fk_main_key = gir.fk_main_key
      left join kto_kreditkarte kred on kred.fk_main_key = zus.fk_main_key

    where zus.fk_main_key = p_fk_main_key ;  -- :PK_beleg;
    commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_INP_BELEGE_FROM_LEX
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_INP_BELEGE_FROM_LEX" (p_pk_inp_belege_all number, p_page number, p_jahr number, p_relation varchar2) as
 v_page number;
 v_jahr number ;
 v_pk_inp_belege_all number;
begin
v_page := P_page;
v_jahr := p_jahr;

for i in (
select relation
from t_lex_long ll
 left join t_rel_lex_kto_bel relbel on relbel.fk_lex_relation = ll.relation
 left join t_inp_belege_all inp on inp.fk_lex_relation_src = ll.relation
where jahr = v_jahr and status is null 
--and relbel.fk_relation is null
and pk_inp_belege_all is null and ( relation = p_relation or p_relation is null)
) loop 



    insert into t_inp_belege_ALL (
            pk_inp_belege_all,

            bel_datum,
            bezeichnung,
            brutto_betrag,
            fk_std_inp_STATUS,
            --fk_Kategorie,
            --fk_verwendungszweck,
            fk_abl_ordner_page,
            fk_lex_relation_src,
            comm_sonstiges,
            create_at,
            modify_at
            )

  select 
            p_pk_inp_belege_all,
            case when  instr(belegdat,'-')>0 then substr(belegdat, 9,2) || '.' || substr(belegdat, 6,2) || '.' || substr(belegdat, 1,4) else  BELEGDAT end bt,
            Buchungstext,
            abs(BetragEUR) Betrag,
            6 Status,
            --"FK_Kategorie" ,
            --"FK_Verwendungszweck",
            v_page,  --2661
            relation,
            relation,
            sysdate,
            sysdate
            from t_lex_long
            where relation = i.relation ;
            commit;

end loop;

/*
   insert into t_inp_belege_ALL (
            pk_inp_belege_all,

            bel_datum,
            bezeichnung,
            brutto_betrag,
            fk_std_inp_STATUS,
            --fk_Kategorie,
            --fk_verwendungszweck,
            fk_abl_ordner_page,
            fk_lex_relation_src,
            comm_sonstiges,
            create_at,
            modify_at
            )

  select 
            null p_pk_inp_belege_all,
            case when  instr(belegdat,'-')>0 then substr(belegdat, 9,2) || '.' || substr(belegdat, 6,2) || '.' || substr(belegdat, 1,4) else  BELEGDAT end bt,
            Buchungstext,
            abs(BetragEUR) Betrag,
            6 Status,
            --"FK_Kategorie" ,
            --"FK_Verwendungszweck",
            :v_page,  --2661
            relation,
            relation,
            sysdate,
            sysdate
            from t_lex_long
            where periode = 7 and jahr = 2020
            and status is null;
            commit;

*/
end;

/
--------------------------------------------------------
--  DDL for Procedure P_ADD_INP_FROM_ZUS2
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_INP_FROM_ZUS2" (p_fk_main_key number) as
  v_inp number;
begin
for i in  (
select zus.fk_Main_key 
    --, max(inp.FK_Kategorie) FK_Kategorie, arb.jahr, inp.dummy, zus.bucht_jahr, zus."FK_Kontotyp"
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 left join t_arbeitstage arb on arb.pk_arbeitstage = inp.fk_arbeitstag
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null and inp.pk_inp_belege_all is null 
and zus.fk_main_key = p_fk_main_key or p_fk_main_key is null
group by zus.fk_Main_key
--arb.jahr, inp.dummy, zus.bucht_jahr, zus."FK_Kontotyp"
) loop

v_inp := inp_belege_all_seq.nextval;
INSERT INTO inp_belege_all (
pk_inp_belege_all,

    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
 --   fk_zahlungsart,
    fk_verwendungszweck,
    fk_location,

    bezeichnung,
    --bel_datum,
    brutto_betrag,
   -- fk_waehrung,
    comm_sonstiges,
   -- beleg_uhrzeit,

    brutto_betrag_incl_trinkg,
   -- fk_frmdw,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    brutto_betrag_eur,

    brutto_incl_trinkg_eur,
    --la_datum,
    --fk_la_wdh,
    fk_status,
    FK_ABL_ORDNER_PAGE
)   
select 
v_inp ,
    zus."FK_Kategorie",
    zus.fk_buchungstag,
    zus.fk_main_key, --fk_buchung,
    --umsatzart fk_zahlungsart,
    zus."FK_Verwendungszweck",  
    fk_location,

    zus.buchungstext, --bezeichnung,
    --zus."Buchungstag", --bel_datum,
    abs(zus."Betrag"), ---brutto_betrag,
    zus.fk_main_key || chr(10) || zus."Buchungstag" || chr(10) || zus."Fremdwährung", --comm_sonstiges,
   -- zus."Buchungstag", --beleg-uhrzeit,


    zus."Betrag", ---brutto_betrag_incl_trinkg,
    --zus."Fremdwährung", --fk_frmdw,
    abs(zus."Fremdwährungsbetrag"), --frmdw_brutto_betrag,
    abs(zus."Fremdwährungsbetrag"), --frmdw_brutto_incl_trinkg,
    abs(zus."Betrag"), ---brutto_betrag_eur,

    abs(zus."Betrag"), ---brutto_incl_trinkg_eur, 
   -- zus.wertt_tag ||'.'||zus.wertt_monat||'.'|| zus.wertt_jahr, 
   -- zus.wiederholung,    
    10 ,  --fk_status
    2942 p_FK_ABL_ORDNER_PAGE
    from  v_konten_zus zus 
      left join kto_girokonto gir on zus.fk_main_key = gir.fk_main_key
      left join kto_kreditkarte kred on kred.fk_main_key = zus.fk_main_key

    where zus.fk_main_key = i.fk_main_key ;

    commit;

    for j in (select * from t_rel_lex_kto_bel where fk_main_key = i.fk_Main_key  and fk_inp_belege_all is null) loop

   -- insert into t_rel_lex_kto_bel (fk_main_key, fk_inp_belege_all)
  --  values (j.fk_main_key,v_inp );
   update t_rel_lex_kto_bel set fk_inp_belege_all = v_inp where pk_rel_lex_kto_bel = j.pk_rel_lex_kto_bel;
   commit;

    commit;

    end loop;

    commit;
end loop;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_INV_ZAHLUNG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_INV_ZAHLUNG" as
begin

merge into t_rel_inventar_zahlung t1
using (

select zus.fk_Main_key || ',',  16 fk_inventar
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus where instr(Buchungstext, 'HUK')>0 
 --and instr(Buchungstext, 'M-R 7408')>0
 ) zus on zus.fk_main_key = relbel.fk_main_key

group by zus.fk_Main_key,  inp.fk_inventar

) t2 on (t1.fk_main_key = t2.fk_main_key and t1.fk_inventar = t2.fk_inventar)
when not matched then
insert (
 t1.fk_Main_key,
 t1.fk_inventar,
 t1.created_at


)
values (
 t2.fk_Main_key,
 t2.fk_inventar,
 sysdate

);
commit;
--==
merge into t_rel_inventar_zahlung t1
using (

select zus.fk_Main_key,  inp.fk_inventar
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 left join v_konten_zus zus on zus.fk_main_key = relbel.fk_main_key
group by zus.fk_Main_key,  inp.fk_inventar

) t2 on (t1.fk_main_key = t2.fk_main_key and t1.fk_inventar = t2.fk_inventar)
when not matched then
insert (
 t1.fk_Main_key,
 t1.fk_inventar,
 t1.created_at


)
values (
 t2.fk_Main_key,
 t2.fk_inventar,
 sysdate

);
commit;

--==
merge into kto_girokonto t1
using (
select zus.fk_Main_key , inp.FK_Kategorie
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null
group by zus.fk_Main_key,   inp.FK_Kategorie  


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Kategorie" = t2.fk_kategorie;
commit;

merge into kto_kreditkarte t1
using (
select zus.fk_Main_key , inp.FK_Kategorie
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null
group by zus.fk_Main_key,   inp.FK_Kategorie  


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Kategorie" = t2.fk_kategorie;
commit;


merge into kto_girokonto t1
using (
select zus.fk_Main_key , max(inp.FK_Verwendungszweck) FK_Verwendungszweck
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null and inp.fk_verwendungszweck is not null
group by zus.fk_Main_key,   inp.FK_verwendungszweck 


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Verwendungszweck" = t2.fk_verwendungszweck;
commit;

merge into kto_tagesgeldkonto t1
using (
select zus.fk_Main_key , inp.FK_Kategorie
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null
group by zus.fk_Main_key,   inp.FK_Kategorie  


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Kategorie" = t2.fk_kategorie;
commit;

merge into kto_tagesgeldkonto t1
using (
select zus.fk_Main_key , max(inp.FK_Verwendungszweck) FK_Verwendungszweck, "FK_Kontotyp"
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Verwendungszweck" is null and inp.fk_verwendungszweck is not null
group by zus.fk_Main_key,   inp.FK_verwendungszweck ,"FK_Kontotyp"


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Verwendungszweck" = t2.fk_verwendungszweck;
commit;

merge into kto_tagesgeldkonto t1
using (
select zus.fk_Main_key , inp.FK_Kategorie, zus."FK_Kategorie", "FK_Kontotyp"
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null
group by zus.fk_Main_key,   inp.FK_Kategorie  , zus."FK_Kategorie", "FK_Kontotyp"


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Kategorie" = t2.fk_kategorie;
commit;



merge into kas_kasse t1
using (
select zus.fk_Main_key , inp.FK_Kategorie, zus."FK_Kategorie", "FK_Kontotyp"
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null
group by zus.fk_Main_key,   inp.FK_Kategorie  , zus."FK_Kategorie", "FK_Kontotyp"


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1.FK_Kategorie = t2.fk_kategorie;
commit;


merge into kto_paypal t1
using (
select zus.fk_Main_key , max(inp.FK_Kategorie) FK_Kategorie
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Kategorie" is null
group by zus.fk_Main_key


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Kategorie" = t2.fk_kategorie;
commit;




merge into kto_girokonto t1
using (
select zus.fk_Main_key , max(inp.FK_Verwendungszweck) FK_Verwendungszweck, count(*), "FK_Kontotyp"
from t_rel_lex_kto_bel relbel
 left join (select * from inp_belege_all ) inp on relbel.fk_inp_belege_all = inp.pk_inp_belege_all
 join (select * from v_konten_zus 
 ) zus on zus.fk_main_key = relbel.fk_main_key
where zus."FK_Verwendungszweck" is null and inp.fk_verwendungszweck is not null

group by zus.fk_Main_key,   inp.FK_verwendungszweck , "FK_Kontotyp"


) t2 on (t1.fk_main_key = t2.fk_main_key )
when matched then
update set
t1."FK_Verwendungszweck" = t2.fk_verwendungszweck;
commit;

end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_NEW_INP_BEL_KTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_NEW_INP_BEL_KTO" (p_fk_main_key number, p_page number) as
  v_seq number;
  v_page number;
begin

 v_seq := inp_belege_all_seq.nextval;

 if p_page is null then v_page :=1; else v_page := p_page; end if; 

 insert into inp_belege_ALL (
    pk_inp_belege_all,
    bel_datum,
    bezeichnung,
    brutto_betrag,
    fk_STATUS,
    fk_Kategorie,
    fk_verwendungszweck,
    fk_abl_ordner_page
    )
    select 
    v_seq ,
    to_date(substr("Buchungstag",1,10), 'DD.MM.YYYY HH24:MI:SS') bt,
    Buchungstext ||  ' (' || fk_main_key || ')',
    abs("Betrag") Betrag,
    10 Status,
    "FK_Kategorie" ,
    "FK_Verwendungszweck",
    v_page
    from v_konten_zus
    where fk_main_key = p_fk_main_key;


    insert into t_rel_lex_kto_bel (
    fk_main_key,
    fk_inp_belege_all
    )
    values (
  p_fk_main_key,
  v_seq 

    ); 
   commit;


end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_REL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_REL" (p_jahr number) as 
begin
insert into t_rel_lex_kto_bel (
fk_relation,
fk_inp_belege_all,
fk_main_key,
created_at

)
select distinct relation, pk_inp_belege_all, zus.fk_main_key, sysdate
from t_lex_long ll
 left join t_rel_lex_kto_bel relbel on relbel.fk_relation = ll.relation
 left join inp_belege_all inp on inp.fk_relation_src = ll.relation
 left join v_konten_zus zus on zus.bucht_jahr = p_jahr and abs(zus."Betrag") = ll.betrageur
 left join t_lex_bank_konto lbk on lbk.fk_bank_konto = zus.fk_konto
where jahr = p_jahr and status is null and relbel.fk_relation is null and (ll.habenkto = lbk.fk_lex_konto or ll.sollkto = lbk.fk_lex_konto) ;
commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_REL_FROM_LEX
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_REL_FROM_LEX" (p_jahr number) as 
begin
insert into t_rel_lex_kto_bel (
fk_relation,
fk_inp_belege_all,
fk_main_key,
created_at

)
select distinct relation, pk_inp_belege_all, zus.fk_main_key, sysdate
from t_lex_long ll
 left join t_rel_lex_kto_bel relbel on relbel.fk_relation = ll.relation
 left join inp_belege_all inp on inp.fk_relation_src = ll.relation
 left join v_konten_zus zus on zus.bucht_jahr = p_jahr and abs(zus."Betrag") = ll.betrageur
 left join t_lex_bank_konto lbk on lbk.fk_bank_konto = zus.fk_konto
where jahr = p_jahr and status is null and relbel.fk_relation is null and (ll.habenkto = lbk.fk_lex_konto or ll.sollkto = lbk.fk_lex_konto) ;
commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_REL_FROM_ZUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_REL_FROM_ZUS" as
begin
insert into t_rel_lex_kto_bel (
fk_relation,
fk_inp_belege_all,
fk_main_key,
created_at

)
select   relation, pk_inp_belege_all, zus.fk_main_key, sysdate
from v_konten_zus zus
left join t_rel_lex_kto_bel relbel on relbel.fk_main_key = zus.fk_main_key
left join v_inp_belege_all vinp on vinp.arb_jahr = zus.bucht_jahr and zus."Betrag" = vinp.Brutto_Betrag
left join (select * from t_lex_long where status is null) ll on ll.jahr  = zus.bucht_jahr and ll.betrageur = zus."Betrag"
where relbel.fk_main_Key is null;
commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_SPLIT_TO_IMP_KTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_SPLIT_TO_IMP_KTO" as
 begin

--1
 merge into imp_kontenblatt_2018 t1
 using (
select  kto.id , max(ll.split_nr) split_nr, max(ll.flg_split_buch) flg_split_buch
from imp_kontenblatt_2018 kto 
  left join imp_kontenblatt_2018 kto2 on kto.id = kto2.id
 left join (
 --0
   select nvl(habenkto,0) habenkto, nvl(sollkto,0) sollkto, nvl(ust_kto,0) ust_kto, relation, null rel, fk_relation_main, null rel_main, split_nr, jahr, flg_split_buch
   from t_lex_long
   where flg_split_buch = 1
   and split_nr  = 0
   union
--1
 select nvl(ll_0.habenkto,ll_1.habenkto) habenkto, nvl(ll_0.sollkto,ll_1.sollkto) sollkto, nvl(ll_0.ust_kto,ll_1.ust_kto) ust_kto, ll_0.relation, ll_0.fk_relation_main, ll_1.relation, ll_1.fk_relation_main, ll_1.split_nr, ll_0.jahr, ll_1.flg_split_buch
 from (  select *
   from t_lex_long
   where flg_split_buch = 1
   and split_nr  = 0) ll_0
     left join (  select *
   from t_lex_long
   where flg_split_buch = 1
   and split_nr  >0) ll_1 on ll_0.fk_relation_main = ll_1.fk_relation_main
   union
    select  nvl(ll_0.sollkto,ll_1.sollkto) sollkto, nvl(ll_0.habenkto,ll_1.habenkto) habenkto, nvl(ll_0.ust_kto,ll_1.ust_kto) ust_kto, ll_0.relation, ll_0.fk_relation_main, ll_1.relation, ll_1.fk_relation_main, ll_1.split_nr, ll_0.jahr, ll_1.flg_split_buch
 from (  select *
   from t_lex_long
   where flg_split_buch = 1
   and split_nr  = 0) ll_0
     left join (  select *
   from t_lex_long
   where flg_split_buch = 1
   and split_nr  >0) ll_1 on ll_0.fk_relation_main = ll_1.fk_relation_main





 ) ll 
   on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer and kto.jahr = ll.jahr and ll.habenkto = kto2.kontonummer and ll.sollkto = kto2.gegenkonto and ll.ust_kto = kto.ustkonto
where kto.split_nr is null or kto.split_nr = 0
--where kto.fk_relation in ('2020/416/0','2020/418/0', '2020/420/0','2020/422/0')
group by kto.id
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = nvl(t2.split_nr,0),
   t1.flg_split_buch = nvl(t2.flg_split_buch,0);
   commit;

   --2
   update imp_kontenblatt_2018 set flg_split_buch = 1 where  fk_relation in (select distinct fk_relation from imp_kontenblatt_2018 where flg_split_buch = 1);
commit;

--3
merge into imp_kontenblatt_2018 t1
using (
select kto2.id, max(kto.split_nr) split_nr_neu, max(kto.flg_split_buch) flg_split_buch_neu, max(kto.fk_relation_sub) fk_relation_sub_neu
from (select * from imp_kontenblatt_2018 where flg_split_buch = 1 and ustkonto in (1401,1406)) kto
   join (select * from imp_kontenblatt_2018 where flg_split_buch = 1) kto2 on kto.ustkonto = to_number(kto2.kontonummer) and kto.fk_relation = kto2.fk_relation
   where kto.fk_relation in ('2020/418/0','2020/416/0','2020/420/0','2020/422/0')
   group by kto2.id
   ) t2 on (t1.id = t2.id)
when matched then
 update set t1.split_nr = t2.split_nr_neu,
 t1.flg_split_buch = t2.flg_split_buch_neu,
 t1.fk_relation_sub = t2.fk_relation_sub_neu;
 commit;


   end;


/
--------------------------------------------------------
--  DDL for Procedure P_ADD_TAGESGELD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_ADD_TAGESGELD" AS 
BEGIN
         update KTO_tagesgeldkonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;


               merge into KTO_tagesgeldkonto t1
  using (
        select pk_arbeitstage, 
        id

        from (select * from KTO_tagesgeldkonto where "Buchungstag" is not null and fk_buchungstag is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel."Buchungstag",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_buchungstag= t2.pk_arbeitstage;
        commit;

  merge into KTO_tagesgeldkonto t1
  using (
          select pk_arbeitstage, 
           id

          from (select * from KTO_tagesgeldkonto where "Wertstellung" is not null and fk_wertstellung is null) bel,
          t_arbeitstage arb
          where  to_date(substr(bel."Wertstellung",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_wertstellung= t2.pk_arbeitstage;
        commit;
END P_ADD_TAGESGELD;


/
--------------------------------------------------------
--  DDL for Procedure P_COPY_KRED
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_COPY_KRED" as
begin
insert into kto_kreditkarte (

    id,
    "Buchungstag",
    "Beleg",
    "Unternehmen",
    "Betrag",
    "Währung",
    "Betrag Ursprung",
    "Währung Ursprung",
    "Belastete Kreditkarte",
    "Kategorie",
    "Wertstellungsmonat",
    "FK_Kategorie",
    "FK_Verwendungszweck",
    "FK_Kontotyp",
    "Dummy",
    "Referenz",
    fk_main_beleg,
    fk_main_key,
    fk_buchungstag,
    fk_beleg,
    bemerkung,
    fk_konto,
    kontostand,
    wiederholung,
    "NÄCHSTE_ZAHLUNG",
    fk_buchung_steuer,
    fk_vorgang

)
select

 710,
    "Buchungstag",
    "Beleg",
    "Unternehmen",
    "Betrag",
    "Währung",
    "Betrag Ursprung",
    "Währung Ursprung",
    "Belastete Kreditkarte",
    "Kategorie",
    "Wertstellungsmonat",
    "FK_Kategorie",
    "FK_Verwendungszweck",
    "FK_Kontotyp",
    "Dummy",
    "Referenz",
    fk_main_beleg,
    null fk_main_key,
    null fk_buchungstag,
    null fk_beleg,
    bemerkung,
    fk_konto,
    kontostand,
    wiederholung,
    "NÄCHSTE_ZAHLUNG",
    fk_buchung_steuer,
    fk_vorgang

from kto_kreditkarte
where id = 709;
commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_CREATE_KAS_FROM_LEX
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_CREATE_KAS_FROM_LEX" as

  v_seq_kas number;
  v_fk_main_key_kas number;
  v_relation varchar(4000 char);
 begin

 for i in (  
            select kas.fk_relation
            from 
             (select * from imp_kontenblatt_2018 where kontonummer = 1600) kas
              left join t_rel_lex_kto_bel relkto on kas.fk_relation = relkto.fk_relation 
              where relkto.fk_relation is null and kas.fk_relation is not null
              ) loop

 --v_relation selektieren
    v_relation:= i.fk_relation;

 --neue Kassenbuchung erzeugen - aus Lex_Buchung
   select KAS_KASSE_SEQ.nextval
   into v_seq_kas
   from dual;


 insert into kas_kasse (pk_kas_kasse,datum, buchungstext, betrag, jahr, comm) 
 select v_seq_kas,belegdatum, buchungstext,nvl(sollbetrag_eur,0) - nvl(habenbetrag_eur,0) , jahr, fk_relation from imp_kontenblatt_2018 where fk_relation = 	v_relation and kontonummer = '01600';
commit;


--Kassenbuchung updaten (Arbeitstag, Kontonummer, kontotyp, fk_main_key)
update Kas_Kasse set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;

merge into kas_kasse t1 
using (
select kas.fk_main_key,
      nvl(kas.datum, zus."Buchungstag") dat,
      nvl(kas.buchungstext, zus.buchungstext) txt,
      nvl(kas.jahr, zus.bucht_jahr) jahr,
      nvl(kas.betrag, -zus."Betrag") Betrag

from kas_kasse kas
 left join v_konten_zus zus on kas.fk_main_key_bankkonto = zus.fk_main_key
 where pk_kas_kasse = v_seq_kas
 ) t2 on (t1.fk_main_key = t2.fk_main_key)
 when matched then 
 update set t1.datum = t2.dat,
    t1.buchungstext = t2.txt,
    t1.jahr = t2.jahr,
    t1.betrag  = t2.Betrag;
commit;

merge into kas_kasse t1
  using (
        select pk_arbeitstage, 
       pk_kas_kasse

        from (select * from kas_kasse where datum is not null and fk_arbeitstag is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.datum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_kas_kasse = t2.pk_kas_kasse)
        when matched then
        update set t1.fk_arbeitstag= t2.pk_arbeitstage;
        commit;


   update kas_kasse set fk_konto = 61 where fk_konto is null;
   update kas_kasse set fk_kontotyp = 6 where fk_kontotyp is null;
   update kas_kasse set creation_date = sysdate where creation_date is null;
   commit;

  --Kassenbuchung - Lexwarebuchung zuordnen 
   select fk_main_key
   into  v_fk_main_key_kas
   from kas_kasse
   where instr(comm, v_relation)>0;

   insert into t_rel_lex_kto_bel (fk_main_key, fk_relation)
   select v_fk_main_key_kas, v_relation
   from dual;
   commit;
  end loop;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_CREATE_KAS_ON_LEX
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_CREATE_KAS_ON_LEX" (p_relation varchar2) as
  v_seq_kas number;
  v_fk_main_key_kas number;
  v_relation varchar(4000 char);
 begin

  update imp_kontenblatt_2018 set fk_relation = jahr || '/' || buchungsnummer ||'/0' where fk_relation is null;
 commit;
  update imp_kontenblatt_2018 set fk_relation_sub = jahr || '/' || buchungsnummer ||'/0' where fk_relation_sub is null;
 commit;

  update t_lex_long set fk_relation_main = substr(relation,1,instr(relation,'/',-1)) || '0' where fk_relation_main is null;  
 commit;


 --v_relation selektieren
    v_relation:= p_relation;

 --neue Kassenbuchung erzeugen - aus Lex_Buchung
   select KAS_KASSE_SEQ.nextval
   into v_seq_kas
   from dual;


 insert into kas_kasse (pk_kas_kasse,datum, buchungstext, betrag, jahr, comm) 
 select v_seq_kas,belegdatum, buchungstext,nvl(sollbetrag_eur,0) - nvl(habenbetrag_eur,0) , jahr, fk_relation from imp_kontenblatt_2018 where fk_relation = 	v_relation and kontonummer = '01600';
commit;


--Kassenbuchung updaten (Arbeitstag, Kontonummer, kontotyp, fk_main_key)
update Kas_Kasse set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;

merge into kas_kasse t1 
using (
select kas.fk_main_key,
      nvl(kas.datum, zus."Buchungstag") dat,
      nvl(kas.buchungstext, zus.buchungstext) txt,
      nvl(kas.jahr, zus.bucht_jahr) jahr,
      nvl(kas.betrag, -zus."Betrag") Betrag

from kas_kasse kas
 left join v_konten_zus zus on kas.fk_main_key_bankkonto = zus.fk_main_key
 ) t2 on (t1.fk_main_key = t2.fk_main_key)
 when matched then 
 update set t1.datum = t2.dat,
    t1.buchungstext = t2.txt,
    t1.jahr = t2.jahr,
    t1.betrag  = t2.Betrag;
commit;

merge into kas_kasse t1
  using (
        select pk_arbeitstage, 
       pk_kas_kasse

        from (select * from kas_kasse where datum is not null and fk_arbeitstag is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.datum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_kas_kasse = t2.pk_kas_kasse)
        when matched then
        update set t1.fk_arbeitstag= t2.pk_arbeitstage;
        commit;


   update kas_kasse set fk_konto = 61 where fk_konto is null;
   update kas_kasse set fk_kontotyp = 6 where fk_kontotyp is null;
   update kas_kasse set creation_date = sysdate where creation_date is null;
   commit;

  --Kassenbuchung - Lexwarebuchung zuordnen 
   select fk_main_key
   into  v_fk_main_key_kas
   from kas_kasse
   where instr(comm, v_relation)>0;

   insert into t_rel_lex_kto_bel (fk_main_key, fk_relation)
   select v_fk_main_key_kas, v_relation
   from dual;
   commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_DB_CHECK_NEW_DUPLIKAT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_DB_CHECK_NEW_DUPLIKAT" as
  v_num number;

begin

for i in (select bas.*, rownum
from
(
select jahr, betrag
from t_lex_long 
where jahr = 2020 and status is null
group by jahr, betrag
having count(*)>1
order by betrag
) bas
where betrag > 25) loop

 v_num := T_DUPLIKAT_CHECK_SEQ.nextval;

  insert into t_duplikat_check (pk_duplikat_check, fk_duplikat_type, creation_date)
  values (v_num,1 , sysdate);
  commit;

  for j in (select relation
from t_lex_long ll
where jahr = 2020 and status is null and i.jahr = ll.jahr and i.betrag = ll.betrag ) loop
   insert into T_DUPLIKAT ( fk_relation1_lex, fk_duplikat_check)
   values (j.relation, v_num);

   commit;

 end loop;



end loop;
end;

/
--------------------------------------------------------
--  DDL for Procedure P_HEUTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_HEUTE" as
begin
update t_lex_long set datum_ok = sysdate where status is not null;
commit;



update  kto_girokonto set datum_lex_buchung_ok = sysdate
where "Betrag" = 0;
commit;


merge into t_lex_long t1
using (
with inp_ok as (
select *
from inp_belege_all
where datum_buchung_ok is not null
),

inp_rel as (
 select fk_inp_belege_all, count(*) cnt_inp
 from t_rel_lex_kto_bel
 group by fk_inp_belege_all

),
kto_rel as (
 select fk_main_Key, count(*) cnt_kto
 from t_rel_lex_kto_bel
 group by fk_main_key

),
lex_rel as (
select fk_relation , count(*) cnt_lex
 from t_rel_lex_kto_bel relbel
   join t_lex_long ll on ll.relation = relbel.fk_relation
 where status is null
 group by fk_relation
 )
 select  relbel.fk_relation
 from inp_ok
 join t_rel_lex_kto_bel relbel on inp_ok.pk_inp_belege_all = relbel.fk_inp_belege_all
 join (select * from inp_rel where cnt_inp = 1)  inp_rel on inp_rel.fk_inp_belege_all = relbel.fk_inp_belege_all
 join (select * from kto_rel where cnt_kto = 1) kto_rel on kto_rel.fk_main_key = relbel.fk_main_key
 join (select * from lex_rel where cnt_lex = 1) lex_rel on lex_rel.fk_relation = relbel.fk_relation
 ) t2 on (t1.relation = t2.fk_relation)
 when matched then 
  update set t1.datum_ok = sysdate;
  commit;


merge into kto_girokonto t1
using (
with inp_ok as (
select *
from inp_belege_all
where datum_buchung_ok is not null
),

inp_rel as (
 select fk_inp_belege_all, count(*) cnt_inp
 from t_rel_lex_kto_bel
 group by fk_inp_belege_all

),
kto_rel as (
 select fk_main_Key, count(*) cnt_kto
 from t_rel_lex_kto_bel
 group by fk_main_key

),
lex_rel as (
select fk_relation , count(*) cnt_lex
 from t_rel_lex_kto_bel relbel
   join t_lex_long ll on ll.relation = relbel.fk_relation
 where status is null
 group by fk_relation
 )
 select relbel.fk_main_key
 from inp_ok
 join t_rel_lex_kto_bel relbel on inp_ok.pk_inp_belege_all = relbel.fk_inp_belege_all
 join (select * from v_konten_zus where "FK_Kontotyp" = 1) zus on zus.fk_main_key = relbel.fk_main_key

 join (select * from inp_rel where cnt_inp = 1)  inp_rel on inp_rel.fk_inp_belege_all = relbel.fk_inp_belege_all
 join (select * from kto_rel where cnt_kto = 1) kto_rel on kto_rel.fk_main_key = relbel.fk_main_key
 join (select * from lex_rel where cnt_lex = 1) lex_rel on lex_rel.fk_relation = relbel.fk_relation
 ) t2 on (t1.fk_main_key = t2.fk_main_Key)
 when matched then 
  update set t1.datum_lex_buchung_ok = sysdate;
  commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_INP_BEL_COP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_INP_BEL_COP" (bel_nr number, p_i number, p_page_nr number) AS

begin

for i in 1..p_i  loop
 INSERT INTO t_inp_belege_all (

    fk_lex_buchung,
    fk_bas_kat_kategorie,
    fk_bas_kal_arbeitstag,
    fk_kto_buchung,
    FK_STD_KTO_ZAHLUNGSART,
    fk_std_verw_verwendungszweck,
    fk_inv_inventar,
    fk_proj_projekt,
    belegnummer,
    bezeichnung,
    fk_adr_land,
    fk_adr_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_bas_steu_steuer_satz,
    mwst_betrag,
    brutto_betrag,
    fk_bas_mon_waehrung,
    steuernummer,
    fk_bas_mon_umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    COMM_BEGRUENDUNG,
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSAEULE",
    fk_loc_location,
    PERSOENLICH_VOR_ORT,
    beleg_uhrzeit,
    von_uhrzeit,
    bis_uhrzeit,
    fk_bas_kal_von_arbeitstag,
    fk_bas_kal_bis_arbeitstag,
    comm_adresse,
    tankstellen_nr,
    brutto_betrag_incl_trinkg,
    comm_parkticket,
    frmdw_netto_betrag,
    fk_bas_mon_frmdw,
    fk_bas_mon_frmdw_mwst_satz,
    frmdw_mwst_betrag,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    mwst_betrag_eur,
    brutto_betrag_eur,
    brutto_incl_trinkg_eur,
    netto_betrag_eur,
    preis_pro_menge,
    mengeneinheit,
    la_datum,
    fk_la_konto,
    fk_la_wdh,
    fk_std_inp_status,
    comm_vergehen,
    verg_behoerde,
    verg_cnt_punkte,
    fk_bel_beleg_ablage,
    FK_ABL_ORDNER_PAGE,
   fk_std_inp_zahlungsstatus
)   
select 
    fk_lex_buchung,
    fk_bas_kat_kategorie,
    fk_bas_kal_arbeitstag,
    fk_kto_buchung,
    FK_STD_KTO_ZAHLUNGSART,
    fk_std_verw_verwendungszweck,
    fk_inv_inventar,
    fk_Proj_projekt,
    belegnummer,
    bezeichnung,
    fk_adr_land,
    fk_adr_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_bas_steu_steuer_satz,
    mwst_betrag,
    brutto_betrag,
    fk_bas_mon_waehrung,
    steuernummer,
    fk_bas_mon_umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRUENDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSAEULE",
    fk_loc_location,
    "PERSOENLICH_VOR_ORT",
    beleg_uhrzeit,
    von_uhrzeit,
    bis_uhrzeit,
    fk_bas_kal_von_arbeitstag,
    fk_bas_kal_bis_arbeitstag,
    comm_adresse,
    tankstellen_nr,
    brutto_betrag_incl_trinkg,
    comm_parkticket,
    frmdw_netto_betrag,
    fk_bas_Mon_frmdw,
    fk_bas_mon_frmdw_mwst_satz,
    frmdw_mwst_betrag,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    mwst_betrag_eur,
    brutto_betrag_eur,
    brutto_incl_trinkg_eur,
    netto_betrag_eur,
    preis_pro_menge,
    mengeneinheit,
    la_datum,
    fk_la_konto,
    fk_la_wdh,
    6 fk_std_inp_status,
    comm_vergehen,
    verg_behoerde,
    verg_cnt_punkte,
    fk_bel_beleg_ablage,
   nvl( p_page_nr , FK_ABL_ORDNER_PAGE),
    fk_std_inp_zahlungsstatus
    from  t_inp_belege_all
    where pk_inp_belege_all = bel_nr ;
    commit;
  end  loop;
end;

/
--------------------------------------------------------
--  DDL for Procedure P_INP_BEL_COP_SINGLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_INP_BEL_COP_SINGLE" (p_pk_beleg number) as
begin
INSERT INTO t_inp_belege_all (

    fk_lex_buchung,
    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
    fk_zahlungsart,
    fk_verwendungszweck,
    fk_inventar,
    fk_projekt,
    belegnummer,
    bezeichnung,
    fk_land,
    fk_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_steuersatz,
    mwst_betrag,
    brutto_betrag,
    fk_waehrung,
    steuernummer,
    fk_umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRÜNDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSÄULE",
    fk_location,
    "PERSÖNLICH_VOR_ORT",
    beleg_uhrzeit,
    von_uhrzeit,
    bis_uhrzeit,
    fk_von_arbeitstag,
    fk_bis_arbeitstag,
    comm_adresse,
    tankstellen_nr,
    brutto_betrag_incl_trinkg,
    comm_parkticket,
    frmdw_netto_betrag,
    fk_frmdw,
    fk_frmdw_mwst_satz,
    frmdw_mwst_betrag,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    mwst_betrag_eur,
    brutto_betrag_eur,
    brutto_incl_trinkg_eur,
    netto_betrag_eur,
    preis_pro_menge,
    mengeneinheit,
    la_datum,
    fk_la_konto,
    fk_la_wdh,
    fk_status,
    comm_vergehen,
    verg_behoerde,
    cnt_punkte,
    fk_beleg_ablage,
    FK_ABL_ORDNER_PAGE
)   
select 
    fk_lex_buchung,
    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
    fk_zahlungsart,
    fk_verwendungszweck,
    fk_inventar,
    fk_projekt,
    belegnummer,
    bezeichnung,
    fk_land,
    fk_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_steuersatz,
    mwst_betrag,
    brutto_betrag,
    fk_waehrung,
    steuernummer,
    fk_umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRÜNDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSÄULE",
    fk_location,
    "PERSÖNLICH_VOR_ORT",
    beleg_uhrzeit,
    von_uhrzeit,
    bis_uhrzeit,
    fk_von_arbeitstag,
    fk_bis_arbeitstag,
    comm_adresse,
    tankstellen_nr,
    brutto_betrag_incl_trinkg,
    comm_parkticket,
    frmdw_netto_betrag,
    fk_frmdw,
    fk_frmdw_mwst_satz,
    frmdw_mwst_betrag,
    frmdw_brutto_betrag,
    frmdw_brutto_incl_trinkg,
    mwst_betrag_eur,
    brutto_betrag_eur,
    brutto_incl_trinkg_eur,
    netto_betrag_eur,
    preis_pro_menge,
    mengeneinheit,
    la_datum,
    fk_la_konto,
    fk_la_wdh,
    fk_status,
    comm_vergehen,
    verg_behoerde,
    cnt_punkte,
    fk_beleg_ablage,
    FK_ABL_ORDNER_PAGE
    from  t_inp_belege_all
    where pk_inp_belege_all = p_pk_beleg;  -- :PK_beleg;
    commit;
    end;

/
--------------------------------------------------------
--  DDL for Procedure P_INP_BEL_POS_COP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_INP_BEL_POS_COP" (bel_nr number, bel_pos_nr number, p_i number) AS

begin

for i in 1..p_i  loop
 INSERT INTO inp_belege_pos_all (
    fk_inp_belege_all,
    fk_lex_buchung,
    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
    fk_zahlungsart,
    fk_verwendungszweck,
    fk_inventar,
    fk_projekt,
    belegnummer,
    bezeichnung,
    fk_land,
    fk_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_steuersatz,
    mwst_betrag,
    brutto_betrag,
    fk_waehrung,
    steuernummer,
    umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRÜNDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSÄULE",
    fk_calc_state,
    fk_calc_state_eur,
    fk_calc_state_frmdw,
    frmdw_netto_betrag,
    fk_frmdw,
    fk_frmdw_mwst_satz,
    frmdw_mwst_betrag,
    frmdw_brutto_betrag, 
    FRMDW_BRUTTO_INCL_TRINKG
)   
select 
    fk_inp_belege_all,
    fk_lex_buchung,
    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
    fk_zahlungsart,
    fk_verwendungszweck,
    fk_inventar,
    fk_projekt,
    belegnummer,
    bezeichnung,
    fk_land,
    fk_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_steuersatz,
    mwst_betrag,
    brutto_betrag,
    fk_waehrung,
    steuernummer,
    umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRÜNDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSÄULE",
    fk_calc_state,
    fk_calc_state_eur,
    fk_calc_state_frmdw,
    frmdw_netto_betrag,
    fk_frmdw,
    fk_frmdw_mwst_satz,
    frmdw_mwst_betrag,
    frmdw_brutto_betrag,
    FRMDW_BRUTTO_INCL_TRINKG
    from  inp_belege_pos_all
    where pk_inp_belege_Pos_all = bel_pos_nr ;
    commit;
  end  loop;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_INP_BEL_POS_COP_SINGLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_INP_BEL_POS_COP_SINGLE" ( p_Pk_inp_bel number, p_fk_beleg number) as
begin
INSERT INTO t_inp_belege_pos_all (

    fk_inp_belege_all,
    fk_lex_buchung,
    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
    fk_zahlungsart,
    fk_verwendungszweck,
    fk_inventar,
    fk_projekt,
    belegnummer,
    bezeichnung,
    fk_land,
    fk_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_steuersatz,
    mwst_betrag,
    brutto_betrag,
    fk_waehrung,
    steuernummer,
    umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRÜNDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSÄULE"
) 
select 
     p_fk_beleg, --:fk_beleg,
    fk_lex_buchung,
    fk_kategorie,
    fk_arbeitstag,
    fk_buchung,
    fk_zahlungsart,
    fk_verwendungszweck,
    fk_inventar,
    fk_projekt,
    belegnummer,
    bezeichnung,
    fk_land,
    fk_city,
    bel_datum,
    von,
    bis,
    netto_betrag,
    fk_steuersatz,
    mwst_betrag,
    brutto_betrag,
    fk_waehrung,
    steuernummer,
    umrechnungskurs,
    comm_rest_beleg,
    comm_tel_beleg,
    comm_produkte,
    "COMM_BEGRÜNDUNG",
    comm_sonstiges,
    beleg,
    zahlungsbeleg,
    liter,
    "ZAPFSÄULE"
from   t_inp_belege_pos_all
where pk_inp_belege_pos_all = p_Pk_inp_bel; -- :Pk_inp_bel;
commit;
end;

/
--------------------------------------------------------
--  DDL for Procedure P_KEINE_LEX_BUCHUNG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_KEINE_LEX_BUCHUNG" (p_imp_bel_old number, p_inp_bel number) as 
begin
INSERT INTO t_rel_lex_kto_bel (

    fk_lex_old,
    fk_relation,
    fk_main_key,
    fk_imp_ba_bel,
    fk_inp_belege_all,
    created_at,
    modified_at,
    ok,
    ok_datum
) VALUES (

    null,
    0,
    null,
    p_imp_bel_old, --:imp_bel_old,
    p_inp_bel, --:inp_bel,
    sysdate,
    sysdate,
    4,
    sysdate
);
commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_KTO_CREATE_KAS_FROM_INP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_KTO_CREATE_KAS_FROM_INP" (p_pk_inp_belege_all number) as

  v_seq_kas number;
  v_fk_main_key_kas number;
  v_lex_relation varchar(4000 char);
 begin

 for i in (  
            select fk_lex_relation
            from 
             t_rel_lex_kto_bel 
              where fk_inp_belege_all =  p_pk_inp_belege_all
              ) loop

 --v_relation selektieren
    v_lex_relation:= i.fk_lex_relation;

 --neue Kassenbuchung erzeugen - aus Lex_Buchung
   select KAS_KASSE_SEQ.nextval
   into v_seq_kas
   from dual;


 insert into t_kto_kas_kasse (pk_kto_kas_kasse,datum, buchungstext, betrag, gesamt_betrag,jahr, comm) 
 select v_seq_kas,bel_datum, bezeichnung ,-1*brutto_betrag , -1*brutto_betrag , substr(bel_datum, 7,4) , v_lex_relation from t_inp_belege_all where pk_inp_belege_all = p_pk_inp_belege_all;
commit;


--Kassenbuchung updaten (Arbeitstag, Kontonummer, kontotyp, fk_main_key)
update t_kto_Kas_Kasse set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;

merge into t_kto_kas_kasse t1 
using (
select kas.fk_main_key,
      nvl(kas.datum, zus."Buchungstag") dat,
      nvl(kas.buchungstext, zus.buchungstext) txt,
      nvl(kas.jahr, zus.bucht_jahr) jahr,
      nvl(kas.betrag, -zus."Betrag") Betrag

from t_kto_kas_kasse kas
 left join v_kto_konten_zus zus on kas.fk_main_key_bankkonto = zus.fk_main_key
 where pk_kto_kas_kasse = v_seq_kas
 ) t2 on (t1.fk_main_key = t2.fk_main_key)
 when matched then 
 update set t1.datum = t2.dat,
    t1.buchungstext = t2.txt,
    t1.jahr = t2.jahr;
    --t1.betrag  = t2.Betrag;
commit;

merge into t_kto_kas_kasse t1
  using (
        select pk_bas_kal_arbeitstage, 
       pk_kto_kas_kasse

        from (select * from t_kto_kas_kasse where datum is not null and fk_bas_kal_arbeitstag is null) bel,
          t_bas_kal_arbeitstage arb
        where  to_date(substr(bel.datum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_kto_kas_kasse = t2.pk_kto_kas_kasse)
        when matched then
        update set t1.fk_bas_kal_arbeitstag= t2.pk_bas_kal_arbeitstage;
        commit;


   update t_kto_kas_kasse set fk_kto_bankkonto = 61 where fk_kto_bankkonto is null;
   update t_kto_kas_kasse set fk_std_kto_kontotyp = 6 where fk_std_kto_kontotyp is null;
   update t_kto_kas_kasse set creation_date = sysdate where creation_date is null;
   commit;

  --Kassenbuchung - Lexwarebuchung zuordnen 
   select fk_main_key
   into  v_fk_main_key_kas
   from t_kto_kas_kasse
   where instr(comm, v_lex_relation)>0;

   insert into t_rel_lex_kto_bel (fk_main_key, fk_lex_relation)
   select v_fk_main_key_kas, v_lex_relation
   from dual;
   commit;
  end loop;
end;

/
--------------------------------------------------------
--  DDL for Procedure P_KTO_SET_NAECHSTE_ZAHLUNG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_KTO_SET_NAECHSTE_ZAHLUNG" (p_fk_main_key number, p_kontotyp number) as
  v_kontotyp number;
  v_fk_main_key number;
  v_date varchar2(30 char);
begin
 v_kontotyp := p_kontotyp;
 v_fk_main_key := p_fk_main_key;

 execute immediate 'alter session set nls_date_format = ''DD.MM.YYYY HH24:MI:SS''';

/*
 select case 
        when wiederholung = '"monatlich"' 
         then to_date(substr("Buchungstag",1,2) ||'.'||  
           case when to_char(substr("Buchungstag",4,2)+1)>12 
             then 
                 case when length(to_char(substr("Buchungstag",4,2)+1-12))= 1 
                    then '0' || to_char(substr("Buchungstag",4,2)+1-12) 
                    else  to_char(substr("Buchungstag",4,2)+1-12) 
                 end  
             else 
               case when length(to_char(substr("Buchungstag",4,2)+1)) = 1
                then '0' || to_char(substr("Buchungstag",4,2)+1)
                else to_char(substr("Buchungstag",4,2)+1)
               end
            end ||'.'|| 
              case when to_char(substr("Buchungstag",4,2)+1)>12 
                then to_char(substr("Buchungstag",7,4)+1)  
                else to_char(substr("Buchungstag",7,4)) 
              end
    ,'DD.MM.YYYY') 
    when wiederholung = '"jährlich"'  
     then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
   end 
   into v_date from "KTO_Girokonto" where fk_main_key = v_fk_main_key;

    insert into test (column1, column2,column3) values (v_fk_main_key, v_kontotyp, v_date);
  commit;
  */

      if v_kontotyp = '1' then
       update t_kto_GIROKONTO set naechste_Zahlung = 
                                   case when wiederholung = '"monatlich"' 
                                            then to_date(
                                                            case when  to_char(substr("Buchungstag",4,2)) = 1 and substr("Buchungstag",1,2) >28 then 28 else 
                                                                             case when substr("Buchungstag",1,2) = 31 then
                                                                                           substr("Buchungstag",1,2) -1 else substr("Buchungstag",1,2)-0 end    end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+1-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+1))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                      end
                                                                                            end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end
                                                ,'DD.MM.YYYY') 
                                        when wiederholung = '"vierteljährlich"' 
                                            then to_date(substr("Buchungstag",1,2) ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+3)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+3-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+3-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+3-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+3))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+3) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+3) 
                                                                                                      end
                                                                                            end 
                                                                                   ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+3)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end
                                                ,'DD.MM.YYYY')    
                                        when wiederholung = '"halbjährlich"' 
                                            then to_date(substr("Buchungstag",1,2) ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+6)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+6-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+6-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+6-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+6))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+6) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+6) 
                                                                                                      end
                                                                                            end 
                                                                                   ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+6)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end
                                                ,'DD.MM.YYYY')
                                        when wiederholung = '"jährlich"'  
                                            then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
                                        when wiederholung = 'einmalig' then "Buchungstag"
                                    end 
       where  fk_main_key = v_fk_main_key;
       commit;
      end if;



      if v_kontotyp = 2 then
       update t_KTO_KREDITKARTE 
            set Naechste_Zahlung = 
                case when wiederholung = '"monatlich"' then to_date(case when  to_char(substr("Buchungstag",4,2)) = 1 and substr("Buchungstag",1,2) >28 then 28 else 
                                                                             case when substr("Buchungstag",1,2) = 31 then
                                                                                           substr("Buchungstag",1,2) -1 else substr("Buchungstag",1,2)-0 end    end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+1-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+1))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                      end
                                                                                            end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end,'DD.MM.YYYY') 
                     when wiederholung = '"jährlich"'  then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
                     when wiederholung = 'einmalig' then "Buchungstag"
                end 
       where  fk_main_key = v_fk_main_key;
       commit;
      end if;

      if v_kontotyp = 3 then
       update t_KTO_PAYPAL set naechste_Zahlung =case when wiederholung = '"monatlich"' then to_date(substr("Datum",1,2) ||'.'|| to_char(substr("Datum",4,2)+1) ||'.'|| substr("Datum",7,4),'DD.MM.YYYY') 
when wiederholung = '"jährlich"'  then to_date(substr("Datum",1,2) ||'.'|| substr("Datum",4,2)  ||'.'|| to_char(substr("Datum",7,4)+1),'DD.MM.YYYY') 
end where  fk_main_key = v_fk_main_key;
       commit;
      end if;



      if v_kontotyp = 4 then
       update t_KTO_TAGESGELDKONTO set naechste_Zahlung =case when wiederholung = '"monatlich"' then to_date(substr("Buchungstag",1,2) ||'.'|| to_char(substr("Buchungstag",4,2)+1) ||'.'|| substr("Buchungstag",7,4),'DD.MM.YYYY') 
when wiederholung = '"jährlich"'  then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
end where  fk_main_key = v_fk_main_key;
       commit;
      end if;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_REP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_REP" as
begin
merge into t_txt_replaced t1
 using (
select from_txt, replace(from_txt, suchen, ersetzen) to_txt, pk_txt_replaced
from t_txt_replace rp
 left join t_txt_replaced rep on rp.pk_txt_replace = rep.fk_txt_replace
 ) t2 on (t1.pk_txt_replaced = t2.pk_txt_replaced)
 when matched then 
 update set t1.to_txt = t2.to_txt;
 commit;
end;


/
--------------------------------------------------------
--  DDL for Procedure P_SET_FK_EIN_AUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_SET_FK_EIN_AUS" as

begin

--== kasse
update kas_kasse set fk_ein_aus =0 where betrag =0 and fk_ein_aus is null;
commit;

update kas_kasse set fk_ein_aus =1 where betrag >0 and fk_ein_aus is null;
commit;

update kas_kasse set fk_ein_aus =2 where betrag <0 and fk_ein_aus is null;
commit;

--== girokonto
update kto_girokonto set fk_ein_aus =0 where "Betrag" =0 and fk_ein_aus is null;
commit;

update kto_girokonto set fk_ein_aus =1 where "Betrag">0 and fk_ein_aus is null;
commit;

update kto_girokonto set fk_ein_aus =2 where "Betrag" <0 and fk_ein_aus is null;
commit;

--== kreditkarte
update kto_kreditkarte set fk_ein_aus =0 where "Betrag"  =0 and fk_ein_aus is null;
commit;

update kto_kreditkarte set fk_ein_aus =1 where "Betrag"  >0 and fk_ein_aus is null;
commit;

update kto_kreditkarte set fk_ein_aus =2 where "Betrag"  <0 and fk_ein_aus is null;
commit;

--== tagesgeldkonto
update kto_tagesgeldkonto set fk_ein_aus =0 where "Betrag" =0 and fk_ein_aus is null;
commit;

update kto_tagesgeldkonto set fk_ein_aus =1 where "Betrag" >0 and fk_ein_aus is null;
commit;

update kto_tagesgeldkonto set fk_ein_aus =2 where "Betrag" <0 and fk_ein_aus is null;
commit;

--== paypal
update kto_paypal set fk_ein_aus =0 where "Brutto" =0 and fk_ein_aus is null;
commit;

update kto_paypal set fk_ein_aus =1 where "Brutto" >0 and fk_ein_aus is null;
commit;

update kto_paypal set fk_ein_aus =2 where "Brutto" <0 and fk_ein_aus is null;
commit;

end;


/
--------------------------------------------------------
--  DDL for Procedure P_SET_NAECHSTE_ZAHLUNG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "COMPANY"."P_SET_NAECHSTE_ZAHLUNG" (p_fk_main_key number, p_kontotyp number) as
  v_kontotyp number;
  v_fk_main_key number;
  v_date varchar2(30 char);
begin
 v_kontotyp := p_kontotyp;
 v_fk_main_key := p_fk_main_key;

 execute immediate 'alter session set nls_date_format = ''DD.MM.YYYY HH24:MI:SS''';

/*
 select case 
        when wiederholung = '"monatlich"' 
         then to_date(substr("Buchungstag",1,2) ||'.'||  
           case when to_char(substr("Buchungstag",4,2)+1)>12 
             then 
                 case when length(to_char(substr("Buchungstag",4,2)+1-12))= 1 
                    then '0' || to_char(substr("Buchungstag",4,2)+1-12) 
                    else  to_char(substr("Buchungstag",4,2)+1-12) 
                 end  
             else 
               case when length(to_char(substr("Buchungstag",4,2)+1)) = 1
                then '0' || to_char(substr("Buchungstag",4,2)+1)
                else to_char(substr("Buchungstag",4,2)+1)
               end
            end ||'.'|| 
              case when to_char(substr("Buchungstag",4,2)+1)>12 
                then to_char(substr("Buchungstag",7,4)+1)  
                else to_char(substr("Buchungstag",7,4)) 
              end
    ,'DD.MM.YYYY') 
    when wiederholung = '"jährlich"'  
     then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
   end 
   into v_date from "KTO_Girokonto" where fk_main_key = v_fk_main_key;

    insert into test (column1, column2,column3) values (v_fk_main_key, v_kontotyp, v_date);
  commit;
  */

      if v_kontotyp = '1' then
       update t_kto_GIROKONTO set naechste_Zahlung = 
                                   case when wiederholung = '"monatlich"' 
                                            then to_date(
                                                            case when  to_char(substr("Buchungstag",4,2)) = 1 and substr("Buchungstag",1,2) >28 then 28 else 
                                                                             case when substr("Buchungstag",1,2) = 31 then
                                                                                           substr("Buchungstag",1,2) -1 else substr("Buchungstag",1,2)-0 end    end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+1-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+1))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                      end
                                                                                            end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end
                                                ,'DD.MM.YYYY') 
                                        when wiederholung = '"vierteljährlich"' 
                                            then to_date(substr("Buchungstag",1,2) ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+3)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+3-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+3-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+3-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+3))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+3) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+3) 
                                                                                                      end
                                                                                            end 
                                                                                   ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+3)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end
                                                ,'DD.MM.YYYY')    
                                        when wiederholung = '"halbjährlich"' 
                                            then to_date(substr("Buchungstag",1,2) ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+6)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+6-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+6-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+6-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+6))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+6) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+6) 
                                                                                                      end
                                                                                            end 
                                                                                   ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+6)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end
                                                ,'DD.MM.YYYY')
                                        when wiederholung = '"jährlich"'  
                                            then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
                                        when wiederholung = 'einmalig' then "Buchungstag"
                                    end 
       where  fk_main_key = v_fk_main_key;
       commit;
      end if;



      if v_kontotyp = 2 then
       update t_KTO_KREDITKARTE 
            set Naechste_Zahlung = 
                case when wiederholung = '"monatlich"' then to_date(case when  to_char(substr("Buchungstag",4,2)) = 1 and substr("Buchungstag",1,2) >28 then 28 else 
                                                                             case when substr("Buchungstag",1,2) = 31 then
                                                                                           substr("Buchungstag",1,2) -1 else substr("Buchungstag",1,2)-0 end    end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then 
                                                                                                       case when length(to_char(substr("Buchungstag",4,2)+1-12))=1 
                                                                                                              then '0' || to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                              else to_char(substr("Buchungstag",4,2)+1-12) 
                                                                                                       end 
                                                                                                    else 
                                                                                                      case when length(to_char(substr("Buchungstag",4,2)+1))=1
                                                                                                             then '0' ||  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                             else  to_char(substr("Buchungstag",4,2)+1) 
                                                                                                      end
                                                                                            end  ||'.'||  
                                                                                            case when to_char(substr("Buchungstag",4,2)+1)>12 
                                                                                                    then to_char(substr("Buchungstag",7,4)+1)  
                                                                                                    else to_char(substr("Buchungstag",7,4)) 
                                                                                            end,'DD.MM.YYYY') 
                     when wiederholung = '"jährlich"'  then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
                     when wiederholung = 'einmalig' then "Buchungstag"
                end 
       where  fk_main_key = v_fk_main_key;
       commit;
      end if;

      if v_kontotyp = 3 then
       update t_KTO_PAYPAL set naechste_Zahlung =case when wiederholung = '"monatlich"' then to_date(substr("Datum",1,2) ||'.'|| to_char(substr("Datum",4,2)+1) ||'.'|| substr("Datum",7,4),'DD.MM.YYYY') 
when wiederholung = '"jährlich"'  then to_date(substr("Datum",1,2) ||'.'|| substr("Datum",4,2)  ||'.'|| to_char(substr("Datum",7,4)+1),'DD.MM.YYYY') 
end where  fk_main_key = v_fk_main_key;
       commit;
      end if;



      if v_kontotyp = 4 then
       update t_KTO_TAGESGELDKONTO set naechste_Zahlung =case when wiederholung = '"monatlich"' then to_date(substr("Buchungstag",1,2) ||'.'|| to_char(substr("Buchungstag",4,2)+1) ||'.'|| substr("Buchungstag",7,4),'DD.MM.YYYY') 
when wiederholung = '"jährlich"'  then to_date(substr("Buchungstag",1,2) ||'.'|| substr("Buchungstag",4,2)  ||'.'|| to_char(substr("Buchungstag",7,4)+1),'DD.MM.YYYY') 
end where  fk_main_key = v_fk_main_key;
       commit;
      end if;
end;


/
--------------------------------------------------------
--  DDL for Package EBA_DEMO_IG_TEXT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."EBA_DEMO_IG_TEXT_PKG" authid current_user is
    function text_is_available return boolean;
    procedure create_text_preferences;
    procedure drop_text_preferences;
    procedure create_text_index;
    procedure drop_text_index;
    procedure init_oracle_text;
    function convert_text_query( p_enduser_query in varchar2 ) return varchar2;
end eba_demo_ig_text_pkg;


/
--------------------------------------------------------
--  DDL for Package EBA_DEMO_MD_DATA_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."EBA_DEMO_MD_DATA_PKG" as
  function varchar2_to_blob(p_varchar2_tab in dbms_sql.varchar2_table) return blob;
  procedure load_sample_data;
  procedure remove_sample_data;
end eba_demo_md_data_pkg; 


/
--------------------------------------------------------
--  DDL for Package PKG_BELEG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_BELEG" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 



  --Vorsteuer
  procedure p_add_vorst_bel(p_pk_main_beleg_new number, p_fk_vorsteuerrelevant number, p_monat number);

  procedure p_calc_beleg(p_pk_beleg number, p_delete_flag number ); -- Vorsteuer berechnen

  --Arbeitstag setzen
  procedure p_upd_beleg_dat;

  --Belegart
  procedure p_chg_belegart;

  --Stundenzettel referenzieren
  procedure p_beleg_add_stundenzettel(p_fk_stundenzettel number, p_fk_belegart number, p_monat varchar2);

  --Kopie erstellen
  procedure p_cop_beleg  (p_pk_beleg number);

  --Vorlagenbelege erstellen
  procedure p_cre_temp_beleg (p_pk_belegart number);

  --aus Zahlungsvorgängen Belege erstellen
        procedure p_create_beleg_from_giro(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number);

        procedure p_create_beleg_from_kredit(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number) ;


END PKG_BELEG;



/
--------------------------------------------------------
--  DDL for Package PKG_BELEG_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_BELEG_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 



  --Vorsteuer
  procedure p_add_vorst_bel(p_pk_main_beleg_new number, p_fk_vorsteuerrelevant number, p_monat number);

  procedure p_calc_beleg(p_pk_beleg number, p_delete_flag number ); -- Vorsteuer berechnen

  --Arbeitstag setzen
  procedure p_upd_beleg_dat;

  --Belegart
  procedure p_chg_belegart;

  --Stundenzettel referenzieren
  procedure p_beleg_add_stundenzettel(p_fk_stundenzettel number, p_fk_belegart number, p_monat varchar2);

  --Kopie erstellen
  procedure p_cop_beleg  (p_pk_beleg number);

  --Vorlagenbelege erstellen
  procedure p_cre_temp_beleg (p_pk_belegart number);

  --aus Zahlungsvorgängen Belege erstellen
        procedure p_create_beleg_from_giro(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number);

        procedure p_create_beleg_from_kredit(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number) ;


END PKG_BELEG_NEU ;


/
--------------------------------------------------------
--  DDL for Package PKG_DB_OBJ_HIST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_DB_OBJ_HIST" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  
  --1 load objeccts
  procedure  p_1_load_object_list_new_db_objects; 
 
  --2 - load columns
  procedure p_2_load_object_list_new_tab_column;
 
  --3 - load apex pages
  procedure p_3_load_objects_list_new_apex_pages;
  
  --4 - load db_objects into table_count
  procedure p_4_load_objects_table_count_new_db_objects;
  
  --6- load db_objects history table_count_cnt
  procedure  p_6_load_object_table_count_cnt;

END PKG_DB_OBJ_HIST;

/
--------------------------------------------------------
--  DDL for Package PKG_IMP_BA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_BA" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

  procedure p_imp_ba_krankk_add_arb;

   procedure p_imp_ba_krankk_add_üb (p_fk_main_key number);

   procedure p_set_fk_imp_ba_bel  (p_table_name varchar) ;

END PKG_IMP_BA;


/
--------------------------------------------------------
--  DDL for Package PKG_IMP_GIR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_GIR" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
   procedure p_imp_new_gir_coba (p_buchungsdatum date);


   procedure p_imp_new_gir_ing_diba (p_buchungsdatum date);

   procedure p_imp_new_gir_post (p_buchungsdatum date);


   procedure p_imp_new_gir1(p_buchungsdatum date);

   procedure p_add_arbeitstage ;

   procedure p_rem_rel_kontoauszug(p_pk_kontoauszug number);

   procedure p_set_buchungstext;

   procedure p_set_fk_main_key ;

END PKG_IMP_GIR;


/
--------------------------------------------------------
--  DDL for Package PKG_IMP_GIR_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_GIR_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

    procedure p_imp_new_gir_coba (p_buchungsdatum date, p_fk_konto number) ;

   procedure p_imp_new_gir_ing_diba (p_buchungsdatum date);

      procedure p_imp_new_gir_post (p_buchungsdatum date);

   procedure p_imp_new_gir1(p_buchungsdatum date);

   procedure p_add_arbeitstage ;

   procedure p_rem_rel_kontoauszug(p_pk_kto_konto_auszug number);

    procedure p_set_buchungstext;

     procedure p_set_fk_main_key ;

END PKG_IMP_GIR_NEU;

/
--------------------------------------------------------
--  DDL for Package PKG_IMP_KRED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_KRED" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
   procedure p_create_new_kred(p_buchungstag date);

   procedure p_add_arbeitstag;

   procedure p_add_konto_relation(p_fk_main_key1 number, p_fk_main_key2 number, p_jahr number, p_monat number, p_tag number);

  procedure p_upd_fk_main_key;

END PKG_IMP_KRED;



/
--------------------------------------------------------
--  DDL for Package PKG_IMP_KRED_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_KRED_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
   procedure p_create_new_kred(p_buchungstag date);

   procedure p_add_arbeitstag;

   procedure p_add_konto_relation(p_fk_main_key1 number, p_fk_main_key2 number, p_jahr number, p_monat number, p_tag number);

  procedure p_upd_fk_main_key;

END PKG_IMP_KRED_NEU;


/
--------------------------------------------------------
--  DDL for Package PKG_IMP_PAYPAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_PAYPAL" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_IMP_PAYPAL;



/
--------------------------------------------------------
--  DDL for Package PKG_IMP_TEL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_IMP_TEL" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_IMP_TEL;



/
--------------------------------------------------------
--  DDL for Package PKG_INP_BEL_ALL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_INP_BEL_ALL" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_INP_BEL_ALL;


/
--------------------------------------------------------
--  DDL for Package PKG_INP_BEL_ALL_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_INP_BEL_ALL_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

 procedure  p_add_inp_beleg (p_page number, p_relation varchar2);

END PKG_INP_BEL_ALL_neu;


/
--------------------------------------------------------
--  DDL for Package PKG_KASSE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_KASSE" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_KASSE;


/
--------------------------------------------------------
--  DDL for Package PKG_KONTO_AUSZUG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_KONTO_AUSZUG" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_KONTO_AUSZUG;


/
--------------------------------------------------------
--  DDL for Package PKG_KONTROLLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_KONTROLLE" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 


END PKG_KONTROLLE;


/
--------------------------------------------------------
--  DDL for Package PKG_KTBL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_KTBL" as

procedure p_add_kontenblatt_mit_ssis (p_jahr number) ;

procedure p_add_kontenblatt_ohne_ssis (p_jahr number) ;


procedure p_add_date;

procedure p_upd_kontenblatt;

procedure p_set_relation_initial;

procedure p_susa_upd_susa;

procedure p_del_duplicates;

end  PKG_KTBL;


/
--------------------------------------------------------
--  DDL for Package PKG_LEX
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_LEX" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 


END PKG_LEX;



/
--------------------------------------------------------
--  DDL for Package PKG_LEX_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_LEX_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 


END PKG_LEX_NEU;


/
--------------------------------------------------------
--  DDL for Package PKG_RECHNUNG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_RECHNUNG" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
   PROCEDURE   p_create_eingangsrechnung(p_fk_verwendungszweck number);

END PKG_RECHNUNG;



/
--------------------------------------------------------
--  DDL for Package PKG_SERVICES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_SERVICES" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_SERVICES;



/
--------------------------------------------------------
--  DDL for Package PKG_SERVICES_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_SERVICES_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_SERVICES_NEU;


/
--------------------------------------------------------
--  DDL for Package PKG_STEUER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_STEUER" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_STEUER;


/
--------------------------------------------------------
--  DDL for Package PKG_STEUER_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_STEUER_NEU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_STEUER_NEU;


/
--------------------------------------------------------
--  DDL for Package PKG_VERPFL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."PKG_VERPFL" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PKG_VERPFL;


/
--------------------------------------------------------
--  DDL for Package SAMPLE_DATA_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."SAMPLE_DATA_PKG" as
  function varchar2_to_blob(p_varchar2_tab in dbms_sql.varchar2_table) return blob;
  procedure delete_data;
  procedure insert_data;
end sample_data_pkg;



/
--------------------------------------------------------
--  DDL for Package SAMPLE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY"."SAMPLE_PKG" is
    --
    -- Error Handling function
    --
    function demo_error_handling (
        p_error in apex_error.t_error )
        return apex_error.t_error_result;

    --
    -- Tag Cleaner function
    --
    function demo_tags_cleaner (
        p_tags  in varchar2,
        p_case  in varchar2 default 'U') 
        return varchar2;

    --
    -- Tag Synchronisation Procedure
    --
    procedure demo_tag_sync (
        p_new_tags          in varchar2,
        p_old_tags          in varchar2,
        p_content_type      in varchar2,
        p_content_id        in number );
end sample_pkg;



/
--------------------------------------------------------
--  DDL for Package Body EBA_DEMO_IG_TEXT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."EBA_DEMO_IG_TEXT_PKG" is
    procedure execute_sql(
        p_sql         in varchar2, 
        p_throw_error in boolean default true
    ) is
    begin
        execute immediate p_sql;
    exception
        when others then 
            if p_throw_error then raise; end if;
    end execute_sql;
    function text_is_available return boolean 
    is
        l_dummy number;
    begin
        select 1 into l_dummy 
          from sys.all_objects
         where owner       = 'CTXSYS' 
           and object_name = 'CTX_DDL' 
           and rownum      = 1;
        return true;
    exception 
        when NO_DATA_FOUND then return false;
    end text_is_available;
    procedure init_oracle_text is
    begin
        if text_is_available then
            create_text_preferences;
            create_text_index;
        end if;
    end init_oracle_text;
    procedure drop_text_index is 
    begin
        execute_sql( q'#drop index eba_demo_ig_text_ftx force#' );
    end drop_text_index;
    procedure drop_text_preferences is
    begin
        execute_sql( q'#begin ctx_ddl.drop_preference( 'EBA_DEMO_IG_LX_PREF'); end;#', false ); 
        execute_sql( q'#begin ctx_ddl.drop_preference( 'EBA_DEMO_IG_DS_PREF'); end;#', false ); 
        execute_sql( q'#begin ctx_ddl.drop_section_group( 'EBA_DEMO_IG_SG_PREF'); end;#', false ); 
    end drop_text_preferences;
    procedure create_text_preferences is
    begin
        -- Datastore Preference: Index the NAME and the COUNTRY columns
        execute_sql(q'# 
        begin
            ctx_ddl.create_preference(
                preference_name  => 'EBA_DEMO_IG_DS_PREF',
                object_name      => 'MULTI_COLUMN_DATASTORE'
            );

            ctx_ddl.set_attribute(
                preference_name  => 'EBA_DEMO_IG_DS_PREF',
                attribute_name   => 'COLUMNS',
                attribute_value  => 'NAME,COUNTRY,FROM_YR,TO_YR'
            );

            ctx_ddl.create_section_group(
                group_name       => 'EBA_DEMO_IG_SG_PREF',
                group_type       => 'XML_SECTION_GROUP'
            );

            ctx_ddl.add_field_section(
                group_name       => 'EBA_DEMO_IG_SG_PREF',
                section_name     => 'COUNTRY',
                tag              => 'COUNTRY',
                visible          => true
            );

            ctx_ddl.add_field_section(
                group_name       => 'EBA_DEMO_IG_SG_PREF',
                section_name     => 'NAME',
                tag              => 'NAME',
                visible          => true
            );

            ctx_ddl.create_preference(
                preference_name  => 'EBA_DEMO_IG_LX_PREF',
                object_name      => 'BASIC_LEXER'
            );

            ctx_ddl.set_attribute(
                preference_name  => 'EBA_DEMO_IG_LX_PREF',
                attribute_name   => 'MIXED_CASE',
                attribute_value  => 'NO'
            );

            ctx_ddl.set_attribute(
                preference_name  => 'EBA_DEMO_IG_LX_PREF',
                attribute_name   => 'BASE_LETTER',
                attribute_value  => 'YES'
            );
            ctx_ddl.set_attribute(
                preference_name  => 'EBA_DEMO_IG_LX_PREF',
                attribute_name   => 'BASE_LETTER_TYPE',
                attribute_value  => 'GENERIC'
            );
        end;#'
        ); 
    end create_text_preferences;
    procedure create_text_index is
    begin
        execute immediate 
q'#create index eba_demo_ig_text_ftx on eba_demo_ig_people (name)
   indextype is ctxsys.context parameters ( 'section group  EBA_DEMO_IG_SG_PREF
                                             datastore      EBA_DEMO_IG_DS_PREF
                                             lexer          EBA_DEMO_IG_LX_PREF
                                             stoplist       ctxsys.empty_stoplist
                                             memory         10M
                                             sync           (on commit)')#';
    end create_text_index;
    function convert_text_query( p_enduser_query in varchar2 ) return varchar2 
    is 
        l_tokens       apex_application_global.vc_arr2;
        l_set_boolean  boolean := false;
        c_xml constant varchar2(32767) := '<query><textquery><progression>' ||
                                            '<seq>#NORMAL_AND#</seq>' ||
                                            '<seq>#FUZZY_AND#</seq>' ||
                                            '<seq>#FUZZY_OR#</seq>' ||
                                          '</progression></textquery></query>';
        l_textquery    varchar2(32767) := '';

        function generate_query( p_feature in varchar2, p_combine in varchar2) return varchar2 is
            l_query        varchar2(32767);
            l_clean_token  varchar2(100);
        begin
            for i in 1..l_tokens.count loop
                l_clean_token := lower( regexp_replace( l_tokens( i ), '[<>{}/()*%&!$?.:,;\+#]', '' ) );
                if ltrim( rtrim( l_clean_token ) ) is not null then
                    if p_feature = 'FUZZY' then
                        l_query := l_query || 'FUZZY({' || l_clean_token || '}, 50, 500) ';
                    elsif p_feature = 'WILDCARD_RIGHT' then 
                        l_query := l_query || l_clean_token || '% ';
                    else 
                        l_query := l_query || '{' || l_clean_token || '} ';
                    end if;
                    if p_combine = 'OR' then 
                        l_query := l_query || ' or ';
                    else 
                        l_query := l_query || ' and ';
                    end if;
                end if;
            end loop;
            if p_combine = 'AND' then
                l_query := substr( l_query, 1, length( l_query ) - 5 );
            else
                l_query := substr( l_query, 1, length( l_query ) - 4 );
            end if;
            return ltrim( rtrim( l_query )); 
        end generate_query;
    begin
        if substr( p_enduser_query, 1, 8 ) = 'ORATEXT:' then
            return substr( p_enduser_query, 9 );
        else 
            l_textquery := c_xml;
            l_tokens := apex_util.string_to_table( p_enduser_query, ' ' );

            l_textquery := replace( l_textquery, '#NORMAL_AND#', generate_query( 'NORMAL', 'AND' ) );
            l_textquery := replace( l_textquery, '#FUZZY_AND#', generate_query( 'FUZZY', 'AND' ) );

            return l_textquery;
        end if;
    end convert_text_query;
end eba_demo_ig_text_pkg;


/
--------------------------------------------------------
--  DDL for Package Body EBA_DEMO_MD_DATA_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."EBA_DEMO_MD_DATA_PKG" as 
  function varchar2_to_blob(p_varchar2_tab in dbms_sql.varchar2_table) 
    return blob 
  is 
    l_blob blob; 
    l_raw  raw(500); 
    l_size number; 
  begin 
    dbms_lob.createtemporary(l_blob, true, dbms_lob.session); 
    for i in 1 .. p_varchar2_tab.count loop 
      l_size := length(p_varchar2_tab(i)) / 2; 
      dbms_lob.writeappend(l_blob, l_size, hextoraw(p_varchar2_tab(i))); 
    end loop; 
    return l_blob; 
  exception 
    when others then 
      dbms_lob.close(l_blob); 
  end varchar2_to_blob;   

  procedure load_sample_data is 
    i               dbms_sql.varchar2_table; 
    j               dbms_sql.varchar2_table default wwv_flow_api.empty_varchar2_table; 
    l_blob          blob; 
    l_full_name         varchar2(255); 
    l_email             varchar2(255); 
    l_add_days          number; 
  begin 
    -- Remove any data currenlty in the tables 
    remove_sample_data; 

    ---------------------------------- 
    --<< Load statuses >>-- 
    ---------------------------------- 
    delete from eba_demo_md_status; 
    insert into eba_demo_md_status (cd, description, display_order) 
      values ('ASSIGNED', 'Assigned', 1); 
    insert into eba_demo_md_status (cd, description, display_order) 
      values ('IN-PROGRESS', 'In-Progress', 2); 
    insert into eba_demo_md_status (cd, description, display_order) 
      values ('COMPLETED', 'Completed', 3);

    ---------------------------------------- 
    --<< Load remaining 12 Team Members >>--   
    ---------------------------------------- 
    -- Load Team Member 1 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  1 
       , 'Lucille Beatie' 
       , 'lbeatie' 
       , 'lucy.beattie@email.com' 
       , 'I have extensive experience running development teams. If I can''t bring in a project on time and on budget it can''t be done.' 
      ); 

    -- Load Team Member 2 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  2 
       , 'Nina Herschel' 
       , 'nina' 
       , 'nina.herschel@email.com' 
       , 'I''m a consumate team player who likes to explore and learn new things. My belief is to work hard and play hard.' 
      ); 

    -- Load Team Member 3 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  3 
       , 'Tameka Hall' 
       , 'thall' 
       , 'tamika.hall@email.com' 
       , 'I am all business and thrive on developing the lowest-level code. Point me at some obtuse security bug or framework API, step back, send in pizza and coke (not diet coke - YUK) occassionally, and consider it done!' 
      ); 

    -- Load Team Member 4 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  4 
       , 'Eva Jelinek' 
       , 'eva' 
       , 'eva.jelinek@email.com' 
       , 'I will tell you directly what I think and expect you to tell me the same. If you are sensitive then it may be best you don''t talk to me. ' 
      ); 

    -- Load Team Member 5 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  5 
       , 'Mei Yu' 
       , 'meiyu' 
       , 'mei.yu@email.com' 
       , 'I have extensive experience in all aspects of application development. If you need help then come and see me.' 
      ); 

    -- Load Team Member 6 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  6 
       , 'Madison Smith' 
       , 'mady' 
       , 'madison.smith@email.com' 
       , 'Mady to my friends - I love being creative and coming up with beautiful solutions.' 
      ); 

    -- Load Team Member 7 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  7 
       , 'Tyson King' 
       , 'tking' 
       , 'alonso.king@email.com' 
       , 'No problem too big, no problem too small!' 
      ); 

    -- Load Team Member 8 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  8 
       , 'Daniel James Lee' 
       , 'dj' 
       , 'daniel.lee@email.com' 
       , 'I am a DJ, I am what I say. If you ask me a question and I don''t answer, it is not because I''m rude, it is probably because I have my earbuds in and am rocking out to some gangsta rap.' 
      ); 

    -- Load Team Member 9 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  9 
       , 'Brock Shilling' 
       , 'thebrock' 
       , 'brock.shilling@email.com' 
       , 'I am your man! Let me solve that for you.' 
      ); 

    -- Load Team Member 10 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  10 
       , 'Miyazaki Yokohama' 
       , 'miyazaki' 
       , 'miyazaki.yokohama@email.com' 
       , 'My motto is to lead by example. I run a tight ship where everyone knows where we are heading.' 
      ); 

    -- Load Team Member 11 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  11 
       , 'Bernard Jackman' 
       , 'bernie' 
       , 'bernard.jackman@email.com' 
       , 'I am a great believer in the fact there is no "i" in TEAM.' 
      ); 

    -- Load Team Member 12 
    insert into eba_demo_md_team_members  
      (  id 
       , full_name 
       , username  
       , email     
       , profile   
      ) 
    values 
      (  12 
       , 'Harold Youngblood' 
       , 'harry' 
       , 'harold.youngblood@email.com' 
       , 'Providing I have my soy latte, falafel, and my MacBook - Bring It!' 
      ); 


    --*******************************************-- 
    --*** Load Projects, Milestones and Tasks ***--  
    --*******************************************-- 
    -- Need to insert a project and all of its releated child records at once and then move to the next project 

    ----------------------------------- 
    --<< Determine the data offset >>-- 
    ----------------------------------- 
    l_add_days := sysdate - to_date('20150101','YYYYMMDD'); 

    -------------------------- 
    --<< Insert Project 1 >>-- 
    -------------------------- 
    insert into eba_demo_md_projects 
      (  id 
       , name 
       , description 
       , project_lead 
       , completed_date 
       , status_cd 
      ) 
      values 
      (  1 
       , 'Configure Web Development Tool Environment' 
       , 'Determine the hardware and software required to develop with Web development tool.' 
       , 7 
       , to_date('20141205', 'YYYYMMDD') + l_add_days 
       , 'COMPLETED' 
      ); 

    -- Insert Tasks for Project 1  
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  51 
       , 1 
       , 7
       , 'Identify Server Requirements' 
       , 'Determine which databases will be used to install Web development tool for Development, QA, and Production.  
          Also specify which Web Listeners will be used for the three environments.' 
       , null 
       , 'Y' 
       , to_date('20141201', 'YYYYMMDD') + l_add_days 
       , to_date('20141202', 'YYYYMMDD') + l_add_days 
      ); 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  52 
       , 1 
       , 5 
       , 'Install Web development tool' 
       , 'Install the latest version of Web development tool from the vendor into the databases for Development, QA, and Production. 
          Note: For QA and Production, Web development tool should be configured as "run time" only.' 
       , null 
       , 'Y' 
       , to_date('20141203', 'YYYYMMDD') + l_add_days 
       , to_date('20141203', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  1
       , 1
       , 52
       , 7
       , 'Download tool from vendor'
       , 'Download the latest available version of the Web development tool from the vendor site.'
       , 'Y'
      );
    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  1
       , 1
       , 52
       , 'URL'
       , 'http://Web-tool.download.com'
       , null
       , null
       , 'Ficticous download page for Web development tool' 
      );

    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  2
       , 1
       , 52
       , 'URL'
       , 'http://Web-tool.install.com'
       , null
       , null
       , 'Ficticous installation guide for Web development tool' 
      );

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  53 
       , 1 
       , 12 
       , 'Configure Web Listeners' 
       , 'Configure the three Web Listeners for Web development tool to support the Dev, QA, and Prod environments.' 
       , null 
       , 'Y' 
       , to_date('20141203', 'YYYYMMDD') + l_add_days 
       , to_date('20141203', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  2
       , 1
       , 53
       , 12
       , 'Download Web Listener from vendor'
       , 'Download the latest available version of the Web Listener from the vendor site.'
       , 'Y'
      );

    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  3
       , 1
       , 53
       , 'URL'
       , 'http://Web-Listener.download.com'
       , null
       , null
       , 'Ficticous download page for Web Listener' 
      );

    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  4
       , 1
       , 53
       , 'URL'
       , 'http://Web-Listener.install.com'
       , null
       , null
       , 'Ficticous installation guide for Web Listener' 
      );

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  54 
       , 1 
       , 11 
       , 'Configure Web development tool Instance Administration Settings' 
       , 'Set the appropriate security and configuration settings for the development instance using specified tools. 
          Also set instance settings for QA and Production using the available APIs.' 
       , null 
       , 'Y' 
       , to_date('20141204', 'YYYYMMDD') + l_add_days 
       , to_date('20141204', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  6
       , 1
       , 54
       , 'URL'
       , 'https://Web-tool.admin.com'
       , null
       , null
       , 'Ficticous administration guide for Web development tool' 
      );

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  55 
       , 1 
       , 5 
       , 'Define Workspaces' 
       , 'Define workspaces needed for different application development teams. 
          It is important that access be granted to the necessary schemas and/or new schemas created as appropriate. 
          Then export these workspaces and import them into QA and Production environments.' 
       , null 
       , 'Y' 
       , to_date('20141205', 'YYYYMMDD') + l_add_days 
       , to_date('20141205', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  56 
       , 1 
       , 12 
       , 'Assign Workspace Administrators' 
       , 'In development assign a minimum of two Workspace administators to each workspace. 
          These administrators will then be responsible for maintaining developer access within their own workspaces.' 
       , null 
       , 'N' 
       , to_date('20141205', 'YYYYMMDD') + l_add_days 
       , to_date('20141205', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Project Comments for Project 1 
    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  1 
       , 1 
       , 'We have decided to use the Web Listener included with the database for Dev Only and a separate Web Listener for QA and Prod.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('20141202', 'YYYYMMDD') + l_add_days
      ,   created_by = 'TKING'
      where id = 1; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  2 
       , 1 
       , 'Installed latest version of Web development tool.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('20141204', 'YYYYMMDD') + l_add_days 
      ,   created_by = 'MEIYU' 
      where id = 2; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  3 
       , 1 
       , 'Installed latest version of Web Listener in QA and Prod environments' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('20141204', 'YYYYMMDD') + l_add_days 
      ,   created_by = 'HARRY' 
      where id = 3; 
    commit;

    -------------------------- 
    --<< Insert Project 2 >>-- 
    -------------------------- 
    insert into eba_demo_md_projects 
      (  id 
       , name 
       , description 
       , project_lead 
       , completed_date 
       , status_cd 
      ) 
      values 
      (  2 
       , 'Train Developers on Web development tool' 
       , 'Ensure all developers who will be developing with the new tool get the appropriate training.' 
       , 1 
       , to_date('20141220', 'YYYYMMDD') + l_add_days 
       , 'COMPLETED' 
      ); 

    -- Insert Milestone 1 for Project 2 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  11 
       , 2 
       , 'Train the Trainers' 
       , 'Rather than all developers being trained centrally, a select group will be trained. 
          These people will then be responsible for training other developers in their group.' 
       , to_date('20141211', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 2 / Milestone 1 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  57 
       , 2 
       , 6 
       , 'Prepare Course Outline' 
       , 'Creation of the training syllabus' 
       , 11 
       , 'Y' 
       , to_date('20141201', 'YYYYMMDD') + l_add_days 
       , to_date('20141205', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  58 
       , 2 
       , 6 
       , 'Write Training Guide' 
       , 'Produce the powerpoint deck (with notes) for the training instructor.' 
       , 11 
       , 'N' 
       , to_date('20141206', 'YYYYMMDD') + l_add_days 
       , to_date('20141208', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  4
       , 2
       , 58
       , 6
       , 'Review the online examples hosted by the vendor'
       , 'Run through the numerous examples available from the vendor to get course content.'
       , 'Y'
      );

    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  7
       , 2
       , 58
       , 'URL'
       , 'https://Web-tool.examples.com'
       , null
       , null
       , 'Ficticous examples page for Web development tool' 
      );

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  59 
       , 2 
       , 6 
       , 'Develop Training Exercises' 
       , 'Create scripts for sample data and problem statements with solutions.' 
       , 11 
       , 'Y' 
       , to_date('20141202', 'YYYYMMDD') + l_add_days 
       , to_date('20141208', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  60 
       , 2 
       , 7
       , 'Conduct Train-the-Trainer session' 
       , 'Give the training material to the selected developers.' 
       , 11 
       , 'Y' 
       , to_date('20141209', 'YYYYMMDD') + l_add_days 
       , to_date('20141211', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Milestone 2 for Project 2 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  12 
       , 2 
       , 'All Developers Trained' 
       , 'Train the Trainers will have successfully trained the remaining development team members.' 
       , to_date('20141215', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 2 / Milestone 2 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  61 
       , 2 
       , 7 
       , 'Train Developers I' 
       , 'Give the training to developers within your group.' 
       , 12 
       , 'Y' 
       , to_date('20141212', 'YYYYMMDD') + l_add_days 
       , to_date('20141214', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  62 
       , 2 
       , 8 
       , 'Train Developers II' 
       , 'Give the training to developers within your group.' 
       , 12 
       , 'Y' 
       , to_date('20141214', 'YYYYMMDD') + l_add_days 
       , to_date('20141216', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Project Comments for Project 2 
    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  4 
       , 2 
       , 'The exercises had some errors that need correcting ASAP.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('20141211', 'YYYYMMDD') + l_add_days 
      where id = 4; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  5 
       , 2 
       , 'Thanks for the feedback, Exercises corrected.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('20141212', 'YYYYMMDD') + l_add_days 
      ,   created_by = 'TKING' 
      where id = 5; 
    commit;


    -------------------------- 
    --<< Insert Project 3 >>-- 
    -------------------------- 
    insert into eba_demo_md_projects 
      (  id 
       , name 
       , description 
       , project_lead 
       , completed_date 
       , status_cd 
      ) 
      values 
      (  3 
       , 'Migrate Legacy Applications' 
       , 'Move the data and redevelop the applications currently running on top of legacy servers' 
       , 10 
       , null 
       , 'IN-PROGRESS' 
      ); 

    -- Insert Milestone 1 for Project 3 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  13 
       , 3 
       , 'Move Data Structures' 
       , 'Move all of the tables and program logic across to the new database' 
       , to_date('20141220', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 3 / Milestone 1 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  63 
       , 3 
       , 3 
       , 'Create New Tables' 
       , 'Create table scripts to replicate the legacy tables' 
       , 13 
       , 'Y' 
       , to_date('20141214', 'YYYYMMDD') + l_add_days 
       , to_date('20141214', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  5
       , 3
       , 63
       , 3
       , 'Reverse engineer the legacy tables into the data modeling tool'
       , 'Connect the data modeling tool to the legacy dev instance and suck in all of the required DB objects.'
       , 'Y'
      );

    insert into eba_demo_md_task_links
      (  id
       , project_id
       , task_id
       , link_type
       , url
       , application_id
       , application_page
       , description
      )
    values
      (  8
       , 3
       , 63
       , 'URL'
       , 'http://Web-data-modeler.info.com'
       , null
       , null
       , 'Ficticous information site for the data mdoeling tool' 
      );

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  6
       , 3
       , 63
       , 3
       , 'Add proper integrity constraints to the entities'
       , 'Add foreign keys as needed to correctly integrate referential integrity.'
       , 'Y'
      );

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  7
       , 3
       , 63
       , 3
       , 'Generate DDL Scripts for new tables'
       , 'Generate the DDL scripts from the data modeling tool to create the DB objects in the new database.'
       , 'Y'
      );

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  64 
       , 3 
       , 2 
       , 'Migrate data from Legacy Server' 
       , 'Develop scripts to populate the new database tables from the legacy database.' 
       , 13
       , 'Y' 
       , to_date('20141215', 'YYYYMMDD') + l_add_days 
       , to_date('20141218', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  65 
       , 3 
       , 3 
       , 'Convert transaction logic' 
       , 'Convert the legacy database transactional objects across to the new database' 
       , 13
       , 'Y' 
       , to_date('20141215', 'YYYYMMDD') + l_add_days 
       , to_date('20141217', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Milestone 2 for Project 3 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  14 
       , 3 
       , 'Redevelop HR Applications' 
       , 'Build applications to replace the HR functionality currently implemented in older technologies' 
       , to_date('20141228', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 3 / Milestone 2 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  66 
       , 3 
       , 4 
       , 'Redevelop Timesheet App' 
       , 'Develop desktop and mobile app for entering timesheets' 
       , 14 
       , 'Y' 
       , to_date('20141217', 'YYYYMMDD') + l_add_days 
       , to_date('20141222', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  67 
       , 3 
       , 8 
       , 'Create Shift Schedule App' 
       , 'Create an app for defining when people are scheduled to work different shifts.' 
       , 14 
       , 'Y' 
       , to_date('20141217', 'YYYYMMDD') + l_add_days 
       , to_date('20141225', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  68 
       , 3 
       , 8 
       , 'Reengineer Employee App' 
       , 'Create an app for employee details and benefits.' 
       , 14 
       , 'N' 
       , to_date('20141226', 'YYYYMMDD') + l_add_days 
       , to_date('20141228', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Milestone 3 for Project 3 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  15 
       , 3 
       , 'Redevelop Project Tracking Applications' 
       , 'Build applications to replace the project tracking functionality currently running on legacy servers' 
       , to_date('20150103', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 3 / Milestone 3 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  69 
       , 3 
       , 9 
       , 'Customize Customer Tracker Packaged App' 
       , 'Install Customer Tracker and use flex fields to meet requirements.' 
       , 15 
       , 'Y' 
       , to_date('20141228', 'YYYYMMDD') + l_add_days 
       , to_date('20141228', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  70 
       , 3 
       , 9 
       , 'Migrate data into Customer Tracker tables' 
       , 'Move previous project tracking data into the Customer Tracker EBA_CUST_xxx tables.' 
       , 15 
       , 'Y' 
       , to_date('20141229', 'YYYYMMDD') + l_add_days 
       , to_date('20141230', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  71 
       , 3 
       , 11 
       , 'Pilot new Customer Tracker application' 
       , 'Use Customer Tracker to ensure it meets requirements.' 
       , 15 
       , 'N' 
       , to_date('20141231', 'YYYYMMDD') + l_add_days 
       , to_date('20150109', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Project Comments for Project 3 
    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  6 
       , 3 
       , 'Bernie - I have migrated all of the projects data across, so you can start your pilot now.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('201412310100', 'YYYYMMDDHH24MI') + l_add_days 
      ,   created_by = 'THEBROCK' 
      where id = 6; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  7 
       , 3 
       , 'I''m telling you now, this Customer Tracker thing had better be good' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('201412310200', 'YYYYMMDDHH24MI') + l_add_days 
      ,   created_by = 'BERNIE' 
      where id = 7; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  8 
       , 3 
       , 'This guy Mike told me this app is brilliant.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('201412310300', 'YYYYMMDDHH24MI') + l_add_days 
      ,   created_by = 'THEBROCK' 
      where id = 8; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  9 
       , 3 
       , 'So far Customer Tracker is working out great - better than the old apps. Brocky, my boy, you are the man!' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('201501010100', 'YYYYMMDDHH24MI') + l_add_days 
      ,   created_by = 'BERNIE' 
      where id = 9; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  10 
       , 3 
       , 'Bernie, I told you that you were going to be impressed.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('201501010200', 'YYYYMMDDHH24MI') + l_add_days 
      ,   created_by = 'THEBROCK' 
      where id = 10; 

    insert into eba_demo_md_comments 
      (  id 
       , project_id 
       , comment_text 
      ) 
    values 
      (  11 
       , 3 
       , 'All of the old tables and transactional logic now migrated and ready for developers to use in the new database.' 
      ); 
    update eba_demo_md_comments 
      set created = to_date('20141217', 'YYYYMMDD') + l_add_days 
      ,   created_by = 'THALL' 
      where id = 11; 
    commit;


    -------------------------- 
    --<< Insert Project 4 >>-- 
    -------------------------- 
    insert into eba_demo_md_projects 
      (  id 
       , name 
       , description 
       , project_lead 
       , completed_date 
       , status_cd 
      ) 
      values 
      (  4 
       , 'Develop Partner Portal POC' 
       , 'Develop a proof of concept that partners can use to work more collaboratively with us.' 
       , 7
       , null 
       , 'IN-PROGRESS' 
      ); 

    -- Insert Milestone 1 for Project 4 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  16 
       , 4 
       , 'Define Requirements' 
       , 'Work with key stakeholders to define the scope of the project, and design screen flow and data requirements.' 
       , to_date('20150106', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 4 / Milestone 1 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  72 
       , 4 
       , 7
       , 'Define scope of Partner Portal App.' 
       , 'Meet with internal and external SMEs and define the requirements' 
       , 16 
       , 'N' 
       , to_date('20141228', 'YYYYMMDD') + l_add_days 
       , to_date('20150104', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  8
       , 4
       , 72
       , 7
       , 'Meet key Partners for input'
       , 'Determine the most important functionality for Partners.'
       , 'Y'
      );

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  9
       , 4
       , 72
       , 7
       , 'Meet internal Partner liason reps'
       , 'Determine the most important functionality for internal stakeholders.'
       , 'Y'
      );

    insert into eba_demo_md_task_todos
      (  id
       , project_id
       , task_id
       , assignee
       , name
       , description
       , is_complete_yn
      )
    values
      (  10
       , 4
       , 72
       , 7
       , 'Develop inital screen designs'
       , 'Prototype new screens using Web development tool to get buy-in from SMEs.'
       , 'Y'
      );

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  73 
       , 4 
       , 8 
       , 'Define Partner App Data Structures' 
       , 'Design the data model for new and existing entities required to support the Partner Portal.' 
       , 16 
       , 'N' 
       , to_date('20150104', 'YYYYMMDD') + l_add_days 
       , to_date('20150107', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  74 
       , 4 
       , 6 
       , 'Design User Experience' 
       , 'Define how partners will interact with the application.' 
       , 16 
       , 'N' 
       , to_date('20150105', 'YYYYMMDD') + l_add_days 
       , to_date('20150106', 'YYYYMMDD') + l_add_days 
      ); 


    -- Insert Milestone 2 for Project 4 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  17 
       , 4 
       , 'Build Proof-of-Concept' 
       , 'Create the initial screens and populate with data so key stakeholders can review proposed solution.' 
       , to_date('20150113', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 4 / Milestone 2 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  75 
       , 4 
       , 2 
       , 'Develop Admin Screens for Partner Portal' 
       , 'Develop the screens needed to maintain all of the base tables for the Partner Portal app.' 
       , 17 
       , 'N' 
       , to_date('20150108', 'YYYYMMDD') + l_add_days 
       , to_date('20150110', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  76 
       , 4 
       , 12 
       , 'Populate Data Structures for Partner Portal' 
       , 'Upload sample data provided by key partner, and ensure existing tables accessible.' 
       , 17 
       , 'N' 
       , to_date('20150108', 'YYYYMMDD') + l_add_days 
       , to_date('20150109', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  77 
       , 4 
       , 6 
       , 'Design first-cut of main Partner Portal app' 
       , 'Implement the major functional areas and ensure navigation between pages is working correctly.' 
       , 17 
       , 'N' 
       , to_date('20150107', 'YYYYMMDD') + l_add_days 
       , to_date('20150111', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  78 
       , 4 
       , 7
       , 'Present POC to Key Stakeholders' 
       , 'Walk key stakeholders through the proof of concept and obtain their feedback.' 
       , 17 
       , 'N' 
       , to_date('20150112', 'YYYYMMDD') + l_add_days 
       , to_date('20150112', 'YYYYMMDD') + l_add_days 
      ); 


    -------------------------- 
    --<< Insert Project 5 >>-- 
    -------------------------- 
    insert into eba_demo_md_projects 
      (  id 
       , name 
       , description 
       , project_lead 
       , completed_date 
       , status_cd 
      ) 
      values 
      (  5 
       , 'Develop Production Partner Portal' 
       , 'Develop the production app that partners can use to work more collaboratively with us.' 
       , 1 
       , null 
       , 'ASSIGNED' 
      ); 

    -- Insert Milestone 1 for Project 5 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  18 
       , 5 
       , 'Define Production App Scope' 
       , 'Based on the results of the POC, define the requirements for the production app.' 
       , to_date('20150114', 'YYYYMMDD') + l_add_days 
     ); 

    -- Insert Tasks for Project 5 / Milestone 1 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  79 
       , 5 
       , 7
       , 'Define production scope of Partner Portal App.' 
       , 'Define the scope and timelines for the development of the production app.' 
       , 18 
       , 'N' 
       , to_date('20150113', 'YYYYMMDD') + l_add_days 
       , to_date('20150114', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  80 
       , 5 
       , 8 
       , 'Finalize Partner App Data Model' 
       , 'Refine the data model for new and existing entities required to support the Partner Portal.' 
       , 18 
       , 'N' 
       , to_date('20150113', 'YYYYMMDD') + l_add_days 
       , to_date('20150114', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  81 
       , 5 
       , 6 
       , 'Finalize User Experience' 
       , 'Write developer standards on UX and development standards on how partners will interact with the application.' 
       , 18 
       , 'N' 
       , to_date('20150113', 'YYYYMMDD') + l_add_days 
       , to_date('20150114', 'YYYYMMDD') + l_add_days 
      ); 


    -- Insert Milestone 2 for Project 5 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  19 
       , 5 
       , 'Build Phase 1 of Production Partner Portal App' 
       , 'Develop the modules defined in the first phase of the application.' 
       , to_date('20150121', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 5 / Milestone 2 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  82 
       , 5 
       , 6 
       , 'Refine Admin Screens for Partner Portal' 
       , 'Refine screens developed in the POC to be fully operational to maintain all of the base tables for the Partner Portal app.' 
       , 19 
       , 'N' 
       , to_date('20150115', 'YYYYMMDD') + l_add_days 
       , to_date('20150118', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  83 
       , 5 
       , 5 
       , 'Populate Data Structures for Production Partner Portal' 
       , 'Upload actual data provided by key partner, and ensure existing tables accessible.' 
       , 19 
       , 'N' 
       , to_date('20150115', 'YYYYMMDD') + l_add_days 
       , to_date('20150117', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  84 
       , 5 
       , 7 
       , 'Design production screens for main Partner Portal app' 
       , 'Implement fully functional and complete screens to cover the major functional areas in Phase 1.' 
       , 19 
       , 'N' 
       , to_date('20150117', 'YYYYMMDD') + l_add_days 
       , to_date('20150123', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Milestone 3 for Project 5 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  20 
       , 5 
       , 'Perform Beta testing with select Partners' 
       , 'Work with a few key partners to trial Phase 1 of the Partner Portal app.' 
       , to_date('20150129', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 5 / Milestone 3 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  85 
       , 5 
       , 10 
       , 'Train Partners' 
       , 'Train selected partners in how to use the Partner Portal app.' 
       , 20 
       , 'N' 
       , to_date('20150122', 'YYYYMMDD') + l_add_days 
       , to_date('20150122', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  86 
       , 5 
       , 4 
       , 'Monitor Partners' 
       , 'Monitor partners selected for the Beta and provide assistance as necessary.' 
       , 20 
       , 'N' 
       , to_date('20150123', 'YYYYMMDD') + l_add_days 
       , to_date('20150128', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  87 
       , 5 
       , 7
       , 'Review Beta Feedback' 
       , 'Analyse feedback from the partners who participated in the Beta program.' 
       , 20 
       , 'N' 
       , to_date('20150129', 'YYYYMMDD') + l_add_days 
       , to_date('20150129', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Milestone 4 for Project 5 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  21 
       , 5 
       , 'Complete Phase 1 Development of Partner Portal app' 
       , 'Based on the results of the Beta program, enhance the application to make production ready.' 
       , to_date('20150225', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 5 / Milestone 4 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  88 
       , 5 
       , 5 
       , 'Improve existing feature functions' 
       , 'Enhance existing features based on responses from Beta partners.' 
       , 21 
       , 'N' 
       , to_date('20150201', 'YYYYMMDD') + l_add_days 
       , to_date('20150220', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  89 
       , 5 
       , 3 
       , 'Add required feature functions' 
       , 'Add missing features outlined in responses from Beta partners.' 
       , 21 
       , 'N' 
       , to_date('20150201', 'YYYYMMDD') + l_add_days 
       , to_date('20150220', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  90 
       , 5 
       , 12 
       , 'Load full production data' 
       , 'Ensure all data required for production roll out are inserted and maintained.' 
       , 21 
       , 'N' 
       , to_date('20150215', 'YYYYMMDD') + l_add_days 
       , to_date('20150220', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  91 
       , 5 
       , 8 
       , 'Test Production Partner Portal' 
       , 'Do full scale testing on the Partner Portal application.' 
       , 21 
       , 'N' 
       , to_date('20150221', 'YYYYMMDD') + l_add_days 
       , to_date('20150225', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Milestone 5 for Project 5 
    insert into eba_demo_md_milestones 
      (  id 
       , project_id 
       , name 
       , description 
       , due_date 
      ) 
    values 
      (  22 
       , 5 
       , 'Roll out Phase 1 of Partner Portal app' 
       , 'Go-Live for the Partner Portal application to all partners.' 
       , to_date('20150301', 'YYYYMMDD') + l_add_days 
      ); 

    -- Insert Tasks for Project 5 / Milestone 5 
    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  92 
       , 5 
       , 3 
       , 'Install Partner Portal app onto Production Server' 
       , 'Install the database objects and application(s) into the production environment.' 
       , 22 
       , 'N' 
       , to_date('20150226', 'YYYYMMDD') + l_add_days 
       , to_date('20150226', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  93 
       , 5 
       , 12 
       , 'Configure production data load procedures' 
       , 'Install and test data load procedures from internal and external data sources into production environment.' 
       , 22 
       , 'N' 
       , to_date('20150227', 'YYYYMMDD') + l_add_days 
       , to_date('20150228', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  94 
       , 5 
       , 7
       , 'Provide user credentials for partners' 
       , 'Define user credentials for each partner to allow access to the Partner Portal app.' 
       , 22 
       , 'N' 
       , to_date('20150228', 'YYYYMMDD') + l_add_days 
       , to_date('20150228', 'YYYYMMDD') + l_add_days 
      ); 

    insert into eba_demo_md_tasks 
      (  id 
       , project_id 
       , assignee 
       , name 
       , description 
       , milestone_id 
       , is_complete_yn 
       , start_date 
       , end_date 
      ) 
    values 
      (  95 
       , 5 
       , 1 
       , 'Announce Partner Portal app to all partners' 
       , 'Email or call partners to inform them of the new application and instructions on how to get started.' 
       , 22 
       , 'N' 
       , to_date('20150301', 'YYYYMMDD') + l_add_days 
       , to_date('20150301', 'YYYYMMDD') + l_add_days 
      ); 

  end load_sample_data; 

  procedure remove_sample_data is 
  begin 
    delete from eba_demo_md_team_members;
    delete from eba_demo_md_projects; 
      -- Cascade delete will delete Milestones, Tasks, Task ToDos, Task Links and Comment records 
  end remove_sample_data; 

end eba_demo_md_data_pkg; 


/
--------------------------------------------------------
--  DDL for Package Body PKG_BELEG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_BELEG" AS


    
    procedure p_add_vorst_bel(p_pk_main_beleg_new number, p_fk_vorsteuerrelevant number, p_monat number) as
    begin
        merge into t_beleg t1
        using (
                select tbel.*, p_pk_main_beleg_new  as fk_main_beleg_new  -- pk_main_beleg_new: 4864 
                from t_BELEG tbel
                 left join t_ARBEITSTAGe tarb on tbel.fk_arbeitstag = tarb.pk_arbeitstage
                where fk_vorsteuerrelevant = p_fk_vorsteuerrelevant --p_fk_vorsteuerrelevant: 1
                and monat = p_monat  --p_monat: 6
        )
        t2 on (t1.pk_beleg = t2.pk_beleg)
        when matched then
         update set t1.fk_main_beleg = t2.fk_main_beleg_new;
        commit;
    end p_add_vorst_bel;

    procedure p_calc_beleg(p_pk_beleg number, p_delete_flag number ) as

     v_delete_flag number := 0;

    begin


        if p_delete_flag is not null then
          v_delete_flag := p_delete_flag;
        end if;


        update t_beleg set betrag_netto =round( betrag_brutto*100/119,2) where fk_main_beleg = p_pk_beleg;
        commit;

        update t_beleg set mwst =round( betrag_brutto*19/119,2) where fk_main_beleg = p_pk_beleg;
        commit;

        update t_beleg set betrag_netto = -1*betrag_netto, mwst = -1*mwst , betrag_brutto =-1*betrag_brutto where betrag_brutto >0;
        commit;

        if v_delete_flag = 1 then
            delete from t_beleg where pk_beleg =p_pk_beleg;
            commit;
        end if;
    end p_calc_beleg;

    procedure p_chg_belegart as
     /* 
        Zuordnung der Belege zur Belegart über vorgegebene Stringinhalte (teilautomatisiert)
         --falls noch keine Belegart angegeben wurde
         --unter Verwendung der Tabelle "T_Match"
     */

    begin

        merge into t_beleg t1
         using (

                select pk_beleg, fk_key fk_belegart
                from t_beleg tb
                 join t_match tm on upper(tb.beleg) like upper(krit)
                where fk_belegart is null
            ) t2 on (t1.pk_beleg = t2.pk_beleg)
        when matched then 
         update set t1.fk_belegart = t2.fk_belegart;
        commit;

    end p_chg_belegart;

    procedure p_upd_beleg_dat as

    begin

            /*Arbeitstage für Belege ergänzen*/
            merge into t_beleg t1
            using (
                        select tbel.pk_beleg, tarb.datum dat1, tbel.datum dat2, tbel.fk_arbeitstag, tarb.pk_arbeitstage
                        from t_beleg tbel
                          join t_arbeitstage tarb on to_char(trunc(tarb.datum),'DD.MM.YYYY') = to_char(trunc(tbel.datum),'DD.MM.YYYY')                
                        where tbel.fk_arbeitstag is null --kein Arbeitstag gesetzt
            ) t2 on (t1.pk_beleg = t2.pk_beleg)
            when matched then 
             update set t1.fk_arbeitstag = t2.pk_arbeitstage;
            commit;

    end p_upd_beleg_dat;

    procedure p_beleg_add_stundenzettel(p_fk_stundenzettel number, p_fk_belegart number, p_monat varchar2) as
    begin
        insert into t_rel_stundenzettel_beleg (fk_stundenzettel, fk_beleg)
        select p_fk_stundenzettel, pk_beleg from t_beleg where fk_belegart = p_fk_belegart and substr(datum,4,2) =p_monat; --monat:  '07'
        commit;
    end p_beleg_add_stundenzettel;

    procedure p_cop_beleg  (p_pk_beleg number) as

    begin

        INSERT INTO t_beleg (

            fk_steuersatz,
            fk_belegart,
            fk_verwendungszweck,
            fk_arbeitstag,
            fk_projekt,
            fk_lehrgang,
            fk_einkauf,
            beleg,
            betrag_brutto,
            datum,
            von,
            bis,
            az_o_pause,
            az_m_pause,
            anwesenheitszeit,
            parkzeit,
            az_manuell_gepflegt,
            kommentar,
            betrag_netto,
            fk_imp_bel_nr,
            fk_imp_no,
            ext_renr,
            ext_auftragsnr,
            ext_lieferscheinnr,
            ext_leistungsdatum,
            ext_rechnungsdatum,
            ext_auftragsdatum,
            fk_offen,
            fk_vorsteuerrelevant,
            fk_vorsteuerpflege,
            fk_rechnungserstellung,
            fk_rechnung_erstellt,
            fk_bankbeleg,
            created_by,
            created_at,
            modified_by,
            modified_at,
            mwst,
            fk_lieferart,
            fk_einkommensteuerrelevant,
            fk_unternehmenssteuerrelevant,
            fk_bestellnr,
            fk_bestelltyp,
            fk_abrechnungszeitraum,
            fk_fremdwaehrung,
            frmdw_betrag_netto,
            frmdw_stsatz,
            frmdw_mwst,
            frmdw_betrag_brutto,
            ---
            buchungstag,
            fk_konto,
            kumulierter_Betrag_neg,
            kumulierter_betrag,
            endbetrag,
            startbetrag,
            betrag_neg,
            fk_belegwaehrung,
            fk_umsatzart,
            einzelbetrag_neg,
            fk_main_beleg,
            fk_bel_fehlend
        ) SELECT

            fk_steuersatz,
            fk_belegart,
            fk_verwendungszweck,
            fk_arbeitstag,
            fk_projekt,
            fk_lehrgang,
            fk_einkauf,
            beleg,
            betrag_brutto,
            datum,
            von,
            bis,
            az_o_pause,
            az_m_pause,
            anwesenheitszeit,
            parkzeit,
            az_manuell_gepflegt,
            kommentar,
            betrag_netto,
            fk_imp_bel_nr,
            fk_imp_no,
            ext_renr,
            ext_auftragsnr,
            ext_lieferscheinnr,
            ext_leistungsdatum,
            ext_rechnungsdatum,
            ext_auftragsdatum,
            fk_offen,
            fk_vorsteuerrelevant,
            fk_vorsteuerpflege,
            fk_rechnungserstellung,
            fk_rechnung_erstellt,
            fk_bankbeleg,
            created_by,
            created_at,
            modified_by,
            modified_at,
            mwst,
            fk_lieferart,
            fk_einkommensteuerrelevant,
            fk_unternehmenssteuerrelevant,
            fk_bestellnr,
            fk_bestelltyp,
            fk_abrechnungszeitraum,
            fk_fremdwaehrung,
            frmdw_betrag_netto,
            frmdw_stsatz,
            frmdw_mwst,
            frmdw_betrag_brutto,
            ---
            buchungstag,
            fk_konto,
            kumulierter_Betrag_neg,
            kumulierter_betrag,
            endbetrag,
            startbetrag,
            betrag_neg,
            fk_belegwaehrung,
            fk_umsatzart,
            einzelbetrag_neg,
            fk_main_beleg,
            fk_bel_fehlend
        FROM
            t_beleg
        where pk_beleg = p_PK_BELEG;
     commit;

     begin

  for i in (select * from user_tables where table_name like 'imp_ba%') loop
   pkg_imp_ba.p_set_fk_imp_ba_bel  (i.table_name) ;
  end loop;

end;

    end p_cop_beleg;



    procedure p_cre_temp_beleg (p_pk_belegart number) as
        /*
          für jede Belegart einen Vorlagenbeleg erstellen (teilautomatisiert)
          --mit den wesentlichen Einträgen für diese Belegart aus der Kopie eines bestehenden Beleges der Belegart
          --anschließende Änderungen an der Vorlage vornehmen (anpassen an Gebrauch)
          --aus der Vorlage können weitere Vorlagen über die Belegkopie erstellt werden
        */
    begin


        insert into t_TEMP_BELEG 
            SELECT PK_BELEG,
            FK_STEUERSATZ,
            FK_BELEGART,
            FK_VERWENDUNGSZWECK,
            FK_ARBEITSTAG,
            FK_PROJEKT,
            FK_LEHRGANG,
            FK_EINKAUF,
            BELEG,
            BETRAG_BRUTTO,
            DATUM,
            VON,
            BIS,
            AZ_O_PAUSE,
            AZ_M_PAUSE,
            ANWESENHEITSZEIT,
            PARKZEIT,
            AZ_MANUELL_GEPFLEGT,
            KOMMENTAR,
            BETRAG_NETTO,
            FK_IMP_BEL_NR,
            FK_IMP_NO,
            EXT_RENR,
            EXT_AUFTRAGSNR,
            EXT_LIEFERSCHEINNR,
            EXT_LEISTUNGSDATUM,
            EXT_RECHNUNGSDATUM,
            EXT_AUFTRAGSDATUM,
            FK_OFFEN,
            FK_VORSTEUERRELEVANT,
            FK_VORSTEUERPFLEGE,
            FK_RECHNUNGSERSTELLUNG,
            FK_RECHNUNG_ERSTELLT,
            FK_BANKBELEG,
            CREATED_BY,
            CREATED_AT,
            MODIFIED_BY,
            MODIFIED_AT,
            MWST,
            FK_LIEFERART,
            FK_EINKOMMENSTEUERRELEVANT,
            FK_UNTERNEHMENSSTEUERRELEVANT,
            FK_BESTELLNR,
            FK_BESTELLTYP,
            FK_ABRECHNUNGSZEITRAUM,
            FK_FREMDWAEHRUNG,
            FRMDW_BETRAG_NETTO,
            FRMDW_STSATZ,
            FRMDW_MWST,
            FRMDW_BETRAG_BRUTTO,
            BUCHUNGSTAG,
            FK_KONTO,
            KUMULIERTER_BETRAG_NEG,
            KUMULIERTER_BETRAG,
            ENDBETRAG,
            STARTBETRAG,
            BETRAG_NEG,
            FK_BELEGWAEHRUNG,
            FK_UMSATZART,
            EINZELBETRAG_NEG 
        from t_beleg 
        where pk_beleg in (
                                select max(pk_beleg) pk_beleg 
                                from t_beleg 
                                where fk_belegart = p_pk_belegart or p_pk_belegart is null
                                group by fk_belegart
                           );
        commit;

     END p_cre_temp_beleg ;

    PROCEDURE  p_create_beleg_from_giro(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number) as 

    begin

        merge into t_beleg t1
         using (
                    select 
                        null as pk_beleg,
                        gir."Buchungstag" datum,
                        gir."Wertstellung" beleg,
                        gir."Betrag" betrag,
                        gir."Buchungstext" || ' ' || "Kategorie" comm,
                    --    gir."Betrag Ursprung" frmdw_betrag_brutto,
                        ta.pk_arbeitstage fk_arbeitstag,
                        tf1.pk_fremdwaehrung fk_belegwaehrung,
                     --   tf2.pk_fremdwaehrung fk_fremdwaehrung,
                        gir.fk_konto fk_konto
                    from "KTO_Girokonto" gir
                        left join t_arbeitstage ta on gir."Buchungstag"= ta.datum
                        left join t_fremdwaehrung tf1 on tf1.fremdwaehrung = gir."Währung"
                      --  left join t_fremdwaehrung tf2 on tf2.fremdwaehrung = gir."Währung Ursprung"

         ) t2 on (t1.pk_beleg = t2.pk_beleg)
         when not matched then
        insert ( 
                  t1.datum,
                  t1.beleg,
                  t1.betrag_brutto,
                  t1.Kommentar,
                  t1.created_by,
                  t1.created_at,
                  t1.modified_by,
                  t1.modified_at,
                  --
                  t1.fK_belegart,
                  t1.fk_bankbeleg,
                  t1.fk_verwendungszweck,
                  t1.fk_vorsteuerrelevant,
                  --
               -- t1.frmdw_betrag_brutto,
                  t1.fk_belegwaehrung,
               --   t1.fk_fremdwaehrung,
                  t1.fk_arbeitstag,
                  t1.fk_konto
          )
          values (

                  t2.datum,
                  t2.beleg,
                  t2.betrag,
                  t2.comm,
                  USERS,
                  sysdate,
                  USERS,
                  sysdate,
                  --
                  p_fk_belegart, --21,
                  1, --Bankbeleg
                  p_fk_verwendungszweck, --2, --geschäftlich / privat / verschieden
                  p_fk_vorsteuerrelevant, --0
                  --
                 -- t2.frmdw_betrag_brutto,
                  t2.fk_belegwaehrung,
                 -- t2.fk_fremdwaehrung,
                  t2.fk_arbeitstag,
                  t2.fk_konto


          );
        commit;
    end p_create_beleg_from_giro;

    procedure p_create_beleg_from_kredit(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number) as 

      /*aus Kreditkartenzahlungsvorgängen Belege erstellen */

    begin
        merge into t_beleg t1
         using (
                select 
                    null as pk_beleg,  --neuer Beleg
                    kred."Beleg"  ,
                    kred."Buchungstag" as datum,
                    kred."Unternehmen" as beleg,
                    kred."Betrag" betrag,
                    kred."Kategorie" ,
                    kred."Beleg"  || ' ' || "Kategorie" as comm ,
                    kred."Betrag Ursprung" frmdw_betrag_brutto,
                    ta.pk_arbeitstage fk_arbeitstag,
                    tf1.pk_fremdwaehrung fk_belegwaehrung,
                    tf2.pk_fremdwaehrung fk_fremdwaehrung,
                    kred.fk_konto fk_konto
                from "KTO_Kreditkarte" kred
                 left join t_arbeitstage ta on kred."Buchungstag"= ta.datum
                 left join t_fremdwaehrung tf1 on tf1.fremdwaehrung = kred."Währung"
                 left join t_fremdwaehrung tf2 on tf2.fremdwaehrung = kred."Währung Ursprung"

         ) t2 on (t1.pk_beleg = t2.pk_beleg)
         when not matched then
        insert ( 
                  t1.datum,
                  t1.beleg,
                  t1.betrag_brutto,
                  t1.Kommentar,
                  t1.created_by,
                  t1.created_at,
                  t1.modified_by,
                  t1.modified_at,
                  --
                  t1.fK_belegart,
                  t1.fk_bankbeleg,
                  t1.fk_verwendungszweck,
                  t1.fk_vorsteuerrelevant,
                  --
                  t1.frmdw_betrag_brutto,
                  t1.fk_belegwaehrung,
                  t1.fk_fremdwaehrung,
                  t1.fk_arbeitstag,
                  t1.fk_konto
          )
        values (

                  t2.datum,
                  t2.beleg,
                  t2.betrag,
                  t2.comm,
                  USERS,
                  sysdate,
                  USERS,
                  sysdate,
                  ---
                  p_fk_belegart, --21,
                  1, --Bankbeleg
                  p_fk_verwendungszweck, --2, --geschäftlich / privat / verschieden
                  p_fk_vorsteuerrelevant, --0
                  --
                  --
                  t2.frmdw_betrag_brutto,
                  t2.fk_belegwaehrung,
                  t2.fk_fremdwaehrung,
                  t2.fk_arbeitstag,
                  t2.fk_konto

          );
        commit;
    end p_create_beleg_from_kredit;

    procedure p_add_allg_bel_wert as


    begin

        update imp_ba_allg_bel set wert = to_number(nvl(substr(Betrag,1,instr(Betrag,' ')), betrag)) where wert is null;
        commit;
    end p_add_allg_bel_wert;

    procedure p_split_datum_bel as

    begin

      update imp_ba_allg_bel set datum = substr(datum,1,instr(datum, ' ')) , uhrzeit = substr(datum,instr(datum, ' ')+1,length(datum)-instr(datum, ' ')) where instr(datum,' ') >0;
      commit;
    end p_split_datum_bel;

    procedure p_allg_bel_add_arb as

    begin

         merge into IMP_BA_allg_bel t1
        using (
                    select 
                        pk_arbeitstage, 
                        pk_imp_ba_allg_bel              
                    from (select * from IMP_BA_allg_bel where Datum is not null and fk_arbeitstag is null) bel,
                      t_arbeitstage arb
                    where  
                    to_date(substr(bel.datum,1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.pk_imp_ba_allg_bel= t2.pk_imp_ba_allg_bel)
            when matched then
            update set t1.fk_arbeitstag= t2.pk_arbeitstage;
            commit;
    end p_allg_bel_add_arb;
END PKG_BELEG;


/
--------------------------------------------------------
--  DDL for Package Body PKG_BELEG_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_BELEG_NEU" AS

  procedure p_add_vorst_bel(p_pk_main_beleg_new number, p_fk_vorsteuerrelevant number, p_monat number) AS
  BEGIN
        merge into t_beleg t1
        using (
                select tbel.*, p_pk_main_beleg_new  as fk_main_beleg_new  -- pk_main_beleg_new: 4864 
                from t_BELEG tbel
                 left join t_ARBEITSTAGe tarb on tbel.fk_arbeitstag = tarb.pk_arbeitstage
                where fk_vorsteuerrelevant = p_fk_vorsteuerrelevant --p_fk_vorsteuerrelevant: 1
                and monat = p_monat  --p_monat: 6
        )
        t2 on (t1.pk_beleg = t2.pk_beleg)
        when matched then
         update set t1.fk_main_beleg = t2.fk_main_beleg_new;
        commit;
  END p_add_vorst_bel;

  procedure p_calc_beleg(p_pk_beleg number, p_delete_flag number ) AS

         v_delete_flag number := 0;

    begin


        if p_delete_flag is not null then
          v_delete_flag := p_delete_flag;
        end if;


        update t_beleg set betrag_netto =round( betrag_brutto*100/119,2) where fk_main_beleg = p_pk_beleg;
        commit;

        update t_beleg set mwst =round( betrag_brutto*19/119,2) where fk_main_beleg = p_pk_beleg;
        commit;

        update t_beleg set betrag_netto = -1*betrag_netto, mwst = -1*mwst , betrag_brutto =-1*betrag_brutto where betrag_brutto >0;
        commit;

        if v_delete_flag = 1 then
            delete from t_beleg where pk_beleg =p_pk_beleg;
            commit;
        end if;
  END p_calc_beleg;

  procedure p_upd_beleg_dat AS
    begin
            /*Arbeitstage für Belege ergänzen*/
            merge into t_beleg t1
            using (
                        select tbel.pk_beleg, tarb.datum dat1, tbel.datum dat2, tbel.fk_arbeitstag, tarb.pk_arbeitstage
                        from t_beleg tbel
                          join t_arbeitstage tarb on to_char(trunc(tarb.datum),'DD.MM.YYYY') = to_char(trunc(tbel.datum),'DD.MM.YYYY')                
                        where tbel.fk_arbeitstag is null --kein Arbeitstag gesetzt
            ) t2 on (t1.pk_beleg = t2.pk_beleg)
            when matched then 
             update set t1.fk_arbeitstag = t2.pk_arbeitstage;
            commit;
  END p_upd_beleg_dat;

  procedure p_chg_belegart AS

         /* 
        Zuordnung der Belege zur Belegart über vorgegebene Stringinhalte (teilautomatisiert)
         --falls noch keine Belegart angegeben wurde
         --unter Verwendung der Tabelle "T_Match"
     */

    begin

        merge into t_beleg t1
         using (

                select pk_beleg, fk_key fk_belegart
                from t_beleg tb
                 join t_match tm on upper(tb.beleg) like upper(krit)
                where fk_belegart is null
            ) t2 on (t1.pk_beleg = t2.pk_beleg)
        when matched then 
         update set t1.fk_belegart = t2.fk_belegart;
        commit;
  END p_chg_belegart;

  procedure p_beleg_add_stundenzettel(p_fk_stundenzettel number, p_fk_belegart number, p_monat varchar2) AS
  BEGIN
      insert into t_rel_stundenzettel_beleg (fk_stundenzettel, fk_beleg)
        select p_fk_stundenzettel, pk_beleg from t_beleg where fk_belegart = p_fk_belegart and substr(datum,4,2) =p_monat; --monat:  '07'
        commit;
  END p_beleg_add_stundenzettel;

  procedure p_cop_beleg  (p_pk_beleg number) AS
  BEGIN
    INSERT INTO t_beleg (

            fk_steuersatz,
            fk_belegart,
            fk_verwendungszweck,
            fk_arbeitstag,
            fk_projekt,
            fk_lehrgang,
            fk_einkauf,
            beleg,
            betrag_brutto,
            datum,
            von,
            bis,
            az_o_pause,
            az_m_pause,
            anwesenheitszeit,
            parkzeit,
            az_manuell_gepflegt,
            kommentar,
            betrag_netto,
            fk_imp_bel_nr,
            fk_imp_no,
            ext_renr,
            ext_auftragsnr,
            ext_lieferscheinnr,
            ext_leistungsdatum,
            ext_rechnungsdatum,
            ext_auftragsdatum,
            fk_offen,
            fk_vorsteuerrelevant,
            fk_vorsteuerpflege,
            fk_rechnungserstellung,
            fk_rechnung_erstellt,
            fk_bankbeleg,
            created_by,
            created_at,
            modified_by,
            modified_at,
            mwst,
            fk_lieferart,
            fk_einkommensteuerrelevant,
            fk_unternehmenssteuerrelevant,
            fk_bestellnr,
            fk_bestelltyp,
            fk_abrechnungszeitraum,
            fk_fremdwaehrung,
            frmdw_betrag_netto,
            frmdw_stsatz,
            frmdw_mwst,
            frmdw_betrag_brutto,
            ---
            buchungstag,
            fk_konto,
            kumulierter_Betrag_neg,
            kumulierter_betrag,
            endbetrag,
            startbetrag,
            betrag_neg,
            fk_belegwaehrung,
            fk_umsatzart,
            einzelbetrag_neg,
            fk_main_beleg,
            fk_bel_fehlend
        ) SELECT

            fk_steuersatz,
            fk_belegart,
            fk_verwendungszweck,
            fk_arbeitstag,
            fk_projekt,
            fk_lehrgang,
            fk_einkauf,
            beleg,
            betrag_brutto,
            datum,
            von,
            bis,
            az_o_pause,
            az_m_pause,
            anwesenheitszeit,
            parkzeit,
            az_manuell_gepflegt,
            kommentar,
            betrag_netto,
            fk_imp_bel_nr,
            fk_imp_no,
            ext_renr,
            ext_auftragsnr,
            ext_lieferscheinnr,
            ext_leistungsdatum,
            ext_rechnungsdatum,
            ext_auftragsdatum,
            fk_offen,
            fk_vorsteuerrelevant,
            fk_vorsteuerpflege,
            fk_rechnungserstellung,
            fk_rechnung_erstellt,
            fk_bankbeleg,
            created_by,
            created_at,
            modified_by,
            modified_at,
            mwst,
            fk_lieferart,
            fk_einkommensteuerrelevant,
            fk_unternehmenssteuerrelevant,
            fk_bestellnr,
            fk_bestelltyp,
            fk_abrechnungszeitraum,
            fk_fremdwaehrung,
            frmdw_betrag_netto,
            frmdw_stsatz,
            frmdw_mwst,
            frmdw_betrag_brutto,
            ---
            buchungstag,
            fk_konto,
            kumulierter_Betrag_neg,
            kumulierter_betrag,
            endbetrag,
            startbetrag,
            betrag_neg,
            fk_belegwaehrung,
            fk_umsatzart,
            einzelbetrag_neg,
            fk_main_beleg,
            fk_bel_fehlend
        FROM
            t_beleg
        where pk_beleg = p_PK_BELEG;
     commit;

       for i in (select * from user_tables where table_name like 'imp_ba%') loop
   pkg_imp_ba.p_set_fk_imp_ba_bel  (i.table_name) ;
  end loop;

  END p_cop_beleg;

  procedure p_cre_temp_beleg (p_pk_belegart number) AS
  /*
          für jede Belegart einen Vorlagenbeleg erstellen (teilautomatisiert)
          --mit den wesentlichen Einträgen für diese Belegart aus der Kopie eines bestehenden Beleges der Belegart
          --anschließende Änderungen an der Vorlage vornehmen (anpassen an Gebrauch)
          --aus der Vorlage können weitere Vorlagen über die Belegkopie erstellt werden
        */
    begin


        insert into t_TEMP_BELEG 
            SELECT PK_BELEG,
            FK_STEUERSATZ,
            FK_BELEGART,
            FK_VERWENDUNGSZWECK,
            FK_ARBEITSTAG,
            FK_PROJEKT,
            FK_LEHRGANG,
            FK_EINKAUF,
            BELEG,
            BETRAG_BRUTTO,
            DATUM,
            VON,
            BIS,
            AZ_O_PAUSE,
            AZ_M_PAUSE,
            ANWESENHEITSZEIT,
            PARKZEIT,
            AZ_MANUELL_GEPFLEGT,
            KOMMENTAR,
            BETRAG_NETTO,
            FK_IMP_BEL_NR,
            FK_IMP_NO,
            EXT_RENR,
            EXT_AUFTRAGSNR,
            EXT_LIEFERSCHEINNR,
            EXT_LEISTUNGSDATUM,
            EXT_RECHNUNGSDATUM,
            EXT_AUFTRAGSDATUM,
            FK_OFFEN,
            FK_VORSTEUERRELEVANT,
            FK_VORSTEUERPFLEGE,
            FK_RECHNUNGSERSTELLUNG,
            FK_RECHNUNG_ERSTELLT,
            FK_BANKBELEG,
            CREATED_BY,
            CREATED_AT,
            MODIFIED_BY,
            MODIFIED_AT,
            MWST,
            FK_LIEFERART,
            FK_EINKOMMENSTEUERRELEVANT,
            FK_UNTERNEHMENSSTEUERRELEVANT,
            FK_BESTELLNR,
            FK_BESTELLTYP,
            FK_ABRECHNUNGSZEITRAUM,
            FK_FREMDWAEHRUNG,
            FRMDW_BETRAG_NETTO,
            FRMDW_STSATZ,
            FRMDW_MWST,
            FRMDW_BETRAG_BRUTTO,
            BUCHUNGSTAG,
            FK_KONTO,
            KUMULIERTER_BETRAG_NEG,
            KUMULIERTER_BETRAG,
            ENDBETRAG,
            STARTBETRAG,
            BETRAG_NEG,
            FK_BELEGWAEHRUNG,
            FK_UMSATZART,
            EINZELBETRAG_NEG 
        from t_beleg 
        where pk_beleg in (
                                select max(pk_beleg) pk_beleg 
                                from t_beleg 
                                where fk_belegart = p_pk_belegart or p_pk_belegart is null
                                group by fk_belegart
                           );
        commit;
  END p_cre_temp_beleg;

  procedure p_create_beleg_from_giro(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number) AS
  BEGIN


        merge into t_beleg t1
         using (
                    select 
                        null as pk_beleg,
                        gir."Buchungstag" datum,
                        gir."Wertstellung" beleg,
                        gir."Betrag" betrag,
                        gir."Buchungstext" || ' ' || "Kategorie" comm,
                    --    gir."Betrag Ursprung" frmdw_betrag_brutto,
                        ta.pk_arbeitstage fk_arbeitstag,
                        tf1.pk_waehrung fk_belegwaehrung,
                     --   tf2.pk_fremdwaehrung fk_fremdwaehrung,
                        gir.fk_konto fk_konto
                    from KTO_Girokonto gir
                        left join t_arbeitstage ta on gir."Buchungstag"= ta.datum
                        left join t_waehrung tf1 on tf1.waehrung = gir."Währung"
                      --  left join t_fremdwaehrung tf2 on tf2.fremdwaehrung = gir."Währung Ursprung"

         ) t2 on (t1.pk_beleg = t2.pk_beleg)
         when not matched then
        insert ( 
                  t1.datum,
                  t1.beleg,
                  t1.betrag_brutto,
                  t1.Kommentar,
                  t1.created_by,
                  t1.created_at,
                  t1.modified_by,
                  t1.modified_at,
                  --
                  t1.fK_belegart,
                  t1.fk_bankbeleg,
                  t1.fk_verwendungszweck,
                  t1.fk_vorsteuerrelevant,
                  --
               -- t1.frmdw_betrag_brutto,
                  t1.fk_belegwaehrung,
               --   t1.fk_fremdwaehrung,
                  t1.fk_arbeitstag,
                  t1.fk_konto
          )
          values (

                  t2.datum,
                  t2.beleg,
                  t2.betrag,
                  t2.comm,
                  USER,
                  sysdate,
                  USER,
                  sysdate,
                  --
                  p_fk_belegart, --21,
                  1, --Bankbeleg
                  p_fk_verwendungszweck, --2, --geschäftlich / privat / verschieden
                  p_fk_vorsteuerrelevant, --0
                  --
                 -- t2.frmdw_betrag_brutto,
                  t2.fk_belegwaehrung,
                 -- t2.fk_fremdwaehrung,
                  t2.fk_arbeitstag,
                  t2.fk_konto


          );
        commit;

  END p_create_beleg_from_giro;

  procedure p_create_beleg_from_kredit(p_fk_belegart number, p_fk_verwendungszweck number, p_fk_vorsteuerrelevant number)  AS
        /*aus Kreditkartenzahlungsvorgängen Belege erstellen */

    begin
        merge into t_beleg t1
         using (
                select 
                    null as pk_beleg,  --neuer Beleg
                    kred."Beleg"  ,
                    kred."Buchungstag" as datum,
                    kred."Unternehmen" as beleg,
                    kred."Betrag" betrag,
                    kred."Kategorie" ,
                    kred."Beleg"  || ' ' || "Kategorie" as comm ,
                    kred."Betrag Ursprung" frmdw_betrag_brutto,
                    ta.pk_arbeitstage fk_arbeitstag,
                    tf1.pk_waehrung fk_belegwaehrung,
                    tf2.pk_waehrung fk_fremdwaehrung,
                    kred.fk_konto fk_konto
                from KTO_Kreditkarte kred
                 left join t_arbeitstage ta on kred."Buchungstag"= ta.datum
                 left join t_waehrung tf1 on tf1.waehrung = kred."Währung"
                 left join t_waehrung tf2 on tf2.waehrung = kred."Währung Ursprung"

         ) t2 on (t1.pk_beleg = t2.pk_beleg)
         when not matched then
        insert ( 
                  t1.datum,
                  t1.beleg,
                  t1.betrag_brutto,
                  t1.Kommentar,
                  t1.created_by,
                  t1.created_at,
                  t1.modified_by,
                  t1.modified_at,
                  --
                  t1.fK_belegart,
                  t1.fk_bankbeleg,
                  t1.fk_verwendungszweck,
                  t1.fk_vorsteuerrelevant,
                  --
                  t1.frmdw_betrag_brutto,
                  t1.fk_belegwaehrung,
                  t1.fk_fremdwaehrung,
                  t1.fk_arbeitstag,
                  t1.fk_konto
          )
        values (

                  t2.datum,
                  t2.beleg,
                  t2.betrag,
                  t2.comm,
                  USER,
                  sysdate,
                  USER,
                  sysdate,
                  ---
                  p_fk_belegart, --21,
                  1, --Bankbeleg
                  p_fk_verwendungszweck, --2, --geschäftlich / privat / verschieden
                  p_fk_vorsteuerrelevant, --0
                  --
                  --
                  t2.frmdw_betrag_brutto,
                  t2.fk_belegwaehrung,
                  t2.fk_fremdwaehrung,
                  t2.fk_arbeitstag,
                  t2.fk_konto

          );
        commit;
  END p_create_beleg_from_kredit;

      procedure p_split_datum_bel as

    begin

      update imp_ba_allg_bel set datum = substr(datum,1,instr(datum, ' ')) , uhrzeit = substr(datum,instr(datum, ' ')+1,length(datum)-instr(datum, ' ')) where instr(datum,' ') >0;
      commit;
    end p_split_datum_bel;


    procedure p_allg_bel_add_arb as

    begin

         merge into IMP_BA_allg_bel t1
        using (
                    select 
                        pk_arbeitstage, 
                        pk_imp_ba_allg_bel              
                    from (select * from IMP_BA_allg_bel where Datum is not null and fk_arbeitstag is null) bel,
                      t_arbeitstage arb
                    where  
                    to_date(substr(bel.datum,1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.pk_imp_ba_allg_bel= t2.pk_imp_ba_allg_bel)
            when matched then
            update set t1.fk_arbeitstag= t2.pk_arbeitstage;
            commit;
    end p_allg_bel_add_arb;

END PKG_BELEG_NEU;


/
--------------------------------------------------------
--  DDL for Package Body PKG_DB_OBJ_HIST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_DB_OBJ_HIST" AS

--1 - load objects
 procedure p_1_load_object_list_all_db_objects  as
 begin
   insert into t_db_obj_object_list (object_type, object_name,create_at)
    select object_type, object_name , sysdate
    from all_objects 
    where object_type in ('TABLE','PROCEDURE','PACKAGE', 'PACKAGE_BODY', 'VIEW','FUNCTION') and owner = 'COMPANY';
    commit;
  end p_1_load_object_list_all_db_objects ;

  procedure p_1_load_object_list_new_db_objects  as
  begin
        insert into t_db_obj_object_list (object_type, object_name, create_at)
        select obj.object_type, obj.object_name, sysdate 
        from all_objects obj
         left join t_db_obj_object_list ol on obj.object_type = ol.object_type and obj.object_name = ol.object_name
        where obj.object_type in ('TABLE','PROCEDURE','PACKAGE', 'PACKAGE_BODY', 'VIEW','FUNCTION') and obj.owner = 'COMPANY'
        and ol.object_name is null;
        commit;
   end p_1_load_object_list_new_db_objects;
   
   --2 - load columns
   procedure p_2_load_object_list_all_tab_columns as
   begin
  
        insert into t_db_obj_object_list (object_type, object_name, column_name, data_type, data_length, data_precision, nullable, column_id, data_default, create_at)
        select 'COLUMN', table_name, column_name, data_type, data_length, data_precision, nullable, column_id, null data_default, sysdate
        from user_tab_cols;
        commit;
   end  p_2_load_object_list_all_tab_columns ;
   
   procedure p_2_load_object_list_new_tab_column as
   begin
         insert into t_db_obj_object_list (object_type, object_name, column_name, data_type, data_length, data_precision, nullable, column_id, data_default, create_at, created_on, last_updated_on)
        select 'COLUMN', ut.table_name, ut.column_name, ut.data_type, ut.data_length, ut.data_precision, ut.nullable, ut.column_id, null data_default, sysdate, sysdate sd, sysdate
        from user_tab_cols ut
         left join t_db_obj_object_list obj on ut.column_name = obj.column_name and ut.data_type = obj.data_type and obj.object_name = ut.table_name
        where obj.object_name is null;
        commit;
    end p_2_load_object_list_new_tab_column;
    
    --3 - Load apex pages
    procedure p_3_load_objects_list_new_apex_pages as
    begin
      --apex pages
        insert into t_db_obj_object_list (object_type , application_id, page_id, create_at, page_name, page_group, page_mode, created_on, created_by,last_updated_by, last_updated_on )
        select 'APEX_APPLICATION_PAGE' ,ap.application_id, ap.page_id, sysdate , ap.page_name, ap.page_group, ap.page_mode, ap.created_on, ap.created_by, ap.last_updated_by, ap.last_updated_on
        from apex_application_pages ap
         left join t_db_obj_object_list obj on ap.application_id = obj.application_id and ap.page_name = obj.page_name and ap.page_id = obj.page_id
        
        where ap.application_id in (100,101)
        and obj.page_name is null;
        commit;
    end  p_3_load_objects_list_new_apex_pages;
    
    procedure  p_3_load_objects_list_update_apex_pages as
    begin
        merge into t_db_obj_object_list t1
         using (
        select 'APEX_APPLICATION_PAGE' ,ap.application_id, ap.page_id, sysdate , ap.page_name, ap.page_group, ap.page_mode
        from apex_application_pages ap
         left join t_db_obj_object_list obj on ap.application_id = obj.application_id and ap.page_name = obj.page_name and ap.page_id = obj.page_id
        
        where ap.application_id in (100,101)
        and obj.page_name is null
        ) t2 on (t1.application_id = t2.application_id and t1.page_id = t2.page_id)
        when matched then 
        update set t1.page_name = t2.page_name,
         t1.page_mode = t2.page_mode,
         t1.page_group  = t2.page_group;
         commit;
        
         merge into t_db_obj_object_list t1
         using (
         select distinct ap.application_id, ap.page_id, ap.created_on, ap.created_by, ap.last_updated_by, ap.last_updated_on
         from t_db_obj_object_list obj
          join apex_application_pages ap on obj.application_id = ap.application_id and obj.page_id = ap.page_id
        ) t2 on (t1.application_id = t2.application_id and t1.page_id = t2.page_id)
        when matched then 
         update set t1.created_by = t2.created_by,
         t1.created_on = t2.created_on,
         t1.last_updated_by = t2.last_updated_by,
         t1.last_updated_on = t2.last_updated_on;
         commit;
    end p_3_load_objects_list_update_apex_pages ;
    
    --4 - load db_objects into t_table_count
    procedure p_4_load_objects_all_db_objects as 
    begin
        insert into T_DB_TAB_TABLE_CONTENT_COUNT (datum, table_name, object_type, object_status_old)
        select sysdate, object_name, object_type, status from all_objects where owner = 'COMPANY';
        commit;
    end p_4_load_objects_all_db_objects;
    
    procedure p_4_load_objects_table_count_new_db_objects as 
    begin
       --
            insert into T_DB_TAB_TABLE_CONTENT_COUNT (datum, table_name, object_type, object_status_old)            
            select sysdate, obj.object_name, obj.object_type, obj.status 
            from all_objects obj
             left join T_DB_TAB_TABLE_CONTENT_COUNT tab on obj.object_name = tab.table_name and  obj.object_type = tab.object_type and obj.status= tab.object_status_old            
            where owner = 'COMPANY' and tab.table_name is null;
            commit;
    end p_4_load_objects_table_count_new_db_objects;
    
    --5 - mark data as transfered
    procedure p_5_mark_data_as_transfered as
    begin
     
     --alter table  t_db_tab_table_content_count add (transfer_date date, flg_transfered number);

    
     update t_db_tab_table_content_count set fk_std_db_data_transfered = 1 where table_name = upper(table_name) and object_type = 'TABLE';
     commit;
    end  p_5_mark_data_as_transfered;
    
    --6 - load_objects table count - add modul
    procedure p_6_load_object_table_count_add_modul as
    begin
        merge into  t_db_tab_table_content_count   t1
        using (
        select t1.table_name, max(t2.modul) modul
        from t_db_tab_table_content_count  t1
         left join (select * from  t_db_tab_table_content_count where modul is not null)  t2 on t1.table_name = t2.table_name
        where t1.modul is null
        group by t1.table_name
        ) t2 on (t1.table_name = t2.table_name)
        when matched then 
        update set t1.modul = t2.modul;
        commit;
    end p_6_load_object_table_count_add_modul;
        

    --6 - load_objects table count - add modul
    procedure p_6_load_object_table_count_cnt as  
    begin
        insert into t_DB_TAB_TABLE_CONTENT_COUNT_CNT ( 
        FK_DB_TAB_TABLE_CONTENT_COUNT,
        FK_DB_TAB_TABLE_CONTENT_COUNT_LOAD,
        CNT,
        LOAD_DT,
        CREATED_AT,
        COMM,
        CONNECTION_STR) 
        select PK_DB_TAB_TABLE_CONTENT_COUNT, 1, new_cnt , sysdate, sysdate,null,     'company
        Adapter TNSNAMES zur Aufl÷sung des Alias verwendet
        Verbindungsversuch mit (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST =46.101.177.181)(PORT = 1528)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME =PDB18C)))'
        --old_table_name, old_object_type,
        from v_db_check_table_content
        where old_object_type  = 'TABLE';
        commit;
     end p_6_load_object_table_count_cnt;

    
    
    
           
END PKG_DB_OBJ_HIST;

/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_BA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_BA" AS

 procedure p_imp_ba_tank_add_arb as
 
 begin

                    merge into IMP_BA_TANKSTELLE t1
                    using (
                                select 
                                    pk_arbeitstage, 
                                    pk_imp_ba_tankstelle              
                                from (select * from IMP_BA_TANKSTELLE where Datum is not null and fk_arbeitstag is null) bel,
                                  t_arbeitstage arb
                                where  
                                to_date(substr(bel.datum,1,10), 'DD/MM/YYYY')=   arb.datum 
                                --bel.fk_buchungstag is null
                         ) t2 on (t1.pk_imp_ba_tankstelle= t2.pk_imp_ba_tankstelle)
                        when matched then
                        update set t1.fk_arbeitstag= t2.pk_arbeitstage;
                        commit;

                        merge into imp_ba_allg_bel t1
             using ( select bild
                     from imp_ba_elektronik
                     where pk_imp_ba_elektronik = 23
                     ) t2 on (t1.pk_imp_ba_allg_bel=821)
            when matched then 
            update set t1.bild = t2.bild;
            commit;
             merge into t_inventare t1
             using ( select bild
                     from imp_ba_software
                     where pk_imp_ba_software = 1
                     ) t2 on (t1.pk_inventar=14)
            when matched then 
            update set t1.bild = t2.bild;
            commit;
            update imp_ba_bussgelder set fk_inventar = 17  where kennzeichen = 'M-RO 2947';
              commit;

            update imp_ba_bussgelder set fk_inventar = 5  where kennzeichen = 'M-ZO 523';
              commit;

            update imp_ba_bussgelder set fk_inventar = 16  where kennzeichen = 'M-R 7408';
              commit;

              merge into imp_ba_tankstelle t1
            using (
            select pk_imp_ba_tankstelle, min(pk_projekt) pk_projekt
            from t_projekt pr
             join imp_ba_tankstelle tk on tk.datum between pr.von and pr.bis
             group by pk_imp_ba_tankstelle
             ) t2 on (t1.pk_imp_ba_tankstelle = t2.pk_imp_ba_tankstelle)
             when matched then 
             update set t1.fk_projekt = t2.pk_projekt;
             commit;

             merge into imp_ba_hotelrechnungen t1
            using (
            select pk_imp_ba_hotelrechnungen, min(pk_projekt) pk_projekt
            from t_projekt pr
             join imp_ba_hotelrechnungen tk on case when length(tk.datum) = 8  then to_date(tk.datum, 'MM/DD/YYYY')
             --when length(tk.datum) = 20 then to_date(tk.datum, 'DD.MM.YYYY HH24:MI:SS')
             end between pr.von and pr.bis
             where length(tk.datum) = 8
             and instr(tk.datum,'/')>0
             group by pk_imp_ba_hotelrechnungen
             ) t2 on (t1.pk_imp_ba_hotelrechnungen = t2.pk_imp_ba_hotelrechnungen)
             when matched then 
             update set t1.fk_projekt = t2.pk_projekt;
             commit;

            -- select datum, length(datum) from imp_ba_hotelrechnungen  where length(datum) = 20;

            merge into imp_ba_hotelrechnungen t1
            using (
            select pk_imp_ba_hotelrechnungen, min(pk_projekt) pk_projekt
            from t_projekt pr
             join imp_ba_hotelrechnungen tk on case when length(tk.datum) = 9  then to_date(tk.datum, 'MM/DD/YYYY')
             when length(tk.datum) = 19 then to_date(tk.datum, 'MM/DD/YYYY HH24:MI:SS')
             end between pr.von and pr.bis
             where length(tk.datum) = 9
             and instr(tk.datum,'/')>0
             group by pk_imp_ba_hotelrechnungen
             ) t2 on (t1.pk_imp_ba_hotelrechnungen = t2.pk_imp_ba_hotelrechnungen)
             when matched then 
             update set t1.fk_projekt = t2.pk_projekt;
             commit;

            -- select datum, length(datum) from imp_ba_hotelrechnungen  where length(datum) = 20;


 end p_imp_ba_tank_add_arb;

 procedure p_imp_ba_krankk_add_üb (p_fk_main_key number) as
 begin

   if p_fk_main_key is not null then

     insert into imp_ba_krankenkasse
    (
          fk_buchung,
        datum,
        buchungstext,

        gezahlter_betrag,
        modified_at
    )

    select fk_main_key,
           "Buchungstag",
           'Überweisung',
           "Betrag",
           sysdate
    from v_konten_zus
    where fk_main_key =P_fk_main_key	;
    commit;

  end if;
 end p_imp_ba_krankk_add_üb;

 procedure p_imp_ba_krankk_add_arb as

 begin

                    merge into IMP_BA_Krankenkasse t1
                    using (
                                select 
                                    pk_arbeitstage, 
                                    pk_imp_ba_krankenkasse              
                                from (select * from IMP_BA_krankenkasse where Datum is not null and fk_arbeitstag is null) bel,
                                  t_arbeitstage arb
                                where  
                                to_date(substr(bel.datum,1,10), 'DD/MM/YYYY')=   arb.datum 
                                --bel.fk_buchungstag is null
                         ) t2 on (t1.pk_imp_ba_krankenkasse= t2.pk_imp_ba_krankenkasse)
                        when matched then
                        update set t1.fk_arbeitstag= t2.pk_arbeitstage;
                        commit;
end   p_imp_ba_krankk_add_arb ;



 procedure p_set_fk_imp_ba_bel  (p_table_name varchar) as


 begin
  execute immediate ' update   ' || p_table_name || ' set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ';

end;


 procedure p_set_fk_imp_ba_bel as

 begin

         update   IMP_BA_ALLG_BEL set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update  IMP_BA_AUTOERSATZTEILE set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;


        update   IMP_BA_BUSSGELDER set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update    IMP_BA_CARMIETE set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;


        update   IMP_BA_COWORKING set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update   IMP_BA_ELEKTRONIK set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update   IMP_BA_GRENZBELEGE set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update   IMP_BA_HEIZUNGSABRECHNUNG set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update    IMP_BA_HOTELRECHNUNGEN set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update     IMP_BA_KFZ_VERSICHERUNGEN set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update     IMP_BA_KRANKENKASSE set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update      IMP_BA_OEFFENTL_TICKETS set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update      IMP_BA_PARKTICKETS set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update       IMP_BA_SONSTIGE_BELEGE set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update       IMP_BA_STEUER set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update        IMP_BA_TANKSTELLE set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;

        update        IMP_BA_Textilreinigung set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;
        commit;


        update    IMP_TEL_MOBILCOM_RECH_OV set fk_imp_tel_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_tel_bel is null ;
        commit;

        update    IMP_TEL_O2 set fk_imp_tel_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_tel_bel is null ;
        commit;

        update    IMP_TEL_VODAFONE set fk_imp_tel_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_tel_bel is null ;
        commit;



        update   inp_belegE_ALL set fk_imp_BA_bel_OLD = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_BA_bel_OLD is null ;
        commit;
                      update      IMP_BA_software set fk_imp_ba_bel = "COMPANY"."IMP_BA_BEL_SEQ".nextval where fk_imp_ba_bel is null ;

        commit;

end p_set_fk_imp_ba_bel;

procedure p_merge  as
begin
                merge into imp_ba_hotelrechnungen t1
        using (
        select pk_imp_ba_hotelrechnungen, min(pk_projekt) pk_projekt
        from t_projekt pr
         join imp_ba_hotelrechnungen tk on case when length(tk.datum) = 9  then to_date(tk.datum, 'MM/DD/YYYY')
         when length(tk.datum) = 19 then to_date(tk.datum, 'MM/DD/YYYY HH24:MI:SS')
         end between pr.von and pr.bis
         where length(tk.datum) = 9
         and instr(tk.datum,'/')>0
         group by pk_imp_ba_hotelrechnungen
         ) t2 on (t1.pk_imp_ba_hotelrechnungen = t2.pk_imp_ba_hotelrechnungen)
         when matched then 
         update set t1.fk_projekt = t2.pk_projekt;
         commit;

         --select datum, length(datum) from imp_ba_hotelrechnungen  where length(datum) = 20;
 end p_merge;

    procedure p_check_fk_imp_ba_bel as
     v_cnt number;
    begin
        select  count(*)
        into v_cnt
        from v_imp_bel_zus
        group by fk_imp_ba_bel
        having count(*)> 1;

    end  p_check_fk_imp_ba_bel;

END PKG_IMP_BA;


/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_GIR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_GIR" AS

 procedure p_imp_new_gir (p_buchungsdatum date) as
 
 begin



insert into KTO_GIROKONTO
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            "Währung",
            "Auftraggeberkonto",
            "Bankleitzahl Auftraggeberkonto",
            "IBAN Auftraggeberkonto",
            "Kategorie",
            fk_konto, 
            "FK_Kontotyp",
            load_date

        )
        select 
            to_date(BUCHUNGSTAG,'DD.MM.YYYY'),
            to_date(WERTSTELLUNG,'DD.MM.YYYY'),
            UMSATZART,
            BUCHUNGSTEXT,
            BETRAG,
            WÄHRUNG,
            AUFTRAGGEBERKONTO,
            BANKLEITZAHL_AUFTRAGGEBERKONTO,
            IBAN_AUFTRAGGEBERKONTO,
            KATEGORIE,
            2,
            1,
            sysdate
        from IMP_GIR_KTO
       -- where to_date(Buchungstag,'DD.MM.YYYY') > to_date('14.08.2019','DD.MM.YYYY')
        order by  to_date(Buchungstag,'DD.MM.YYYY');
        commit;



insert into t_KTO_GIROKONTO
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            "Währung",

            IBAN_Auftraggeberkonto,

            fk_kto_bankkonto, 
            FK_bas_Kontotyp,
            load_date,
            beguenstigter,
            iban_zusatz,
            bic,
            glaeubiger,
            fremdgebuehren,
            abweichenderempfaenger,
            anzahlauftraege,
            anzahlschecks

        )
        select 
            to_date(BUCHUNGSTAG,'DD.MM.YYYY'),
            to_date(WERT,'DD.MM.YYYY'),
            UMSATZART,
            Verwendungszweck,
            nvl(soll,haben),
            WÄHRUNG,


            'DE91760260000754017200',

           7,
            1,
            sysdate,
              begünstigter,
            iban,
            bic,
            gläubiger,
            Fremdegebühren,
            abweichenderempfänger,
            anzahlaufträge,
            anzahlschecks
        from t_IMP_kto_GIR_NORIS
       -- where to_date(Buchungstag,'DD.MM.YYYY') > to_date('14.08.2019','DD.MM.YYYY')
        order by  to_date(Buchungstag,'DD.MM.YYYY');
        commit;

             update imp_ing_diba set buchung = to_date(buchung,'MM/DD/YYYY'), valuta = to_date(valuta,'MM/DD/YYYY');
             commit;

  insert into KTO_Girokonto
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            saldo,
            "Währung",


            "IBAN Auftraggeberkonto",
              auftraggeber,
            empfänger,
              fk_konto,
            --  "Verwendungszweck",
            "FK_Kontotyp"

        )

        select 
            to_date(BUCHUNG,'DD.MM.YYYY'),
            to_date(valuta,'DD.MM.YYYY'),
            buchungstext  umsatzart,
            verwendungszweck,

            replace(trim(substr(betrag,1,instr(betrag,' '))),'.',''),
            replace(trim(substr(saldo,1,instr(saldo,' '))),'.',''),

           'EUR',
           'DE52 5001 0517 5428 5421 79',
              auftraggeber,
            auftraggeber,
         --   Verwendungszweck,
            5,
            1

        from IMP_ing_diba
             where buchung >= '04.11.2019';
        commit;




     insert into KTO_Girokonto
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            saldo,
            "Währung",


            "IBAN Auftraggeberkonto",
              auftraggeber,
            empfänger,
              fk_konto,
              "FK_Kontotyp",
              load_date


        )

        select 
            to_date(BUCHUNGSdatum,'DD.MM.YYYY'),
            to_date(WERTSTELLUNG,'DD.MM.YYYY'),
            umsatzart,
            buchungsdetails,

            replace(trim(substr(betrag,1,instr(betrag,' '))),'.',''),
            replace(trim(substr(saldo,1,instr(saldo,' '))),'.',''),

           'EUR',
           'DE11100100100932999122',
              auftraggeber,
            empfänger,
            6,
            1,
            sysdate

        from IMP_gir_post
         where  buchungsdatum >= '01.11.2019';
        commit;



insert into inp_belege_ALL (

bel_datum,
bezeichnung,
brutto_betrag,
fk_STATUS,
--fk_Kategorie,
--fk_verwendungszweck,
fk_abl_ordner_page,
comm_sonstiges,
create_at,
modify_at
)
select BELEGDAT bt,
Buchungstext,
abs(BetragEUR) Betrag,
6 Status,
--"FK_Kategorie" ,
--"FK_Verwendungszweck",
2661,
relation,
sysdate,
sysdate
from t_lex_long;
---where relation =  :P;
commit

insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
HABENBETRAG_EUR,
USTKONTO,
UST
,
2019,
kst,
ktr
from imp_kontenblatt_2019_2;
commit;



 end p_imp_new_gir;

 procedure p_imp_new_gir1(p_buchungsdatum date) as

 begin

         --postbank

     insert into KTO_Girokonto
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            saldo,
            "Währung",


            "IBAN Auftraggeberkonto",
              auftraggeber,
            empfänger,
            fk_kontotyp,
            fk_konto,
            load_date

        )

        select 
            to_date(BUCHUNGSdatum,'MM/DD/YYYY'),
            to_date(WERTSTELLUNG,'MM/DD/YYYY'),
            umsatzart,
            buchungsdetails,

            betrag,
            saldo,

           'EUR',
           'DE11100100100932999122',
              auftraggeber,
            empfänger

        from IMP_gir_post;
        commit;




update t_KTO_Girokonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;

update t_kto_girokonto set     Buchungstext =    "Buchungstext" where buchungstext is null;
commit;


update t_kto_girokonto set fk_konto = 6 where    "IBAN Auftraggeberkonto" =   'DE11100100100932999122' and fk_kto_bankkonto is null;
commit;


--

update KTO_Girokonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;

update kto_girokonto set     Buchungstext =    "Buchungstext" where  buchungstext is null;
commit;

update kto_girokonto set fk_konto = 2, "FK_Kontotyp" = 1 where    "IBAN Auftraggeberkonto" =   'DE07430400360393191200' and fk_konto is null;
commit;
--
   insert into KTO_GIROKONTO
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            "Währung",
            "Auftraggeberkonto",
            "Bankleitzahl Auftraggeberkonto",
            "IBAN Auftraggeberkonto",
            "Kategorie"

        )
        select 
            to_date(BUCHUNGSTAG,'DD.MM.YYYY'),
            to_date(WERTSTELLUNG,'DD.MM.YYYY'),
            UMSATZART,
            BUCHUNGSTEXT,
            BETRAG,
            WÄHRUNG,
            AUFTRAGGEBERKONTO,
            BANKLEITZAHL_AUFTRAGGEBERKONTO,
            IBAN_AUFTRAGGEBERKONTO,
            KATEGORIE
        from IMP_KTO_GIR;

        commit;


 end  p_imp_new_gir1;

 procedure p_add_arbeitstage as

 begin



merge into KTO_GIROKONTO t1
  using (
        select pk_arbeitstage, 
        id

        from (select * from KTO_GIROKONTO where "Buchungstag" is not null and fk_buchungstag is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel."Buchungstag",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_buchungstag= t2.pk_arbeitstage;
        commit;

  merge into KTO_GIROKONTO t1
  using (
          select pk_arbeitstage, 
           id

          from (select * from KTO_GIROKONTO where "Wertstellung" is not null and fk_wertstellung is null) bel,
          t_arbeitstage arb
          where  to_date(substr(bel."Wertstellung",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_wertstellung= t2.pk_arbeitstage;
        commit;


 end p_add_arbeitstage;

 procedure p_all as

 begin

/*
          insert into "KTO_Girokonto"
        (id,
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
           "Betrag",
            "Währung",
            "Auftraggeberkonto",
            "Bankleitzahl Auftraggeberkonto",
            "IBAN Auftraggeberkonto",
            "Kategorie",
            empfänger,
           saldo

        )
        select 
        "KTO_Girokonto_SE8".nextval,
       to_date( BUCHUNGSdatum,'DD.MM.YYYY HH24:MI:SS'),
       to_date( WERTSTELLUNG,'DD.MM.YYYY HH24:MI:SS'),
            UMSATZART,
           BUCHUNGSDETAILS,
        replace(substr( BETRAG,1, instr(betrag, '')-1),'.',''),
            'EUR' WaeHRUNG,
            null AUFTRAGGEBERKONTO,
            null BANKLEITZAHL,
            null IBAN,
            null KATEGORIE,
            EMPFÄnger,
           replace( substr(saldo,1, instr(saldo, '')-1),'.','')

            from t_imp_bank_2105;

-- where Buchungstag< to_date('05.02.2019','DD.MM.YYYY HH24:MI:SS');
        commit;
        */

     insert into KTO_Girokonto
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            saldo,
            "Währung",


            "IBAN Auftraggeberkonto",
              auftraggeber,
            empfänger

        )

        select 
            to_date(BUCHUNGSdatum,'MM/DD/YYYY'),
            to_date(WERTSTELLUNG,'MM/DD/YYYY'),
            umsatzart,
            buchungsdetails,

            betrag,
            saldo,

           'EUR',
           'DE11100100100932999122',
              auftraggeber,
            empfänger

        from IMP_gir_post1;
        commit;


update kto_girokonto set fk_konto = 6 where    "IBAN Auftraggeberkonto" =   'DE11100100100932999122' and fk_konto is null;
commit;

update kto_girokonto set     Buchungstext =    "Buchungstext" where fk_konto = 6 and buchungstext is null;
commit;

  update KTO_Girokonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;

         merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;



        merge into t_KTO_GIROKONTO t1
  using (
        select pk_bas_arbeitstage, 
        id

        from (select * from t_KTO_GIROKONTO where "Buchungstag" is not null and fk_bas_buchungstag is null) bel,
          t_bas_arbeitstage arb
        where  to_date(substr(bel."Buchungstag",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_bas_buchungstag= t2.pk_bas_arbeitstage;
        commit;

  merge into t_KTO_GIROKONTO t1
  using (
          select pk_bas_arbeitstage, 
           id

          from (select * from t_KTO_GIROKONTO where "Wertstellung" is not null and fk_bas_wertstellung is null) bel,
          t_bas_arbeitstage arb
          where  to_date(substr(bel."Wertstellung",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_bas_wertstellung= t2.pk_bas_arbeitstage;
        commit;

end p_all;

 procedure p_add_rel_kontoauszug as

 begin
/*
 merge into t_rel_konto_auszug_gir t1
     using (
            select distinct kto_aus.pk_konto_auszug, gir.id, gir.fk_main_key
            from KTO_GIROKONTO gir
              join t_arbeitstage arb on gir.fk_buchungstag = arb.pk_arbeitstage
              join t_konto_auszug kto_aus on kto_aus.fk_monat = arb.monat and kto_aus.fk_jahr = arb.jahr
           -- where "Buchungstag" between to_date('22.12.2018','DD.MM.YYYY') and to_date('22.01.2019','DD.MM.YYYY')
          ) t2 on (t1.FK_KONTO_AUSZUG = t2.pk_konto_auszug and t1.FK_GIROKONTO = t2.id)
    when not matched then
    insert 
    (
        t1.FK_KONTO_AUSZUG,
        t1.fk_girokonto 
    )        
    values 
    (
        t2.pk_Konto_auszug,
        t2.fk_main_key
    );
    commit;
*/
null;

update  imp_kontenblatt_2018 set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
commit;

update  imp_kontenblatt_2018 set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
commit;
 end p_add_rel_kontoauszug;

 procedure p_rem_rel_kontoauszug(p_pk_kontoauszug number) as

 begin

    delete from t_rel_konto_auszug_gir where fk_konto_auszug in (p_pk_kontoauszug);
    commit; 

 end; 

 update kto_girokonto set "Buchungstag" = buchungstag_var , "Wertstellung" = wertstellung_var where buchungstag_var is not null;
commit;

 procedure p_set_buchungstext as

 begin

  update KTO_Girokonto set Buchungstext = "Buchungstext" where buchungstext is null;
   commit;

end p_set_buchungstext;

 procedure p_set_fk_main_key as

 begin
        update KTO_Girokonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;

 end p_set_fk_main_key;


update kto_girokonto set Buchungstext = "Buchungstext" where Buchungstext is null;
commit;


drop sequence imp_kontenblatt_2018_seq;
  CREATE SEQUENCE  imp_kontenblatt_2018_seq  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13109 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


update kto_girokonto set "Buchungstag" = Buchungstag_var, "Wertstellung" = Wertstellung_var where "Buchungstag" is null;
commit;
END PKG_IMP_GIR;


/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_GIR_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_GIR_NEU" AS

  procedure p_imp_new_gir_coba (p_buchungsdatum date, p_fk_konto number) AS
  BEGIN




insert into t_KTO_GIROKONTO
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            Waehrung,
            "Auftraggeberkonto",
            "Bankleitzahl Auftraggeberkonto",
            IBAN_Auftraggeberkonto,
            Kategorie,
            fk_kto_bankkonto, 
            FK_std_kto_Kontotyp

        )
        select 
            to_date(BUCHUNGSTAG,'DD.MM.YYYY'),
            to_date(WERTSTELLUNG,'DD.MM.YYYY'),
            UMSATZART,
            BUCHUNGSTEXT,
            BETRAG,
            WAEHRUNG,
            AUFTRAGGEBERKONTO,
            BANKLEITZAHL,
            IBAN,
            KATEGORIE,
           2,
            1
        from t_IMP_kto_gir_kto
      -- where to_date(Buchungstag,'DD.MM.YYYY') > to_date(p_buchungsdatum,'DD.MM.YYYY') --'14.08.2019'
        order by  to_date(Buchungstag,'DD.MM.YYYY');
        commit;





/*
          insert into "KTO_Girokonto"
        (id,
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
           "Betrag",
            "Währung",
            "Auftraggeberkonto",
            "Bankleitzahl Auftraggeberkonto",
            "IBAN Auftraggeberkonto",
            "Kategorie",
            empfänger,
           saldo

        )
        select 
        "KTO_Girokonto_SE8".nextval,
       to_date( BUCHUNGSdatum,'DD.MM.YYYY HH24:MI:SS'),
       to_date( WERTSTELLUNG,'DD.MM.YYYY HH24:MI:SS'),
            UMSATZART,
           BUCHUNGSDETAILS,
        replace(substr( BETRAG,1, instr(betrag, '')-1),'.',''),
            'EUR' WaeHRUNG,
            null AUFTRAGGEBERKONTO,
            null BANKLEITZAHL,
            null IBAN,
            null KATEGORIE,
            EMPFÄnger,
           replace( substr(saldo,1, instr(saldo, '')-1),'.','')

            from t_imp_bank_2105;

-- where Buchungstag< to_date('05.02.2019','DD.MM.YYYY HH24:MI:SS');
        commit;
        */




  END p_imp_new_gir_coba;


  procedure p_imp_new_gir_noris (p_buchungsdatum date) AS
  BEGIN 
  insert into t_KTO_GIROKONTO
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
           Waehrung,

            IBAN_Auftraggeberkonto,

            fk_kto_bankkonto, 
            FK_std_kto_Kontotyp,
            load_date,
            beguenstigter,
            iban_zusatz,
            bic,
            glaeubiger,
            fremdgebuehren,
            abweichenderempfaenger,
            anzahlauftraege,
            anzahlschecks

        )
        select 
            to_date(BUCHUNGSTAG,'DD.MM.YYYY'),
            to_date(WERT,'DD.MM.YYYY'),
            UMSATZART,
            Verwendungszweck,
            nvl(soll,haben),
            WÄHRUNG,


            'DE91760260000754017200',

           101,
            1,
            sysdate,
              begünstigter,
            iban,
            bic,
            gläubiger,
            Fremdegebühren,
            abweichenderempfänger,
            anzahlaufträge,
            anzahlschecks
        from t_IMP_kto_GIR_NORIS
       -- where to_date(Buchungstag,'DD.MM.YYYY') > to_date('14.08.2019','DD.MM.YYYY')
        order by  to_date(Buchungstag,'DD.MM.YYYY');
        commit;

  end p_imp_new_gir_noris;

  procedure p_imp_new_gir_ing_diba (p_buchungsdatum date) AS
  BEGIN


  insert into t_KTO_Girokonto
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            saldo,
            Waehrung,


            IBAN_Auftraggeberkonto,
              auftraggeber,
            empfaenger,
              fk_kto_bankkonto,
            --  "Verwendungszweck",
            FK_std_kto_Kontotyp

        )

        select 
            to_date(BUCHUNG,'DD.MM.YYYY'),
            to_date(valuta,'DD.MM.YYYY'),
            buchungstext  umsatzart,
            verwendungszweck,

            replace(trim(substr(betrag,1,instr(betrag,' '))),'.',''),
            replace(trim(substr(saldo,1,instr(saldo,' '))),'.',''),

           'EUR',
           'DE52 5001 0517 5428 5421 79',
              auftraggeber,
            auftraggeber,
         --   Verwendungszweck,
            5,
            1

        from t_IMP_kto_ing_diba;
          --   where buchung >= '04.11.2019';
        commit;
 end p_imp_new_gir_ing_diba;



procedure p_imp_new_gir_post (p_buchungsdatum date) AS
begin

             insert into t_KTO_Girokonto
        (
            "Buchungstag",
            "Wertstellung",
            "Umsatzart",
            "Buchungstext",
            "Betrag",
            saldo,
            Waehrung,


            IBAN_Auftraggeberkonto,
              auftraggeber,
            empfaenger,
              fk_kto_bankkonto


        )

        select 
            to_date(BUCHUNGSdatum,'DD.MM.YYYY'),
            to_date(WERTSTELLUNG,'DD.MM.YYYY'),
            umsatzart,
            buchungsdetails,

            replace(trim(substr(betrag,1,instr(betrag,' '))),'.',''),
            replace(trim(substr(saldo,1,instr(saldo,' '))),'.',''),

           'EUR',
           'DE11100100100932999122',
              auftraggeber,
            empfaenger,
            6

        from t_IMP_kto_gir_post
              where  buchungsdatum >= '01.11.2019';
        commit;



update t_KTO_Girokonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;



    
    update t_kto_girokonto set     Buchungstext =    "Buchungstext" where buchungstext is null;
    commit;
    
    
    update t_kto_girokonto set fk_kto_bankkonto = 6 where    'IBAN Auftraggeberkonto' =   'DE11100100100932999122' and fk_kto_bankkonto is null;
    commit;


 end p_imp_new_gir_post;

 procedure p_update_fk_main_key as
 begin


update t_KTO_Girokonto set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;

    end  p_update_fk_main_key ;

    procedure p_add_buchungstext as 
    begin

update t_kto_girokonto set     Buchungstext =    "Buchungstext" where buchungstext is null;
commit;
end p_add_buchungstext;


procedure p_add_iban as
begin



update t_kto_girokonto set fk_kto_bankkonto = 6 where    'IBAN Auftraggeberkonto'  =   'DE11100100100932999122' and fk_kto_bankkonto is null;
commit;


update t_kto_girokonto set fk_kto_bankkonto = 2, FK_std_kto_Kontotyp = 1 where    'IBAN Auftraggeberkonto' =   'DE07430400360393191200' and fk_kto_bankkonto is null;
commit;



end p_add_iban;

  procedure p_imp_new_gir1(p_buchungsdatum date) AS
  BEGIN
    -- TODO: Implementierung für procedure PKG_IMP_GIR_NEU.p_imp_new_gir1 erforderlich
    NULL;
  END p_imp_new_gir1;

  procedure p_add_arbeitstage  AS
  BEGIN

merge into t_KTO_GIROKONTO t1
  using (
          select pk_bas_kal_arbeitstage, 
           id

          from (select * from t_KTO_GIROKONTO where "Wertstellung" is not null and fk_bas_kal_wertstellung is null) bel,
          t_bas_kal_arbeitstage arb
          where  to_date(substr(bel."Wertstellung",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_bas_kal_wertstellung= t2.pk_bas_kal_arbeitstage;
        commit;


          merge into t_KTO_GIROKONTO t1
  using (
          select pk_bas_kal_arbeitstage, 
           id

          from (select * from t_KTO_GIROKONTO where "Buchungstag" is not null and fk_bas_kal_buchungstag is null) bel,
          t_bas_kal_arbeitstage arb
          where  to_date(substr(bel."Buchungstag",1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.id = t2.id)
        when matched then
        update set t1.fk_bas_kal_buchungstag= t2.pk_bas_kal_arbeitstage;
        commit;



  END p_add_arbeitstage;

  procedure p_rem_rel_kontoauszug(p_pk_kto_konto_auszug number) AS
  BEGIN
    -- TODO: Implementierung für procedure PKG_IMP_GIR_NEU.p_rem_rel_kontoauszug erforderlich
    NULL;

    /*
 merge into t_rel_konto_auszug_gir t1
     using (
            select distinct kto_aus.pk_konto_auszug, gir.id, gir.fk_main_key
            from KTO_GIROKONTO gir
              join t_arbeitstage arb on gir.fk_buchungstag = arb.pk_arbeitstage
              join t_konto_auszug kto_aus on kto_aus.fk_monat = arb.monat and kto_aus.fk_jahr = arb.jahr
           -- where "Buchungstag" between to_date('22.12.2018','DD.MM.YYYY') and to_date('22.01.2019','DD.MM.YYYY')
          ) t2 on (t1.FK_KONTO_AUSZUG = t2.pk_konto_auszug and t1.FK_GIROKONTO = t2.id)
    when not matched then
    insert 
    (
        t1.FK_KONTO_AUSZUG,
        t1.fk_girokonto 
    )        
    values 
    (
        t2.pk_Konto_auszug,
        t2.fk_main_key
    );
    commit;
*/

    delete from t_rel_kto_konto_auszug_gir where fk_kto_konto_auszug in (p_pk_kto_konto_auszug);
    commit; 
  END p_rem_rel_kontoauszug;

  procedure p_set_buchungstext AS
  BEGIN
    -- TODO: Implementierung für procedure PKG_IMP_GIR_NEU.p_set_buchungstext erforderlich
    NULL;
  END p_set_buchungstext;

  procedure p_set_fk_main_key  AS
  BEGIN
    -- TODO: Implementierung für procedure PKG_IMP_GIR_NEU.p_set_fk_main_key erforderlich
    NULL;
  END p_set_fk_main_key;

  procedure p_upd_imp_ing_diba_buchdat as 
  begin

             update t_imp_kto_ing_diba set buchung = to_date(buchung,'MM/DD/YYYY'), valuta = to_date(valuta,'MM/DD/YYYY');
             commit;
   end;

   procedure p_add_buchtag_werttag_after_ssis as
   begin
    update t_kto_girokonto set "Buchungstag" = buchungstag_var , "Wertstellung" = wertstellung_var where buchungstag_var is not null;
commit;
end p_add_buchtag_werttag_after_ssis;

procedure p_set_wiederholung_basis as
begin

    update t_kto_girokonto set wiederholung = 'einmalig' where wiederholung is null;
    commit;
end p_set_wiederholung_basis;

procedure p_set_wiederholung(p_number number)  as
begin



--"monatlich"
--"vierteljährlich"
--"jährlich"
--einmalig
--"halbjährlich"

    update t_kto_girokonto set wiederholung = '"jährlich"' where fk_main_key =			p_number;
    commit; 



    update t_kto_girokonto set wiederholung = '"vierteljährlich"' where fk_main_key =			p_number		;
    commit;

    update t_kto_girokonto set wiederholung =  '"monatlich"' where fk_main_key =	p_number;
    commit;

    update t_kto_girokonto set wiederholung = 'einmalig'  where fk_main_key =		p_number;
    commit;

end p_set_wiederholung;


procedure p_set_wiederholung(p_betrag number, p_wiederholung varchar2, p_buchungstext_part varchar2)  as
begin

    update t_kto_girokonto set wiederholung = '"monatlich"' where "Betrag" = p_betrag and instr("Buchungstext", p_buchungstext_part)=0;  ---p_betrag -20.84 , p_buchungstext_part 'Seehus'
    commit;

    update t_kto_girokonto set wiederholung = '"vierteljährlich"' where "Betrag" = p_betrag and wiederholung = p_wiederholung;   --p_wiederholung     'einmalig'
    commit;

end p_set_wiederholung;


END PKG_IMP_GIR_NEU;

/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_KRED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_KRED" AS

    procedure p_create_new_kred(p_buchungstag date) as
    
    begin
         insert into KTO_Kreditkarte
            (
                "Buchungstag",
                "Beleg",
                "Unternehmen",
                "Betrag",
                "Währung",
                "Betrag Ursprung",
                "Währung Ursprung",
                "Belastete Kreditkarte",
                "Kategorie"
            )
            select 
                BUCHUNGSTAG,
                BELEG,
                UNTERNEHMEN,
                BETRAG,
                WÄHRUNG,
                BETRAG_URSPRUNG,
                WÄHRUNG_URSPRUNG,
                BELASTETE_KREDITKARTE,
                KATEGORIE
            from imp_kto_kred
       -- where BUCHUNGSTAG >= p_buchungstag; --to_date('30.11.2018','DD.MM.YYYY') ;



     ;
    commit;

    /*
              insert into KTO_Kreditkarte
            (   id,
                "Buchungstag",
                "Beleg",
                "Unternehmen",
                "Betrag",
                "Währung",
                "Betrag Ursprung",
                "Währung Ursprung",
                "Belastete Kreditkarte"
            )
            select 
             :id,
                :BUCHUNGSTAG,
                :BELEG,
                :UNTERNEHMEN,
                :BETRAG,
                "Währung",
                :BETRAG,
               "Währung",
                "Belastete Kreditkarte"
            from kto_kreditkarte

        where id =700;
        commit;

    */


   merge into KTO_Kreditkarte t1
    using (
    select distinct  kred1.id,
                BUCHUNGSTAG,
                BELEG,
                UNTERNEHMEN,
                BETRAG,
                WÄHRUNG,
                BETRAG_URSPRUNG,
                WÄHRUNG_URSPRUNG,
                BELASTETE_KREDITKARTE,
                KATEGORIE

            from imp_kto_kred kred
             join KTO_Kreditkarte kred1 on kred1."Buchungstag" = kred.buchungstag and kred1."Beleg" = kred.beleg and kred1."Unternehmen" = kred.unternehmen and kred1."Betrag Ursprung" = kred.Betrag_Ursprung
            ) t2 on (t1.id = t2.id)
    when matched then 
     update set t1."Betrag" = t2.BETRAG;
    commit;

    end p_create_new_kred;

    procedure p_add_arbeitstag as
     /*Arbeitstage zuordnen, wenn das bis dahin noch nicht passiert ist*/
    begin
   merge into KTO_KREDitkarte t1
        using (
                    select 
                        pk_arbeitstage, 
                        id                
                    from (select * from KTO_Kreditkarte where "Buchungstag" is not null and fk_buchungstag is null) bel,
                      t_arbeitstage arb
                    where  
                    to_date(substr(bel."Buchungstag",1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.id = t2.id)
            when matched then
            update set t1.fk_buchungstag= t2.pk_arbeitstage;
            commit;

      merge into KTO_KREDITKARTE t1
        using (
                    select 
                        pk_arbeitstage, 
                        id                
                    from (select * from KTO_KREDITKARTE where "Beleg" is not null and fk_beleg is null) bel,
                      t_arbeitstage arb
                    where  
                    to_date(substr(bel."Beleg",1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.id = t2.id)
            when matched then
            update set t1.fk_beleg= t2.pk_arbeitstage;
            commit;
    end  p_add_arbeitstag;

    procedure p_add_konto_relation(p_fk_main_key1 number, p_fk_main_key2 number, p_jahr number, p_monat number, p_tag number)  as

    begin

        insert into t_rel_kont_buch_kont_buch
            (fk_konto_buch1,
            fk_konto_buch2)
        select 
            p_fk_main_key1,
            nvl(fk_main_key, p_fk_main_key2) fk_main_key
        from KTO_Kreditkarte kred
         join t_arbeitstage arb on kred.fk_buchungstag = arb.pk_arbeitstage
         where arb.monat = p_monat and arb.jahr = p_jahr and tag = p_tag;
        commit;

    end p_add_konto_relation;

  procedure p_upd_fk_main_key as
  begin
    update KTO_KREDITKARTE set fk_main_key = KTO_KONTO_SEQ.nextval where fk_main_key is null;
    commit;
  end p_upd_fk_main_key;

  procedure p_add_konto_auszug(p_fk_konto_auszug number, p_saldo_vortrag number, p_old_saldo_vortrag number) as

  begin
  /*
   insert into t_rel_konto_auszug_gir
    (
     fk_konto_auszug,
     fk_girokonto
    )
    select
     p_fk_konto_auszug,
     fk_konto_buch2
    from t_rel_kont_buch_kont_buch
    where fk_konto_buch1 = p_saldo_vortrag
    and fk_konto_buch2 <> p_old_saldo_vortrag;
    commit;
    */
    null;

    update kto_girokonto set "FK_Kontotyp" = 1;
commit;

update kto_kreditkarte set "FK_Kontotyp" = 2;
commit;

  end p_add_konto_auszug;

END PKG_IMP_KRED;


/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_KRED_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_KRED_NEU" AS

  procedure p_create_new_kred(p_buchungstag date) AS
  BEGIN
  /*
         insert into KTO_Kreditkarte
            (
                "Buchungstag",
                "Beleg",
                "Unternehmen",
                "Betrag",
                "Währung",
                "Betrag Ursprung",
                "Währung Ursprung",
                "Belastete Kreditkarte",
                "Kategorie"
            )
            select 
                BUCHUNGSTAG,
                BELEG,
                UNTERNEHMEN,
                BETRAG,
                WÄHRUNG,
                BETRAG_URSPRUNG,
                WÄHRUNG_URSPRUNG,
                BELASTETE_KREDITKARTE,
                KATEGORIE
            from imp_kto_kred
       -- where BUCHUNGSTAG >= p_buchungstag; --to_date('30.11.2018','DD.MM.YYYY') 
       ;
       commit;

       */

          /*
              insert into KTO_Kreditkarte
            (   id,
                "Buchungstag",
                "Beleg",
                "Unternehmen",
                "Betrag",
                "Währung",
                "Betrag Ursprung",
                "Währung Ursprung",
                "Belastete Kreditkarte"
            )
            select 
             :id,
                :BUCHUNGSTAG,
                :BELEG,
                :UNTERNEHMEN,
                :BETRAG,
                "Währung",
                :BETRAG,
               "Währung",
                "Belastete Kreditkarte"
            from kto_kreditkarte

        where id =700;
        commit;

    */
       null;
  END p_create_new_kred;


  procedure p_add_betrag as
  begin
   null;
  /*
   merge into KTO_Kreditkarte t1
    using (
    select distinct  kred1.id,
                BUCHUNGSTAG,
                BELEG,
                UNTERNEHMEN,
                BETRAG,
                WÄHRUNG,
                BETRAG_URSPRUNG,
                WÄHRUNG_URSPRUNG,
                BELASTETE_KREDITKARTE,
                KATEGORIE

            from imp_kto_kred kred
             join KTO_Kreditkarte kred1 on kred1."Buchungstag" = kred.buchungstag and kred1."Beleg" = kred.beleg and kred1."Unternehmen" = kred.unternehmen and kred1."Betrag Ursprung" = kred.Betrag_Ursprung
            ) t2 on (t1.id = t2.id)
    when matched then 
     update set t1."Betrag" = t2.BETRAG;
    commit;
  */
  end p_add_betrag;
  procedure p_add_arbeitstag AS
  BEGIN
      merge into t_KTO_KREDitkarte t1
        using (
                    select 
                        pk_bas_kal_arbeitstage, 
                        id                
                    from (select * from t_KTO_Kreditkarte where "Buchungstag" is not null and fk_bas_kal_buchungstag is null) bel,
                      t_bas_kal_arbeitstage arb
                    where  
                    to_date(substr(bel."Buchungstag",1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.id = t2.id)
            when matched then
            update set t1.fk_bas_kal_buchungstag= t2.pk_bas_kal_arbeitstage;
            commit;

      merge into t_KTO_KREDITKARTE t1
        using (
                    select 
                        pk_bas_kal_arbeitstage, 
                        id                
                    from (select * from t_KTO_KREDITKARTE where "Beleg" is not null and fk_bel_beleg is null) bel,
                      t_bas_kal_arbeitstage arb
                    where  
                    to_date(substr(bel."Beleg",1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.id = t2.id)
            when matched then
            update set t1.fk_bel_beleg= t2.pk_bas_kal_arbeitstage;
            commit;
  END p_add_arbeitstag;

  procedure p_add_konto_relation(p_fk_main_key1 number, p_fk_main_key2 number, p_jahr number, p_monat number, p_tag number) AS
  BEGIN
       insert into t_rel_kto_kont_buch_kont_buch
            (fk_kto_konto_buch1,
            fk_kto_konto_buch2)
        select 
            p_fk_main_key1,
            nvl(fk_main_key, p_fk_main_key2) fk_main_key
        from t_KTO_Kreditkarte kred
         join t_bas_kal_arbeitstage arb on kred.fk_bas_kal_buchungstag = arb.pk_bas_kal_arbeitstage
         where arb.monat = p_monat and arb.jahr = p_jahr and tag = p_tag;
        commit;

  END p_add_konto_relation;

  procedure p_upd_fk_main_key AS
  BEGIN
    update t_KTO_KREDITKARTE set fk_main_key = t_KTO_BankKONTO_SEQ.nextval where fk_main_key is null;
    commit;
  END p_upd_fk_main_key;

    procedure p_add_konto_auszug(p_fk_konto_auszug number, p_saldo_vortrag number, p_old_saldo_vortrag number) as

  begin
  /*
   insert into t_rel_konto_auszug_gir
    (
     fk_konto_auszug,
     fk_girokonto
    )
    select
     p_fk_konto_auszug,
     fk_konto_buch2
    from t_rel_kont_buch_kont_buch
    where fk_konto_buch1 = p_saldo_vortrag
    and fk_konto_buch2 <> p_old_saldo_vortrag;
    commit;
    */
    null;

    update t_kto_girokonto set FK_std_kto_Kontotyp = 1;
commit;

update t_kto_kreditkarte set FK_std_kto_Kontotyp = 2;
commit;

  end p_add_konto_auszug;

  procedure p_set_wiederholung(p_number number) as
  begin


    update  t_kto_kreditkarte set wiederholung =  '"jährlich"' where fk_main_key =1257;
    commit;

    update t_kto_kreditkarte  set wiederholung =   '"monatlich"' where fk_main_key =			1315;
    commit; 

  end p_set_wiederholung;

END PKG_IMP_KRED_NEU;

/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_PAYPAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_PAYPAL" AS

    procedure p_add_arbeitstag as
     /*Arbeitstage zuordnen, wenn das bis dahin noch nicht passiert ist*/
    begin
       merge into KTO_Paypal t1
        using (
                    select 
                        pk_arbeitstage, 
                        id                ,
                        "Datum",
                        arb.datum
                    from (select * from KTO_Paypal ) bel,
                      t_arbeitstage arb
                    where  
                    to_date(substr(bel."Datum",1,10), 'DD/MM/YYYY')=   arb.datum 
                    --bel.fk_buchungstag is null
             ) t2 on (t1.id = t2.id)
            when matched then
            update set t1.fk_arbeitstag= t2.pk_arbeitstage;
            commit;
    end  p_add_arbeitstag;

    procedure p_upd_fk_main_key as
    begin

                update KTO_Paypal set fk_main_key = KTO_KONTO_SEQ.nextval where fk_main_key is null;
    commit;
    end p_upd_fk_main_key;


procedure p_set_wiederholung(p_number number) as
  begin



    update kto_paypal set wiederholung =   '"monatlich"' where fk_main_key =		p_number	;
    commit; 


  end p_set_wiederholung;

END PKG_IMP_PAYPAL;


/
--------------------------------------------------------
--  DDL for Package Body PKG_IMP_TEL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_IMP_TEL" AS
  procedure p_imp_tel_rech as
  
  begin
   insert into t_imp_tel_mobilcom_rech
        (
        ZAEHLER,
        RECHNUNGSNUMMER,
        RECHNUNGSDATUM,
        ABRECHNUNGSMONAT,
        KUNDENNUMMER,
        RUFNUMMER,
        SIMNUMMER,
        BENUTZER,
        KOSTENSTELLE,
        ZUSATZINFO,
        KATEGORIE,
        DATUMVON,
        DATUMBIS,
        MWSTSATZ,
        NETTO_BETRAG




        )
        select ZAEHLER,
        RECHNUNGSNUMMER,
        RECHNUNGSDATUM,
        ABRECHNUNGSMONAT,
        KUNDENNUMMER,
        RUFNUMMER,
        SIMNUMMER,
        BENUTZER,
        KOSTENSTELLE,
        ZUSATZINFO,
        KATEGORIE,
        DATUMVON,
        DATUMBIS,
        MWSTSATZ,
        BETRAG
        from t_imp_tel_mobilcom_rech_det
        where detail in (
        'Nettosumme')
        ;
    commit;


  end p_imp_tel_rech;

  procedure p_upd_tel_rech_brutto_betrag as

  begin

  for i in (select betrag, rechnungsnummer from t_imp_tel_mobilcom_rech_det
        where detail in (
        'Nettosumme')) loop

        update t_imp_tel_mobilcom_rech set brutto_betrag = i.betrag where rechnungsnummer = i.rechnungsnummer;
        commit;

  end  loop;


    update t_imp_tel_mobilcom_rech_det set kategorie_haupt = 'Gesamtsummen' where kategorie ='Gesamtsummen';
  commit;


  update t_imp_tel_mobilcom_rech_det set kategorie_haupt = 'Detail' where kategorie !='Gesamtsummen';
  commit;

  end p_upd_tel_rech_brutto_betrag;

END PKG_IMP_TEL;


/
--------------------------------------------------------
--  DDL for Package Body PKG_INP_BEL_ALL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_INP_BEL_ALL" AS


procedure p_add_rel_projekt_location as
begin


insert into t_rel_projekt_location (fk_location, fk_projekt, modified_at)
select inp1.fk_location, inp1.fk_projekt, sysdate

from inp_belege_all inp1
 left join t_rel_projekt_location relpr on inp1.fk_projekt = relpr.fk_projekt and inp1.fk_location = relpr.fk_location
where (relpr.fk_location is null and relpr.fk_projekt is null) and (inp1.fk_projekt is not null and inp1.fk_location is not null)
group by inp1.fk_location, inp1.fk_projekt;
commit;

end;

merge into inp_belege_all t1
  using (
        select pk_arbeitstage, 
        pk_inp_belege_all

        from (select * from inp_belege_all where bel_datum is not null and fk_arbeitstag is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.bel_datum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_inp_belege_all = t2.pk_inp_belege_all)
        when matched then
        update set t1.fk_ARBEITSTAG= t2.pk_arbeitstage;
        commit;
END PKG_INP_BEL_ALL;


/
--------------------------------------------------------
--  DDL for Package Body PKG_INP_BEL_ALL_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_INP_BEL_ALL_NEU" AS

procedure p_add_inp_beleg (p_page number, p_relation varchar2) as

begin


            insert into inp_belege_ALL (

            bel_datum,
            bezeichnung,
            brutto_betrag,
            fk_STATUS,
            --fk_Kategorie,
            --fk_verwendungszweck,
            fk_abl_ordner_page,
            fk_relation_src,
            comm_sonstiges,
            create_at,
            modify_at
            )
            select case when  instr(belegdat,'-')>0 then substr(belegdat, 9,2) || '.' || substr(belegdat, 6,2) || '.' || substr(belegdat, 1,4) else  BELEGDAT end bt,
            Buchungstext,
            abs(BetragEUR) Betrag,
            6 Status,
            --"FK_Kategorie" ,
            --"FK_Verwendungszweck",
            p_page ,  --2661
            relation,
            relation,
            sysdate,
            sysdate
            from t_lex_long
            where relation = p_relation ;
            commit;


end p_add_inp_beleg;


procedure p_add_rel_projekt_location as
begin


    insert into t_rel_projekt_location (fk_location, fk_projekt, modified_at)
    select inp1.fk_location, inp1.fk_projekt, sysdate

    from inp_belege_all inp1
     left join t_rel_projekt_location relpr on inp1.fk_projekt = relpr.fk_projekt and inp1.fk_location = relpr.fk_location
    where (relpr.fk_location is null and relpr.fk_projekt is null) and (inp1.fk_projekt is not null and inp1.fk_location is not null)
    group by inp1.fk_location, inp1.fk_projekt;
    commit;

end p_add_rel_projekt_location;

procedure p_add_arbeitstage as
begin

    merge into inp_belege_all t1
      using (
            select pk_arbeitstage, 
            pk_inp_belege_all

            from (select * from inp_belege_all where bel_datum is not null and fk_arbeitstag is null) bel,
              t_arbeitstage arb
            where  to_date(substr(bel.bel_datum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (t1.pk_inp_belege_all = t2.pk_inp_belege_all)
            when matched then
            update set t1.fk_ARBEITSTAG= t2.pk_arbeitstage;
            commit;


end p_add_arbeitstage;

procedure p_insert_inp_bel_from_lex (p_relation varchar2) as

begin

    --==== selected by relation
    insert into inp_belege_ALL (

    bel_datum,
    bezeichnung,
    brutto_betrag,
    fk_STATUS,
    --fk_Kategorie,
    --fk_verwendungszweck,
    fk_abl_ordner_page,
    comm_sonstiges,
    create_at,
    modify_at
    )
    select BELEGDAT bt,
    Buchungstext,
    abs(BetragEUR) Betrag,
    10 Status,
    --"FK_Kategorie" ,
    --"FK_Verwendungszweck",
    1,
    relation,
    sysdate,
    sysdate
    from t_lex_long
    where relation =  p_relation ;
    commit;

    --===selected by year and not existing and relation > xxxx (includes also lower values - like 42 if selected 252)
    insert into inp_belege_ALL (

    bel_datum,
    bezeichnung,
    brutto_betrag,
    fk_STATUS,
    --fk_Kategorie,
    --fk_verwendungszweck,
    fk_abl_ordner_page,
    comm_sonstiges,
    create_at,
    modify_at
    )
    select 
    to_date(substr(BELEGDAT,1,10),'YYYY-MM-DD') bt,
    Buchungstext,
    abs(BetragEUR) Betrag,
    10 Status,
    --"FK_Kategorie" ,
    --"FK_Verwendungszweck",
    1,
    relation,
    sysdate,
    sysdate


    from (select * from t_lex_long ll where jahr = 2020 ) ll
     left join t_rel_lex_kto_bel relbel on ll.relation = relbel.fk_relation
     where fk_relation is null and ll.relation > '2020/257/0';
    commit;

    --==== selected by year       
       insert into inp_belege_ALL (

        bel_datum,
        bezeichnung,
        brutto_betrag,
        fk_STATUS,
        --fk_Kategorie,
        --fk_verwendungszweck,
        fk_abl_ordner_page,
        comm_sonstiges,
        create_at,
        modify_at
        )
        select 
        to_date(substr(BELEGDAT,1,10),'YYYY-MM-DD HH24:MI:SS') bt,
        Buchungstext,
        abs(BetragEUR) Betrag,
        10 Status,
        --"FK_Kategorie" ,
        --"FK_Verwendungszweck",
        2901, --ordner page
        relation,
        sysdate,
        sysdate
        from t_lex_long
        where jahr = 2020 and periode >2
        and status is null;
        commit;

end p_insert_inp_bel_from_lex;


END PKG_INP_BEL_ALL_NEU;


/
--------------------------------------------------------
--  DDL for Package Body PKG_KASSE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_KASSE" AS


procedure p_add_arbeitstage as
begin
    merge into kas_kasse t1
      using (
            select pk_arbeitstage, 
           pk_kas_kasse

            from (select * from kas_kasse where datum is not null and fk_arbeitstag is null) bel,
              t_arbeitstage arb
            where  to_date(substr(bel.datum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (t1.pk_kas_kasse = t2.pk_kas_kasse)
            when matched then
            update set t1.fk_arbeitstag= t2.pk_arbeitstage;
            commit;

end p_add_arbeitstage;

procedure p_add_fk_main_key as
begin

   update Kas_Kasse set FK_MAIN_KEY = KTO_KONTO_SEQ.nextval where fk_main_key is null;
        commit;
end p_add_fk_main_key;

procedure p_set_steuer_monat as 
begin
  update kas_kasse set fk_steuer_Monat = 61 where jahr = 2020 and substr(datum, 4,2) = '03';
 commit;
end p_set_steuer_monat ;

procedure p_set_vorsteueranmldg as
begin

update kas_kasse set fk_steuer_voranmeldg = 67 where creation_date <= '07.02.2020' and  jahr = 2020 and substr(datum, 4,2) = '01';
update kas_kasse set fk_steuer_voranmeldg = 68 where creation_date > '07.02.2020' and  jahr = 2020 and substr(datum, 4,2) = '01';
update kas_kasse set fk_steuer_voranmeldg = 69 where  jahr = 2020 and substr(datum, 4,2) = '02';
commit;

end p_set_vorsteueranmldg ;

END PKG_KASSE;


/
--------------------------------------------------------
--  DDL for Package Body PKG_KONTO_AUSZUG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_KONTO_AUSZUG" AS

procedure p_set_datum_ok_from_v_Konten_zus  as
begin
          update t_konto_auszug set datum_ok = sysdate where pk_konto_auszug in (

          select fk_konto_auszug

          from (

           select 
                round(sum(gir."Betrag"),2) summe, max(endbetrag) - max(anfangsbetrag) diff_aus, case when (( max(endbetrag) - max(anfangsbetrag))-round(sum(gir."Betrag"),2) ) =0 then 1 else 0 end ok,
                (( max(endbetrag) - max(anfangsbetrag))-round(sum(gir."Betrag"),2) ) diff, fk_konto_auszug
             from t_rel_konto_auszug_gir kto_gir
              left join V_KONTEN_ZUS gir on kto_gir.fk_main_key = gir.FK_MAIN_KEY
              left join t_konto_auszug kto_aus on kto_aus.pk_konto_auszug = kto_gir.fk_konto_auszug
            group by   fk_konto_auszug
            )
        where ok = 1
        );
        commit;
end p_set_datum_ok_from_v_konten_zus;

procedure p_set_betrag_aktuelles_Jahr as 
begin

    merge into t_konto_auszug t1
    using (
    select round(sum("Betrag"),2) sb  , bucht_jahr, pk_konto_auszug,fk_jahr, case when fk_jahr = bucht_jahr -1 then 1 when fk_jahr = bucht_jahr then 2 when fk_jahr = bucht_jahr +1 then 3 else 0 end jr
    from (
    select *
    from t_konto_auszug kto
    --where datum_ok is not null
    ) ktoaus
    left join t_rel_konto_auszug_gir gir on gir.fk_konto_auszug = ktoaus.pk_konto_auszug
    left join v_konten_zus zus on zus.fk_main_key = gir.fk_main_key
    --where pk_konto_auszug = 381
    group by bucht_jahr, pk_konto_auszug, fk_jahr
    ) t2 on (t1.pk_konto_auszug = t2.pk_konto_auszug and t2.jr = 2 )
    when matched then
    update set t1.betrag_aktuelles_jahr = t2.sb;
    commit;
end p_set_betrag_aktuelles_jahr;

procedure p_set_betrag_vorjahr as
begin

    merge into t_konto_auszug t1
    using (
    select round(sum("Betrag"),2) sb  , bucht_jahr, pk_konto_auszug,fk_jahr, case when fk_jahr = bucht_jahr +1 then 1 when fk_jahr = bucht_jahr then 2 when fk_jahr = bucht_jahr -1 then 3 else 0 end jr
    from (
    select *
    from t_konto_auszug kto
    --where pk_konto_auszug = 381
    ) ktoaus
    left join t_rel_konto_auszug_gir gir on gir.fk_konto_auszug = ktoaus.pk_konto_auszug
    left join v_konten_zus zus on zus.fk_main_key = gir.fk_main_key
    group by bucht_jahr, pk_konto_auszug, fk_jahr
    ) t2 on (t1.pk_konto_auszug = t2.pk_konto_auszug and t2.jr = 1)
    when matched then
    update set t1.betrag_vorjahr = t2.sb;
    commit;
end p_set_betrag_vorjahr;

procedure p_set_betrag_vorjahr_aktuelles_jahr_0 as
begin
    update t_konto_auszug set betrag_vorjahr = 0, betrag_folgejahr = 0 where betrag_vorjahr is null and betrag_folgejahr is null;
    commit;
end;



END PKG_KONTO_AUSZUG;


/
--------------------------------------------------------
--  DDL for Package Body PKG_KONTROLLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_KONTROLLE" AS

 procedure p_add_kontrolle_konto as
    
     begin
      insert into t_kontrolle (jahr, konto)
    select 2017, sollkonto
    from t_lex
    group by sollkonto;
    commit;
end p_add_kontrolle_konto ;

END PKG_KONTROLLE;


/
--------------------------------------------------------
--  DDL for Package Body PKG_KTBL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_KTBL" AS

procedure p_upd_kontenblatt as 
begin
    merge into t_lex_kontenblatt t1
      using (
            select distinct pk_bas_kal_arbeitstage, 
            belegnummer,
            buchungsnummer, 
            bel.jahr

            from (select * from t_lex_kontenblatt where belegdatum is not null and fk_bas_kal_belegdatum is null) bel,
              t_bas_kal_arbeitstage arb
            where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
             ) t2 on (
             t1.belegnummer = t2.belegnummer and
             t1.buchungsnummer = t2.buchungsnummer and
             t1.jahr = t2.jahr



            )
            when matched then
            update set t1.fk_bas_kal_belegdatum= t2.pk_bas_kal_arbeitstage;
            commit;



    update  t_lex_kontenblatt set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
    commit;

    update t_lex_kontenblatt set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
    commit;


    update  t_lex_kontenblatt set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
    commit;

    update  t_lex_kontenblatt set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
    commit;




end p_upd_kontenblatt;


procedure p_delete_duplicates as
begin

    --===1



        --newest version
        delete from t_lex_kontenblatt where id in (select id_new
        --'old', a.id, a.id_new, kto_old.ok, kto_old.*
        --,kto_new.*
        from (
                    select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.fk_bas_kal_belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, kto_old.kst, kto_old.ktr , count(*) cnt
                    , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
                    from (select * from t_lex_kontenblatt )  kto_old
                     left join (select * from t_lex_kontenblatt ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
                   -- where kto_old.belegnummer = 1347
                    group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.fk_bas_kal_belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, kto_old.kst, kto_old.ktr

                    having count(*) >1
        ) a
        );
        commit;
 

     --===2 - old??
     delete from imp_kontenblatt_2018 where id in (
    (select id from (
    select   kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur, count(*) cnt, max(kto_kst_ktr.id) id_new, min(kto.id) id 
    from imp_kontenblatt_2018 kto
     left join (select * from imp_kontenblatt_2018 where kst is not null or ktr is not null) kto_kst_ktr on kto.id = kto_kst_ktr.id

    group by kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur
    having count(*) >1
    )
    where id_new is null
    --id_new <> id
    )
    );
    commit;

    ---====================================================================     
    --===3 -- old???
    delete from imp_kontenblatt_2018 where id in (
    (select id from (
    select   kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur, count(*) cnt, max(kto_kst_ktr.id) id_new, max(kto.id) id
    --min(kto.id) id 
    from imp_kontenblatt_2018 kto
     left join (select * from imp_kontenblatt_2018 where kst is not null or ktr is not null) kto_kst_ktr on kto.id = kto_kst_ktr.id

    group by kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur
    having count(*) >1
    )
    where id_new is null
    --id_new <> id
    )
    );
    commit;

    ---====================================================================
    --===4 - old

        delete from imp_kontenblatt_2018 where id in (


        select id_new
        --'old', a.id, a.id_new, kto_old.ok, kto_old.*
        --,kto_new.*
        from (
                    select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, count(*) cnt
                    , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
                    from (select * from imp_kontenblatt_2018 )  kto_old
                     left join (select * from imp_kontenblatt_2018 where (kst is  null and ktr is null) and ok is null ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
                   -- where kto_old.belegnummer = 1347
                    group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur

                    having count(*) >1
        ) a
        left join imp_kontenblatt_2018 kto_old on kto_old.id = a.id
        left join imp_kontenblatt_2018 kto_new on kto_new.id = a.id_new
        where 
        --id_new is null
        id_new <> a.id
        --and kto.ok is null
        /*
        union
        select 'new', a.id, a.id_new
        , kto_old.ok
        --, kto_old.*
        ,kto_new.*
        from (
                    select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, count(*) cnt
                    , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
                    from (select * from imp_kontenblatt_2018 )  kto_old
                     left join (select * from imp_kontenblatt_2018 where (kst is  null and ktr is null) and ok is null ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
                    where kto_old.belegnummer = 911
                    group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur

                    having count(*) >1
        ) a
        left join imp_kontenblatt_2018 kto_old on kto_old.id = a.id
        left join imp_kontenblatt_2018 kto_new on kto_new.id = a.id_new
        where 
        --id_new is null
        id_new <> a.id
        --and kto.ok is null
        order by 2
        */
        );
     commit;
end p_delete_duplicates;


procedure p_upd_kontenblatt_1 as
begin





    merge into  t_lex_kontenblatt t1
      using (
            select distinct pk_bas_kal_arbeitstage, 
            belegnummer,
            buchungsnummer, 
            bel.jahr

            from (select * from t_lex_kontenblatt  where belegdatum is not null and fk_bas_kal_belegdatum is null) bel,
              t_bas_kal_arbeitstage arb
            where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (
             t1.belegnummer = t2.belegnummer and
             t1.buchungsnummer = t2.buchungsnummer and
             t1.jahr = t2.jahr


            )
            when matched then
            update set t1.fk_bas_kal_belegdatum= t2.pk_bas_kal_arbeitstage;
            commit;


    update  t_lex_kontenblatt set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
    commit;

    update  t_lex_kontenblatt set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
    commit;


    update  t_lex_kontenblatt set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
    commit;

    update  t_lex_kontenblatt set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
    commit;




end p_upd_kontenblatt_1 ;

procedure p_set_buchungsstatus as 
begin

update t_lex_kontenblatt set buchungsstatus = 2  where buchungsnummer in (
                                                                                select buchungsnummer
                                                                                from t_lex_kontenblatt
                                                                                where buchungsstatus = 2 
                                                                                )
and buchungsstatus is null;
commit;


end p_set_buchungsstatus;

procedure p_upd_buch_status_ok as
begin

    update t_lex_kontenblatt set buchungsstatus = 2, ok =2, datum_ok= sysdate where jahr|| '/'|| buchungsnummer || '/0' in (select relation from t_lex_long where status is not null);
    commit;
end p_upd_buch_status_ok  ;

procedure p_add_kontenblatt_ohne_ssis (p_jahr number) as

begin

    execute immediate 'insert into t_lex_kontenblatt (
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    BELEGDATUM,
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    SOLLBETRAG_EUR,
    HABENBETRAG_EUR,
    USTKONTO,
    UST
    ,
    jahr,
    kst,
    ktr,
    load_date
    )

    select
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    BELEGDATUM,
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    to_number(replace(SOLLBETRAG_EUR,''.'','''')),
    to_number(replace(HABENBETRAG_EUR,''.'','''')),
    USTKONTO,
    UST,
    ' || p_jahr || ',
    kst,
    ktr,
    sysdate
    from imp_kontenblatt_' || p_jahr || '_2';
    commit;





end p_add_kontenblatt_ohne_ssis ;




procedure p_add_kontenblatt_mit_ssis (p_jahr number) as

begin

    execute immediate 'insert into t_lex_kontenblatt (
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    BELEGDATUM,
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    SOLLBETRAG_EUR,
    HABENBETRAG_EUR,
    USTKONTO,
    UST
    ,
    jahr,
    kst,
    ktr
    )

    select
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    to_date(belegdatum,''YYYY-MM-DD HH24:MI:SS''),
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    to_number(replace(SOLLBETRAG_EUR,''.'','''')),
    to_number(replace(HABENBETRAG_EUR,''.'','''')),
    USTKONTO,
    UST,
    ' || p_jahr || ',
    kst,
    ktr
    from imp_kontenblatt_' || p_jahr || '_2';
    commit;



end p_add_kontenblatt_mit_ssis;









procedure p_add_date as
begin

/*
         merge into imp_kontenblatt_2018 t1
          using (
                    select distinct pk_arbeitstage, 
                    belegnummer,
                    buchungsnummer, 
                    bel.jahr

                    from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
                      t_arbeitstage arb
                    where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YYYY')= arb.datum 
                     ) t2 on (
                     t1.belegnummer = t2.belegnummer and
                     t1.buchungsnummer = t2.buchungsnummer and
                     t1.jahr = t2.jahr


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;


*/

--=== 1 - basic
    merge into  t_lex_kontenblatt t1
      using (
            select distinct pk_bas_kal_arbeitstage, 
            belegnummer,
            buchungsnummer, 
            bel.jahr

            from (select * from t_lex_kontenblatt  where belegdatum is not null and fk_bas_kal_belegdatum is null) bel,
              t_bas_kal_arbeitstage arb
            where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (
             t1.belegnummer = t2.belegnummer and
             t1.buchungsnummer = t2.buchungsnummer and
             t1.jahr = t2.jahr


            )
            when matched then
            update set t1.fk_bas_kal_belegdatum= t2.pk_bas_kal_arbeitstage;
            commit;
merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr,
        id

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
        --and kontonummer = '02102'
        --and fk_relation = '2018/120/0'
         ) t2 on (t1.id = t2.id
         /*
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr
         */


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;

    --=== 2 - difference in years
    /*
    merge into imp_kontenblatt_2018 t1
      using (
      select dat.*
      from (
            select distinct pk_arbeitstage, 
            belegnummer,
            buchungsnummer, 
            bel.jahr,
            bel.fk_belegdatum,
            bel.id

            from (select * from imp_kontenblatt_2018 where kontonummer = 1700) bel,
              t_arbeitstage arb
            where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 

           ) dat
             left join t_arbeitstage arb on dat.fk_belegdatum = arb.pk_arbeitstage
            where dat.jahr <> arb.jahr 


             ) t2 on (
             t1.id  = t2.id



            )
            when matched then
            update set t1.fk_belegdatum= t2.pk_arbeitstage;
            commit;
  */


end p_add_date;



procedure P_add_sequence (p_new_id number) as

  v_new_id number;
begin

   select max(id)
   into v_new_id
   from imp_kontenblatt_2018; 

 execute immediate 'drop sequence imp_kontenblatt_2018_seq';
 execute immediate 'CREATE SEQUENCE  imp_kontenblatt_2018_seq  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH ' || nvl(v_new_id,p_new_id) || ' CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL' ;



end;

procedure p_add_sachkonto_2018 as

 begin

    insert into t_lex_kontenblatt (
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    BELEGDATUM,
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    SOLLBETRAG_EUR,
    HABENBETRAG_EUR,
    USTKONTO,
    UST
    ,
    jahr,
    kst,
    ktr
    )

    select
    to_number(BUCHUNGSNUMMER),
    KONTONUMMER,
    KONTOBEZEICHNUNG,
   -- belegdatum,

    substr(to_date(belegdatum,'DD.MM:YYYY HH24:MI:SS'),1,6) || '2020',
    to_number(BELEGNUMMER),
    BUCHUNGSTEXT,
    GEGENKONTO,
    to_number(replace(SOLLBETRAG_EUR,'.','')),
    to_number(replace(HABENBETRAG_EUR,'.','')),
    USTKONTO,
    UST
    ,
    2020,
    kst,
    ktr
    from t_imp_lex_kontenblatt_2020;
    commit;
    p_upd_kontenblatt ;
end p_add_sachkonto_2018;

procedure p_add_sachkonto_2020 as
begin

 insert into t_lex_kontenblatt (
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    BELEGDATUM,
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    SOLLBETRAG_EUR,
    HABENBETRAG_EUR,
    USTKONTO,
    UST
    ,
    jahr,
    kst,
    ktr
    )

    select
    BUCHUNGSNUMMER,
    KONTONUMMER,
    KONTOBEZEICHNUNG,
    to_date(belegdatum,'DD.MM.YY HH24:MI:SS'),
    BELEGNUMMER,
    BUCHUNGSTEXT,
    GEGENKONTO,
    to_number(replace(SOLLBETRAG_EUR,'.','')),
    replace(HABENBETRAG_EUR,'.',''),
    USTKONTO,
    UST
    ,
    2020,
    kst,
    ktr
    from t_imp_lex_kontenblatt_2020
    where substr(belegdatum, 4,2) = '03';

    commit;

    p_upd_kontenblatt ;
end p_add_sachkonto_2020;

procedure p_del_duplicates as
begin


    delete from imp_kontenblatt_2018 where id in (select id
    --'old', a.id, a.id_new, kto_old.ok, kto_old.*
    --,kto_new.*
    from (
                select   kto_old.kontonummer, nvl(kto_old.gegenkonto,0), kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, nvl(kto_old.sollbetrag_eur,0),nvl(kto_old.habenbetrag_eur,0), kto_old.kst, kto_old.ktr , count(*) cnt, max(id) id
               -- , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
                from (select * from imp_kontenblatt_2018 )  kto_old
            --     left join (select * from imp_kontenblatt_2018 ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
               -- where kto_old.belegnummer = 1347
                group by kto_old.kontonummer, nvl(kto_old.gegenkonto,0), kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, nvl(kto_old.sollbetrag_eur,0), nvl(kto_old.habenbetrag_eur,0), kto_old.kst, kto_old.ktr

                having count(*) >1
    ) a
    );
    commit;
end p_del_duplicates;

procedure p_susa_upd_susa as
begin

    update  imp_lex_susa set konto = '0' || konto where length(konto) = 4;
    commit;

    update  imp_lex_susa set konto = '00' || konto where length(konto) = 3;
    commit;

end p_susa_upd_susa; 

procedure p_set_relation_initial as

begin
 update t_lex_kontenblatt set fk_lex_relation = jahr || '/' || buchungsnummer ||'/0' where fk_lex_relation is null;
 commit;
  update t_lex_kontenblatt set fk_lex_relation_sub = jahr || '/' || buchungsnummer ||'/0' where fk_lex_relation_sub is null;
 commit;
end p_set_relation_initial ;

procedure p_set_storno_from_lex as 
begin

    update t_lex_kontenblatt set buchungsstatus = 2  where fk_relation in (select relation from t_lex_long where status is not null) and (buchungsstatus <>2 or buchungsstatus is null);
    commit;


end p_set_storno_from_lex;


procedure p_bereinige_gegenkonto as
begin

    update t_lex_kontenblatt set gegenkonto = null where regexp_instr(gegenkonto,'[a-zA-Z]')>0 ;
    commit;
end p_bereinige_gegenkonto;

procedure p_set_splitnr_from_lex_long as
begin




--==0

merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
 --  , kto.kontonummer, kto.gegenkonto, kto.ustkonto,ll.habenkto, ll.sollkto, ll.ust_kto_h, ll.ust_kto_s,ll_main.habenkto, ll_main.sollkto
   from imp_kontenblatt_2018 kto 
     join  (select * from t_lex_long where split_nr <> 0) ll   on    ll.fk_relation_main = kto.fk_relation
     join (select relation, fk_relation_main, habenkto, sollkto from t_lex_long where relation = fk_relation_main and flg_split_buch =1) ll_main on ll_main.fk_relation_main = ll.fk_relation_main
    --where kto.kontonummer = ll.sollkto and gegenkonto = ll_main.habenkto and kto.ustkonto = ll.ust_kto_s
    where kto.kontonummer = ll.ust_kto_s and kto.gegenkonto = ll_main.habenkto and nvl(kto.sollbetrag_eur, kto.habenbetrag_eur) = ll.ust_eur

   /*
     -- and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) )
      --    and    ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))

             and ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
              and ll.split_nr is not null
              */
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
and kto.split_nr is null
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr,
   t1.flg_split_buch = 1;
   commit;


  --==1 

 merge into imp_kontenblatt_2018 t1
 using (
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
group by kto.id
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

 --==2
 merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
   from imp_kontenblatt_2018 kto 
 left join t_lex_long ll on
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

   --==3


   merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
   --, kto.kontonummer, kto.gegenkonto, kto.ustkonto,ll.habenkto, ll.sollkto, ll.ust_kto_h, ll.ust_kto_s,ll_main.habenkto, ll_main.sollkto
   from imp_kontenblatt_2018 kto 
     join  (select * from t_lex_long where split_nr <> 0) ll   on    ll.fk_relation_main = kto.fk_relation
     join (select relation, fk_relation_main, habenkto, sollkto from t_lex_long where relation = fk_relation_main and flg_split_buch =1) ll_main on ll_main.fk_relation_main = ll.fk_relation_main
    where kto.kontonummer = ll.sollkto and gegenkonto = ll_main.habenkto and kto.ustkonto = ll.ust_kto_s


   /*
     -- and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) )
      --    and    ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))

             and ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
              and ll.split_nr is not null
              */
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id


*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

--==4

   merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
 --  , kto.kontonummer, kto.gegenkonto, kto.ustkonto,ll.habenkto, ll.sollkto, ll.ust_kto_h, ll.ust_kto_s,ll_main.habenkto, ll_main.sollkto, nvl(kto.sollbetrag_eur, kto.habenbetrag_eur) ,ll.ust_eur, ll.relation, ll.fK_relation_main
   from imp_kontenblatt_2018 kto 
     join  (select * from t_lex_long where split_nr <> 0) ll   on    ll.fk_relation_main = kto.fk_relation
     join (select relation, fk_relation_main, habenkto, sollkto from t_lex_long where relation = fk_relation_main and flg_split_buch =1) ll_main on ll_main.fk_relation_main = ll.fk_relation_main
    --where kto.kontonummer = ll.sollkto and gegenkonto = ll_main.habenkto and kto.ustkonto = ll.ust_kto_s
   -- where buchungsnummer = 2171

    where kto.kontonummer = ll.ust_kto_s and kto.gegenkonto = ll_main.habenkto and nvl(kto.sollbetrag_eur, kto.habenbetrag_eur) = ll.ust_eur

   /*
     -- and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) )
      --    and    ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))

             and ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
              and ll.split_nr is not null
              */
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

--==5 



   merge into imp_kontenblatt_2018 t1
 using (
   select distinct kto.id
   --, ll.split_nr, ll.jahr
   from imp_kontenblatt_2018 kto 
  join t_lex_long ll on
   ll.fk_relation_main = kto.fk_relation
    and ll.flg_split_buch = 1
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.flg_split_buch =1;
   commit;


end p_set_splitnr_from_lex_long;

procedure p_set_steuer_monat as 
begin
 merge into imp_kontenblatt_2018 t1
 using (
        select ktbl.id, max(ll.fk_steuer_monat) fk_steuer_monat
        from imp_kontenblatt_2018 ktbl
          left join t_lex_long ll on ktbl.fk_relation = ll.fk_relation_main
        where ktbl.jahr = 2020
        group by ktbl.id
        ) t2 on (t1.id = t2.id)
when matched then 
update set t1.fk_steuer_monat = t2.fk_steuer_monat;
commit;
end p_set_steuer_monat;

procedure p_set_vorsteueranmeldg as
begin

merge into imp_kontenblatt_2018 t1
 using (
         select ktbl.id, max(ll.fk_steuer_voranmeldg) fk_steuer_voranmeldg
        from imp_kontenblatt_2018 ktbl
          left join t_lex_long ll on ktbl.jahr  = ll.jahr and ktbl.buchungsnummer = ll.nr and ktbl.belegnummer = ll.belegnr
        where ktbl.jahr = 2020
        group by ktbl.id
        ) t2 on (t1.id = t2.id)
  when matched then 
update set t1.fk_steuer_voranmeldg = t2.fk_steuer_voranmeldg;
commit;


end p_set_vorsteueranmeldg; 

END PKG_KTBL;

/
--------------------------------------------------------
--  DDL for Package Body PKG_LEX
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_LEX" AS

 procedure p_upd_storno as
 
 begin
     update t_lex set storno = 1 where pk_lex in (
    select lex.pk_lex
    from (select * from  t_lex where storno is null) lex
     join ( select *
             from t_lex
             where instr(buchungstext, '<Storno>')>0
             ) lex2 on 
              lex2.BELEGDATUM = lex.BELEGDATUM and

    nvl( lex2.BUCHUNGSPERIODE,0)= nvl( lex.BUCHUNGSPERIODe,0)  and
    nvl(  lex2.BELEGNUMMERNKREIs,0)= nvl( lex.BELEGNUMMERNKREis,0)   and
     lex2.BELEGNUMMEr =  lex.BELEGNUMMEr and
    -- lex_imp.BUCHUNGSTEXt=  lex.BUCHUNGSTEXT and
      lex2.BUCHUNGSBETRAG=  - lex.BUCHUNGSBETRag and
     lex2.SOLLKONTO=  lex.sollkonto and
     lex2.HABENKONTO=  lex.habenkonto and
     lex2.STEUERSCHLÜSSEL =  lex.STEUERSCHLÜSSel  and
     nvl(lex2.KOSTENSTELLE,0)=  nvl(lex.KOSTENSTELLE,0)  AND
    nvl( lex2.KOSTENTRÄGer,0) = nvl( lex.KOSTENTRÄGER ,0) and
     lex2.BUCHUNGSBETRAG_EURO = - lex.BUCHUNGSBETRAG_EUro and
     lex2.WÄHRUNG =  lex.WÄHRUNG
     )

    ;
    commit;

    merge into t_lex t1
 using (
with lex as (

select *
from t_lex 
where ok = 0 and storno =0
and ( habenkonto in (1700,1710) or sollkonto  in (1700,1710) )
),
kto as (
select *
from v_konten_zus

)
select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_main_key) fk_main_key, "Buchungstag", ok
from lex
 join kto on lex.buchungsbetrag = abs(kto."Betrag") 
and lex.belegdatum = kto."Buchungstag"
and instr(kto.Buchungstext, lex.Buchungstext)>0
group by belegdatum, belegnummer, buchungsbetrag,"Buchungstag", ok
) t2 on (t1.belegnummer = t2.belegnummer)
when matched then 
update set t1.fk_main_key = t2.fk_main_key;
commit;

    merge into t_lex t1
 using (
with lex as (

select *
from t_lex 
where ok = 0 and storno =0
and instr(buchungstext , '1.50% AUSLANDSEINSATZENTGELT') >0
),
kto as (
select *
from v_konten_zus
where instr(Buchungstext , '1.50% AUSLANDSEINSATZENTGELT')> 0
)
select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_main_key) fk_main_key, "Buchungstag", ok
from lex
 join kto on lex.buchungsbetrag = abs(kto."Betrag") 
and lex.belegdatum = kto."Buchungstag"
group by belegdatum, belegnummer, buchungsbetrag,"Buchungstag", ok
) t2 on (t1.belegnummer = t2.belegnummer)
when matched then 
update set t1.fk_main_key = t2.fk_main_key;
commit;

 end p_upd_storno;

 procedure p_add_kontrolle_konto as

 begin
  insert into t_kontrolle (jahr, konto)
select 2017, sollkonto
from t_lex
group by sollkonto;
commit;
end p_add_kontrolle_konto ;


 procedure p_add_sachkonto_2018 as

 begin


insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
to_date(belegdatum,'YYYY-MM-DD HH24:MI:SS'),
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
HABENBETRAG_EUR,
USTKONTO,
UST
,
2018,
kst,
ktr
from imp_kontenblatt_2018_2;
commit;

insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
to_date(belegdatum,'DD.MM.YY HH24:MI:SS'),
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
replace(HABENBETRAG_EUR,'.',''),
USTKONTO,
UST
,
2020,
kst,
ktr
from imp_kontenblatt_2020_2;


merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
         ) t2 on (
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;



update  imp_kontenblatt_2018 set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
commit;

update  imp_kontenblatt_2018 set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
commit;


update  imp_kontenblatt_2018 set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
commit;

update  imp_kontenblatt_2018 set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
commit;

delete from imp_kontenblatt_2018 where id in (select id
--'old', a.id, a.id_new, kto_old.ok, kto_old.*
--,kto_new.*
from (
            select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, kto_old.kst, kto_old.ktr , count(*) cnt, max(id) id
           -- , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
            from (select * from imp_kontenblatt_2018 )  kto_old
        --     left join (select * from imp_kontenblatt_2018 ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
           -- where kto_old.belegnummer = 1347
            group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, kto_old.kst, kto_old.ktr

            having count(*) >1
) a
);
commit;



 end p_add_sachkonto_2018;

merge into t_lex t1 
using (
select fk_buchung_steuer, fk_main_key
from "KTO_Kreditkarte"
where fk_buchung_steuer is not null
) t2 on (t1.belegnummer = t2.fk_buchung_steuer)
when matched then
update set t1.fk_main_key = t2.fk_main_key;
commit;
with lex as (

select *
from t_lex 
where ok = 1 and storno =0
and instr(buchungstext , '1.50% AUSLANDSEINSATZENTGELT') >0
),
kto as (
select *
from v_konten_zus
where instr(Buchungstext , '1.50% AUSLANDSEINSATZENTGELT')> 0
)
select belegdatum, belegnummer, buchungsbetrag, kto.fk_main_key  fk_main_key, "Buchungstag", ok
from lex
 join kto on lex.buchungsbetrag = abs(kto."Betrag") 
and lex.belegdatum = kto."Buchungstag";

merge into t_lex t1
 using (
with lex as (

select *
from t_lex 
where ok = 0 and storno =0
and ( habenkonto in (1700,1710) or sollkonto  in (1700,1710) )
),
kto as (
select *
from v_konten_zus

)
select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_main_key) fk_main_key, "Buchungstag", ok
from (select * from lex where fk_main_key is null) lex
 join kto on lex.buchungsbetrag = abs(kto."Betrag") 
and lex.belegdatum = kto."Buchungstag"
and instr(kto.Buchungstext, lex.Buchungstext)>0
group by belegdatum, belegnummer, buchungsbetrag,"Buchungstag", ok
) t2 on (t1.belegnummer = t2.belegnummer )
when matched then 
update set t1.fk_main_key = t2.fk_main_key;
commit;

merge into t_lex t1
 using (
with lex as (

select *
from t_lex 
where ok = 0 and storno =0
and ( habenkonto in (1600) or sollkonto  in (1600))
),
kto as (
select *
from v_imp_bel_zus

)
select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_imp_ba_bel) fk_imp_ba_bel, datum, ok
--, sollkonto, habenkonto
from (
            select * 
            from lex 
            where fk_imp_ba_bel 
            is null
            ) lex
 join kto on lex.buchungsbetrag = abs(kto.Betrag) 
and lex.belegdatum = kto.datum
and instr(kto.bezeichnung, lex.Buchungstext)>0
group by belegdatum, belegnummer, buchungsbetrag,datum, ok
--,habenkonto, sollkonto
) t2 on (t1.belegnummer = t2.belegnummer )
when matched then 
update set t1.fk_imp_ba_bel = t2.fk_imp_ba_bel;
commit;

insert into t_lex_long (

BELEGDAT,
PERIODE,
BELEGNR,
BUCHUNGSTEXT,
BETRAG,
WHRG,
SOLLKTO,
HABENKTO,
ABSCHLUSS,
BELEG,
BENUTZER,
BETRAGDM,
BETRAGEUR,
BUCHDAT,
NR,
HABENDM,
HABENEUR,
HABEN,
JOUR_DAT,
KST,
KTR,
NOTIZ,
RELATION,
SOLLDM,
SOLLEUR,
SOLL,
SPERRE,
STAPEL,
STATUS,
STATUS_DAT,
UST_H_DM,
UST_H_EUR,
UST_HABEN,
UST_S_DM,
UST_S_EUR,
UST_SOLL,
UST_DM,
UST_EUR,
UST,
UST_KTO,
UST_KTO_H,
UST_KTO_S,
UST_TEXT,
ZUSATZANG


) 
select 

l3.BELEGDAT,
to_number(l3.PERIODE) PERIODE,
to_number(l3.BELEGNR) BELEGNR,
l3.BUCHUNGSTEXT,
to_number(replace(l3.BETRAG,'.','')) BETRAG,
l3.WHRG,
to_number(l3.SOLLKTO) SOLLKTO,
to_number(l3.HABENKTO) HABENKTO,
l3.ABSCHLUSS,
l3.BELEG,
l3.BENUTZER,
to_number(replace(l3.BETRAGDM,'.','')) BETRAGDM,
to_number(replace(l3.BETRAGEUR,'.','')) BETRAGEUR,
l3.BUCHDAT,
to_number(l3.NR) NR,
to_number(replace(l3.HABENDM,'.','')) HABENDM,
to_number(replace(l3.HABENEUR,'.','')) HABENEUR,
to_number(replace(l3.HABEN,'.','')) HABEN,
l3.JOUR_DAT,
l3.KST,
l3.KTR,
l3.NOTIZ,
l3.RELATION,
to_number(replace(l3.SOLLDM,'.','')) SOLLDM,
to_number(replace(l3.SOLLEUR,'.','')) SOLLEUR,
to_number(replace(l3.SOLL,'.','')) SOLL,
l3.SPERRE,
l3.STAPEL,
l3.STATUS,
l3.STATUS_DAT,
l3.UST_HDM,
l3.UST_HEUR,
l3.UST_HABEN,
to_number(replace(l3.USTSDM,'.','')) USTSDM,
to_number(replace(l3.USTSEUR,'.','')) USTSEUR,
to_number(replace(l3.UST_SOLL,'.','')) UST_SOLL,
to_number(replace(l3.USTDM,'.','')) USTDM,
to_number(replace(l3.USTEUR,'.','')) USTEUR,
to_number(replace(l3.UST,'.','')) UST,
to_number(l3.UST_KTO) UST_KTO,
l3.UST_KTOH,
to_number(l3.UST_KTOS) UST_KTOS,
l3.UST_TEXT,
l3.ZUSATZANG

/*
l3.BELEGDAT,
to_number(l3.PERIODE),
to_number(l3.BELEGNR),
l3.BUCHUNGSTEXT,
to_number(l3.BETRAG),
l3.WHRG,
to_number(l3.SOLLKTO),
to_number(l3.HABENKTO),
l3.ABSCHLUSS,
l3.BELEG,
l3.BENUTZER,
to_number(replace(l3.BETRAGDM,'.','')),
to_number(replace(l3.BETRAGEUR,'.','')),
l3.BUCHDAT,
to_number(l3.NR),
to_number(replace(l3.HABENDM,'.','')),
to_number(replace(l3.HABENEUR,'.','')),
to_number(replace(l3.HABEN,'.','')),
l3.JOUR_DAT,
l3.KST,
l3.KTR,
l3.NOTIZ,
l3.RELATION,
to_number(replace(l3.SOLLDM,'.','')),
to_number(replace(l3.SOLLEUR,'.','')),
to_number(replace(l3.SOLL,'.','')),
l3.SPERRE,
l3.STAPEL,
l3.STATUS,
l3.STATUS_DAT,
l3.UST_HDM,
l3.UST_HEUR,
l3.UST_HABEN,
to_number(replace(l3.USTSDM,'.','')),
to_number(replace(l3.USTSEUR,'.','')),
to_number(replace(l3.UST_SOLL,'.','')),
to_number(replace(l3.USTDM,'.','')),
to_number(replace(l3.USTEUR,'.','')),
to_number(replace(l3.UST,'.','')),
to_number(l3.UST_KTO),
l3.UST_KTOH,
to_number(l3.UST_KTOS),
l3.UST_TEXT,
l3.ZUSATZANG*/
from t_lex_long3 l3
 left join t_lex_long l1 on to_char(l3.relation) = to_char(l1.relation)
 where l1.relation is null
--and rownum = 1
 order by relation desc;
 commit;



select 
l3.BELEGDAT,
l3.PERIODE,
l3.BELEGNR,
l3.BUCHUNGSTEXT,
l3.BETRAG,
l3.WHRG,
l3.SOLLKTO,
l3.HABENKTO,
l3.ABSCHLUSS,
l3.BELEG,
l3.BENUTZER,
l3.BETRAGDM,
l3.BETRAGEUR,
l3.BUCHDAT,
l3.NR,
l3.HABENDM,
l3.HABENEUR,
l3.HABEN,
l3.JOUR_DAT,
l3.KST,
l3.KTR,
l3.NOTIZ,
l3.RELATION,
l3.SOLLDM,
l3.SOLLEUR,
l3.SOLL,
l3.SPERRE,
l3.STAPEL,
l3.STATUS,
l3.STATUS_DAT,
l3.UST_HDM,
l3.UST_HEUR,
l3.UST_HABEN,
l3.USTSDM,
l3.USTSEUR,
l3.UST_SOLL,
l3.USTDM,
l3.USTEUR,
l3.UST1,
l3.UST_KTO,
l3.UST_KTOH,
l3.UST_KTOS,
l3.UST,
l3.UST_TEXT,
l3.ZUSATZANG

from t_lex_long3 l3
 left join t_lex_long l1 on to_char(l3.relation) = to_char(l1.relation)
 where l1.relation is null
--and rownum = 1
 order by relation desc;

 merge into t_lex_long l1
 using (
 select 
l3.BELEGDAT,
to_number(l3.PERIODE) PERIODE,
to_number(l3.BELEGNR) BELEGNR,
l3.BUCHUNGSTEXT,
to_number(replace(l3.BETRAG,'.','')) BETRAG,
l3.WHRG,
to_number(l3.SOLLKTO) SOLLKTO,
to_number(l3.HABENKTO) HABENKTO,
l3.ABSCHLUSS,
l3.BELEG,
l3.BENUTZER,
to_number(replace(l3.BETRAGDM,'.','')) BETRAGDM,
to_number(replace(l3.BETRAGEUR,'.','')) BETRAGEUR,
l3.BUCHDAT,
to_number(l3.NR) NR,
to_number(replace(l3.HABENDM,'.','')) HABENDM,
to_number(replace(l3.HABENEUR,'.','')) HABENEUR,
to_number(replace(l3.HABEN,'.','')) HABEN,
l3.JOUR_DAT,
l3.KST,
l3.KTR,
l3.NOTIZ,
l3.RELATION,
to_number(replace(l3.SOLLDM,'.','')) SOLLDM,
to_number(replace(l3.SOLLEUR,'.','')) SOLLEUR,
to_number(replace(l3.SOLL,'.','')) SOLL,
l3.SPERRE,
l3.STAPEL,
l3.STATUS,
l3.STATUS_DAT,
l3.UST_HDM,
l3.UST_HEUR,
l3.UST_HABEN,
to_number(replace(l3.USTSDM,'.','')) USTSDM,
to_number(replace(l3.USTSEUR,'.','')) USTSEUR,
to_number(replace(l3.UST_SOLL,'.','')) UST_SOLL,
to_number(replace(l3.USTDM,'.','')) USTDM,
to_number(replace(l3.USTEUR,'.','')) USTEUR,
to_number(replace(l3.UST,'.','')) UST,
to_number(l3.UST_KTO) UST_KTO,
l3.UST_KTOH,
to_number(l3.UST_KTOS) UST_KTOS,
l3.UST_TEXT,
l3.ZUSATZANG

from t_lex_long3 l3
 left join t_lex_long l1 on to_char(l3.relation) = to_char(l1.relation)
 where l1.relation is not null
--and rownum = 1
 order by relation desc



 ) l3 on (l1.relation = l3.relation)
 when matched then 

update set
l1.BELEGDAT=l3.BELEGDAT,
l1.PERIODE=l3.PERIODE,
l1.BELEGNR=l3.BELEGNR,
l1.BUCHUNGSTEXT=l3.BUCHUNGSTEXT,
l1.BETRAG=l3.BETRAG,
l1.WHRG=l3.WHRG,
l1.SOLLKTO=l3.SOLLKTO,
l1.HABENKTO=l3.HABENKTO,
l1.ABSCHLUSS=l3.ABSCHLUSS,
l1.BELEG=l3.BELEG,
l1.BENUTZER=l3.BENUTZER,
l1.BETRAGDM=l3.BETRAGDM,
l1.BETRAGEUR=l3.BETRAGEUR,
l1.BUCHDAT=l3.BUCHDAT,
l1.NR=l3.NR,
l1.HABENDM=l3.HABENDM,
l1.HABENEUR=l3.HABENEUR,
l1.HABEN=l3.HABEN,
l1.JOUR_DAT=l3.JOUR_DAT,
l1.KST=l3.KST,
l1.KTR=l3.KTR,
l1.NOTIZ=l3.NOTIZ,

l1.SOLLDM=l3.SOLLDM,
l1.SOLLEUR=l3.SOLLEUR,
l1.SOLL=l3.SOLL,
l1.SPERRE=l3.SPERRE,
l1.STAPEL=l3.STAPEL,
l1.STATUS=l3.STATUS,
l1.STATUS_DAT=l3.STATUS_DAT,
l1.UST_H_DM=l3.UST_HDM,
l1.UST_H_EUR=l3.UST_HEUR,
l1.UST_HABEN=l3.UST_HABEN,
l1.UST_S_DM=l3.USTSDM,
l1.UST_S_EUR=l3.USTSEUR,
l1.UST_SOLL=l3.UST_SOLL,
l1.UST_DM=l3.USTDM,
l1.UST_EUR=l3.USTEUR,
l1.UST=l3.UST,
l1.UST_KTO=l3.UST_KTO,
l1.UST_KTO_H=l3.UST_KTOH,
l1.UST_KTO_S=l3.UST_KTOS,

l1.UST_TEXT=l3.UST_TEXT,
l1.ZUSATZANG=l3.ZUSATZANG


;
commit;

--zuordnung lex_buchungen zum Beleg
merge into  t_rel_lex_kto_bel t1
using (
select ll_rel.relation, kto.fk_main_key, ll_rel.jahr, kto.bucht_jahr, ll_rel.betrageur, kto."Betrag",
--substr(ll_rel.belegdat,1,10), substr(kto."Buchungstag",1,10), 
kto.buchungstext, ll_rel.buchungstext bt1,
--length( kto.buchungstext), length(ll_rel.buchungstext),
row_number() over (partition by kto.fk_main_key order by relation desc) rnr
from (
select ll.*
from (select * from  t_lex_long where status is null) ll 
 left join t_rel_lex_kto_bel rel on rel.fk_relation = ll.relation
where rel.fk_relation is null
) ll_rel
left join v_konten_zus kto on ll_rel.jahr = kto.bucht_jahr
                             and case when instr(substr(ll_rel.belegdat,1,10),'-')> 0 
  then substr(substr(ll_rel.belegdat,1,10),9,2) || '.' || substr(substr(ll_rel.belegdat,1,10),6,2)  || '.' || substr(substr(ll_rel.belegdat,1,10),1,4) 
  else substr(ll_rel.belegdat,1,10)
  end  = kto."Buchungstag"
                             and instr( kto.buchungstext, ll_rel.buchungstext)>0
                            and ll_rel.betrageur = round(abs(kto."Betrag"),2)
left join t_rel_lex_kto_bel rel_bel on rel_bel.fk_main_key = kto.fk_main_key
where kto.fk_main_key is not null
--order by betrageur
) t2 on (t1.fk_main_key = t2.fk_main_key and t2.rnr = 1)
when matched then
update set t1.fK_relation = t2.relation
;
commit;

procedure p_insert_inp_bel_from lex as

begin


insert into inp_belege_ALL (

bel_datum,
bezeichnung,
brutto_betrag,
fk_STATUS,
--fk_Kategorie,
--fk_verwendungszweck,
fk_abl_ordner_page,
comm_sonstiges,
create_at,
modify_at
)
select BELEGDAT bt,
Buchungstext,
abs(BetragEUR) Betrag,
10 Status,
--"FK_Kategorie" ,
--"FK_Verwendungszweck",
1,
relation,
sysdate,
sysdate
from t_lex_long
where relation =  :P;
commit;

insert into inp_belege_ALL (

bel_datum,
bezeichnung,
brutto_betrag,
fk_STATUS,
--fk_Kategorie,
--fk_verwendungszweck,
fk_abl_ordner_page,
comm_sonstiges,
create_at,
modify_at
)
select 
to_date(substr(BELEGDAT,1,10),'YYYY-MM-DD') bt,
Buchungstext,
abs(BetragEUR) Betrag,
10 Status,
--"FK_Kategorie" ,
--"FK_Verwendungszweck",
1,
relation,
sysdate,
sysdate


from (select * from t_lex_long ll where jahr = 2020 ) ll
 left join t_rel_lex_kto_bel relbel on ll.relation = relbel.fk_relation
 where fk_relation is null and ll.relation > '2020/257/0';
commit;

end p_insert_inp_bel_from_lex;

insert into inp_belege_ALL (

bel_datum,
bezeichnung,
brutto_betrag,
fk_STATUS,
--fk_Kategorie,
--fk_verwendungszweck,
fk_abl_ordner_page,
comm_sonstiges,
create_at,
modify_at
)
select 
to_date(substr(BELEGDAT,1,10),'YYYY-MM-DD') bt,
Buchungstext,
abs(BetragEUR) Betrag,
10 Status,
--"FK_Kategorie" ,
--"FK_Verwendungszweck",
2861, --ordner page
relation,
sysdate,
sysdate
from t_lex_long
where jahr = 2020;
commit;

insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
to_number(replace(HABENBETRAG_EUR,'.','')),
USTKONTO,
UST
,
2018,
kst,
ktr
from imp_kontenblatt_2018_2;
commit;

merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;


update  imp_kontenblatt_2018 set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
commit;

update  imp_kontenblatt_2018 set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
commit;


update  imp_kontenblatt_2018 set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
commit;

update  imp_kontenblatt_2018 set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
commit;

delete from imp_kontenblatt_2018 where id in (
(select id from (
select   kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur, count(*) cnt, max(kto_kst_ktr.id) id_new, max(kto.id) id
--min(kto.id) id 
from imp_kontenblatt_2018 kto
 left join (select * from imp_kontenblatt_2018 where kst is not null or ktr is not null) kto_kst_ktr on kto.id = kto_kst_ktr.id

group by kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur
having count(*) >1
)
where id_new is null
--id_new <> id
)
);
commit;

delete from imp_kontenblatt_2018 where id in (


select id_new
--'old', a.id, a.id_new, kto_old.ok, kto_old.*
--,kto_new.*
from (
            select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, count(*) cnt
            , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
            from (select * from imp_kontenblatt_2018 )  kto_old
             left join (select * from imp_kontenblatt_2018 where (kst is  null and ktr is null) and ok is null ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
           -- where kto_old.belegnummer = 1347
            group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur

            having count(*) >1
) a
left join imp_kontenblatt_2018 kto_old on kto_old.id = a.id
left join imp_kontenblatt_2018 kto_new on kto_new.id = a.id_new
where 
--id_new is null
id_new <> a.id
--and kto.ok is null
/*
union
select 'new', a.id, a.id_new
, kto_old.ok
--, kto_old.*
,kto_new.*
from (
            select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, count(*) cnt
            , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
            from (select * from imp_kontenblatt_2018 )  kto_old
             left join (select * from imp_kontenblatt_2018 where (kst is  null and ktr is null) and ok is null ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
            where kto_old.belegnummer = 911
            group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur

            having count(*) >1
) a
left join imp_kontenblatt_2018 kto_old on kto_old.id = a.id
left join imp_kontenblatt_2018 kto_new on kto_new.id = a.id_new
where 
--id_new is null
id_new <> a.id
--and kto.ok is null
order by 2
*/
);
commit;
update imp_kontenblatt_2018 set buchungsstatus = 2, ok =2, datum_ok= sysdate where jahr|| '/'|| buchungsnummer || '/0' in (select relation from t_lex_long where status is not null);
commit;

update  imp_lex_susa set konto = '0' || konto where length(konto) = 4;
commit;

update  imp_lex_susa set konto = '00' || konto where length(konto) = 3;
commit;

----
update imp_lex_susa set id = rownum ;
commit

update imp_lex_susa set load_date = sysdate;
commit

update imp_lex_susa set jahr = 2017 where jahr is null;
commit

update  imp_lex_susa set konto = '0' || konto where length(konto) = 4;
commit;

update  imp_lex_susa set konto = '00' || konto where length(konto) = 3;
commit;

--newest version
delete from imp_kontenblatt_2018 where id in (select id_new
--'old', a.id, a.id_new, kto_old.ok, kto_old.*
--,kto_new.*
from (
            select   kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, kto_old.kst, kto_old.ktr , count(*) cnt
            , max(kto_kst_ktr_new.id) id_new, min(kto_old.id) id 
            from (select * from imp_kontenblatt_2018 )  kto_old
             left join (select * from imp_kontenblatt_2018 ) kto_kst_ktr_new on kto_old.id = kto_kst_ktr_new.id
           -- where kto_old.belegnummer = 1347
            group by kto_old.kontonummer, kto_old.gegenkonto, kto_old.buchungstext, kto_old.belegdatum,  kto_old.buchungsnummer, kto_old.belegnummer, kto_old.sollbetrag_eur, kto_old.habenbetrag_eur, kto_old.kst, kto_old.ktr

            having count(*) >1
) a
);
commit;

select fk_belegdatum, arb.jahr, kto.jahr, kto.id, monat, tag, belegdatum

from imp_kontenblatt_2018 kto
 left join t_arbeitstage arb  on kto.fk_belegdatum = arb.pk_arbeitstage
where kontonummer = 2103
  and kto.jahr <> arb.jahr


insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
HABENBETRAG_EUR,
USTKONTO,
UST
,
2020,
kst,
ktr
from imp_kontenblatt_2020_2;
commit;

merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr,
        id

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
        --and kontonummer = '02102'
        --and fk_relation = '2018/120/0'
         ) t2 on (t1.id = t2.id
         /*
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr
         */


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;



update  imp_kontenblatt_2018 set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
commit;

update  imp_kontenblatt_2018 set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
commit;


update  imp_kontenblatt_2018 set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
commit;

update  imp_kontenblatt_2018 set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
commit;



update imp_kontenblatt_2018 set buchungsstatus = 2  where buchungsnummer in (
select buchungsnummer
from imp_kontenblatt_2018
where buchungsstatus = 2 )
and buchungsstatus is null;
commit;

  insert into t_lex_kontenplan (konto_nummer, kontenbezeichnung, kontenkategorie, kontenunterart, steuer, ust)
  select nr, name, kategorie, kontoart, ust_neu, ust_pos_neu
  from t_lex_kontenplan_neu kp_neu
   left join t_lex_kontenplan kp on kp.konto_nummer = kp_neu.nr
where kp.konto_nummer is null;
commit;

 update imp_kontenblatt_2018 set fk_relation = jahr || '/' || buchungsnummer ||'/0' where fk_relation is null;
 commit;
  update imp_kontenblatt_2018 set fk_relation_sub = jahr || '/' || buchungsnummer ||'/0' where fk_relation_sub is null;
 commit;

  update t_lex_long set fk_relation_main = substr(relation,1,instr(relation,'/',-1)) || '0' where fk_relation_main is null;
 commit;

 --hotel
select kto.*, ll.buchungstext, ll.sollkto, ll.jahr, relbel.fk_inp_belege_all, belpos.fk_kategorie, belpos.pk_inp_belege_pos_all, bel.pk_inp_belege_all, belpos.brutto_betrag
from (select * from imp_kontenblatt_2018 where kontonummer = 6680 and jahr = 2018 and buchungsstatus = 1) kto
 left join (select distinct fk_relation, fk_inp_belege_all from t_rel_lex_kto_bel) relbel on relbel.fk_relation = kto.fk_relation
 left join (select * from t_lex_long where status is null and sollkto = 6680) ll on ll.fk_relation_main = relbel.fK_relation
 left join inp_belege_all bel on relbel.fk_inp_belege_all = bel.pk_inp_belege_all
 left join (select * from inp_belege_pos_all where fk_kategorie = 314 or fk_kategorie is null)   belpos on belpos.fk_inp_belege_all = bel.pk_inp_belege_all
order by relation ;

 update t_lex_long set split_nr =substr(substr(relation,length(substr(relation,1,instr(relation,'/')+1)),length(relation)), instr(substr(relation,length(substr(relation,1,instr(relation,'/')+1)),length(relation)) ,'/')+1, length(relation)) where split_nr is null;
 commit;

 --storno

 merge into t_lex_long t1
 using (
            select distinct fk_relation, buchungsstatus 
            from imp_kontenblatt_2018 
            where buchungsstatus = 2
        ) t2 on (t1.relation = t2.fk_relation)
    when matched then
    update set t1.fk_lex_storno = 1;
    commit;

update imp_kontenblatt_2018 set buchungsstatus = 2  where fk_relation in (select relation from t_lex_long where status is not null) and (buchungsstatus <>2 or buchungsstatus is null);
commit;


update t_lex_long set fk_lex_storno= 1 where relation in (select relation from t_lex_long where status is not null) and fk_lex_storno = 0;
commit;

 begin

 for i in (select kto.fk_relation from (select * from  imp_kontenblatt_2018 where kontonummer = '02102' and gegenkonto = '01600') kto left join t_rel_lex_kto_bel ktobel on kto.fk_relation = ktobel.fk_relation  where ktobel.fk_relation is null) loop
 p_create_kas_on_lex (i.fk_relation) ;
 end loop;

end;


 merge into imp_kontenblatt_2018 t1
 using (
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
group by kto.id
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

  --ohne ssis 
insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
belegdatum,--to_date(belegdatum,'YYYY-MM-DD HH24:MI:SS'),
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
HABENBETRAG_EUR,
USTKONTO,
UST
,
2018,
kst,
ktr
from imp_kontenblatt_2018_2;
commit;


merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
         ) t2 on (
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;



update  imp_kontenblatt_2018 set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
commit;

update  imp_kontenblatt_2018 set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
commit;


update  imp_kontenblatt_2018 set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
commit;

update  imp_kontenblatt_2018 set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
commit;


merge into imp_kontenblatt_2018 t1
  using (
  select dat.*
  from (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr,
        bel.fk_belegdatum,
        bel.id

        from (select * from imp_kontenblatt_2018 where kontonummer = 1700) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 

       ) dat
         left join t_arbeitstage arb on dat.fk_belegdatum = arb.pk_arbeitstage
        where dat.jahr <> arb.jahr


         ) t2 on (
         t1.id  = t2.id



        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;

        select  
    substr(fk_relation_sub,length(substr(fk_relation_sub,1,instr(fk_relation_sub,'/',-1)))+1,4) split_nr_neu,  
    split_nr,
    substr(fk_relation,length(substr(fk_relation,1,instr(fk_relation,'/',-1)))+1,4) fin_fk_relation,  
    flg_split_buch,
    SPLIT_NR_MAN,
    count(*) cnt,
    case when substr(fk_relation_sub,length(substr(fk_relation_sub,1,instr(fk_relation_sub,'/',-1)))+1,4) > 0 then  sum(case when datum_split_ok is not null then 1 else 0 end) - count(*) end split_ok,
     nvl(substr(fk_relation_main,length(substr(fk_relation_main,1,instr(fk_relation_main,'/',-1)))+1,4),0) fin_relation_main,
  fin_relation
from imp_kontenblatt_2018 kto
  full join (select fk_relation_main, case when substr(relation,length(substr(relation,1,instr(relation,'/',-1)))+1,4) >0 then 1 else 0 end fin_relation from  t_lex_long where flg_split_buch = 1) ll on kto.fk_relation = ll.fk_relation_main
group by 

    substr(fk_relation_sub,length(substr(fk_relation_sub,1,instr(fK_relation_sub,'/',-1)))+1,4) ,  
    split_nr,
    substr(fk_relation,length(substr(fk_relation,1,instr(fk_relation,'/',-1)))+1,4) ,
    flg_split_buch,
    SPLIT_NR_MAN,
      nvl(substr(fk_relation_main,length(substr(fk_relation_main,1,instr(fk_relation_main,'/',-1)))+1,4),0),
     fin_relation;

     --format date t_lex_long
      select length(trim(substr(belegdat,1,10)))
 from t_lex_long
 where length(trim(substr(belegdat,1,10)))<10
 group by length(trim(substr(belegdat,1,10)))

 select substr(trim(substr(belegdat,1,10)),7,2), substr(trim(substr(belegdat,1,10)),1,6)  || '20' ||  substr(trim(substr(belegdat,1,10)),7,2) 
 from t_lex_long
 where length(trim(substr(belegdat,1,10)))<10
 group by substr(trim(substr(belegdat,1,10)),7,2)
 commit;

 select belegdat
 from t_lex_long


 update t_lex_long   set belegdat =  to_date(substr(belegdat,1,10),'YYYY-MM-DD')            where length(trim(substr(belegdat,1,10)))=10 and instr(belegdat,'-')>0
 commit;
END PKG_LEX;


/
--------------------------------------------------------
--  DDL for Package Body PKG_LEX_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_LEX_NEU" AS

procedure p_add_lex_kontenplan as
begin



  insert into t_lex_kontenplan (konto_nummer, kontenbezeichnung, kontenkategorie, kontenunterart, steuer, ust)
  select nr, name, kategorie, kontoart, ust_neu, ust_pos_neu
  from t_lex_kontenplan_neu kp_neu
   left join t_lex_kontenplan kp on kp.konto_nummer = kp_neu.nr
    where kp.konto_nummer is null;
    commit;
end p_add_lex_kontenplan;


procedure p_add_rel_lex_kto_bel_fk_main_key_lex_long as 
begin 

        --zuordnung lex_buchungen zum Beleg
        merge into  t_rel_lex_kto_bel t1
        using (
                    select 
                        ll_rel.relation, kto.fk_main_key, ll_rel.jahr, kto.bucht_jahr, ll_rel.betrageur, kto."Betrag",
                        --substr(ll_rel.belegdat,1,10), substr(kto."Buchungstag",1,10), 
                        kto.buchungstext, ll_rel.buchungstext bt1,
                        --length( kto.buchungstext), length(ll_rel.buchungstext),
                        row_number() over (partition by kto.fk_main_key order by relation desc) rnr
                    from (
                            select ll.*
                            from (select * from  t_lex_long where status is null) ll 
                             left join t_rel_lex_kto_bel rel on rel.fk_relation = ll.relation
                            where rel.fk_relation is null
                    ) ll_rel
                    left join v_konten_zus kto on 
                                            ll_rel.jahr = kto.bucht_jahr  
                                            and case when instr(substr(ll_rel.belegdat,1,10),'-')> 0  then substr(substr(ll_rel.belegdat,1,10),9,2) || '.' || substr(substr(ll_rel.belegdat,1,10),6,2)  || '.' || substr(substr(ll_rel.belegdat,1,10),1,4) 
                                                else substr(ll_rel.belegdat,1,10)
                                                end  = kto."Buchungstag"
                                            and instr( kto.buchungstext, ll_rel.buchungstext)>0
                                            and ll_rel.betrageur = round(abs(kto."Betrag"),2)
                    left join t_rel_lex_kto_bel rel_bel on rel_bel.fk_main_key = kto.fk_main_key
                    where kto.fk_main_key is not null
                    --order by betrageur
        ) t2 on (t1.fk_main_key = t2.fk_main_key and t2.rnr = 1)
        when matched then
        update set t1.fK_relation = t2.relation
        ;
        commit;
end p_add_rel_lex_kto_bel_fk_main_key_lex_long ;

procedure p_insert_t_lex_long_from_t_lex_long3 as 
begin
 /*
        insert into t_lex_long (

        BELEGDAT,
        PERIODE,
        BELEGNR,
        BUCHUNGSTEXT,
        BETRAG,
        WHRG,
        SOLLKTO,
        HABENKTO,
        ABSCHLUSS,
        BELEG,
        BENUTZER,
        BETRAGDM,
        BETRAGEUR,
        BUCHDAT,
        NR,
        HABENDM,
        HABENEUR,
        HABEN,
        JOUR_DAT,
        KST,
        KTR,
        NOTIZ,
        RELATION,
        SOLLDM,
        SOLLEUR,
        SOLL,
        SPERRE,
        STAPEL,
        STATUS,
        STATUS_DAT,
        UST_H_DM,
        UST_H_EUR,
        UST_HABEN,
        UST_S_DM,
        UST_S_EUR,
        UST_SOLL,
        UST_DM,
        UST_EUR,
        UST,
        UST_KTO,
        UST_KTO_H,
        UST_KTO_S,
        UST_TEXT,
        ZUSATZANG


        ) 
        select 

        l3.BELEGDAT,
        to_number(l3.PERIODE) PERIODE,
        to_number(l3.BELEGNR) BELEGNR,
        l3.BUCHUNGSTEXT,
        to_number(replace(l3.BETRAG,'.','')) BETRAG,
        l3.WHRG,
        to_number(l3.SOLLKTO) SOLLKTO,
        to_number(l3.HABENKTO) HABENKTO,
        l3.ABSCHLUSS,
        l3.BELEG,
        l3.BENUTZER,
        to_number(replace(l3.BETRAGDM,'.','')) BETRAGDM,
        to_number(replace(l3.BETRAGEUR,'.','')) BETRAGEUR,
        l3.BUCHDAT,
        to_number(l3.NR) NR,
        to_number(replace(l3.HABENDM,'.','')) HABENDM,
        to_number(replace(l3.HABENEUR,'.','')) HABENEUR,
        to_number(replace(l3.HABEN,'.','')) HABEN,
        l3.JOUR_DAT,
        l3.KST,
        l3.KTR,
        l3.NOTIZ,
        l3.RELATION,
        to_number(replace(l3.SOLLDM,'.','')) SOLLDM,
        to_number(replace(l3.SOLLEUR,'.','')) SOLLEUR,
        to_number(replace(l3.SOLL,'.','')) SOLL,
        l3.SPERRE,
        l3.STAPEL,
        l3.STATUS,
        l3.STATUS_DAT,
        l3.UST_HDM,
        l3.UST_HEUR,
        l3.UST_HABEN,
        to_number(replace(l3.USTSDM,'.','')) USTSDM,
        to_number(replace(l3.USTSEUR,'.','')) USTSEUR,
        to_number(replace(l3.UST_SOLL,'.','')) UST_SOLL,
        to_number(replace(l3.USTDM,'.','')) USTDM,
        to_number(replace(l3.USTEUR,'.','')) USTEUR,
        to_number(replace(l3.UST,'.','')) UST,
        to_number(l3.UST_KTO) UST_KTO,
        l3.UST_KTOH,
        to_number(l3.UST_KTOS) UST_KTOS,
        l3.UST_TEXT,
        l3.ZUSATZANG

        *//*
        l3.BELEGDAT,
        to_number(l3.PERIODE),
        to_number(l3.BELEGNR),
        l3.BUCHUNGSTEXT,
        to_number(l3.BETRAG),
        l3.WHRG,
        to_number(l3.SOLLKTO),
        to_number(l3.HABENKTO),
        l3.ABSCHLUSS,
        l3.BELEG,
        l3.BENUTZER,
        to_number(replace(l3.BETRAGDM,'.','')),
        to_number(replace(l3.BETRAGEUR,'.','')),
        l3.BUCHDAT,
        to_number(l3.NR),
        to_number(replace(l3.HABENDM,'.','')),
        to_number(replace(l3.HABENEUR,'.','')),
        to_number(replace(l3.HABEN,'.','')),
        l3.JOUR_DAT,
        l3.KST,
        l3.KTR,
        l3.NOTIZ,
        l3.RELATION,
        to_number(replace(l3.SOLLDM,'.','')),
        to_number(replace(l3.SOLLEUR,'.','')),
        to_number(replace(l3.SOLL,'.','')),
        l3.SPERRE,
        l3.STAPEL,
        l3.STATUS,
        l3.STATUS_DAT,
        l3.UST_HDM,
        l3.UST_HEUR,
        l3.UST_HABEN,
        to_number(replace(l3.USTSDM,'.','')),
        to_number(replace(l3.USTSEUR,'.','')),
        to_number(replace(l3.UST_SOLL,'.','')),
        to_number(replace(l3.USTDM,'.','')),
        to_number(replace(l3.USTEUR,'.','')),
        to_number(replace(l3.UST,'.','')),
        to_number(l3.UST_KTO),
        l3.UST_KTOH,
        to_number(l3.UST_KTOS),
        l3.UST_TEXT,
        l3.ZUSATZANG*//*
        from t_lex_long3 l3
         left join t_lex_long l1 on to_char(l3.relation) = to_char(l1.relation)
         where l1.relation is null
        --and rownum = 1
         order by relation desc;
         commit;
         */
         /*
         merge into t_lex_long l1
 using (
 select 
l3.BELEGDAT,
to_number(l3.PERIODE) PERIODE,
to_number(l3.BELEGNR) BELEGNR,
l3.BUCHUNGSTEXT,
to_number(replace(l3.BETRAG,'.','')) BETRAG,
l3.WHRG,
to_number(l3.SOLLKTO) SOLLKTO,
to_number(l3.HABENKTO) HABENKTO,
l3.ABSCHLUSS,
l3.BELEG,
l3.BENUTZER,
to_number(replace(l3.BETRAGDM,'.','')) BETRAGDM,
to_number(replace(l3.BETRAGEUR,'.','')) BETRAGEUR,
l3.BUCHDAT,
to_number(l3.NR) NR,
to_number(replace(l3.HABENDM,'.','')) HABENDM,
to_number(replace(l3.HABENEUR,'.','')) HABENEUR,
to_number(replace(l3.HABEN,'.','')) HABEN,
l3.JOUR_DAT,
l3.KST,
l3.KTR,
l3.NOTIZ,
l3.RELATION,
to_number(replace(l3.SOLLDM,'.','')) SOLLDM,
to_number(replace(l3.SOLLEUR,'.','')) SOLLEUR,
to_number(replace(l3.SOLL,'.','')) SOLL,
l3.SPERRE,
l3.STAPEL,
l3.STATUS,
l3.STATUS_DAT,
l3.UST_HDM,
l3.UST_HEUR,
l3.UST_HABEN,
to_number(replace(l3.USTSDM,'.','')) USTSDM,
to_number(replace(l3.USTSEUR,'.','')) USTSEUR,
to_number(replace(l3.UST_SOLL,'.','')) UST_SOLL,
to_number(replace(l3.USTDM,'.','')) USTDM,
to_number(replace(l3.USTEUR,'.','')) USTEUR,
to_number(replace(l3.UST,'.','')) UST,
to_number(l3.UST_KTO) UST_KTO,
l3.UST_KTOH,
to_number(l3.UST_KTOS) UST_KTOS,
l3.UST_TEXT,
l3.ZUSATZANG

from t_lex_long3 l3
 left join t_lex_long l1 on to_char(l3.relation) = to_char(l1.relation)
 where l1.relation is not null
--and rownum = 1
 order by relation desc



 ) l3 on (l1.relation = l3.relation)
 when matched then 

update set
l1.BELEGDAT=l3.BELEGDAT,
l1.PERIODE=l3.PERIODE,
l1.BELEGNR=l3.BELEGNR,
l1.BUCHUNGSTEXT=l3.BUCHUNGSTEXT,
l1.BETRAG=l3.BETRAG,
l1.WHRG=l3.WHRG,
l1.SOLLKTO=l3.SOLLKTO,
l1.HABENKTO=l3.HABENKTO,
l1.ABSCHLUSS=l3.ABSCHLUSS,
l1.BELEG=l3.BELEG,
l1.BENUTZER=l3.BENUTZER,
l1.BETRAGDM=l3.BETRAGDM,
l1.BETRAGEUR=l3.BETRAGEUR,
l1.BUCHDAT=l3.BUCHDAT,
l1.NR=l3.NR,
l1.HABENDM=l3.HABENDM,
l1.HABENEUR=l3.HABENEUR,
l1.HABEN=l3.HABEN,
l1.JOUR_DAT=l3.JOUR_DAT,
l1.KST=l3.KST,
l1.KTR=l3.KTR,
l1.NOTIZ=l3.NOTIZ,

l1.SOLLDM=l3.SOLLDM,
l1.SOLLEUR=l3.SOLLEUR,
l1.SOLL=l3.SOLL,
l1.SPERRE=l3.SPERRE,
l1.STAPEL=l3.STAPEL,
l1.STATUS=l3.STATUS,
l1.STATUS_DAT=l3.STATUS_DAT,
l1.UST_H_DM=l3.UST_HDM,
l1.UST_H_EUR=l3.UST_HEUR,
l1.UST_HABEN=l3.UST_HABEN,
l1.UST_S_DM=l3.USTSDM,
l1.UST_S_EUR=l3.USTSEUR,
l1.UST_SOLL=l3.UST_SOLL,
l1.UST_DM=l3.USTDM,
l1.UST_EUR=l3.USTEUR,
l1.UST=l3.UST,
l1.UST_KTO=l3.UST_KTO,
l1.UST_KTO_H=l3.UST_KTOH,
l1.UST_KTO_S=l3.UST_KTOS,

l1.UST_TEXT=l3.UST_TEXT,
l1.ZUSATZANG=l3.ZUSATZANG


;
commit;
*/
         null;

end p_insert_t_lex_long_from_t_lex_long3;



procedure p_upd_storno as

 begin
     update t_lex set storno = 1 where pk_lex in (
    select lex.pk_lex
    from (select * from  t_lex where storno is null) lex
     join ( select *
             from t_lex
             where instr(buchungstext, '<Storno>')>0
             ) lex2 on 
              lex2.BELEGDATUM = lex.BELEGDATUM and

    nvl( lex2.BUCHUNGSPERIODE,0)= nvl( lex.BUCHUNGSPERIODe,0)  and
    nvl(  lex2.BELEGNUMMERNKREIs,0)= nvl( lex.BELEGNUMMERNKREis,0)   and
     lex2.BELEGNUMMEr =  lex.BELEGNUMMEr and
    -- lex_imp.BUCHUNGSTEXt=  lex.BUCHUNGSTEXT and
      lex2.BUCHUNGSBETRAG=  - lex.BUCHUNGSBETRag and
     lex2.SOLLKONTO=  lex.sollkonto and
     lex2.HABENKONTO=  lex.habenkonto and
     lex2.STEUERSCHLÜSSEL =  lex.STEUERSCHLÜSSel  and
     nvl(lex2.KOSTENSTELLE,0)=  nvl(lex.KOSTENSTELLE,0)  AND
    nvl( lex2.KOSTENTRÄGer,0) = nvl( lex.KOSTENTRÄGER ,0) and
     lex2.BUCHUNGSBETRAG_EURO = - lex.BUCHUNGSBETRAG_EUro and
     lex2.WÄHRUNG =  lex.WÄHRUNG
     )

    ;
    commit;
end p_upd_storno;

procedure p_set_fk_main_key_in_t_lex as
begin
    ---====



    merge into t_lex t1
     using (
                with lex as (

                                select *
                                from t_lex 
                                where ok = 0 and storno =0
                                and ( habenkonto in (1700,1710) or sollkonto  in (1700,1710) )
                            ),
                    kto as (
                                select *
                                from v_konten_zus

                             )
                select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_main_key) fk_main_key, "Buchungstag", ok
                from (
                        select * from lex where fk_main_key is null
                      ) lex
                 join kto on lex.buchungsbetrag = abs(kto."Betrag") 
                                and lex.belegdatum = kto."Buchungstag"
                                and instr(kto.Buchungstext, lex.Buchungstext)>0
                group by belegdatum, belegnummer, buchungsbetrag,"Buchungstag", ok
    ) t2 on (t1.belegnummer = t2.belegnummer )
    when matched then 
    update set t1.fk_main_key = t2.fk_main_key;
    commit;


    ---========

        merge into t_lex t1
     using (
    with lex as (

    select *
    from t_lex 
    where ok = 0 and storno =0
    and instr(buchungstext , '1.50% AUSLANDSEINSATZENTGELT') >0
    ),
    kto as (
    select *
    from v_konten_zus
    where instr(Buchungstext , '1.50% AUSLANDSEINSATZENTGELT')> 0
    )
    select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_main_key) fk_main_key, "Buchungstag", ok
    from lex
     join kto on lex.buchungsbetrag = abs(kto."Betrag") 
    and lex.belegdatum = kto."Buchungstag"
    group by belegdatum, belegnummer, buchungsbetrag,"Buchungstag", ok
    ) t2 on (t1.belegnummer = t2.belegnummer)
    when matched then 
    update set t1.fk_main_key = t2.fk_main_key;
    commit;
    ---===



        merge into t_lex t1 
        using (
        select fk_buchung_steuer, fk_main_key
        from KTO_Kreditkarte
        where fk_buchung_steuer is not null
        ) t2 on (t1.belegnummer = t2.fk_buchung_steuer)
        when matched then
        update set t1.fk_main_key = t2.fk_main_key;
        commit;

end p_set_fk_main_key_in_t_lex;




procedure p_abfragen as
begin
    /*
    with lex as (

    select *
    from t_lex 
    where ok = 1 and storno =0
    and instr(buchungstext , '1.50% AUSLANDSEINSATZENTGELT') >0
    ),
    kto as (
    select *
    from v_konten_zus
    where instr(Buchungstext , '1.50% AUSLANDSEINSATZENTGELT')> 0
    )
    select belegdatum, belegnummer, buchungsbetrag, kto.fk_main_key  fk_main_key, "Buchungstag", ok
    from lex
     join kto on lex.buchungsbetrag = abs(kto."Betrag") 
    and lex.belegdatum = kto."Buchungstag";
    */
    null;
end p_abfragen;

procedure p_set_imp_bel as
begin

    merge into t_lex t1
     using (
    with lex as (

    select *
    from t_lex 
    where ok = 0 and storno =0
    and ( habenkonto in (1600) or sollkonto  in (1600))
    ),
    kto as (
    select *
    from v_imp_bel_zus

    )
    select belegdatum, belegnummer, buchungsbetrag, max(kto.fk_imp_ba_bel) fk_imp_ba_bel, datum, ok
    --, sollkonto, habenkonto
    from (
                select * 
                from lex 
                where fk_imp_ba_bel 
                is null
                ) lex
     join kto on lex.buchungsbetrag = abs(kto.Betrag) 
    and lex.belegdatum = kto.datum
    and instr(kto.bezeichnung, lex.Buchungstext)>0
    group by belegdatum, belegnummer, buchungsbetrag,datum, ok
    --,habenkonto, sollkonto
    ) t2 on (t1.belegnummer = t2.belegnummer )
    when matched then 
    update set t1.fk_imp_ba_bel = t2.fk_imp_ba_bel;
    commit;
end p_set_imp_bel;

procedure p_set_relation_main as
begin


  update t_lex_long set fk_lex_relation_main = substr(relation,1,instr(relation,'/',-1)) || '0' where fk_lex_relation_main is null;
 commit;

end p_set_relation_main ;

procedure p_add_split_nr_neu as
begin 

 update t_lex_long set split_nr =substr(substr(relation,length(substr(relation,1,instr(relation,'/')+1)),length(relation)), instr(substr(relation,length(substr(relation,1,instr(relation,'/')+1)),length(relation)) ,'/')+1, length(relation)) where split_nr is null;
 commit;

       update t_lex_long set belegdat =  to_char(to_date(substr(belegdat,1,10), 'YYYY-MM-DD'),'DD.MM.YYYY')  where instr(belegdat,'-') >0;
      commit;
end p_add_split_nr_neu;

procedure p_add_storno as
begin
  --storno

 merge into t_lex_long t1
 using (
            select distinct fk_relation, buchungsstatus 
            from imp_kontenblatt_2018 
            where buchungsstatus = 2
        ) t2 on (t1.relation = t2.fk_relation)
    when matched then
    update set t1.fk_lex_storno = 1;
    commit;
end p_add_storno;

procedure p_create_kas_on_lex as
begin


 for i in (select kto.fk_relation from (select * from  imp_kontenblatt_2018 where kontonummer = '02102' and gegenkonto = '01600') kto left join t_rel_lex_kto_bel ktobel on kto.fk_relation = ktobel.fk_relation  where ktobel.fk_relation is null) loop
  --p_create_kas_on_lex (i.fk_relation) ; --not working at the moment
 null;

 end loop;

end p_create_kas_on_lex;

procedure p_set_belegdat as
begin

 update t_lex_long   set belegdat =  to_date(substr(belegdat,1,10),'YYYY-MM-DD')            where length(trim(substr(belegdat,1,10)))=10 and instr(belegdat,'-')>0;
 commit;
end p_set_belegdat ;

procedure p_set_flg_splitbuch as 
begin
    update t_lex_long set flg_split_buch =1 where fk_relation_main  in (select distinct fK_relation_main from t_lex_long where split_nr <> 0);
    commit;
end  p_set_flg_splitbuch;

procedure p_set_steuer_monat as
begin
 update t_lex_long set fk_steuer_monat  = 61  where jahr = 2020 and periode = 3;
commit;
end p_set_steuer_monat ;

procedure p_set_vorsteueranmldg as
begin


    update t_lex_long set fk_steuer_voranmeldg = 69  where jahr = 2020 and periode = 2;
    commit;

    update t_lex_long set fk_steuer_voranmeldg = 68 where jahr = 2020 and periode = 1 and substr(buchdat,1,10) > '2020-02-07';
    commit;


end p_set_vorsteueranmldg;

procedure p_format_belegdat as
begin

update t_lex_long set belegdat = substr(belegdat, 9,2) || '.' || substr(belegdat,6,2) || '.' || substr(belegdat,1,4)  where instr(belegdat, '-')>0;
commit;
end p_format_belegdat;

procedure p_set_arbeitstag as
begin 

merge into t_lex_long t1
  using (
        select pk_arbeitstage, 
        relation

        from (select * from t_lex_long where belegdat is not null and fk_belegdat is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdat,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.relation = t2.relation)
        when matched then
        update set t1.fk_belegdat =  t2.pk_arbeitstage;
        commit;

        merge into t_lex_long t1
  using (
        select pk_bas_kal_arbeitstage, 
        relation

        from (select * from t_lex_long where belegdat is not null and fk_lex_belegdat is null) bel,
          t_bas_kal_arbeitstage arb
        where  to_date(substr(bel.belegdat,1,10), 'YYYY-MM-DD')= arb.datum 
         ) t2 on (t1.relation = t2.relation)
        when matched then
        update set t1.fk_lex_belegdat =  t2.pk_bas_kal_arbeitstage;
        commit;

end p_set_arbeitstag;

procedure p_set_steuer_monat1 as
begin
 merge into t_lex_long t1
 using (
select * from t_lex_long ll 
 left join t_arbeitstage arb on arb.pk_arbeitstage = ll.fk_belegdat
 left join t_steuer_monat stm on arb.monat = stm.monat and arb.jahr  = stm.jahr
 ) t2 on (t1.relation = t2.relation) 
 when matched then
 update set t1.fk_steuer_monat = t2.pk_steuer_monat;
 commit;
end p_set_steuer_monat1;

procedure P_set_values_split as
begin


 merge into t_lex_long t1
 using (
select wod.relation, wd.belegdat, wd.jahr_beleg, wd.belegnr
from (
select * from t_lex_long where belegnr is not null ) wd
join (select * from t_lex_long where belegnr is null) wod on wd.fk_lex_relation_main = wod.fk_lex_relation_main
) t2 on (t1.relation = t2.relation)
when  matched then
 update set t1.belegdat = t2.belegdat,
 t1.jahr_beleg = t2.jahr_beleg,
 t1.belegnr = t2.belegnr;
 commit;

 merge into t_lex_long t1
  using (
        select pk_bas_kal_arbeitstage, 
        relation

        from (select * from t_lex_long where belegdat is not null and fk_lex_belegdat is null) bel,
          t_bas_kal_arbeitstage arb
        where  to_date(substr(bel.belegdat,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.relation = t2.relation)
        when matched then
        update set t1.fk_lex_belegdat =  t2.pk_bas_kal_arbeitstage;
        commit;


merge into t_lex_long t1
 using (
select wod.relation, wd.belegdat, wd.jahr_beleg, wd.buchdat
from (
select * from t_lex_long where habenkto is not null ) wd
join (select * from t_lex_long where habenkto is null) wod on wd.fk_lex_relation_main = wod.fk_lex_relation_main, wd.habenkto
) t2 on (t1.relation = t2.relation)
when  matched then
 update set
 --t1.belegdat = t2.belegdat,
 t1.jahr_beleg = t2.jahr_beleg,
 t1.buchdat = t2.buchdat,
 t1.habenkto = t2.habenkto
 ;
 commit;




end;

procedure add_steuerschluessel as
begin
 --keine Buchungsnummer im Export verfügbar -> keine genaue Zuordnung möglich
 merge into t_lex_long t1
 using (
 select distinct relation
, max(steuerschlüssel) steuerschluessel
--,fk_lex_relation_main, belegnr
 from t_lex_long ll
  join t_imp_lex_exp_acii lea on substr(lea.belegdatum,7,4) = ll.jahr and lea.belegnummer= ll.belegnr
  where ll.steuerschluessel is null
  group by relation


 ) t2 on (t1.relation = t2.relation)
 when matched then 
 update set t1.steuerschluessel = t2.steuerschluessel;
 commit;

end;
END PKG_LEX_NEU;


/
--------------------------------------------------------
--  DDL for Package Body PKG_RECHNUNG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_RECHNUNG" AS

    
    PROCEDURE   p_create_eingangsrechnung(p_fk_verwendungszweck number) as 
    
        v_pk_re number;

    begin

    for i in (select * from t_beleg where fk_vorsteuerrelevant = 1 and fk_verwendungszweck = p_fk_verwendungszweck) loop

             /*ID heraussuchen*/
             select seq_rechnung.nextval
             into v_pk_re
             from t_rechnung;

             /*neue Eingangsrechnung erstellen aus vorsteuerrelevanten Belegen*/

             /*1. neue Beziehung Rechnung - Beleg anlegen*/ 
              merge into t_rel_rechnung_beleg t1
              using (
                            select 
                            nvl(tre.pk_rechnung, v_pk_re) fk_rechnung,
                            tre.rechnungsnummer, 
                            tbe.beleg as rechnung,
                            tbe.datum rechnungsdatum,
                            tbe.pk_beleg fk_beleg,
                            tbe.fk_projekt,
                            'ER-' || 'AA' || '-' || to_char(tbe.datum, 'MM') || '-' || to_char(tbe.datum,'YYYY') renr,
                            tbe.betrag_netto,
                            tbe.mwst,
                            tbe.betrag_brutto,
                            tbe.fk_steuersatz
                            from t_beleg tbe
                              left join t_rel_rechnung_beleg trrebe on tbe.pk_beleg = trrebe.fk_beleg
                              left join t_rechnung tre on tre.pk_rechnung = trrebe.fk_rechnung
                            where pk_beleg = i.pk_beleg 
                ) t2 on (t1.fk_rechnung = t2.fk_rechnung and t1.fk_beleg = t2.fk_beleg )
                when not matched then
                insert 
                       (t1.fk_rechnung, t1.fk_beleg, t1.created_by, t1.created_at,t1.modified_by, t1.modified_at)
                values 
                       (t2.fk_rechnung, t2.fk_beleg, USER, sysdate, USER, sysdate);
                commit;

            /*2. Rechnung hinzufügen*/
            merge into t_rechnung t1
             using (
                        select 
                        tre.pk_rechnung,
                        tre.rechnungsnummer, 
                        v_pk_re as fk_re,
                        tbe.beleg as rechnung,
                        tbe.datum rechnungsdatum,
                        tbe.fk_projekt,
                        'ER-' || 'AA' || '-' || to_char(tbe.datum, 'MM') || '-' || to_char(tbe.datum,'YYYY') renr,
                        tbe.betrag_netto,
                        tbe.mwst,
                        tbe.betrag_brutto,
                        tbe.fk_steuersatz
                        from t_beleg tbe
                          left join t_rel_rechnung_beleg trrebe on tbe.pk_beleg = trrebe.fk_beleg
                          left join t_rechnung tre on tre.pk_rechnung = trrebe.fk_rechnung
                        where  pk_beleg = i.pk_beleg 
            ) t2 on (t1.pk_rechnung = t2.pk_rechnung and t2.rechnungsnummer is null)
            when  matched then
            update set

                      t1.RECHNUNGSNUMMER= t2.renr,
                      t1.RECHNUNG=t2.RECHNUNG,
                      t1.FK_PROJEKT=t2.FK_PROJEKT,
                      t1.RECHNUNGSDATUM= t2.RECHNUNGSDATUM,
                      t1.ZEITRAUM_VON=null,
                      t1.ZEITRAUM_BIS=null,
                      t1.RECHNUNGSBETRAG_NETTO=t2.betrag_netto,
                      t1.FK_STEUERSATZ=t2.fK_steuersatz,
                      t1.MWST=t2.mwst,
                      t1.RECHNUNGSBETRAG_BRUTTO=t2.betrag_brutto,
                      t1.ZAHLUNGSEINGANG=null,
                      t1.GEZAHLT_AM=null,
                      t1.ZAHLUNGSBETRAG=null,
                      t1.FK_RECHNUNGSTYP=2,
                      t1.CREATED_BY=USER,
                      t1.CREATED_AT=sysdate,
                      t1.MODIFIED_BY=USER,
                      t1.MODIFIED_AT=sysdate


            ;
            commit;



    end loop;

   end;

END PKG_RECHNUNG;


/
--------------------------------------------------------
--  DDL for Package Body PKG_SERVICES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_SERVICES" AS

 procedure p_rep_trigger(p_table varchar2, p_seq varchar2, p_pk varchar2 ) as
 
 begin
   execute immediate  '
    create or replace TRIGGER ' || p_table || '_TRIG
    BEFORE INSERT ON "' || p_table || '" 
    FOR EACH ROW 
    BEGIN
      <<COLUMN_SEQUENCES>>
      BEGIN
        IF INSERTING AND :NEW.' || p_pk || ' IS NULL THEN
          SELECT "' || p_seq || '".NEXTVAL INTO :NEW.' || p_pk || ' FROM SYS.DUAL;
        END IF;
      END COLUMN_SEQUENCES;
    END;';
 end p_rep_trigger;

 procedure p_set_seq (p_seq varchar2, p_seq_nr number) as

 begin
  execute immediate  'drop sequence "COMPANY"."' || p_seq || '"' ;
  execute immediate  'CREATE SEQUENCE  "COMPANY"."' || p_seq ||'"  MINVALUE 100 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH ' || p_seq_nr || ' CACHE 20 NOORDER  NOCYCLE ';

 end;

 procedure p_add_arbeitstage as

 begin

    insert into t_arbeitstage (datum)

    with all_obj as (select * from all_objects where rownum <= 366),
    jr as (select 2016 jahr from dual),
    zeitsk as (select to_date('01.01' || jr.jahr, 'DD.MM.YYYY') +rownum -1 dat
    from all_obj, jr)
    select zt.dat
    from zeitsk zt
     left join t_arbeitstage arb on zt.dat = arb.datum
    where arb.datum is null;
    commit;

    update t_arbeitstage set jahr =   substr(datum,7,4) ,monat =substr(datum,4,2) , tag =      substr(datum,1,2) where jahr is null and datum is not null;
    commit;
 end p_add_arbeitstage;

 procedure p_copy_data_diff_tables as

 begin
    execute immediate  'with tab1 as (select :P_TAB tab1 from dual), 
    cols as (select listagg(column_name, '','') within group (order by column_name) cols from USERS_tab_cols, tab1 where table_name = tab1.tab1)
    select ''insert into '' || tab1 || ''('' || cols || '')'' || ''select '' || cols || '' from '' || tab1 || '' where id = '' || :P_WERT || '';'' from tab1, cols
    ';
 end;

 begin
for i in (select fk_main_key, "FK_Kontotyp" kontotyp from v_konten_zus ) loop
-- dbms_output.put_line('test ' || i.fk_main_key || i.kontotyp);
  P_SET_NAECHSTE_ZAHLUNG (i.fk_main_key , i.kontotyp );
null;
end loop ;
end;


update kto_girokonto set wiederholung = 'einmalig' where wiederholung is null;
commit;
select distinct wiederholung from kto_girokonto

update kto_girokonto set wiederholung = '"jährlich"' where fk_main_key =			3316;
commit;

SELECT * from kto_girokonto where "Betrag" = -50.4

update kto_girokonto set wiederholung = '"monatlich"' where "Betrag" = -50.4 and instr("Buchungstext", 'Seehus')=0;
commit;

update kto_girokonto set wiederholung = '"vierteljährlich"' where "Betrag" = -20.85 and wiederholung = 'einmalig';
commit;

update kto_girokonto set wiederholung = '"vierteljährlich"' where fk_main_key =			3332		;
commit;

update kto_girokonto set wiederholung =  '"monatlich"' where fk_main_key =	3330;
commit;

update kto_girokonto set wiederholung = 'einmalig'  where fk_main_key =		3329;
commit;




"monatlich"
"vierteljährlich"
"jährlich"
einmalig
"halbjährlich"

select distinct wiederholung from kto_kreditkarte where "Kategorie" = 'Kreditkarte - Saldovortrag'

update  kto_kreditkarte set wiederholung =  '"jährlich"' where fk_main_key =1257;
commit;

update kto_kreditkarte  set wiederholung =   '"monatlich"' where fk_main_key =			1315;
commit; 


update kto_paypal set wiederholung =   '"monatlich"' where fk_main_key =		3462	;
commit; 

delete from imp_kontenblatt_2018 where id in (
(select id from (
select   kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur, count(*) cnt, max(kto_kst_ktr.id) id_new, min(kto.id) id 
from imp_kontenblatt_2018 kto
 left join (select * from imp_kontenblatt_2018 where kst is not null or ktr is not null) kto_kst_ktr on kto.id = kto_kst_ktr.id

group by kto.kontonummer, kto.gegenkonto, kto.buchungstext, kto.belegdatum,  kto.buchungsnummer, kto.belegnummer, kto.sollbetrag_eur, kto.habenbetrag_eur
having count(*) >1
)
where id_new is null
--id_new <> id
)
);
commit;
rollback;


update imp_kontenblatt_2018 set id = rownum;
commit;

select * from imp_kontenblatt_2018
END PKG_SERVICES;


/
--------------------------------------------------------
--  DDL for Package Body PKG_SERVICES_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_SERVICES_NEU" AS

 procedure p_rep_trigger(p_table varchar2, p_seq varchar2, p_pk varchar2 ) as
 
 begin
   execute immediate  '
    create or replace TRIGGER ' || p_table || '_TRIG
    BEFORE INSERT ON "' || p_table || '" 
    FOR EACH ROW 
    BEGIN
      <<COLUMN_SEQUENCES>>
      BEGIN
        IF INSERTING AND :NEW.' || p_pk || ' IS NULL THEN
          SELECT "' || p_seq || '".NEXTVAL INTO :NEW.' || p_pk || ' FROM SYS.DUAL;
        END IF;
      END COLUMN_SEQUENCES;
    END;';
 end p_rep_trigger;


  procedure p_set_seq (p_seq varchar2, p_seq_nr number) as

 begin
  execute immediate  'drop sequence "COMPANY"."' || p_seq || '"' ;
  execute immediate  'CREATE SEQUENCE  "COMPANY"."' || p_seq ||'"  MINVALUE 100 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH ' || p_seq_nr || ' CACHE 20 NOORDER  NOCYCLE ';

 end p_set_seq;



 procedure p_add_arbeitstage as

 begin

    insert into t_bas_kal_arbeitstage (datum)

    with all_obj as (select * from all_objects where rownum <= 366),
    jr as (select 2016 jahr from dual),
    zeitsk as (select to_date('01.01' || jr.jahr, 'DD.MM.YYYY') +rownum -1 dat
    from all_obj, jr)
    select zt.dat
    from zeitsk zt
     left join t_bas_kal_arbeitstage arb on zt.dat = arb.datum
    where arb.datum is null;
    commit;

    update t_bas_kal_arbeitstage set jahr =   substr(datum,7,4) ,monat =substr(datum,4,2) , tag =      substr(datum,1,2) where jahr is null and datum is not null;
    commit;
 end p_add_arbeitstage;


  procedure p_copy_data_diff_tables as

 begin
    execute immediate  'with tab1 as (select :P_TAB tab1 from dual), 
    cols as (select listagg(column_name, '','') within group (order by column_name) cols from USERS_tab_cols, tab1 where table_name = tab1.tab1)
    select ''insert into '' || tab1 || ''('' || cols || '')'' || ''select '' || cols || '' from '' || tab1 || '' where id = '' || :P_WERT || '';'' from tab1, cols
    ';
 end p_copy_data_diff_tables;

 procedure p_calc_nächste_zahlung as

   begin
for i in (select fk_main_key, FK_std_kto_Kontotyp kontotyp from v_kto_konten_zus ) loop
-- dbms_output.put_line('test ' || i.fk_main_key || i.kontotyp);
  P_KTO_SET_NAECHSTE_ZAHLUNG (i.fk_main_key , i.kontotyp );
null;
end loop ;
end p_calc_nächste_zahlung ;

procedure p_add_objects as 

begin






 
  ---


----
alter table adr_city add (transfer_date date, flg_transfered number);

update adr_city set transfer_date =sysdate, flg_transfered = 1;
commit;
--


--
insert into t_fli_air_airports (icao, fk_std_fli_air_airport_type, created_on)
select airport, 2, sysdate
from arp_airport arp
left join t_fli_air_airports air on arp.airport = air.icao
where icao is null
commit;

insert into t_adr_ort (ort, fk_adr_land, created_at) 
select plzo.ort, 1, sysdate
from plz_ort plzo
 left join t_adr_ort ort on plzo.ort = ort.ort
where ort.ort is null
group by plzo.ort;
commit;


insert into t_adr_plz_ort (plz, fk_adr_ort, created_at)
select plzo.plz, ort.pk_adr_ort, sysdate
from plz_ort plzo
 join t_adr_ort ort on plzo.ort = ort.ort
 left join t_adr_plz_ort aplzo on aplzo.plz = plzo.plz and ort.pk_adr_ort = aplzo.fk_adr_ort
where aplzo.pk_adr_plz_ort is null;
commit;
---



end p_add_objects;

END PKG_SERVICES_NEU;

/
--------------------------------------------------------
--  DDL for Package Body PKG_STEUER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_STEUER" AS

merge into t_steuer_monat t1
  using (
        select pk_arbeitstage, 
        pk_steuer_monat

        from (select * from t_steuer_monat where faelligkeitsdatum is not null and fk_faelligkeitstag is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.faelligkeitsdatum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_steuer_monat = t2.pk_steuer_monat)
        when matched then
        update set t1.fk_faelligkeitstag= t2.pk_arbeitstage;
        commit;

merge into t_steuer_jahr t1
  using (
        select pk_arbeitstage, 
        pk_steuer_jahr

        from (select * from t_steuer_jahr where faelligkeitsdatum is not null and fk_faelligkeitsdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.faelligkeitsdatum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_steuer_jahr = t2.pk_steuer_jahr)
        when matched then
        update set t1.fk_faelligkeitsdatum= t2.pk_arbeitstage;
        commit;


merge into t_steuer_jahr t1
  using (
        select pk_arbeitstage, 
        pk_steuer_jahr

        from (select * from t_steuer_jahr where mahndatum is not null and fk_mahndatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.mahndatum,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_steuer_jahr = t2.pk_steuer_jahr)
        when matched then
        update set t1.fk_mahndatum= t2.pk_arbeitstage;
        commit;

merge into t_verpflegungsmehraufwand_det t1
  using (
        select pk_arbeitstage, 
        pk_verpflegungsmehraufwd_det

        from (select * from t_verpflegungsmehraufwand_det where DATUM_VERPFMWED is not null and fk_DATUM_VERPFMWED is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.DATUM_VERPFMWED,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_verpflegungsmehraufwd_det = t2.pk_verpflegungsmehraufwd_det)
        when matched then
        update set t1.fk_DATUM_VERPFMWED= t2.pk_arbeitstage;
        commit;

        insert into  t_rel_verpfl_beleg_src (fk_verpflegungsmehraufwd_det, fk_inp_belege_all, creation_date)
        select 
        --distinct pk_arbeitstage, 
        distinct
        pk_verpflegungsmehraufwd_det,
      --  jahr,
        pk_inp_belege_all,
        sysdate

        from (select * from t_verpflegungsmehraufwand_det ) bel 
         join  t_arbeitstage arb on bel.fk_datum_verpfmwed = arb.pk_arbeitstage
         left join inp_belege_all inp on inp.fk_arbeitstag = arb.pk_arbeitstage
       where jahr = 2018 and persönlich_vor_ort  = 1;
         commit;

insert into t_verpflegungsmehraufwand_det (
datum_verpfmwed,
fk_datum_verpfmwed,
fk_verpflegungsmehraufwand
)
select  arb.datum,
pk_arbeitstage,
ver.pk_verpflegungsmehraufwand
from t_verpflegungsmehraufwand ver
 left join t_arbeitstage arb on ver.fk_monat = arb.monat and ver.fk_jahr = arb.jahr
 left join t_verpflegungsmehraufwand_det ver_det on ver_det.fk_verpflegungsmehraufwand = ver.pk_verpflegungsmehraufwand and arb.pk_arbeitstage = ver_det.fk_datum_verpfmwed
 where ver_det.pk_verpflegungsmehraufwd_det is null;
 commit;

update imp_kontenblatt_2018 set gegenkonto = null where regexp_instr(gegenkonto,'[a-zA-Z]')>0 ;
commit;

merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
   from imp_kontenblatt_2018 kto 
 left join t_lex_long ll on
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

   update t_lex_long set flg_split_buch =1 where fk_relation_main  in (select distinct fK_relation_main from t_lex_long where split_nr <> 0);

   merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
   --, kto.kontonummer, kto.gegenkonto, kto.ustkonto,ll.habenkto, ll.sollkto, ll.ust_kto_h, ll.ust_kto_s,ll_main.habenkto, ll_main.sollkto
   from imp_kontenblatt_2018 kto 
     join  (select * from t_lex_long where split_nr <> 0) ll   on    ll.fk_relation_main = kto.fk_relation
     join (select relation, fk_relation_main, habenkto, sollkto from t_lex_long where relation = fk_relation_main and flg_split_buch =1) ll_main on ll_main.fk_relation_main = ll.fk_relation_main
    where kto.kontonummer = ll.sollkto and gegenkonto = ll_main.habenkto and kto.ustkonto = ll.ust_kto_s


   /*
     -- and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) )
      --    and    ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))

             and ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
              and ll.split_nr is not null
              */
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;


commit;


merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
 --  , kto.kontonummer, kto.gegenkonto, kto.ustkonto,ll.habenkto, ll.sollkto, ll.ust_kto_h, ll.ust_kto_s,ll_main.habenkto, ll_main.sollkto
   from imp_kontenblatt_2018 kto 
     join  (select * from t_lex_long where split_nr <> 0) ll   on    ll.fk_relation_main = kto.fk_relation
     join (select relation, fk_relation_main, habenkto, sollkto from t_lex_long where relation = fk_relation_main and flg_split_buch =1) ll_main on ll_main.fk_relation_main = ll.fk_relation_main
    --where kto.kontonummer = ll.sollkto and gegenkonto = ll_main.habenkto and kto.ustkonto = ll.ust_kto_s
    where kto.kontonummer = ll.ust_kto_s and kto.gegenkonto = ll_main.habenkto and nvl(kto.sollbetrag_eur, kto.habenbetrag_eur) = ll.ust_eur

   /*
     -- and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) )
      --    and    ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))

             and ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
              and ll.split_nr is not null
              */
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
and kto.split_nr is null
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr,
   t1.flg_split_buch = 1;
   commit;


   merge into imp_kontenblatt_2018 t1
 using (
   select kto.id, ll.split_nr
 --  , kto.kontonummer, kto.gegenkonto, kto.ustkonto,ll.habenkto, ll.sollkto, ll.ust_kto_h, ll.ust_kto_s,ll_main.habenkto, ll_main.sollkto, nvl(kto.sollbetrag_eur, kto.habenbetrag_eur) ,ll.ust_eur, ll.relation, ll.fK_relation_main
   from imp_kontenblatt_2018 kto 
     join  (select * from t_lex_long where split_nr <> 0) ll   on    ll.fk_relation_main = kto.fk_relation
     join (select relation, fk_relation_main, habenkto, sollkto from t_lex_long where relation = fk_relation_main and flg_split_buch =1) ll_main on ll_main.fk_relation_main = ll.fk_relation_main
    --where kto.kontonummer = ll.sollkto and gegenkonto = ll_main.habenkto and kto.ustkonto = ll.ust_kto_s
   -- where buchungsnummer = 2171

    where kto.kontonummer = ll.ust_kto_s and kto.gegenkonto = ll_main.habenkto and nvl(kto.sollbetrag_eur, kto.habenbetrag_eur) = ll.ust_eur

   /*
     -- and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) )
      --    and    ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))

             and ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
              and ll.split_nr is not null
              */
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.split_nr = t2.split_nr;
   commit;

   merge into imp_kontenblatt_2018 t1
 using (
   select distinct kto.id
   --, ll.split_nr, ll.jahr
   from imp_kontenblatt_2018 kto 
  join t_lex_long ll on
   ll.fk_relation_main = kto.fk_relation
    and ll.flg_split_buch = 1
 /*
select  kto.id , max(ll.split_nr) split_nr
from imp_kontenblatt_2018 kto 
 left join t_lex_long ll 
   --on  substr(relation,instr(relation,'/')+1,instr( substr(relation,instr(relation,'/')+1, length(relation)),'/')-1) = kto.buchungsnummer
   on   
   ll.fk_relation_main = kto.fk_relation
        and  ((( ll.habenkto= kto.kontonummer  and ll.sollkto= kto.gegenkonto) or ( ll.sollkto= kto.kontonummer  and ll.habenkto= kto.gegenkonto)) 
             or ((ll.ust_kto_h = kto.kontonummer and kto.gegenkonto = ll.sollkto or ll.ust_kto_h = kto.gegenkonto  and kto.kontonummer = ll.sollkto))
             or ((ll.ust_kto_s = kto.kontonummer and kto.gegenkonto = ll.habenkto or ll.ust_kto_s = kto.gegenkonto  and kto.kontonummer = ll.habenkto)))
group by kto.id
*/
   ) t2 on (t1.id = t2.id)
   when matched then 
   update set t1.flg_split_buch =1;
   commit;

   select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr,
        id

        from (select * from imp_kontenblatt_2018 where belegdatum is not null ) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
        and arb.jahr <> bel.jahr
        and kontonummer = '2102'
        --and kontonummer = '02102'

insert into t_rel_lex_kto_bel (fk_inp_belege_all, fk_relation)
select pk_inp_belege_all, comm_sonstiges
from inp_belege_all
where fk_abl_ordner_page = 2861
;


insert into imp_kontenblatt_2018 (
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
BELEGDATUM,
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
SOLLBETRAG_EUR,
HABENBETRAG_EUR,
USTKONTO,
UST
,
jahr,
kst,
ktr
)

select
BUCHUNGSNUMMER,
KONTONUMMER,
KONTOBEZEICHNUNG,
to_date(belegdatum,'DD.MM.YY HH24:MI:SS'),
BELEGNUMMER,
BUCHUNGSTEXT,
GEGENKONTO,
to_number(replace(SOLLBETRAG_EUR,'.','')),
replace(HABENBETRAG_EUR,'.',''),
USTKONTO,
UST
,
2019,
kst,
ktr
from imp_kontenblatt_2019_2;


merge into imp_kontenblatt_2018 t1
  using (
        select distinct pk_arbeitstage, 
        belegnummer,
        buchungsnummer, 
        bel.jahr

        from (select * from imp_kontenblatt_2018 where belegdatum is not null and fk_belegdatum is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.belegdatum,1,10), 'DD.MM.YY')= arb.datum 
         ) t2 on (
         t1.belegnummer = t2.belegnummer and
         t1.buchungsnummer = t2.buchungsnummer and
         t1.jahr = t2.jahr


        )
        when matched then
        update set t1.fk_belegdatum= t2.pk_arbeitstage;
        commit;



update  imp_kontenblatt_2018 set Kontonummer = '0' || kontonummer where length(kontonummer) = 4;
commit;

update  imp_kontenblatt_2018 set Kontonummer = '00' || kontonummer where length(kontonummer) = 3;
commit;


update  imp_kontenblatt_2018 set gegenkonto = '0' || gegenkonto where length(gegenkonto) = 4;
commit;

update  imp_kontenblatt_2018 set gegenkonto = '00' || gegenkonto where length(gegenkonto) = 3;
commit;

select * from t_lex_long where jahr = 2020 and periode = 1


update t_lex_long set fk_steuer_monat  = 61  where jahr = 2020 and periode = 3;
commit;

fk_steuer_monat number, fk_steuer_voranmeldg number, 


select * from t_steuer_monat where monat = 3 and jahr = 2020

merge into imp_kontenblatt_2018 t1
 using (
        select ktbl.id, max(ll.fk_steuer_monat) fk_steuer_monat
        from imp_kontenblatt_2018 ktbl
          left join t_lex_long ll on ktbl.fk_relation = ll.fk_relation_main
        where ktbl.jahr = 2020
        group by ktbl.id
        ) t2 on (t1.id = t2.id)
when matched then 
update set t1.fk_steuer_monat = t2.fk_steuer_monat;
commit;

select * from kas_kasse where jahr = 2020 and substr(datum, 4,2) = '01'

 update kas_kasse set fk_steuer_Monat = 61 where jahr = 2020 and substr(datum, 4,2) = '03';
 commit;



update t_lex_long set fk_steuer_voranmeldg = 69  where jahr = 2020 and periode = 2;
commit;

fk_steuer_voranmldg

select * from t_steuer_voranmldg

67
68

select  substr(buchdat,1,10), count(*) from t_lex_long where jahr = 2020 and periode = 1 and substr(buchdat,1,10) <= '2020-02-07'   group by substr(buchdat,1,10)

update t_lex_long set fk_steuer_voranmeldg = 68 where jahr = 2020 and periode = 1 and substr(buchdat,1,10) > '2020-02-07';
commit;

merge into imp_kontenblatt_2018 t1
 using (
         select ktbl.id, max(ll.fk_steuer_voranmeldg) fk_steuer_voranmeldg
        from imp_kontenblatt_2018 ktbl
          left join t_lex_long ll on ktbl.jahr  = ll.jahr and ktbl.buchungsnummer = ll.nr and ktbl.belegnummer = ll.belegnr
        where ktbl.jahr = 2020
        group by ktbl.id
        ) t2 on (t1.id = t2.id)
  when matched then 
update set t1.fk_steuer_voranmeldg = t2.fk_steuer_voranmeldg;
commit;

merge into imp_kontenblatt_2018 t1
 using (
         select ktbl.id, max(ll.fk_steuer_voranmeldg) fk_steuer_voranmeldg
        from imp_kontenblatt_2018 ktbl
          left join t_lex_long ll on ktbl.jahr  = ll.jahr and ktbl.buchungsnummer = ll.nr and ktbl.belegnummer = ll.belegnr
        where ktbl.jahr = 2020
        group by ktbl.id
        ) t2 on (t1.id = t2.id)
  when matched then 
update set t1.fk_steuer_voranmeldg = t2.fk_steuer_voranmeldg;
commit;


select * from kas_kasse where creation_date <= '07.02.2020' and  jahr = 2020 and substr(datum, 4,2) = '01'

update kas_kasse set fk_steuer_voranmeldg = 67 where creation_date <= '07.02.2020' and  jahr = 2020 and substr(datum, 4,2) = '01';
update kas_kasse set fk_steuer_voranmeldg = 68 where creation_date > '07.02.2020' and  jahr = 2020 and substr(datum, 4,2) = '01';
update kas_kasse set fk_steuer_voranmeldg = 69 where  jahr = 2020 and substr(datum, 4,2) = '02';
commit;


END PKG_STEUER;


/
--------------------------------------------------------
--  DDL for Package Body PKG_STEUER_NEU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_STEUER_NEU" AS

procedure p_set_arbeitstag as
begin
    merge into t_steuer_monat t1
      using (
            select pk_arbeitstage, 
            pk_steuer_monat

            from (select * from t_steuer_monat where faelligkeitsdatum is not null and fk_faelligkeitstag is null) bel,
              t_arbeitstage arb
            where  to_date(substr(bel.faelligkeitsdatum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (t1.pk_steuer_monat = t2.pk_steuer_monat)
            when matched then
            update set t1.fk_faelligkeitstag= t2.pk_arbeitstage;
            commit;

    merge into t_steuer_jahr t1
      using (
            select pk_arbeitstage, 
            pk_steuer_jahr

            from (select * from t_steuer_jahr where faelligkeitsdatum is not null and fk_faelligkeitsdatum is null) bel,
              t_arbeitstage arb
            where  to_date(substr(bel.faelligkeitsdatum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (t1.pk_steuer_jahr = t2.pk_steuer_jahr)
            when matched then
            update set t1.fk_faelligkeitsdatum= t2.pk_arbeitstage;
            commit;


    merge into t_steuer_jahr t1
      using (
            select pk_arbeitstage, 
            pk_steuer_jahr

            from (select * from t_steuer_jahr where mahndatum is not null and fk_mahndatum is null) bel,
              t_arbeitstage arb
            where  to_date(substr(bel.mahndatum,1,10), 'DD.MM.YYYY')= arb.datum 
             ) t2 on (t1.pk_steuer_jahr = t2.pk_steuer_jahr)
            when matched then
            update set t1.fk_mahndatum= t2.pk_arbeitstage;
            commit;
end p_set_arbeitstag;

END PKG_STEUER_NEU;


/
--------------------------------------------------------
--  DDL for Package Body PKG_VERPFL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."PKG_VERPFL" AS

procedure p_set_datum as
begin


merge into t_verpflegungsmehraufwand_det t1
  using (
        select pk_arbeitstage, 
        pk_verpflegungsmehraufwd_det

        from (select * from t_verpflegungsmehraufwand_det where DATUM_VERPFMWED is not null and fk_DATUM_VERPFMWED is null) bel,
          t_arbeitstage arb
        where  to_date(substr(bel.DATUM_VERPFMWED,1,10), 'DD.MM.YYYY')= arb.datum 
         ) t2 on (t1.pk_verpflegungsmehraufwd_det = t2.pk_verpflegungsmehraufwd_det)
        when matched then
        update set t1.fk_DATUM_VERPFMWED= t2.pk_arbeitstage;
        commit;

end p_set_datum ;    

procedure p_add_bel_to_verpflegungsmehraufwd_det_pers_vor_ort as
begin
        insert into  t_rel_verpfl_beleg_src (fk_verpflegungsmehraufwd_det, fk_inp_belege_all, creation_date)
        select 
        --distinct pk_arbeitstage, 
        distinct
        pk_verpflegungsmehraufwd_det,
      --  jahr,
        pk_inp_belege_all,
        sysdate

        from (select * from t_verpflegungsmehraufwand_det ) bel 
         join  t_arbeitstage arb on bel.fk_datum_verpfmwed = arb.pk_arbeitstage
         left join inp_belege_all inp on inp.fk_arbeitstag = arb.pk_arbeitstage
       where jahr = 2018 and persönlich_vor_ort  = 1;
         commit;
end p_add_bel_to_verpflegungsmehraufwd_det_pers_vor_ort ;

procedure p_add_new_days_to_verpfmehraufwd_as_det  as
begin
insert into t_verpflegungsmehraufwand_det (
datum_verpfmwed,
fk_datum_verpfmwed,
fk_verpflegungsmehraufwand
)
select  arb.datum,
pk_arbeitstage,
ver.pk_verpflegungsmehraufwand
from t_verpflegungsmehraufwand ver
 left join t_arbeitstage arb on ver.fk_monat = arb.monat and ver.fk_jahr = arb.jahr
 left join t_verpflegungsmehraufwand_det ver_det on ver_det.fk_verpflegungsmehraufwand = ver.pk_verpflegungsmehraufwand and arb.pk_arbeitstage = ver_det.fk_datum_verpfmwed
 where ver_det.pk_verpflegungsmehraufwd_det is null;
 commit;

end  p_add_new_days_to_verpfmehraufwd_as_det  ; 
END PKG_VERPFL;


/
--------------------------------------------------------
--  DDL for Package Body SAMPLE_DATA_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."SAMPLE_DATA_PKG" as
function varchar2_to_blob(p_varchar2_tab in dbms_sql.varchar2_table)
    return blob
is
  l_blob blob;
  l_raw  raw(500);
  l_size number;
begin
  dbms_lob.createtemporary(l_blob, true, dbms_lob.session);
  for i in 1 .. p_varchar2_tab.count loop
    l_size := length(p_varchar2_tab(i)) / 2;
    dbms_lob.writeappend(l_blob, l_size, hextoraw(p_varchar2_tab(i)));
  end loop;
  return l_blob;
exception
  when others then
    dbms_lob.close(l_blob);
end varchar2_to_blob;  
procedure delete_data is
begin
  delete demo_product_info where product_id <= 10;
  delete demo_customers where customer_id <= 10;
  delete demo_states;
  delete demo_constraint_lookup where constraint_name in ('DEMO_CUST_CREDIT_LIMIT_MAX','DEMO_CUSTOMERS_UK','DEMO_PRODUCT_INFO_UK','DEMO_ORDER_ITEMS_UK');
end delete_data;
procedure insert_data is
  i           dbms_sql.varchar2_table;
  j           dbms_sql.varchar2_table default wwv_flow_api.empty_varchar2_table;
  l_blob      blob;
begin
  -- Table: DEMO_PRODUCT_INFO - Product 1
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB00840009060610100F120D12140F130F1210171510141410100F1410101410151614101414171B261E1719231912121F2F2023282C2C2C2C151F31353C2A35262B2C2901090A0A0D0A0D190C0E1A';
  i(2)  := '291E1C1829352929292934292C29292934302C3435292929292C3229292C2E30292C2A2929292929292A34342929292A362934293229FFC00011080068006803012200021101031101FFC4001B0000020301010100000000000000000000000502030401';
  i(3)  := '0706FFC400381000020102030406060A0300000000000000010203110412210531415161718191B1D113162252A1C10632627292A2B2E1F0F1144253FFC40014010100000000000000000000000000000000FFC400141101000000000000000000000000';
  i(4)  := '00000000FFDA000C03010002110311003F00F71000000038DD80CD8DDA54E8FD7767C12D5BEC17FAD14F8467F0425C52752ACE6EEEF2D38E9C2DD962FA7B39DAFBBAD80D7D6487B92EF45B4B6FD27BD4A3D6AFE026A5826DB5C8B6585CBBD3F15F003E96';
  i(5)  := '9D55259934D3E28909F62D55193A775AACCB5E4D2D3BFE0380000000000000000306D1C7BA6D452576AF77C3B05D3AB29272936F46D747616ED377AAD72497CFE6432E8D74018B0352DEC9B65BB4304A8B8BB9BE35565CCDA4B9B028A2E4E4D6693CBBD7';
  i(6)  := 'A3CA9DD70935AF6335CEAA8ACCC850C5427B9AEADCFAEDBCCB8F9DD018A9576EBA9BD13BAB2E09AD3E23AA1899C773D393D50A30D45B9C5F292F11C4D00D30D5B3C54B7735C9A2D316CD96928F4DFBFF00A368000000000009314AF526FED782488C5D8E';
  i(7)  := 'D4FAD2FBCFC59D4C0C98DC5C29ABCB7BDD15AB9752153C0E2312D395E953E09DD59756F6FA47F0A714DB495DEF7C7BC9E6E2025AFF0047249274E6EEB726EDF14729CEB474AD09597FB2D7BEDBC76AA0019B096D24ACD741A991549277B24FA34BF5F326';
  i(8)  := 'C0BF02ED3EB88C05D4349C7AFC50C4000000000004553EB4BEF3FD4C89D9BF6A4BED3FD4CED80132C488E43B18D80924EFC2D6D02DA9240076C409391C881645D9A7C9AF1198AA5B86917749F34074000008CE564DBDC95DF612336D0A96A72E9D3BC04C';
  i(9)  := '9712CBD8AA555477FF003F972553556E7A77BB0175395D26F7D89A2BB924C0929ABDB4BF207239955EFC4E30244A2884592B81218619DE11EAF016A66FC14BD8EA6FC6FF003034000000BF6C26E31D6DED6EB2D74180AB6CD4D631E86FBFFA0174AF75C5';
  i(10) := '5F57A69F02CBF1E9F995FA65C5A5DA5753190D1668DDB56575CC0D8892650EB1CFF200D2A471B323C747364E3FB5CB3D381A1324999957458AA202D36ECE96925D37EF5FB0BB31B366CBDA6B9AF07FB80C40000059B536142BC94DB926959DB5BAE1D0B8';
  i(11) := '80018BD49C33DF9DF6C57C8ED3FA13858C9497A44D3BA7996FEE000362D814FDEABF89791C7F47E973A9F897900010F56695F366AB7FBCBC89FABD4FDEABF8A3E47000EFABF0F7EA77C7C816C08FBF53F2F9000125B157FD2A7E5F22DC2ECEC92CD9E4F4';
  i(12) := 'DCD25E00006D00003FFFD9';
  l_blob := varchar2_to_blob(i);   
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(1, 'Business Shirt', 'Wrinkle-free cotton business shirt', 'Mens', 'Y', 50, l_blob,'image/jpeg','shirt.jpg',systimestamp,'Top seller');
  -- Table: DEMO_PRODUCT_INFO - Product 2
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB004300090607080706090807080A0A090B0D160F0D0C0C0D1B14151016201D2222201D1F1F2428342C242631271F1F2D3D2D3135373A3A3A232B3F443F384334393A37FFDB0043010A0A0A0D0C0D';
  i(2)  := '1A0F0F1A37251F253737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737FFC00011080068006803012200021101031101FFC4001C00010100020301010000000000000000000007';
  i(3)  := '01050406080203FFC4003D1000010303000507080807000000000000010002030405110607122141132231516171A123328191B1B2C1D11415174273A2C2E1083552626392F0FFC400160101010100000000000000000000000000000102FFC400161101';
  i(4)  := '010100000000000000000000000000000131FFDA000C03010002110311003F00B822220CAC2220D36995DA6B168B5CEE94DC919A969DD2462504B4BB8038238A81FDABE9954641B9450FE15247F1055135FF00719A9F4628A82225ACADAA025238B58368';
  i(5)  := '0FF6D9F528640730B2403EF7387664FCD54AED726B0F4B651CFD20ABC7F8E28DBEC62F96699E9387B2575EAE2F0241CD339009E9C1031B968E2635B308F1B8B3687FDE80BF6899B54F82778760F7E4223D4764B9C379B4D2DC69811154461E03BA47583D';
  i(6)  := 'C7217394E75275D24D63ADA17BB69B4B51B51E4EF0D78CE3D60FAD519468E288880888832B088832B0888239FC424DB42CB4CDE91CAC9E2C1F351DA3CF9685E31839C761562D7DC61D5D65706E5DC94C0F7658A3F2F92AB8DFD01C0B4FB5547323396C2F';
  i(7)  := 'FBCD3B2572E2DCF76EDC4839EA2B894FE71683CD3BD72C1C222A1A8E90FD3EF118E83144EF5177CD57148F519138D65E26079A2389847692E3F055C5161C5111144444044441958444126D7B47E52C737E3B3DC2A3978E646D9319C387B55B35EACCDBAC';
  i(8)  := 'F2637B6A9EDCF7B3F6516BC0CD13B72ACD628DD9D82B9A3A16AE85FE4D87B96CDDB813D43A0A0ADEA24E692F3BBA278C7E52AA6A5DA88C1B65DDE38D4B3DC55151A87144440444419584441958444130D7A39FF565A1A3CC354F27BC3377C546AB5BB701';
  i(9)  := '6F5E7D8AD3AF28F6ACD6C7EEE6D59DD9FEC2A31543C91559BAD4D01CD3E388385B57CC1A59B5E6BDBD5C56A2DC41E51B9FBCB6407290341192C38282CFA85FE4F750785537DC0AA2A57A8527EADBBB0F0A867BBFB2AA28D1C511101111011110111104E3';
  i(10) := '5DF1ED582DF2648D9ACC77E58EF928A551E663AD5AB5E240D1FB70E3F4E1EE3944EA5D81E8552EB596EA771A7AA9D993C94CC616F0E7079CFE55B2A576D31E47A5A46F053472865ABB1E90CF1F4518A79DDDA36DCD3E0E27D0BE58ED97646F0E6EF088B0';
  i(11) := '6A19F982F6D3B9DCAC2EC7616BBE4AAEA23A89AA2DD23B8D2ED1C4B461E476B1E07EB2ADCA35044E28808888088880888826FAF16E6C16E775568F71CA1F5AE3E66CEF20E30AE5AF1648746289EC692195AD2E3D5CC763C5445A4020CCE193D00AA9544D';
  i(12) := '5058C4FA15A5B34806DD631D4C3233B21B1923C5FE0A774F87C63686F6F4772B16A29CDAAD19BCC61C365D5EE6EEE039360524A8A47DBEE1514736E929DEE89DDED38F820EE1A9D70834F2368CE65A595BEC77E957D5E78D5538FDA1DBC0DFCD941EEE4D';
  i(13) := 'CBD0EA1044E288A222202222022220D6692D961D21B1D55AAA5EE8E3A86805ED0096E0820EFED0BA041A94B609335177AD7B3FA636319E3BD110774D12D11B5E89524F4F6A13113C9CA4AF9A4DA738E303A87829A6976ADB48AB748AB6BA823A49A0A99D';
  i(14) := 'F2B713ECB9A09CE08701E194441D87579AB67D86E02F177A80FAE667918A17E591ED3483B471CE3BFB876AA422202222022220FFD9';
  l_blob := varchar2_to_blob(i);
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(2, 'TroUSERSs', 'Black troUSERSs suitable for every business man', 'Mens', 'Y', 80, l_blob,'image/jpeg','pants.jpg',systimestamp,'Top seller');
  -- Table: DEMO_PRODUCT_INFO - Product 3
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB00840009060614120D1513131413131216141319111815111015121917131016191C151714181B281E23192F1F18141F302025332C2E2C2C151E3135312A35262B2D2B01090A0A0505050D05050D';
  i(2)  := '291812182929292929292929292929292929292929292929292929292929292929292929292929292929292929292929292929292929FFC00011080068006803012200021101031101FFC4001C0001000203010101000000000000000000000708030406';
  i(3)  := '050201FFC400351000010401010505060505010000000000010002031104210506071261223151819113144171A1C123324392B142647293A233FFC40014010100000000000000000000000000000000FFC4001411010000000000000000000000000000';
  i(4)  := '0000FFDA000C03010002110311003F009C511101111011110112D1011110111101111011110111783BF596E8B6564BD8E2C7888F2B81A20920687C7541A5BC9C4AC4C371612E9651A164601A3E0E71340F4D4F4514EF8F1632725CCF60E7E2B1A6F96391';
  i(5)  := 'DCCEB03F3BC575D171D24C4AD3BB76A83AB3BFF9FC95EF330EFD7DAB89A23AEB6BDFDC8E2BC98D23D99B24D910BAB90E8F9186CDEAE365BD2FE4A3FBD3C96A4F26B682D26EFEF9E266FF00E1287380B2C702C900F1E576A4751617B6AA7ECCCF7C523648';
  i(6)  := 'DC58F69B6B9A688215A6D959264C68A4356F8E371AEEB730135EA8369111011110111101729C5198376264DE96D601D4BA660A5D5A8DB8E79FCBB3E28EF592606BC446C77D2DCCFA2083DC7BD602F5FBA97BA8121ADED1AD06A059F335E6B137BD0666CD';
  i(7)  := 'A57A2C6C1657E35A49F8681656328A0CC0D05677727239F64E23BBEF1E2FF98C0FB2AB934BDB68E97EA558AE10ED0126C689A3BE27491BBE7CE5E2BA53DA83B4444404444044440506F1CB69876D08E30EE61143AB41069D23C937D794314E45560DFBC8';
  i(8)  := 'F69B5B2DE5BFAF2015A68C7726BFB50696CBC6BC0CD97E03DD1BD2DF90E35E8C5E3C2755D5ECF84B777326420812E763B584F71F6513DC6BE56E5CB3020C910EF3D7EC17D386ABE623A1F9EBE817EFB3B283676B6CCE4871721BF9656CCC759FD482675E';
  i(9)  := '9E1C8F8BEAA46E06EDD7372DF8C4FE1CAC2F68B341F1D6A0756DDFF88F05C7E4623A4D881C0170C6CCED559A66542059F06F3C4DF37AD8E1965166D9C53757272FEF639B5F541659111011110111100AABFBE7D9DAB983FB99FEB2B8FDD5A05136D5E104';
  i(10) := 'F93B4B22674B1450C92B9CDA0E7C946BFA680BF341CE6F8B9B1EEE6CA89BA07B1F2B878B8B4127D6477AA8EED485C5E8C43362E1B5C5CCC7C46004D5DB9CE166B4BA635472F7A0FA8C9D7E67ECB235DAAD780F67CCFF000164E641DBEE8D3F62ED66135F';
  i(11) := '818EF1F1D6395EEFE43479AF1772EC6D3C4D35F79C7AFF007B175BC0DC664B939714AD6BE37E3B439AE16D2D12EB63CD762383D1C5B460C9C690B6264CC7BE292DD41A6FF0DFDFDE068EF54123A22202222022220222208B7899C2D9B3324E563BDAE716';
  i(12) := '35AF8DE794F60502C777791AF9EAA28DA9B859F09224C49FE6D8CC8DFDD1D856A51055B878759DEE2FCA38F20635CD1CA58E1316906E411D73728ECEBD6FB812B1ECEDC7CE9B56624E47898CB1BEAFA0AD42208B3847C3DCAC2C8972324363E78BD9B181';
  i(13) := 'E1CFD5ED7173B97B23F2D55FC7E0A534440444404444044440444404444044440444404444044441FFD9';
  l_blob := varchar2_to_blob(i);
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(3, 'Jacket', 'Fully lined jacket which is both professional and extremely comfortable to wear', 'Mens', 'Y', 150, l_blob,'image/jpeg','jacket.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 4
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB0084000906061010101512131215141316151214171614181A1417171719161815181C1A121720261F172525191713212F202428292C2D2C171E3135302A3529372C2901090A0A0E0C0E190F0F1A';
  i(2)  := '2C241E222D2A2D2F2C3535352C352E2D2F2934292929352B2A2B3535352A2C29292C2A342D2C29342C2D2C2C2C2C292C2C342C2C352CFFC00011080068006803012200021101031101FFC4001C0001000203000300000000000000000000000607030405';
  i(3)  := '010208FFC4003710000103020304060806030000000000000100021103041221310741517105061361A1C122233242728191B11492A2A3B2D1526282FFC4001A010100020301000000000000000000000000030602040501FFC400271100020202020003';
  i(4)  := '090000000000000000000102030411051221314113224251618191E1F0FFDA000C03010002110311003F00BC5111004444011141FAC1B55B6B5B936EDA6EAA5BED39AE01A1D3184647111067E8BCDE892BAA76BD416C9C22AEAA6D928013F877FE613E22';
  i(5)  := '254CBA03AC142F688AD45D2D3A83939A6261CDDC5134CCEDC6B6A5B9C7474D1117A40111100444401111005C3E9DEB8DA599C351E4BE27031A5EE83A4C64D983A90BB657CFDD2DD2A6ADCD4AC7DAA952A3A383412D689F85AD1F258C9E8DEC1C659136A4';
  i(6)  := 'FC1124EB46D66E1CC70A34FB1A64118DDE95523491193350273EE2A056142BBDA5CF034903780738E3BF7AE81AA5D2665A72EF1CD65B7799D00CA26758EE50B932D3461D54BF70E50E44F70D4ACDD03D64BCB0AC1C3D597000080585B3935EDEEDC7519F';
  i(7)  := '195BF6B4435F53862007289F3F058AF28626E1DE41FAEE45226BA88DB1D48B2BA2F6B54B26DCD1753397A74FD630EE397B4DCFE2E6A776B74CAAC6D4638398E01CD70D082A84B6A62A31BC3D1EF22449F35676CDAEBD53E8C9863839B3B83B51F513FF00';
  i(8)  := '4B38CF6F4CE0721C742A83B6BFC133444529C108888022220305FDD0A549F50890C63DF1C7082EF25F33BEB132749CE3C4F8AFA33ACD6B56AD9D7A5440351F49EC6C9812E1875E44AA3BA5FA917F6F4DCE7DB54710DD698ED47EDCC6BC372C2475F8D946';
  i(9)  := '3DB6F4CF4A00B9808C21AE683DFDFE2BDC320653C6777D1712C6EF0B58D20E33220FBB2E20E474D4A945D570D69F467700B5DAD168AAC528ED1A93C0CCC67A2C8FA1886872D0C792F177488C21870983A18CF285B02BBC522E3ED0827CD784DB39D60C75';
  i(10) := '3AC448C265E3B88D72E4E2A7BB3CBD06EC86990EA6F197169698F979AAE9B56E2E6E0368D17D47B2A104526927B39D491ECE8333C558DD5DEA5DF50BBA35C06D3A6D3EB18F7CB9C1C0830D6820113C46614B18BDA672B3AFAFD8CE0DADFC8B291114E53C';
  i(11) := '222200888802222028DDA7D916F4D623A3E95178F94B3EED586A36699E454C76B960C9B6AF3E98754A51C5A407EBDC5BFACA81DDDC3832018DC56BD9E65BF8B96F1D337A98070F2FE97B5564D3A83FD4FF006B0503EC99990392DCA6062238823C14475B';
  i(12) := 'D0E9EC72CCFE32F2A6EECEDC7CDF2E3FC55B4141F6516EC6DBD53EF9AB0EE4D680DFBB94E56DC7C8A3E7BDE44C2222C8D208888022220088BC140553B55E95C7774E8839526623F13E0F835ADFCCA1784B839DBA16CF58EEFB6BCB8A9C6AD48F85AE2C1F';
  i(13) := 'A405AF484D277082B5E4FC4B9E157D298C7E86D3D863271D32E208EF596C6F7161275DEB568BE1E1A4983946FDDC744AB43B27EB91321466FEFD49FECE2F705C56A07DF870E627C89FA2B182A8FABF5B0DD51AA379603C89C3F6255B816C56F68AAF2F57';
  i(14) := '4BFB2F897E8222290E38444401111005E095E57822501F383BD22493AB9C4FCCCAF5AD5096963781FB2B96E7661D1EF74863E9F731E437E4D7481C864B09D93F479D7B523876900F380A1E8CB24394A5475A65436D544B49DD9C9D4F32BB97943188CB16';
  i(15) := 'A2558CCD96F470F71F1FE38CC7DA7C56C376756000182A40F67D63FD1E466578EB6C9A3CC511F069FF007DCAEFA1AA10583396BDBFC82BA82E359F53ACE910452920C82F739F9F18263C17682CE11EA72391CC8654A2E09AD0444521CC08888022220088';
  i(16) := '8802222008888022220088880222203FFFD9';
  l_blob := varchar2_to_blob(i);      
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(4, 'Blouse', 'Silk blouse ideal for all business women', 'Womens', 'Y', 60, l_blob,'image/jpeg','blouse.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 5
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB004300090607080706090807080A0A090B0D160F0D0C0C0D1B14151016201D2222201D1F1F2428342C242631271F1F2D3D2D3135373A3A3A232B3F443F384334393A37FFDB0043010A0A0A0D0C0D';
  i(2)  := '1A0F0F1A37251F253737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737FFC00011080068006803012200021101031101FFC4001C00000104030100000000000000000000000002';
  i(3)  := '03070801040506FFC4003C100001030203020A0803090000000000000100020304110506210731121314617182A1B1C1C222324151728191D2335292424554738394A2B2D1FFC40014010100000000000000000000000000000000FFC400141101000000';
  i(4)  := '00000000000000000000000000FFDA000C03010002110311003F009C508420179BC633B60D83626FC3EBE49992B1AD7173622E68B8B8DDAF62F48ABBED0AB5D579BB1491AE04366318E8600DF04131479FB2C49FBD58CF8E37B7BDAB6E3CDD9724F571BA';
  i(5)  := '0EB4ED1DEAB63A57FB7BD20CEFE7FAA0B3273565E1BF1CC3BFB967FD4D3F38E5B60BBB1CA03F0CC0F72AD3CA1C3DFF00558E3DF6B0EF4162E6DA1656886B8AB5FF00CB89EEEE6A5E0F9EB03C67128B0FA09667CD28716F0A12D1A024EA7982AE8C91C5BA';
  i(6)  := '903E6BB993AB8D0E67C2EA4BF82D654B0388FCA4F04F61282CAA10840210840210840DD44AD8209267FAB1B4B8F40175576BA674F5124CF37748E2F71E726E558CCE953C932A62B28363C99ED1D2E1C11DEAB74C7D22835DE9052DC9B28125BEE40D12BD';
  i(7)  := '8B0832D3AAD984906ED363EC3CEB5427E2DE82D2E0F58310C268AB01BF1F0324FAB415B8BC9ECB6AF9564AA104DDD097C27AAE36EC217AC40210840210841E3B6AF51C464E9D80DB8E963676F0BCAA0294EAA69DB55470306A082FF89505FF00A5A47994';
  i(8)  := '2B26F40D9DE9B725949720C0DCB077AC8DC90E3AA0504F446C994E30A09BB62753C66055D4C4EB1557087439A3C5A548CA21D86D4DABB14A527D7863900F8491E60A5E40210840210841126DB6A2F5B86D37E485EF3D62079545321520ED86A38DCD463B';
  i(9)  := 'FE153C6DEF779947B2A045D61601438A049364D9372B2F49BA07014E34EA99BA5B5C8241D8ED518338C71DF49E9E48FB03BCAA7855B367F55C97386132DEC0D43584F33BD1F32B2680421080421082BDED2AA394670C4DD7D1B2060EAB40F05E4252BB59';
  i(10) := 'AAA795660C4A606E1F552B874708AE1C9B90360A1C74491BD04E8812E29008BACBB7240DE81C26C02530A6DC74012A3D107470D9CD3564150D363148D907C883E0AD5B1C1EC6BDA6E1C2E3A154C8BD603DEAD0E57A8E5796F0BA8BDCC949113D3C11741D';
  i(11) := '44210804D554A20A696676E8D85E7E42E9D5C7CDF3F27CAD8B4B7B114920079CB48F1415B2A1C6491CF76F71B95AB22DE923209D345AAE8CD906B5B5582344F18CAC7166DA20D770D124356C188958E28A060EAEE64B60D53BC494A1111B9011FAC158CD';
  i(12) := '9854728C91869BDCC6D7C67AAF70EEB2AEEC88837B153BEC6DE5D949EC274655C807410D3E283DDA1084024C91B2563992B1AF63858B5C2E0FC90841C2C4325E5DC42E67C2A06B8FED420C47FC6CB8D36CB32E48EBB456463DCD9EE3B41421032ED9365E';
  i(13) := '3BA7C407F559F6A6CEC8F02FE3310FD71FD8842049D90E097D2BF10FAC7F6A50D91E0237D66207AF1FD8842075BB27CBA37CB5EEE999BE0D5B94FB33CAF08F4E8E698FBE4A87F8108420E952E4BCB74AE0E8B06A4E10D417B387FED75DD631B1B0323686';
  i(14) := 'B4681AD16010840A421083FFD9';
  l_blob := varchar2_to_blob(i);   
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(5, 'Skirt', 'Wrinkle free skirt', 'Womens', 'Y', 80,l_blob,'image/jpeg','skirt.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 6
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB0084000906061410101214121216151516141614181713141A1816141C141815151516151B1C1C26212320231F1E131F2F2C2F27292C2C2F161F3135303635282D2C2A01090A0A0505050D05050D';
  i(2)  := '291812182929292929292929292929292929292929292929292929292929292929292929292929292929292929292929292929292929FFC00011080068006803012200021101031101FFC4001C0001000202030100000000000000000000000607050801';
  i(3)  := '030402FFC4003D10000103020207040607090100000000000100020304110521060712314151712261819113233242A1B1145262C1D2E1F0243344547282B2C2D143FFC40014010100000000000000000000000000000000FFC400141101000000000000';
  i(4)  := '00000000000000000000FFDA000C03010002110311003F00BC51110111101111011110111101111011110140F583A78EA3F57016FA40369C5C2E1BC436DCF8F9298E295ED82192476E6349EBC8789B0F15AF98BE206A2491CF372F2E24F3BE6505ABA05A';
  i(5)  := 'CA662168A4D964F6BD87B3201BF66FB9C3336CF2CC1DF69C02B50A96B1D04B76B8B5CC75C106C4169B823C6C56C46ADF4FDB88C5B32102A236F6DA32DB1BBD2307CC7027910826C8888088880888808888088882BFD6D62A590C7103ED12F7746E4D1E64';
  i(6)  := '9FED54CBA5ED2B335BAEF5EDEE89B6F372AB2475B3418CC5E2ED0773C8F51F97C9756178D4B49511CD0BCB5EC21C08F88238822E08E457BE46FA46969F0EE3C160DF11B9B8B20DAED04D358F14A612B2CD7B6CD963BE71BBF09DE0FDE0A922D4AD0ED289';
  i(7)  := '70DA96CF11B8DCF65FB32378B4FCC1E0405B47A3F8F455B4F1CF0BB698F1C77B48F69AE1C083914192444404444044440444410ED6268D7D2610F68ED301BF7B7F254562942F89C438640FEAEB691CCB8B1556E99E0F1898B0D838E6D07DE0791E07AE5D';
  i(8)  := '37A0A4A69B657B288B26F686FC89E20F023F5CD7AF1EC00B412D19663A11BC77151FC2EB0C3280ECC6E2398E36F9F820CA55612633CC70206F521D5D69BBF0AA8B3EE69E42048DFABC048D1CC7C465CADDEEA5CAD7BB1D623967B9C147714A32D26F641B';
  i(9)  := '554954D958D7B1C1CD700E6B9A6E1C08B820AEE5436A9358BF4478A4A97FA97BBD5B9C7289C7813F549F239EEBABE1A5072888808888088880AB8D679D99E99DD07992D3F3563AADF5B86C694FDAFF0076A0C1CBA28F9E9E69E21B45993E203F78DB5DC5';
  i(10) := '9F6DB911CF31C55618BE12369AF6EEC9C08DC415B1FA0B1FECA4F391C7C834281EB2F43442E74D10F5523892D0328DE45DC07D97E67B883CC208668A5689186171CDA2EDBF2E5E17F885D7A47426DB43DDDFD387928E42F7472ED372734DC594D61C4595';
  i(11) := '515F739B9381E1CC1EA82BD94E7FAC95C1AA8D6B36CCA3AB7804766295C72EE63CFC8F0DDD2B0D20C3FD11ECFB27E1DC5606F641BA60AE56B7686EB9AAA89A23947D2221900F367B4726BB9771BABB343B4F69F138F6A2DA63AF62C900072B5F64836210';
  i(12) := '4951110111101569AE007F67205C037F27372BEEE0ACB5F2F8C11622FD73411DD01976A8C1D923B6EB6D0B5F71B8EECFE0B2D8D6182A6092277BED201FAA77B5C3A1B1F05ED01728356B48680C1507686C9CC11C9CD243879DFC9634BDF1BB6E3716B871';
  i(13) := '1C7B8F30AE1D6A68697174EC1D9766E23DC70CB68F7385BC41E6AAA9E89C066DBF7B730507C9C484E3B6D0D76E3B2323D415D35182C4FCC12C3F6736F913971E2B0F575258E22C4750BE63C71C3864833B4B81C6CB5C17FF0051ECF90FFAA59875596869';
  i(14) := '63B64B7D92DCB67A5940E2D261EF34AC8D2E95C4398EA105E1A3BAC4C832A8777A41C7AA9D53D4B6468731C1C0EE2372D68A7D2F86D62F1E2A41A3FAC2FA3BEF14991DED26ED77820BF1160F4634AE2AF66D466CE1ED32F9B7BC73088338888808888387';
  i(15) := '36EB0788683514F732534773C58360F9B6C88823188EA4A924BFA392688F2DA6C8DF27B49F8A8F566A1A41FBAAA89DDD2425BF16B8FC9110626A35215A3DDA67F491C3FC98BC6ED4A56FF2D1F84CCFC972883ACEA3EACFF0C3C2767E25CB3515567FF168';
  i(16) := 'EB3B7EE251104FF56BAB0930C99D2C92373616FA3639CE19DB371361E43C511107FFD9';
  l_blob := varchar2_to_blob(i);    
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(6, 'Ladies Shoes', 'Low heel and cushioned interior for comfort and style in simple yet elegant shoes', 'Womens', 'Y', 120, l_blob,'image/jpeg','heels.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 7
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB004300090607080706090807080A0A090B0D160F0D0C0C0D1B14151016201D2222201D1F1F2428342C242631271F1F2D3D2D3135373A3A3A232B3F443F384334393A37FFDB0043010A0A0A0D0C0D';
  i(2)  := '1A0F0F1A37251F253737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737FFC00011080068006803012200021101031101FFC4001C00010002030101010000000000000000000005';
  i(3)  := '07040608020301FFC400381000010303020404050204060300000000010203040005110621123141510713617114224281913252152362A12453637282D1A2B1F0FFC4001501010100000000000000000000000000000001FFC400141101000000000000';
  i(4)  := '00000000000000000000FFDA000C03010002110311003F00BC694A502A3EF979816280B9B749096194EC33B951EC91CC9F4159921E6E3B0E3CF2C21B6D254B52B92401924D7366B5D452F545E152DDE311C12988C7F968276DBF72B627D76E82836CD43E';
  i(5)  := '30CF7D6A6EC515B8AD720EBE02DC3EB8FD23FF002AD51EF10F55B8E719BDC849CE7094A123F01352965F0C6E72A22A7DF64B3658294F1295277584F729C809FF009107D2A22F0CE8C8414CDB9DBC5CDD1B79C5C6E3B5EE3282A3F81EF41296AF15F53C25';
  i(6)  := 'A7E2643139B1CD2FB4013FF2460FE73568E8EF11ED3A95C44573306E0AE4C3AAC870FF0042BAFB1C1F4AE715A92164A028273B027247DF033F8AF685F25209041C820E08A0EBFA5555A07C5186AB6B70F54CA2D4969410996B4929713D0AC8E479824EC7';
  i(7)  := '19CE4D5A2C3ED48650F47710EB4B1C485A1414950EE08E741F4A52940A52940A52941A9F8A52171F43DC036A292F16D824765B894ABFB13505E186908ED369BFCF682DF7093112A1B348E5C7EE7A1E83DEA7BC52643FA12EA8512308429247421C491FDC';
  i(8)  := '57AD03A921DF74D32EB45B6DE88D25A92C0DBCB2918C81FB48191F8E60D055DE31EA67AE77D72CEC2CA6040504AD20ECE3D8C927FDB9007AE4F6AD023449535DF2A1C77A439FB196D4B57E003562F87F62B56B2D557E9376794EF95294FA2303C21D4AD4';
  i(9)  := '77279E0600C0EE3DAAEC83062DBE3A63C18CCC7653FA5B6501091F6141CCADE84D54F27891609D8FEA4041FC2883587334CDFADC92B99669ECA0735AA3AB847DC0C5756E053141C8C405455BA9C6C7814074CEE3FF005531A335A5D348CC4AA2AD4F4052';
  i(10) := 'B2F425ABE457729FDAAF51F7CD6F5E369B6AAEB6D851E2B0998E381729E6D094AD4951C2524F5E4A3BF2DBBD6ADAE7C3D9FA55DF3D2AF8BB6AD5C289094E0A09E4163A1EC46C7D0ED41D0563BB44BE5AA3DCADEE7991DF4712491823A1047420E411DC56';
  i(11) := '7D541E05CF71A7A7DA1649696D894D8FDA73C0AFCFC9F8AB7E814A52814A528237525B05E6C53ADDC5C26432A42547E957D27F38AE6885367D8AE725A0A7A2C81C6C3C1270A4F45248E447A1EC08E86BAA6B41F113C3C6751955CADA50C5D529C2B8B644';
  i(12) := '8039057657657D8F42029AD33709BA5EFF001AF36FFF0012D20F0BCDA0E0B8D1C71248E9D083DC0AE97B55CA25DADECCE80F25D8EF24292A1EBD08E87B8E95CBF3A14BB5CD7624D65C8F259570AD0AD8A4F3E9E841C8EF5F045DA75B9F0F4194F4774F35';
  i(13) := 'B2B2851F729C6683ACEA27545FE1E9BB3BD719CA1C28D9B6F382E2CF248FFBE8013D2B9FE1789FAB22A0245D14E8FF0059A42CFE48CFF7AC0D45AAE6EA87D976F8E38EF929E16DB688420773C38E67A9F4141F37E64CD51AB6338F28A9E992D0949DC6EA';
  i(14) := '524647618C63B003B57466ADBB592DD6A7DABF38DA997DB524C6FD4B781E894F3FBF21DC5739C290CC490DCA88D3A87DB3C4DBA5F21493DC70E2BD4B96F3E56E38AF995BA959DD5EE4EE7EF41657821143970BC5C30A094A1B6194A8E4A504A95BFAEC33';
  i(15) := '56ED695E13D8E459B4D71CC6CB4FCC73CE2DA861484E004823BEC4E3A66B75A05294A05294A05294A0ABBC66D28A99153A82DE83E7C64F0CB4A47EB687257BA77FB1F4AA8176DF8948217C0A1CF6C8AEAF5A429252A00823041EB5CEBA8D36987A9E6C1B';
  i(16) := '3B9C7110E14B791F2A55F52127A849D81F4237C6486A122D3263E0E50B4138E249D87BE6BE8DDA25A802128238B03857C5939C606399CED5B260293C2B190AE7BF3A92D1326DF68D4911DBCA95F02824B2E1C70B2E7D2A5FA0DFD8E0F21B4548DAFC22BE';
  i(17) := '3A10674B851527984953AA1F6C01FDEB7ED33E1D59AC6EA24B8173A5A082975F038507BA503607D4E4FAD6E092140149C83C88AFDAA85294A05294A05294A052958777B946B45B24DC26AF823C76CAD6473C0E83B93C80EE68350F153569B0DAC5BE03BC';
  i(18) := '3739A9212A49DD86F929CF7E89F5DFA550120FC9C29CA427F4E3E9C72A97BFDDE4DF2ED2AE737679F56423390DA07E940F403F2727AD43A905C74253939EDBD153167B8194DF03DF2BA9C8CE3F57B7AD4AFF000D7E4595FBA17984456E488BE5F998754B';
  i(19) := '201C84E318DF3B9E84F4AB4346787F0A1E915C1BB470A933807241070A688DD0127A14E739EE4F4AADF51D8DDD37777624A5A1C570F1B6E8C0E341C80A23A72208F7C6D8A827344F882AD36D356BBD87245BF931211BA981FB4A7994F6C72DC0C8C01724';
  i(20) := '394C4E8AD4A88EA1E61D485B6E20E4281EA2B951FB8625F98CA12AC0FA86C7D48AB07C2DD692ED2C26D52E3AE4C4528B8D96C7F319493F3AB840DD3939C6C79E33CAAA2F0A57869C43CDA5C69695A160292A49C8503C883DABDD0294A50294A502A9AF1A';
  i(21) := '7537C44C6F4F4458F2A390F4C20F35F3423EC3E63EA53DAACAD657E469BD3D2AE4A485B88012CB67EB715B247B6773E80D7324B79F9121D7E438A71F75656EAD5CD4A27249FB9A0FC52F35677849A3152A5A2F7716BF90C2B8994ABEB70723EC9E7FEEC7';
  i(22) := 'ED35AD787BA45FD4B754970291099214F383B761EA7FFB95744C58CCC48EDC78CDA5B69B484A109E400A0FAD69DADB4041D52EA257C4390E5A5210A75090B0B48E40A491B8CEC41FCED8DC6941CC8CE96B833A997654B28952DB7BCBF2D2ACA5C2372A51';
  i(23) := '1FA5183939DFA73ABBB49586169990F452C244996028C8E227CCC0DD033C80DC81FF0059397FC21367BDCCBD436CBBF19C3F14D0402A0075475CF529EBEE003273586AED6ECC77C0E24F1B1211BF02BE950EFBD061292BB0B8A71B495DAD64A96DA464C6';
  i(24) := '2772A48EA8EA47D3CC6D90269B5A5C4256DA8290A00A54939041EA2A2ED53E44982D7F106C4696DA0194927E549190483D8F0939E83D6B2AD51DA8D0D2861050D152968472090A513803A0DF974E541994A52814A52830EED6C877782E42B8309798739A';
  i(25) := '4F4239107A11DEAABBD784D304F6CDAA434F445AF07CF570ADA1F61850FC1F4A5282CDD3D658B61B5B5061A70840CA958C15ABA935274A50294A507E1008C1E551E2118921C7A338A432EE4B8D04F10E2FDC07427AF43CF9E495283CB514497788B3E547';
  i(26) := '18C85270B788E455D703B1DC9E7B7393A52814A5283FFFD9';
  l_blob := varchar2_to_blob(i);
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(7, 'Belt', 'Leather belt', 'Accessories', 'Y', 30, l_blob,'image/jpeg','belt.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 8
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB0084000906061412111514131415131316151B151716171814181512181A1815141B1C1E161A1C261E1819241914161F2F20232A292C2C2F171E3135302A35262B2C2901090A0A0E0C0E170F0F17';
  i(2)  := '2C1C1C1C2C2C342C292929292929292C2C2C2C2C2C2C29292929292929292C2C292C292929292C292C29292C2C292929292C35292C29FFC00011080068006803012200021101031101FFC4001C0000010501010100000000000000000000000304060708';
  i(3)  := '050201FFC40046100001030203040507060B09000000000001000203041105214106071231135161718122425291A1B1D114233293A2C11517435462637292B2D3F0162453647382A3C2D2FFC400160101010100000000000000000000000000000102FF';
  i(4)  := 'C400191101010100030000000000000000000000000111213141FFDA000C03010002110311003F00BC5789A60C6971E4D049EE02E57B4C31E9B8296777A30C8EF531C7EE4113A2DF561B21B748F60D1CE8DDC27C5B7B78D97521DE661AEE55910FDA25BF';
  i(5)  := 'C402CD94381C5281F49B90BD8DFDE14830BC368A21F3D46EAA1E936A658C91DAD02C7C08545F876F70FF00CF69BEB59F15F59B7340795653FD633E2A9E6E278735A4438231C7AE698BADE243DDEE509C7A0964771474915330694C5FEDE279B9F00A2B4D';
  i(6)  := '9DB2A2FCEA0FAC6FC528CDABA33CAAA0FAD8FE2B28C523864E9DCD3D52464FC57D329D2584FF00B2C7F855C46B11B454D7B7CA20BFFAB1FF00E97C7ED2D28C8D4C008D3A58EFEABACC786C14EF67CF4B58E7E8DA786011839FE51F25CE9E68F14DDDB2A6';
  i(7)  := '491C58E9238BCDE91C1EF03B4B4347A87AD06963B7F41D23221531BA491E23635A788B9CE3C20642DCCA902CC7B25B32D8710A325E5EFF009543C8587D369E67DCB4E05142108440B89B6D2F0E1D567FCB4BED8DC3EF5DB518DE6CFC184D59FD491FBC43';
  i(8)  := '7EF419DE9CBA2601C1F481B125A01B5AFAE5CC7AD23F87C8C88B5B4BA5057F14638B87C9BF55FD7D592468AAF879B1A7BC2AA5A3DA72340BD9DA4CCD80CF4CF2F6250BDA73E065FB8251D4CC78B88D808D2D9140D7FB400F300FB7DE1291E3510F31BEA1';
  i(9)  := '97B126E8870348863CC751CFDB9242091872E8197EBCFE283A916D3B75B04A3B69A2E77CD730D3869CE08DC3BDD7F7A467E0360210DF177C532096ECF4FD257D1DB3FEF515CD9E39383B50068B450599F09DB110D4529783D0C52B5C7845DFE4E595F99C';
  i(10) := 'FDAB4950D63658D9230DD8F687B4D88BB5C0381B1CC64543C2E8421102AC77CFB4AE6D2CB4CD85EE6BBA3E965360C602EE36B46772E3D19F515672A3F7D78D033BA9D84969E8BA5F45AF6F191E6E4EB39BCCF9DCB552AC560D8C3B88736DEE0256E2E99B';
  i(11) := '64B725EC3C95A0F2C4794DD74EA4AC789581EBB1F726AC9085F248C104806E02A3AD455CC735A350125554FAB466B90C8C8B1053B6E22F1CD40E63AA3A85E2595A73D5349B102ED2C5367D41B141D8D89A26546274B0CAD0F8DF210E69E4E1C2E247B15E';
  i(12) := '3B19B42E8AA64A09448F6B669194F396D9B270B448E61232E30093965D8059533BA8F2B19A3EC738FAA294AB77656432E335ADCCC74D248F06DE7CE218F2CF9010483BC958B39D6A75CAC64210B4C059837BE0B719AB00901DD1B8804D8FCCC5CC6BC8AD';
  i(13) := '3EB386FAA90B7187B88CA48A3703D766F07BD85042298129CC51A4A38C8E495634AD2968E1CF34EE3918D06FCB84F8260E04F5F82F0EA736E45076592C190245D7A73A1B5B22B8DF213E89F7AF0EA6B6847AD4C0F6AA9A3232365C7A88ED9258C2742937';
  i(14) := 'B0EAA8956E5A3BE334FDD29FF8645696E71DD2CB8A5569356900F586F1B87B250AA2DDD55982AA59B97434953203D44445ADFB4E03C55EDBA2D9F7D261913246F048F2E95E0F305C6C2FDBC0D6ACA266842100A0DBD5D82FC214E1F101F2986E63FD634E';
  i(15) := '6E8C9EDB022FA8ED2A7284198309ABA2638475B47302D3C2F7C7348D7B48C8DE176BD6010AD7C3374F85D444D9617CCF8DE2ED736677B88C88E441CC275BCEDDEB6B2333C2D1F2A60BD87E5DA3CD3D6F03E89F0E445A07BA9DAE34B58DA671F99A8706D8';
  i(16) := 'F9921C9AE034B9B34F78EA544DDFB8EA13C9F523BA469F7B0A4BF11547FE3557EF45FCB5642134571F88CA4D2A2AC773A1FE5A6357B8B1F92AD947648C6BC7D92D56AA14148546E2EAC5F867A77F789597FB2E5CAAADCD622DE51C527EC4ADFF00BF0AD0';
  i(17) := '8B9BB43B4115153BE799D663472F39EED1AD1AB89FEACAE8CEB0EC45532B22A49A3313AA0B5A47131C7A1E36979F21C6C2CC3CFD12B4DB459561BB085F5D53362738F2892C8FA9B95886F635966DF52E72B41281084280421080545EF6B64CD25632B211';
  i(18) := 'C31CAF0E36E51CC0F178715B887687762BD133C5F098EA617C32B7898F162351A820E841CC1409E038BB6AA9E399BC9ED048F45DC9C3C1D71E0BA0AB1C322A8C124735E1D3D03DD7E91A2E62D2EE68FA26D607CD361620E4AC7A2AE64CC6C91B9AF6385C';
  i(19) := '39A6E0FF005D4817422EA05B73BD982883A386D5153CB85A7C88CFE9B86BFA233EE4123DA9DADA7C3E132CEFB68D60CDF21EA6B75EFE435547B66ACDA5AE0338A9A33736B98E9D87D8F95D6CBAFB00C9CE0FBBCC43199FE535CF7C309F39C2CF7379F0C5';
  i(20) := '11FA2DED396B672BBF00D9F868E16C34EC0C8DBEB71D5CE773738F59452D846151D342C8626F0C71B785A35EF27524DC93D653C42110210840210840210841F085C49F63E024BA2E9299EECCBA9DEE8B88F5960F21C7B4B4A10819D5EC13651C32D65748';
  i(21) := 'D3CDA660D69EF0C636E97C1B602869487454ECE31C9EEBBDC3B8B89E1F0B2108242842100842100842107FFFD9';
  l_blob := varchar2_to_blob(i);
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(8, 'Bag', 'Unisex bag suitable for carrying laptops with room for many additional items', 'Accessories', 'Y', 125, l_blob,'image/jpeg','bag.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 9
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB004300090607080706090807080A0A090B0D160F0D0C0C0D1B14151016201D2222201D1F1F2428342C242631271F1F2D3D2D3135373A3A3A232B3F443F384334393A37FFDB0043010A0A0A0D0C0D';
  i(2)  := '1A0F0F1A37251F253737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737FFC00011080068006803012200021101031101FFC4001C00010001050101000000000000000000000007';
  i(3)  := '02030406080501FFC4003A100001030203060305050803000000000001000203041105213106071251617141819113142223A1324252B1C115173343445372D16284C2FFC40017010101010100000000000000000000000000010203FFC4001911010101';
  i(4)  := '01010100000000000000000000000102112212FFDA000C03010002110311003F009C5111011110111101111011110111101111079BB458C418060B5589D502E8E065C301B17B89B35A3A9240F3518D0EF271B967E29AA30E6B0E7EC8D23C37B077B4BF9D';
  i(5)  := 'BCBC16C5BE2783B38223A125DDCE83E8E77A28222A82D3C2F272D1CB1B9AE796F1F3DF4E82C33783452B47ED3A596972CE68499E2F568E21E6D03AADA30FC4E871288CB875653D5463574128781E85734D2E2660B7CE196963A7EAB22BB6864AC6362643';
  i(6)  := '097DACEA99226BA4B726B88B8EFAF2B6AB18DEEDE58DEF1893B2A64C6F797826175BEEB1B67ACE13F364A70D2D676248E2F2CBADF259DB1FB6987ED3B1D1C3F2AAD8389D0937BB6F939A7C469D42E7A7161177BDED63756B4DAFE7AAB13C3253BA39DD7F';
  i(7)  := '8802D68362D3E163A83D47D17671759A28D7775BC838DCEEA0C71D4904E1A3D948D2E6179D08707139F5BE7C82925A43802D2083A1083EA222022220222208E77D4C95F825198AF66CC4BADDB2FCCA82DF62E37162A7ADEBE314F4347052D652BE5A7973';
  i(8)  := '7C91E6E8B501D6E5716F0CC8B7230C5751C53B9D35048D9E1E6DC883C88D41EEA8F3006AAD8EE0D150F8DCC3620854B49BE6A0CA63F319E8AF0F660BE49AEEE21C0C00663A0EA561870009571B3BF87D9C4DBC8EE795875406D33DCD2F692DBEA49E2254';
  i(9)  := 'B7BA4DAEA99661826253C669D9186D2991C039A464182C05DB6D01CC5AD722D68CE96131C5C25DC4E39B9C42A656BA2904911731C0E446483A9D1441B13BCA9E00CA2C7499A219367FBEDEFCD4AF455B4D5D009A92664B19F169FCF920C844440444411D';
  i(10) := '6F66036A2A830BDCC0D7B0C8CD4136F848391BF2B8391D74511D4E1519799699E6391BABA2BB4B7BB7223E8174ECF0C55113A19E364B13C59CC7B4383875056A18C6EEB0BAD71928647D1C96B0681C71FA1CC79103A20829FEF31464D7402A606EB34560';
  i(11) := 'F60E67416EE00EAADC942D9A175450C8268DBF6AC2CE67F93750A6EC3B76F08A231E21516A86DC472528B11992092467DBC39AD136A761ABB01A9155070C763F2EAA16FCA7DFEEBDB9F0DF9660F271CC047D636B1D4ABF010C370003E36F155D5811CAF6';
  i(12) := 'D543EED35F8AD7BB08BE563CBC2F98EB7C95B65B40420F4A19B9155C8CF697239AC069234579B339A73CD052E0E8DF9123B2D8300DA29B0991AF8EA248EDF81C73F25E23A40F377B2EADBA4846B1DC77412F615BD3A41C2DC49B76FE368B1F4D3F25BE60';
  i(13) := 'F8C61F8D52FBCE19551D4457B1E139B4F223C0AE5D9AAE2D1B134755B66EBB1F6611B490B789DECAAC18A4634EB95DA6DCC11F53D50742A2B54D5115553C5514EF12432B03D8F1A39A45C1F44417511101512C51CD1BA3958D7C6F04398E170E1C8855A2';
  i(14) := '08DB6AF768DA90E9B057340B977BACCEC81E6C77879FA81928B716D96ACC2A42DADA49A94DF22F670B4F670F84F95D74DAF8E6B5ED2D70041D41D0A0E56F71A96FF0E5047FCAC7EB974F05F1D057DFF976BEB73FA02BA46AF64F00AB25D36134BC475732';
  i(15) := '3E027CDB65E7CBBBCD9A93FA3959D1B5327EAE515CF0E8AB2D673E368EAF3FE9597C329FB75110EC5C7FF2BA1BF767B317CE9AA0FF00DA7FFB5759BB7D936104E15C647F72A2575FC8BACA8E6E7C3133396779FF0018C347AB8FE8B67D95D8FC6F1B95A7';
  i(16) := '0DA092280E4EAA9EED601E3F111F176683D974061FB338161AE0EA1C1E86078D1ECA76F17ADAEBD641838161C308C1E8B0E12BA514B0B22123858BAC2D7B22CE444111101111011110111101111011110111101111011110111101111011110111101111';
  i(17) := '07FFD9';
  l_blob := varchar2_to_blob(i);  
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(9, 'Mens Shoes', 'Leather upper and lower lace up shoes', 'Mens', 'Y', 110, l_blob,'image/jpeg','shoes.jpg',systimestamp,null);
  -- Table: DEMO_PRODUCT_INFO - Product 10
  i := j;
  i(1)  := 'FFD8FFE000104A46494600010100000100010000FFDB008400090606100D111214110F101410111510120D0E180E101B101012161C15201412171E1C1F322A23252F1A1E152B3B202F33292E2E38211E31373C2E41262B2C2901090A0A0E0C0D1A0E0F1A';
  i(2)  := '29211F242E31293534352D352C2F2C2D342A2D2C29352D2E2C302C3435352F2C2D2C352C293534342C2C2E2A2C29292C2F2C342C2C2CFFC00011080068006803012200021101031101FFC4001B0001000203010100000000000000000000000607040508';
  i(3)  := '0302FFC4003C1000020102020606070509010000000000000102031104210506071251911322233161A141717281C1D1F0324252B2E1152433437392B1C2F114FFC4001A010100020301000000000000000000000000020301040506FFC4002911010002';
  i(4)  := '010203060700000000000000000001020304111221320531336181911334415171B1F0FFDA000C03010002110311003F00BC4000000000000000000000000000000000004635CF5DBF65285B0B52BCA6A527184E0B762B2BBBE6F3F424C8AE136F78497D';
  i(5)  := 'BC3568B5DF153A6E4BC1EF6E9B1DA953CE83B77A9A6F8DA54ECBCCADF1B80A75976908CBC5AEB2F5359AE7C0AAD7989D9D6D3E8EB97145FEAB5307B5BD1B55673AB0F6A8C9AE70B9B8C26BB68EADF631B42FC255141F2958E64D35808E16A4541CB7651D';
  i(6)  := 'E49BCD3BB4D5F9195A071B273DD94AF1B773E238E76DC8D1E2B5F839C4FBBAAE9D45249C5A69A4E2D34D34FB9A3E88BECDAA5F47D25F8655E36E0BA49B4B9344A0B22778DDCCC94E0BCD7ED3B000328000000000000209B505D5A0EFF8F2F7D2BBF87BCA';
  i(7)  := 'DE7F5F5F5F3B2B6A5FC3A197DE9F5BFB32E76E45677F2B1AD97BDE8FB3BC184635BD75A93F0A8BCE3F330F404BB55EA667EB8ACA8BF1AABCA9D8D668495AAC7DE663A519E5AAF58745ECAE5FB8FAAAD5F3DD7F126242B64F2BE0A5E15AA71FC34C9A9753';
  i(8)  := 'A61C7D5F8F7FCC80024D600000000000041F6A4BB2A19FDF92DDE39473E57E6562D967ED4EDD051CBF98F3F77773B157CDFEBE7F23572F53D2767781EA8E6B8BEA52F6E7F951A4D1157B58E68DDEB8BECE97B72FF069745DAF2BC77A495A0B849E4999AF';
  i(9)  := '4A9CBF35EDFA744EC7E57C1D5FEBC9F3A7449D95EEC572C1D64DB6E35DABF1EA53F916117D3A5CAD5F3CF69F300049AC000000000000846D6256C351E1D37FA4F32AD9CBF4E6CB935F3576AE90C3C6345C7A4A73E91464ECA6B7649C53F43CFD453B8FC0';
  i(10) := 'D5C34DC2B539539ACDC649ABAE2BD0D78ABA3572C4EFBBD0F66DEBF0B877E68D6B7E70A7EDCBF2FF00C35BA0E2B7F3BFA5ACFEBD04C70DA955F4D49D2A152942749749DA39A8CA2F753578C5B59F81E6F641A670D3BFFE58D48AFB4E9E2293CBD52717C9';
  i(11) := '12AC4CD1567BD69AAE7E4B2B62B513A1898E79568BE715F14CB1CAE3643A2B138578B8D7C3D5A4A5D04A1BF0B272ED54B778E5BB7F596396D3A5CDD64C4E7B4C7F720004DAA000000000000187A4F4450C5C372BD28D487A1359C5F18BEF4FC558CC0198';
  i(12) := '9989DE116D5AD44868DC4D4AB4AACA54EA53DC8D2947AD0774EFBCBBFBB85C9480622223B92BE4B649E2B4EF258006500000000000000000000000000000000000007FFFD9';
  l_blob := varchar2_to_blob(i);   
  INSERT INTO demo_product_info (product_id, product_name, product_description, category,product_avail, list_price, product_image, mimetype, filename, image_last_update, tags)
      VALUES(10, 'Wallet', 'Travel wallet suitable for men and women. Several compartments for credit cards, passports and cash', 'Accessories', 'Y', 50, l_blob,'image/jpeg','wallet.jpg',systimestamp,null);
  -- Table: DEMO_CUSTOMERS
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
   VALUES(1, 'John', 'Dulles', '45020 Aviation Drive', null, 'Sterling', 'VA', '20166', 'john.dulles@email.com', '703-555-2143', '703-555-8967', 'http://www.johndulles.com', 1000, null);
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
    VALUES(2, 'William', 'Hartsfield', '6000 North Terminal Parkway', null, 'Atlanta', 'GA', '30320', null, '404-555-3285', null, null, 1000, 'Repeat customer');
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
    VALUES(3, 'Edward', 'Logan', '1 Harborside Drive', null, 'East Boston', 'MA', '02128', null, '617-555-3295', null, null, 1000, 'Repeat customer');
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
    VALUES(4, 'Frank', 'OHare', '10000 West OHare', null, 'Chicago', 'IL', '60666', null, '773-555-7693', null, null, 1000, null);
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
    VALUES(5, 'Fiorello', 'LaGuardia', 'Hangar Center', 'Third Floor', 'Flushing', 'NY', '11371', null, '212-555-3923', null, null, 1000, null);
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
    VALUES(6, 'Albert', 'Lambert', '10701 Lambert International Blvd.', null, 'St. Louis', 'MO', '63145', null, '314-555-4022', null, null, 1000, null);
  INSERT INTO demo_customers (customer_id, cust_first_name, cust_last_name, cust_street_address1, cust_street_address2, cust_city, cust_state, cust_postal_code, cust_email, phone_number1, phone_number2, url, credit_limit, tags)
    VALUES(7, 'Eugene', 'Bradley', 'Schoephoester Road', null, 'Windsor Locks', 'CT', '06096', null, '860-555-1835', null, null, 1000, 'Repeat customer');
  -- Table: DEMO_ORDERS
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(1, 7,0, systimestamp-65,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(2, 1,0, systimestamp-51,'DEMO', 'Large Order');
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(3, 2,0, systimestamp-40,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(4, 5,0, systimestamp-38,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(5, 6,0, systimestamp-28,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(6, 3,0, systimestamp-23,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(7, 3,0, systimestamp-18,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(8, 4,0, systimestamp-10,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(9, 2,0, systimestamp-4,'DEMO', null);
  INSERT INTO demo_orders (order_id, customer_id, order_total, order_timestamp, USERS_name, tags) VALUES(10, 7,0, systimestamp-1,'DEMO', null);
  -- Table: DEMO_ORDER_ITEMS
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 1, 1, null, 10);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 1, 2, null, 8);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 1, 3, null, 5);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 1, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 2, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 3, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 4, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 5, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 6, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 7, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 8, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 9, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 2, 10, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 3, 4, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 3, 5, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 3, 6, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 3, 8, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 3, 10, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 4, 6, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 4, 7, null, 6);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 4, 8, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 4, 9, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 4, 10, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 5, 1, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 5, 2, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 5, 3, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 5, 4, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 5, 5, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 6, 3, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 6, 6, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 6, 8, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 6, 9, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 1, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 2, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 4, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 5, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 7, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 8, null, 1);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 7, 10, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 8, 2, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 8, 3, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 8, 6, null, 1);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 8, 9, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 9, 4, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 9, 5, null, 3);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 9, 8, null, 2);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 10, 1, null, 5);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 10, 2, null, 4);
  INSERT INTO demo_order_items (order_item_id, order_id, product_id, unit_price, quantity) VALUES(null, 10, 3, null, 2);
  -- Table: DEMO_STATES
  INSERT INTO demo_states (st, state_name) VALUES ('AK','ALASKA');
  INSERT INTO demo_states (st, state_name) VALUES ('AL','ALABAMA');
  INSERT INTO demo_states (st, state_name) VALUES ('AR','ARKANSAS');
  INSERT INTO demo_states (st, state_name) VALUES ('AZ','ARIZONA');
  INSERT INTO demo_states (st, state_name) VALUES ('CA','CALIFORNIA');
  INSERT INTO demo_states (st, state_name) VALUES ('CO','COLORADO');
  INSERT INTO demo_states (st, state_name) VALUES ('CT','CONNECTICUT');
  INSERT INTO demo_states (st, state_name) VALUES ('DC','DISTRICT OF COLUMBIA');
  INSERT INTO demo_states (st, state_name) VALUES ('DE','DELAWARE');
  INSERT INTO demo_states (st, state_name) VALUES ('FL','FLORIDA');
  INSERT INTO demo_states (st, state_name) VALUES ('GA','GEORGIA');
  INSERT INTO demo_states (st, state_name) VALUES ('HI','HAWAII');
  INSERT INTO demo_states (st, state_name) VALUES ('IA','IOWA');
  INSERT INTO demo_states (st, state_name) VALUES ('ID','IDAHO');
  INSERT INTO demo_states (st, state_name) VALUES ('IL','ILLINOIS');
  INSERT INTO demo_states (st, state_name) VALUES ('IN','INDIANA');
  INSERT INTO demo_states (st, state_name) VALUES ('KS','KANSAS');
  INSERT INTO demo_states (st, state_name) VALUES ('KY','KENTUCKY');
  INSERT INTO demo_states (st, state_name) VALUES ('LA','LOUISIANA');
  INSERT INTO demo_states (st, state_name) VALUES ('MA','MASSACHUSETTS');
  INSERT INTO demo_states (st, state_name) VALUES ('MD','MARYLAND');
  INSERT INTO demo_states (st, state_name) VALUES ('ME','MAINE');
  INSERT INTO demo_states (st, state_name) VALUES ('MI','MICHIGAN');
  INSERT INTO demo_states (st, state_name) VALUES ('MN','MINNESOTA');
  INSERT INTO demo_states (st, state_name) VALUES ('MO','MISSOURI');
  INSERT INTO demo_states (st, state_name) VALUES ('MS','MISSISSIPPI');
  INSERT INTO demo_states (st, state_name) VALUES ('MT','MONTANA');
  INSERT INTO demo_states (st, state_name) VALUES ('NC','NORTH CAROLINA');
  INSERT INTO demo_states (st, state_name) VALUES ('ND','NORTH DAKOTA');
  INSERT INTO demo_states (st, state_name) VALUES ('NE','NEBRASKA');
  INSERT INTO demo_states (st, state_name) VALUES ('NH','NEW HAMPSHIRE');
  INSERT INTO demo_states (st, state_name) VALUES ('NJ','NEW JERSEY');
  INSERT INTO demo_states (st, state_name) VALUES ('NM','NEW MEXICO');
  INSERT INTO demo_states (st, state_name) VALUES ('NV','NEVADA');
  INSERT INTO demo_states (st, state_name) VALUES ('NY','NEW YORK');
  INSERT INTO demo_states (st, state_name) VALUES ('OH','OHIO');
  INSERT INTO demo_states (st, state_name) VALUES ('OK','OKLAHOMA');
  INSERT INTO demo_states (st, state_name) VALUES ('OR','OREGON');
  INSERT INTO demo_states (st, state_name) VALUES ('PA','PENNSYLVANIA');
  INSERT INTO demo_states (st, state_name) VALUES ('RI','RHODE ISLAND');
  INSERT INTO demo_states (st, state_name) VALUES ('SC','SOUTH CAROLINA');
  INSERT INTO demo_states (st, state_name) VALUES ('SD','SOUTH DAKOTA');
  INSERT INTO demo_states (st, state_name) VALUES ('TN','TENNESSEE');
  INSERT INTO demo_states (st, state_name) VALUES ('TX','TEXAS');
  INSERT INTO demo_states (st, state_name) VALUES ('UT','UTAH');
  INSERT INTO demo_states (st, state_name) VALUES ('VA','VIRGINIA');
  INSERT INTO demo_states (st, state_name) VALUES ('VT','VERMONT');
  INSERT INTO demo_states (st, state_name) VALUES ('WA','WASHINGTON');
  INSERT INTO demo_states (st, state_name) VALUES ('WI','WISCONSIN');
  INSERT INTO demo_states (st, state_name) VALUES ('WV','WEST VIRGINIA');
  INSERT INTO demo_states (st, state_name) VALUES ('WY','WYOMING');
  -- Table: DEMO_CONSTRAINT_LOOKUP
  INSERT INTO demo_constraint_lookup (constraint_name, message) VALUES ('DEMO_CUST_CREDIT_LIMIT_MAX','Credit Limit must not exceed $5,000.');
  INSERT INTO demo_constraint_lookup (constraint_name, message) VALUES ('DEMO_CUSTOMERS_UK','Customer Name must be unique.');
  INSERT INTO demo_constraint_lookup (constraint_name, message) VALUES ('DEMO_PRODUCT_INFO_UK','Product Name must be unique.');
  INSERT INTO demo_constraint_lookup (constraint_name, message) VALUES ('DEMO_ORDER_ITEMS_UK','Product can only be entered once for each order.');
end insert_data;
end sample_data_pkg;



/
--------------------------------------------------------
--  DDL for Package Body SAMPLE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY"."SAMPLE_PKG" as
    --
    -- Error Handling function
    --
    function demo_error_handling (
        p_error in apex_error.t_error )
        return apex_error.t_error_result
    is
        l_result          apex_error.t_error_result;
        l_reference_id    number;
        l_constraint_name varchar2(255);
    begin
        l_result := apex_error.init_error_result (
                        p_error => p_error );
        -- If it's an internal error raised by APEX, like an invalid statement or
        -- code which can't be executed, the error text might contain security sensitive
        -- information. To avoid this security problem we can rewrite the error to
        -- a generic error message and log the original error message for further
        -- investigation by the help desk.
        if p_error.is_internal_error then
            -- mask all errors that are not common runtime errors (Access Denied
            -- errors raised by application / page authorization and all errors
            -- regarding session and session state)
            if not p_error.is_common_runtime_error then
                -- log error for example with an autonomous transaction and return
                -- l_reference_id as reference#
                -- l_reference_id := log_error (
                --                       p_error => p_error );
                --

                -- Change the message to the generic error message which doesn't expose
                -- any sensitive information.
                l_result.message         := 'An unexpected internal application error has occurred. '||
                                            'Please get in contact with your system administrator and provide '||
                                            'reference# '||to_char(l_reference_id, '999G999G999G990')||
                                            ' for further investigation.';
                l_result.additional_info := null;
            end if;
        else
            -- Always show the error as inline error
            -- Note: If you have created manual tabular forms (using the package
            --       apex_item/htmldb_item in the SQL statement) you should still
            --       use "On error page" on that pages to avoid loosing entered data
            l_result.display_location := case
                                           when l_result.display_location = apex_error.c_on_error_page then apex_error.c_inline_in_notification
                                           else l_result.display_location
                                         end;

            -- If it's a constraint violation like
            --
            --   -) ORA-00001: unique constraint violated
            --   -) ORA-02091: transaction rolled back (-> can hide a deferred constraint)
            --   -) ORA-02290: check constraint violated
            --   -) ORA-02291: integrity constraint violated - parent key not found
            --   -) ORA-02292: integrity constraint violated - child record found
            --
            -- we try to get a friendly error message from our constraint lookup configuration.
            -- If we don't find the constraint in our lookup table we fallback to
            -- the original ORA error message.
            if p_error.ora_sqlcode in (-1, -2091, -2290, -2291, -2292) then
                l_constraint_name := apex_error.extract_constraint_name (
                                         p_error => p_error );
                begin
                    select message
                      into l_result.message
                      from demo_constraint_lookup
                     where constraint_name = l_constraint_name;
                exception when no_data_found then null; -- not every constraint has to be in our lookup table
                end;
            end if;
            -- If an ORA error has been raised, for example a raise_application_error(-20xxx, '...')
                -- in a table trigger or in a PL/SQL package called by a process and we
            -- haven't found the error in our lookup table, then we just want to see
            -- the actual error text and not the full error stack with all the ORA error numbers.
            if p_error.ora_sqlcode is not null and l_result.message = p_error.message then
                l_result.message := apex_error.get_first_ora_error_text (
                                        p_error => p_error );
            end if;
            -- If no associated page item/tabular form column has been set, we can use
            -- apex_error.auto_set_associated_item to automatically guess the affected
            -- error field by examine the ORA error for constraint names or column names.
            if l_result.page_item_name is null and l_result.column_alias is null then
                apex_error.auto_set_associated_item (
                    p_error        => p_error,
                    p_error_result => l_result );
            end if;
        end if;
        return l_result;
    end demo_error_handling;


    ---
    --- Tag Cleaner function
    ---
    function demo_tags_cleaner (
        p_tags  in varchar2,
        p_case  in varchar2 default 'U' ) return varchar2
    is
        type tags is table of varchar2(255) index by varchar2(255);
        l_tags_a        tags;
        l_tag           varchar2(255);
        l_tags          apex_application_global.vc_arr2;
        l_tags_string   varchar2(32767);
        i               integer;
    begin
        l_tags := apex_util.string_to_table(p_tags,',');
        for i in 1..l_tags.count loop
            --remove all whitespace, including tabs, spaces, line feeds and carraige returns with a single space
            l_tag := substr(trim(regexp_replace(l_tags(i),'[[:space:]]{1,}',' ')),1,255);

            if l_tag is not null and l_tag != ' ' then
                if p_case = 'U' then
                    l_tag := upper(l_tag);
                elsif p_case = 'L' then
                    l_tag := lower(l_tag);
                end if;
                --add it to the associative array, if it is a duplicate, it will just be replaced
                l_tags_a(l_tag) := l_tag;
            end if;
        end loop;
        l_tag := null;
        l_tag := l_tags_a.first;
        while l_tag is not null loop
            l_tags_string := l_tags_string||l_tag;
            if l_tag != l_tags_a.last then
                l_tags_string := l_tags_string||', ';
            end if;
            l_tag := l_tags_a.next(l_tag);
        end loop;
        return substr(l_tags_string,1,4000);
    end demo_tags_cleaner;
    ---
    --- Tag Synchronisation Procedure
    ---
    procedure demo_tag_sync (
        p_new_tags          in varchar2,
        p_old_tags          in varchar2,
        p_content_type      in varchar2,
        p_content_id        in number )
    as
        type tags is table of varchar2(255) index by varchar2(255);
        l_new_tags_a    tags;
        l_old_tags_a    tags;
        l_new_tags      apex_application_global.vc_arr2;
        l_old_tags      apex_application_global.vc_arr2;
        l_merge_tags    apex_application_global.vc_arr2;
        l_dummy_tag     varchar2(255);
        i               integer;
    begin
        l_old_tags := apex_util.string_to_table(p_old_tags,', ');
        l_new_tags := apex_util.string_to_table(p_new_tags,', ');
        if l_old_tags.count > 0 then --do inserts and deletes
            --build the associative arrays
            for i in 1..l_old_tags.count loop
                l_old_tags_a(l_old_tags(i)) := l_old_tags(i);
            end loop;
            for i in 1..l_new_tags.count loop
                l_new_tags_a(l_new_tags(i)) := l_new_tags(i);
            end loop;
            --do the inserts
            for i in 1..l_new_tags.count loop
                begin
                    l_dummy_tag := l_old_tags_a(l_new_tags(i));
                exception when no_data_found then
                    insert into demo_tags (tag, content_id, content_type )
                        values (l_new_tags(i), p_content_id, p_content_type );
                    l_merge_tags(l_merge_tags.count + 1) := l_new_tags(i);
                end;
            end loop;
            --do the deletes
            for i in 1..l_old_tags.count loop
                begin
                    l_dummy_tag := l_new_tags_a(l_old_tags(i));
                exception when no_data_found then
                    delete from demo_tags where content_id = p_content_id and tag = l_old_tags(i);
                    l_merge_tags(l_merge_tags.count + 1) := l_old_tags(i);
                end;
            end loop;
        else --just do inserts
            for i in 1..l_new_tags.count loop
                insert into demo_tags (tag, content_id, content_type )
                    values (l_new_tags(i), p_content_id, p_content_type );
                l_merge_tags(l_merge_tags.count + 1) := l_new_tags(i);
            end loop;
        end if;
        for i in 1..l_merge_tags.count loop
            merge into demo_tags_type_sum s
            using (select count(*) tag_count
                     from demo_tags
                    where tag = l_merge_tags(i) and content_type = p_content_type ) t
               on (s.tag = l_merge_tags(i) and s.content_type = p_content_type )
             when not matched then insert (tag, content_type, tag_count)
                                   values (l_merge_tags(i), p_content_type, t.tag_count)
             when matched then update set s.tag_count = t.tag_count;
            merge into demo_tags_sum s
            using (select sum(tag_count) tag_count
                     from demo_tags_type_sum
                    where tag = l_merge_tags(i) ) t
               on (s.tag = l_merge_tags(i) )
             when not matched then insert (tag, tag_count)
                                   values (l_merge_tags(i), t.tag_count)
             when matched then update set s.tag_count = t.tag_count;
        end loop;
    end demo_tag_sync;
end sample_pkg;



/
--------------------------------------------------------
--  DDL for Function GETCOMPINPBELEGEALL1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "COMPANY"."GETCOMPINPBELEGEALL1" (p_inp_belege_all_old number, p_inp_belege_all_new number) return ty_comp_inp_belege_all   PIPELINED IS

v_comp_inp_belege_all  ty_comp_inp_belege_all_1;

 v_inp number;
begin 
with dat1 as (select 'old' sel, null sum1, 1 nr_row, inp.*
from inp_belege_all inp
where pk_inp_belege_all = p_inp_belege_all_old
),
dat2 as (
    select 'new' sel, null sum1, 2 nr_row, inp.*

from inp_belege_all inp
--where pk_inp_belege_all = p_inp_belege_all_new
),

un as (
select sel, sum1,nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_KATEGORIE	,	--	NUMBER
FK_ARBEITSTAG	,	--	NUMBER
FK_BUCHUNG	,	--	NUMBER
FK_ZAHLUNGSART	,	--	NUMBER
FK_VERWENDUNGSZWECK	,	--	NUMBER
FK_INVENTAR	,	--	NUMBER
FK_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_LAND	,	--	NUMBER
FK_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_STEUERSATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRÜNDUNG) COMM_BEGRÜNDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSÄULE	,	--	NUMBER
FK_LOCATION	,	--	NUMBER
PERSÖNLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_VON_ARBEITSTAG	,	--	NUMBER
FK_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_FRMDW	,	--	NUMBER
FK_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INTERNET_APP	,	--	NUMBER
FK_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_GESCHÄFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADRESSE_SCHNELL		--	NUMBER

from dat1
   union all
    select  sel, sum1, nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_KATEGORIE	,	--	NUMBER
FK_ARBEITSTAG	,	--	NUMBER
FK_BUCHUNG	,	--	NUMBER
FK_ZAHLUNGSART	,	--	NUMBER
FK_VERWENDUNGSZWECK	,	--	NUMBER
FK_INVENTAR	,	--	NUMBER
FK_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_LAND	,	--	NUMBER
FK_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_STEUERSATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRÜNDUNG) COMM_BEGRÜNDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSÄULE	,	--	NUMBER
FK_LOCATION	,	--	NUMBER
PERSÖNLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_VON_ARBEITSTAG	,	--	NUMBER
FK_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_FRMDW	,	--	NUMBER
FK_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INTERNET_APP	,	--	NUMBER
FK_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_GESCHÄFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADRESSE_SCHNELL		--	NUMBER
    from dat2
    ),


vgl as (
select sel, sum1, nr_row, 'erg' erg, PK_INP_BELEGE_ALL sel_PK_INP_BELEGE_ALL, 
row_number() over (partition by PK_INP_BELEGE_ALL order by nr_row) PK_INP_BELEGE_ALL,
row_number() over (partition by FK_LEX_BUCHUNG order by nr_row) FK_LEX_BUCHUNG,
row_number() over (partition by FK_KATEGORIE order by nr_row) FK_KATEGORIE,
row_number() over (partition by FK_ARBEITSTAG order by nr_row) FK_ARBEITSTAG,
row_number() over (partition by FK_BUCHUNG order by nr_row) FK_BUCHUNG,
row_number() over (partition by FK_ZAHLUNGSART order by nr_row) FK_ZAHLUNGSART,
row_number() over (partition by FK_VERWENDUNGSZWECK order by nr_row) FK_VERWENDUNGSZWECK,
row_number() over (partition by FK_INVENTAR order by nr_row) FK_INVENTAR,
row_number() over (partition by FK_PROJEKT order by nr_row) FK_PROJEKT,
row_number() over (partition by BELEGNUMMER order by nr_row) BELEGNUMMER,
row_number() over (partition by BEZEICHNUNG order by nr_row) BEZEICHNUNG,
row_number() over (partition by FK_LAND order by nr_row) FK_LAND,
row_number() over (partition by FK_CITY order by nr_row) FK_CITY,
row_number() over (partition by BEL_DATUM order by nr_row) BEL_DATUM,
row_number() over (partition by VON order by nr_row) VON,
row_number() over (partition by BIS order by nr_row) BIS,
row_number() over (partition by NETTO_BETRAG order by nr_row) NETTO_BETRAG,
row_number() over (partition by FK_STEUERSATZ order by nr_row) FK_STEUERSATZ,
row_number() over (partition by MWST_BETRAG order by nr_row) MWST_BETRAG,
row_number() over (partition by BRUTTO_BETRAG order by nr_row) BRUTTO_BETRAG,
row_number() over (partition by FK_WAEHRUNG order by nr_row) FK_WAEHRUNG,
row_number() over (partition by STEUERNUMMER order by nr_row) STEUERNUMMER,
row_number() over (partition by FK_UMRECHNUNGSKURS order by nr_row) FK_UMRECHNUNGSKURS,
row_number() over (partition by COMM_REST_BELEG order by nr_row) COMM_REST_BELEG,
row_number() over (partition by COMM_TEL_BELEG order by nr_row) COMM_TEL_BELEG,
row_number() over (partition by COMM_PRODUKTE order by nr_row) COMM_PRODUKTE,
row_number() over (partition by COMM_BEGRÜNDUNG order by nr_row) COMM_BEGRÜNDUNG,
row_number() over (partition by COMM_SONSTIGES order by nr_row) COMM_SONSTIGES,
row_number() over (partition by BELEG order by nr_row) BELEG,
row_number() over (partition by ZAHLUNGSBELEG order by nr_row) ZAHLUNGSBELEG,
row_number() over (partition by LITER order by nr_row) LITER,
row_number() over (partition by ZAPFSÄULE order by nr_row) ZAPFSÄULE,
row_number() over (partition by FK_LOCATION order by nr_row) FK_LOCATION,
row_number() over (partition by PERSÖNLICH_VOR_ORT order by nr_row) PERSÖNLICH_VOR_ORT,
row_number() over (partition by BELEG_UHRZEIT order by nr_row) BELEG_UHRZEIT,
row_number() over (partition by VON_UHRZEIT order by nr_row) VON_UHRZEIT,
row_number() over (partition by BIS_UHRZEIT order by nr_row) BIS_UHRZEIT,
row_number() over (partition by FK_VON_ARBEITSTAG order by nr_row) FK_VON_ARBEITSTAG,
row_number() over (partition by FK_BIS_ARBEITSTAG order by nr_row) FK_BIS_ARBEITSTAG,
row_number() over (partition by COMM_ADRESSE order by nr_row) COMM_ADRESSE,
row_number() over (partition by TANKSTELLEN_NR order by nr_row) TANKSTELLEN_NR,
row_number() over (partition by BRUTTO_BETRAG_INCL_TRINKG order by nr_row) BRUTTO_BETRAG_INCL_TRINKG,
row_number() over (partition by COMM_PARKTICKET order by nr_row) COMM_PARKTICKET,
row_number() over (partition by FRMDW_NETTO_BETRAG order by nr_row) FRMDW_NETTO_BETRAG,
row_number() over (partition by FK_FRMDW order by nr_row) FK_FRMDW,
row_number() over (partition by FK_FRMDW_MWST_SATZ order by nr_row) FK_FRMDW_MWST_SATZ,
row_number() over (partition by FRMDW_MWST_BETRAG order by nr_row) FRMDW_MWST_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_BETRAG order by nr_row) FRMDW_BRUTTO_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_INCL_TRINKG order by nr_row) FRMDW_BRUTTO_INCL_TRINKG,
row_number() over (partition by MWST_BETRAG_EUR order by nr_row) MWST_BETRAG_EUR,
row_number() over (partition by BRUTTO_BETRAG_EUR order by nr_row) BRUTTO_BETRAG_EUR,
row_number() over (partition by BRUTTO_INCL_TRINKG_EUR order by nr_row) BRUTTO_INCL_TRINKG_EUR,
row_number() over (partition by NETTO_BETRAG_EUR order by nr_row) NETTO_BETRAG_EUR,
row_number() over (partition by PREIS_PRO_MENGE order by nr_row) PREIS_PRO_MENGE,
row_number() over (partition by MENGENEINHEIT order by nr_row) MENGENEINHEIT,
row_number() over (partition by LA_DATUM order by nr_row) LA_DATUM,
row_number() over (partition by FK_LA_KONTO order by nr_row) FK_LA_KONTO,
row_number() over (partition by FK_LA_WDH order by nr_row) FK_LA_WDH,
row_number() over (partition by FK_ZAHLSTATUS order by nr_row) FK_ZAHLSTATUS,
row_number() over (partition by COMM_VERGEHEN order by nr_row) COMM_VERGEHEN,
row_number() over (partition by VERG_BEHOERDE order by nr_row) VERG_BEHOERDE,
row_number() over (partition by CNT_PUNKTE order by nr_row) CNT_PUNKTE,
row_number() over (partition by FK_BELEG_ABLAGE order by nr_row) FK_BELEG_ABLAGE,
row_number() over (partition by FK_ABL_ORDNER_PAGE order by nr_row) FK_ABL_ORDNER_PAGE,
row_number() over (partition by CNT_PUNKTE_GESCHAETZT order by nr_row) CNT_PUNKTE_GESCHAETZT,
row_number() over (partition by PUNKTE_VON order by nr_row) PUNKTE_VON,
row_number() over (partition by PUNKTE_BIS order by nr_row) PUNKTE_BIS,
row_number() over (partition by FK_LOCATION_VERG order by nr_row) FK_LOCATION_VERG,
row_number() over (partition by FK_IMP_BA_BEL_OLD order by nr_row) FK_IMP_BA_BEL_OLD,
row_number() over (partition by GESCHW_IST order by nr_row) GESCHW_IST,
row_number() over (partition by GESCHW_SOLL order by nr_row) GESCHW_SOLL,
row_number() over (partition by GESCHW_UEBER_GRZ order by nr_row) GESCHW_UEBER_GRZ,
row_number() over (partition by GESCHW_UEBER_GRZ_ABZGL_MESSTOL order by nr_row) GESCHW_UEBER_GRZ_ABZGL_MESSTOL,
row_number() over (partition by CODE_BUSSGELD order by nr_row) CODE_BUSSGELD,
row_number() over (partition by DESCR_BUSSGELD order by nr_row) DESCR_BUSSGELD,
row_number() over (partition by GEZAHLT_AM order by nr_row) GEZAHLT_AM,
row_number() over (partition by WEBSEITE order by nr_row) WEBSEITE,
row_number() over (partition by KUNDENNUMMER order by nr_row) KUNDENNUMMER,
row_number() over (partition by FK_REAL_BELEG_EXIST order by nr_row) FK_REAL_BELEG_EXIST,
row_number() over (partition by FK_CALC_STATE order by nr_row) FK_CALC_STATE,
row_number() over (partition by FK_CALC_STATE_EUR order by nr_row) FK_CALC_STATE_EUR,
row_number() over (partition by FK_CALC_STATE_FRMDW order by nr_row) FK_CALC_STATE_FRMDW,
row_number() over (partition by FK_STATUS order by nr_row) FK_STATUS,
row_number() over (partition by DATUM_VERGEHEN order by nr_row) DATUM_VERGEHEN,
row_number() over (partition by CREATE_AT order by nr_row) CREATE_AT,
row_number() over (partition by CREATE_BY order by nr_row) CREATE_BY,
row_number() over (partition by MODIFY_AT order by nr_row) MODIFY_AT,
row_number() over (partition by MODIFY_BY order by nr_row) MODIFY_BY,
row_number() over (partition by DATUM_ORT_OK order by nr_row) DATUM_ORT_OK,
row_number() over (partition by DATUM_ADDRESSE_OK order by nr_row) DATUM_ADDRESSE_OK,
row_number() over (partition by DATUM_BUSSGELD_OK order by nr_row) DATUM_BUSSGELD_OK,
row_number() over (partition by DATUM_BELEG_POS_OK order by nr_row) DATUM_BELEG_POS_OK,
row_number() over (partition by DATUM_BUCHUNG_OK order by nr_row) DATUM_BUCHUNG_OK,
row_number() over (partition by DATUM_VERPFL_BEL_OK order by nr_row) DATUM_VERPFL_BEL_OK,
row_number() over (partition by FK_INTERNET_APP order by nr_row) FK_INTERNET_APP,
row_number() over (partition by FK_DUPL_STATUS order by nr_row) FK_DUPL_STATUS,
row_number() over (partition by DATUM_DUPL_OK order by nr_row) DATUM_DUPL_OK,
row_number() over (partition by DUPL_BEMERKUNG order by nr_row) DUPL_BEMERKUNG,
row_number() over (partition by FK_GESCHÄFTSPARTNER order by nr_row) FK_GESCHÄFTSPARTNER,
row_number() over (partition by DUMMY order by nr_row) DUMMY,
row_number() over (partition by STORNIERT order by nr_row) STORNIERT,
row_number() over (partition by FK_ADRESSE_SCHNELL order by nr_row) FK_ADRESSE_SCHNELL





from un
)

,


all_ as (
select sel, sum1,nr_row, pk_inp_belege_all sel_pk_inp_belege_all,  'erg' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_KATEGORIE) FK_KATEGORIE	,	--	NUMBER
to_char(FK_ARBEITSTAG) FK_ARBEITSTAG	,	--	NUMBER
to_char(FK_BUCHUNG) FK_BUCHUNG	,	--	NUMBER
to_char(FK_ZAHLUNGSART) FK_ZAHLUNGSART	,	--	NUMBER
to_char(FK_VERWENDUNGSZWECK	) FK_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INVENTAR	) FK_INVENTAR	,	--	NUMBER
to_char(FK_PROJEKT) FK_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_LAND) FK_LAND	,	--	NUMBER
to_char(FK_CITY) FK_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_STEUERSATZ) FK_STEUERSATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_WAEHRUNG) fK_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_UMRECHNUNGSKURS) FK_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRÜNDUNG)) COMM_BEGRÜNDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSÄULE) ZAPFSÄULE	,	--	NUMBER
to_char(FK_LOCATION) FK_LOCATION	,	--	NUMBER
to_char(PERSÖNLICH_VOR_ORT) PERSÖNLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_VON_ARBEITSTAG) FK_VON_ARBEITSTAG, --NUMBER
to_char(FK_BIS_ARBEITSTAG) FK_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_FRMDW) FK_FRMDW, --NUMBER
to_char(FK_FRMDW_MWST_SATZ) FK_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_ZAHLSTATUS) FK_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BELEG_ABLAGE) FK_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOCATION_VERG) FK_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_STATUS) FK_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INTERNET_APP) FK_INTERNET_APP, --NUMBER
to_char(FK_DUPL_STATUS) FK_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_GESCHÄFTSPARTNER) FK_GESCHÄFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADRESSE_SCHNELL) FK_ADRESSE_SCHNELL --NUMBER

from un
union all
select sel, sum1,nr_row,sel_pk_inp_belege_all sel_pk_inp_belege_all, 'zw' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_KATEGORIE) FK_KATEGORIE	,	--	NUMBER
to_char(FK_ARBEITSTAG) FK_ARBEITSTAG	,	--	NUMBER
to_char(FK_BUCHUNG) FK_BUCHUNG	,	--	NUMBER
to_char(FK_ZAHLUNGSART) FK_ZAHLUNGSART	,	--	NUMBER
to_char(FK_VERWENDUNGSZWECK	) FK_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INVENTAR	) FK_INVENTAR	,	--	NUMBER
to_char(FK_PROJEKT) FK_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_LAND) FK_LAND	,	--	NUMBER
to_char(FK_CITY) FK_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_STEUERSATZ) FK_STEUERSATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_WAEHRUNG) fK_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_UMRECHNUNGSKURS) FK_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRÜNDUNG)) COMM_BEGRÜNDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSÄULE) ZAPFSÄULE	,	--	NUMBER
to_char(FK_LOCATION) FK_LOCATION	,	--	NUMBER
to_char(PERSÖNLICH_VOR_ORT) PERSÖNLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_VON_ARBEITSTAG) FK_VON_ARBEITSTAG, --NUMBER
to_char(FK_BIS_ARBEITSTAG) FK_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_FRMDW) FK_FRMDW, --NUMBER
to_char(FK_FRMDW_MWST_SATZ) FK_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_ZAHLSTATUS) FK_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BELEG_ABLAGE) FK_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOCATION_VERG) FK_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_STATUS) FK_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INTERNET_APP) FK_INTERNET_APP, --NUMBER
to_char(FK_DUPL_STATUS) FK_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_GESCHÄFTSPARTNER) FK_GESCHÄFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADRESSE_SCHNELL) FK_ADRESSE_SCHNELL --NUMBER

from 
vgl
union all
select null sel, 

case when max(pk_inp_belege_all)=1 then 1 else 0 end  +
case when max(FK_LEX_BUCHUNG) =1 then 1 else 0 end  +
case when max(FK_KATEGORIE) =1 then 1 else 0 end +
case when max(FK_ARBEITSTAG) =1 then 1 else 0 end +
case when max(FK_BUCHUNG)=1 then 1 else 0 end 	+
case when max(FK_ZAHLUNGSART) =1 then 1 else 0 end 		

sum1, null nr_row, max(sel_pk_inp_belege_all) sel_pk_inp_belege_all, 'erg' erg,
case when max(PK_INP_BELEGE_ALL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_KATEGORIE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ZAHLUNGSART) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_VERWENDUNGSZWECK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_INVENTAR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_PROJEKT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEGNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BEZEICHNUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_LAND) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CITY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BEL_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STEUERSATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_WAEHRUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STEUERNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_UMRECHNUNGSKURS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_REST_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_TEL_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_PRODUKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_BEGRÜNDUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_SONSTIGES) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(ZAHLUNGSBELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(LITER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(ZAPFSÄULE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LOCATION) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PERSÖNLICH_VOR_ORT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEG_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_VON_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BIS_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_ADRESSE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_PARKTICKET) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_FRMDW_MWST_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PREIS_PRO_MENGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MENGENEINHEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(LA_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LA_KONTO) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LA_WDH) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ZAHLSTATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(VERG_BEHOERDE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(CNT_PUNKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BELEG_ABLAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CNT_PUNKTE_GESCHAETZT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PUNKTE_VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(PUNKTE_BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LOCATION_VERG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_IST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_SOLL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CODE_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(DESCR_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(GEZAHLT_AM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(WEBSEITE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(KUNDENNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(MODIFY_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(MODIFY_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ORT_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ADDRESSE_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUSSGELD_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BELEG_POS_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUCHUNG_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_INTERNET_APP) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_DUPL_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_DUPL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DUPL_BEMERKUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_GESCHÄFTSPARTNER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DUMMY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STORNIERT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADRESSE_SCHNELL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end --NUMBER

from vgl
)
select 
CREATE_AT  ,
SEL   ,
COMM_SONSTIGES  ,
DATUM_ORT_OK  ,
BIS_UHRZEIT  ,
TANKSTELLEN_NR  ,
DATUM_ADDRESSE_OK  ,
DATUM_BUSSGELD_OK  ,
COMM_PRODUKTE  ,
FK_IMP_BA_BEL_OLD  ,
FK_CALC_STATE  ,
BEZEICHNUNG  ,
VON_UHRZEIT  ,
CNT_PUNKTE  ,
NR_ROW ,
VON  ,
FK_UMRECHNUNGSKURS  ,
BELEG  ,
COMM_TEL_BELEG  ,
PERSÖNLICH_VOR_ORT  ,
FK_LOCATION_VERG  ,
ERG  ,
GESCHW_SOLL  ,
COMM_VERGEHEN  ,
GESCHW_UEBER_GRZ_ABZGL_MESSTOL  ,
FK_ZAHLUNGSART  ,
FK_LOCATION  ,
BRUTTO_INCL_TRINKG_EUR  ,
FK_ABL_ORDNER_PAGE  ,
MODIFY_BY  ,
FK_KATEGORIE  ,
BEL_DATUM  ,
NETTO_BETRAG  ,
FK_LA_WDH  ,
PUNKTE_VON  ,
GESCHW_IST  ,
FK_INVENTAR  ,
ZAPFSÄULE  ,
COMM_ADRESSE  ,
STEUERNUMMER  ,
FK_BIS_ARBEITSTAG  ,
BRUTTO_BETRAG_EUR  ,
MENGENEINHEIT  ,
DATUM_VERGEHEN  ,
FK_WAEHRUNG  ,
FK_FRMDW  ,
FK_STATUS  ,
SUM1 ,
FK_LAND  ,
FRMDW_MWST_BETRAG  ,
LA_DATUM  ,
CNT_PUNKTE_GESCHAETZT  ,
DATUM_DUPL_OK  ,
rownum RNR ,
FK_ARBEITSTAG  ,
CODE_BUSSGELD  ,
FK_INTERNET_APP  ,
FK_STEUERSATZ  ,
FRMDW_BRUTTO_INCL_TRINKG  ,
NETTO_BETRAG_EUR  ,
FK_GESCHÄFTSPARTNER  ,
FK_LEX_BUCHUNG  ,
FK_BUCHUNG  ,
COMM_BEGRÜNDUNG  ,
DATUM_VERPFL_BEL_OK  ,
BRUTTO_BETRAG_INCL_TRINKG  ,
FRMDW_BRUTTO_BETRAG  ,
VERG_BEHOERDE  ,
DESCR_BUSSGELD  ,
FK_REAL_BELEG_EXIST  ,
SEL_PK_INP_BELEGE_ALL ,
PK_INP_BELEGE_ALL  ,
BRUTTO_BETRAG  ,
MWST_BETRAG  ,
ZAHLUNGSBELEG  ,
FK_BELEG_ABLAGE  ,
DUPL_BEMERKUNG  ,
BELEG_UHRZEIT  ,
MODIFY_AT  ,
DATUM_BUCHUNG_OK  ,
FRMDW_NETTO_BETRAG  ,
DUMMY  ,
FK_CITY  ,
LITER  ,
FK_CALC_STATE_FRMDW  ,
BIS  ,
COMM_REST_BELEG  ,
COMM_PARKTICKET  ,
MWST_BETRAG_EUR  ,
FK_LA_KONTO  ,
DATUM_BELEG_POS_OK  ,
BELEGNUMMER  ,
FK_FRMDW_MWST_SATZ  ,
FK_CALC_STATE_EUR  ,
STORNIERT  ,
PREIS_PRO_MENGE  ,
FK_ZAHLSTATUS  ,
KUNDENNUMMER  ,
PUNKTE_BIS  ,
GESCHW_UEBER_GRZ  ,
FK_VERWENDUNGSZWECK  ,
GEZAHLT_AM  ,
CREATE_BY  ,
FK_DUPL_STATUS  ,
FK_ADRESSE_SCHNELL  ,
FK_PROJEKT  ,
FK_VON_ARBEITSTAG  ,
WEBSEITE  

 into v_comp_inp_belege_all
 from all_;



 v_inp := 5;
 dbms_output.put_line(v_inp);

 pipe row(v_comp_inp_belege_all);

return;
end;


/
--------------------------------------------------------
--  DDL for Function GETCOMPINPBELEGEALL2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "COMPANY"."GETCOMPINPBELEGEALL2" (p_inp_belege_all_old number, p_inp_belege_all_new number) return ty_comp_inp_belege_all2   PIPELINED IS

v_comp_inp_belege_all  ty_comp_inp_belege_all_2;

 v_inp number;
begin 

/*with dat1 as (select 'old' sel, null sum1, 1 nr_row, inp.*
from inp_belege_all inp
where pk_inp_belege_all = p_inp_belege_all_old
),
dat2 as (
    select 'new' sel, null sum1, 2 nr_row, inp.*

from inp_belege_all inp
where pk_inp_belege_all = p_inp_belege_all_new
),

un as (
select sel, sum1,nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_KATEGORIE	,	--	NUMBER
FK_ARBEITSTAG	,	--	NUMBER
FK_BUCHUNG	,	--	NUMBER
FK_ZAHLUNGSART	,	--	NUMBER
FK_VERWENDUNGSZWECK	,	--	NUMBER
FK_INVENTAR	,	--	NUMBER
FK_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_LAND	,	--	NUMBER
FK_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_STEUERSATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRÜNDUNG) COMM_BEGRÜNDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSÄULE	,	--	NUMBER
FK_LOCATION	,	--	NUMBER
PERSÖNLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_VON_ARBEITSTAG	,	--	NUMBER
FK_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_FRMDW	,	--	NUMBER
FK_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INTERNET_APP	,	--	NUMBER
FK_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_GESCHÄFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADRESSE_SCHNELL		--	NUMBER

from dat1
   union all
    select  sel, sum1, nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_KATEGORIE	,	--	NUMBER
FK_ARBEITSTAG	,	--	NUMBER
FK_BUCHUNG	,	--	NUMBER
FK_ZAHLUNGSART	,	--	NUMBER
FK_VERWENDUNGSZWECK	,	--	NUMBER
FK_INVENTAR	,	--	NUMBER
FK_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_LAND	,	--	NUMBER
FK_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_STEUERSATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRÜNDUNG) COMM_BEGRÜNDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSÄULE	,	--	NUMBER
FK_LOCATION	,	--	NUMBER
PERSÖNLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_VON_ARBEITSTAG	,	--	NUMBER
FK_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_FRMDW	,	--	NUMBER
FK_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_ZAHLSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
CNT_PUNKTE	,	--	NUMBER
FK_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
PUNKTE_VON	,	--	DATE
PUNKTE_BIS	,	--	DATE
FK_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
GESCHW_IST	,	--	NUMBER
GESCHW_SOLL	,	--	NUMBER
GESCHW_UEBER_GRZ	,	--	NUMBER
GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
CODE_BUSSGELD	,	--	VARCHAR2
DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INTERNET_APP	,	--	NUMBER
FK_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_GESCHÄFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADRESSE_SCHNELL		--	NUMBER
    from dat2
    ),


vgl as (
select sel, sum1, nr_row, 'erg' erg, PK_INP_BELEGE_ALL sel_PK_INP_BELEGE_ALL, 
row_number() over (partition by PK_INP_BELEGE_ALL order by nr_row) PK_INP_BELEGE_ALL,
row_number() over (partition by FK_LEX_BUCHUNG order by nr_row) FK_LEX_BUCHUNG,
row_number() over (partition by FK_KATEGORIE order by nr_row) FK_KATEGORIE,
row_number() over (partition by FK_ARBEITSTAG order by nr_row) FK_ARBEITSTAG,
row_number() over (partition by FK_BUCHUNG order by nr_row) FK_BUCHUNG,
row_number() over (partition by FK_ZAHLUNGSART order by nr_row) FK_ZAHLUNGSART,
row_number() over (partition by FK_VERWENDUNGSZWECK order by nr_row) FK_VERWENDUNGSZWECK,
row_number() over (partition by FK_INVENTAR order by nr_row) FK_INVENTAR,
row_number() over (partition by FK_PROJEKT order by nr_row) FK_PROJEKT,
row_number() over (partition by BELEGNUMMER order by nr_row) BELEGNUMMER,
row_number() over (partition by BEZEICHNUNG order by nr_row) BEZEICHNUNG,
row_number() over (partition by FK_LAND order by nr_row) FK_LAND,
row_number() over (partition by FK_CITY order by nr_row) FK_CITY,
row_number() over (partition by BEL_DATUM order by nr_row) BEL_DATUM,
row_number() over (partition by VON order by nr_row) VON,
row_number() over (partition by BIS order by nr_row) BIS,
row_number() over (partition by NETTO_BETRAG order by nr_row) NETTO_BETRAG,
row_number() over (partition by FK_STEUERSATZ order by nr_row) FK_STEUERSATZ,
row_number() over (partition by MWST_BETRAG order by nr_row) MWST_BETRAG,
row_number() over (partition by BRUTTO_BETRAG order by nr_row) BRUTTO_BETRAG,
row_number() over (partition by FK_WAEHRUNG order by nr_row) FK_WAEHRUNG,
row_number() over (partition by STEUERNUMMER order by nr_row) STEUERNUMMER,
row_number() over (partition by FK_UMRECHNUNGSKURS order by nr_row) FK_UMRECHNUNGSKURS,
row_number() over (partition by COMM_REST_BELEG order by nr_row) COMM_REST_BELEG,
row_number() over (partition by COMM_TEL_BELEG order by nr_row) COMM_TEL_BELEG,
row_number() over (partition by COMM_PRODUKTE order by nr_row) COMM_PRODUKTE,
row_number() over (partition by COMM_BEGRÜNDUNG order by nr_row) COMM_BEGRÜNDUNG,
row_number() over (partition by COMM_SONSTIGES order by nr_row) COMM_SONSTIGES,
row_number() over (partition by BELEG order by nr_row) BELEG,
row_number() over (partition by ZAHLUNGSBELEG order by nr_row) ZAHLUNGSBELEG,
row_number() over (partition by LITER order by nr_row) LITER,
row_number() over (partition by ZAPFSÄULE order by nr_row) ZAPFSÄULE,
row_number() over (partition by FK_LOCATION order by nr_row) FK_LOCATION,
row_number() over (partition by PERSÖNLICH_VOR_ORT order by nr_row) PERSÖNLICH_VOR_ORT,
row_number() over (partition by BELEG_UHRZEIT order by nr_row) BELEG_UHRZEIT,
row_number() over (partition by VON_UHRZEIT order by nr_row) VON_UHRZEIT,
row_number() over (partition by BIS_UHRZEIT order by nr_row) BIS_UHRZEIT,
row_number() over (partition by FK_VON_ARBEITSTAG order by nr_row) FK_VON_ARBEITSTAG,
row_number() over (partition by FK_BIS_ARBEITSTAG order by nr_row) FK_BIS_ARBEITSTAG,
row_number() over (partition by COMM_ADRESSE order by nr_row) COMM_ADRESSE,
row_number() over (partition by TANKSTELLEN_NR order by nr_row) TANKSTELLEN_NR,
row_number() over (partition by BRUTTO_BETRAG_INCL_TRINKG order by nr_row) BRUTTO_BETRAG_INCL_TRINKG,
row_number() over (partition by COMM_PARKTICKET order by nr_row) COMM_PARKTICKET,
row_number() over (partition by FRMDW_NETTO_BETRAG order by nr_row) FRMDW_NETTO_BETRAG,
row_number() over (partition by FK_FRMDW order by nr_row) FK_FRMDW,
row_number() over (partition by FK_FRMDW_MWST_SATZ order by nr_row) FK_FRMDW_MWST_SATZ,
row_number() over (partition by FRMDW_MWST_BETRAG order by nr_row) FRMDW_MWST_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_BETRAG order by nr_row) FRMDW_BRUTTO_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_INCL_TRINKG order by nr_row) FRMDW_BRUTTO_INCL_TRINKG,
row_number() over (partition by MWST_BETRAG_EUR order by nr_row) MWST_BETRAG_EUR,
row_number() over (partition by BRUTTO_BETRAG_EUR order by nr_row) BRUTTO_BETRAG_EUR,
row_number() over (partition by BRUTTO_INCL_TRINKG_EUR order by nr_row) BRUTTO_INCL_TRINKG_EUR,
row_number() over (partition by NETTO_BETRAG_EUR order by nr_row) NETTO_BETRAG_EUR,
row_number() over (partition by PREIS_PRO_MENGE order by nr_row) PREIS_PRO_MENGE,
row_number() over (partition by MENGENEINHEIT order by nr_row) MENGENEINHEIT,
row_number() over (partition by LA_DATUM order by nr_row) LA_DATUM,
row_number() over (partition by FK_LA_KONTO order by nr_row) FK_LA_KONTO,
row_number() over (partition by FK_LA_WDH order by nr_row) FK_LA_WDH,
row_number() over (partition by FK_ZAHLSTATUS order by nr_row) FK_ZAHLSTATUS,
row_number() over (partition by COMM_VERGEHEN order by nr_row) COMM_VERGEHEN,
row_number() over (partition by VERG_BEHOERDE order by nr_row) VERG_BEHOERDE,
row_number() over (partition by CNT_PUNKTE order by nr_row) CNT_PUNKTE,
row_number() over (partition by FK_BELEG_ABLAGE order by nr_row) FK_BELEG_ABLAGE,
row_number() over (partition by FK_ABL_ORDNER_PAGE order by nr_row) FK_ABL_ORDNER_PAGE,
row_number() over (partition by CNT_PUNKTE_GESCHAETZT order by nr_row) CNT_PUNKTE_GESCHAETZT,
row_number() over (partition by PUNKTE_VON order by nr_row) PUNKTE_VON,
row_number() over (partition by PUNKTE_BIS order by nr_row) PUNKTE_BIS,
row_number() over (partition by FK_LOCATION_VERG order by nr_row) FK_LOCATION_VERG,
row_number() over (partition by FK_IMP_BA_BEL_OLD order by nr_row) FK_IMP_BA_BEL_OLD,
row_number() over (partition by GESCHW_IST order by nr_row) GESCHW_IST,
row_number() over (partition by GESCHW_SOLL order by nr_row) GESCHW_SOLL,
row_number() over (partition by GESCHW_UEBER_GRZ order by nr_row) GESCHW_UEBER_GRZ,
row_number() over (partition by GESCHW_UEBER_GRZ_ABZGL_MESSTOL order by nr_row) GESCHW_UEBER_GRZ_ABZGL_MESSTOL,
row_number() over (partition by CODE_BUSSGELD order by nr_row) CODE_BUSSGELD,
row_number() over (partition by DESCR_BUSSGELD order by nr_row) DESCR_BUSSGELD,
row_number() over (partition by GEZAHLT_AM order by nr_row) GEZAHLT_AM,
row_number() over (partition by WEBSEITE order by nr_row) WEBSEITE,
row_number() over (partition by KUNDENNUMMER order by nr_row) KUNDENNUMMER,
row_number() over (partition by FK_REAL_BELEG_EXIST order by nr_row) FK_REAL_BELEG_EXIST,
row_number() over (partition by FK_CALC_STATE order by nr_row) FK_CALC_STATE,
row_number() over (partition by FK_CALC_STATE_EUR order by nr_row) FK_CALC_STATE_EUR,
row_number() over (partition by FK_CALC_STATE_FRMDW order by nr_row) FK_CALC_STATE_FRMDW,
row_number() over (partition by FK_STATUS order by nr_row) FK_STATUS,
row_number() over (partition by DATUM_VERGEHEN order by nr_row) DATUM_VERGEHEN,
row_number() over (partition by CREATE_AT order by nr_row) CREATE_AT,
row_number() over (partition by CREATE_BY order by nr_row) CREATE_BY,
row_number() over (partition by MODIFY_AT order by nr_row) MODIFY_AT,
row_number() over (partition by MODIFY_BY order by nr_row) MODIFY_BY,
row_number() over (partition by DATUM_ORT_OK order by nr_row) DATUM_ORT_OK,
row_number() over (partition by DATUM_ADDRESSE_OK order by nr_row) DATUM_ADDRESSE_OK,
row_number() over (partition by DATUM_BUSSGELD_OK order by nr_row) DATUM_BUSSGELD_OK,
row_number() over (partition by DATUM_BELEG_POS_OK order by nr_row) DATUM_BELEG_POS_OK,
row_number() over (partition by DATUM_BUCHUNG_OK order by nr_row) DATUM_BUCHUNG_OK,
row_number() over (partition by DATUM_VERPFL_BEL_OK order by nr_row) DATUM_VERPFL_BEL_OK,
row_number() over (partition by FK_INTERNET_APP order by nr_row) FK_INTERNET_APP,
row_number() over (partition by FK_DUPL_STATUS order by nr_row) FK_DUPL_STATUS,
row_number() over (partition by DATUM_DUPL_OK order by nr_row) DATUM_DUPL_OK,
row_number() over (partition by DUPL_BEMERKUNG order by nr_row) DUPL_BEMERKUNG,
row_number() over (partition by FK_GESCHÄFTSPARTNER order by nr_row) FK_GESCHÄFTSPARTNER,
row_number() over (partition by DUMMY order by nr_row) DUMMY,
row_number() over (partition by STORNIERT order by nr_row) STORNIERT,
row_number() over (partition by FK_ADRESSE_SCHNELL order by nr_row) FK_ADRESSE_SCHNELL





from un
)

,


all_ as (
select sel, sum1,nr_row, pk_inp_belege_all sel_pk_inp_belege_all,  'erg' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_KATEGORIE) FK_KATEGORIE	,	--	NUMBER
to_char(FK_ARBEITSTAG) FK_ARBEITSTAG	,	--	NUMBER
to_char(FK_BUCHUNG) FK_BUCHUNG	,	--	NUMBER
to_char(FK_ZAHLUNGSART) FK_ZAHLUNGSART	,	--	NUMBER
to_char(FK_VERWENDUNGSZWECK	) FK_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INVENTAR	) FK_INVENTAR	,	--	NUMBER
to_char(FK_PROJEKT) FK_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_LAND) FK_LAND	,	--	NUMBER
to_char(FK_CITY) FK_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_STEUERSATZ) FK_STEUERSATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_WAEHRUNG) fK_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_UMRECHNUNGSKURS) FK_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRÜNDUNG)) COMM_BEGRÜNDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSÄULE) ZAPFSÄULE	,	--	NUMBER
to_char(FK_LOCATION) FK_LOCATION	,	--	NUMBER
to_char(PERSÖNLICH_VOR_ORT) PERSÖNLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_VON_ARBEITSTAG) FK_VON_ARBEITSTAG, --NUMBER
to_char(FK_BIS_ARBEITSTAG) FK_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_FRMDW) FK_FRMDW, --NUMBER
to_char(FK_FRMDW_MWST_SATZ) FK_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_ZAHLSTATUS) FK_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BELEG_ABLAGE) FK_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOCATION_VERG) FK_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_STATUS) FK_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INTERNET_APP) FK_INTERNET_APP, --NUMBER
to_char(FK_DUPL_STATUS) FK_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_GESCHÄFTSPARTNER) FK_GESCHÄFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADRESSE_SCHNELL) FK_ADRESSE_SCHNELL --NUMBER

from un
union all
select sel, sum1,nr_row,sel_pk_inp_belege_all sel_pk_inp_belege_all, 'zw' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_KATEGORIE) FK_KATEGORIE	,	--	NUMBER
to_char(FK_ARBEITSTAG) FK_ARBEITSTAG	,	--	NUMBER
to_char(FK_BUCHUNG) FK_BUCHUNG	,	--	NUMBER
to_char(FK_ZAHLUNGSART) FK_ZAHLUNGSART	,	--	NUMBER
to_char(FK_VERWENDUNGSZWECK	) FK_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INVENTAR	) FK_INVENTAR	,	--	NUMBER
to_char(FK_PROJEKT) FK_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_LAND) FK_LAND	,	--	NUMBER
to_char(FK_CITY) FK_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_STEUERSATZ) FK_STEUERSATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_WAEHRUNG) fK_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_UMRECHNUNGSKURS) FK_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRÜNDUNG)) COMM_BEGRÜNDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSÄULE) ZAPFSÄULE	,	--	NUMBER
to_char(FK_LOCATION) FK_LOCATION	,	--	NUMBER
to_char(PERSÖNLICH_VOR_ORT) PERSÖNLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_VON_ARBEITSTAG) FK_VON_ARBEITSTAG, --NUMBER
to_char(FK_BIS_ARBEITSTAG) FK_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_FRMDW) FK_FRMDW, --NUMBER
to_char(FK_FRMDW_MWST_SATZ) FK_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_ZAHLSTATUS) FK_ZAHLSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(CNT_PUNKTE) CNT_PUNKTE, --NUMBER
to_char(FK_BELEG_ABLAGE) FK_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(CNT_PUNKTE_GESCHAETZT) CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(PUNKTE_VON) PUNKTE_VON, --DATE
to_char(PUNKTE_BIS) PUNKTE_BIS, --DATE
to_char(FK_LOCATION_VERG) FK_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(GESCHW_IST) GESCHW_IST, --NUMBER
to_char(GESCHW_SOLL) GESCHW_SOLL, --NUMBER
to_char(GESCHW_UEBER_GRZ) GESCHW_UEBER_GRZ, --NUMBER
to_char(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(CODE_BUSSGELD) CODE_BUSSGELD, --VARCHAR2
to_char(DESCR_BUSSGELD) DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_STATUS) FK_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INTERNET_APP) FK_INTERNET_APP, --NUMBER
to_char(FK_DUPL_STATUS) FK_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_GESCHÄFTSPARTNER) FK_GESCHÄFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADRESSE_SCHNELL) FK_ADRESSE_SCHNELL --NUMBER

from 
vgl
union all
select null sel, 

case when max(pk_inp_belege_all)=1 then 1 else 0 end  +
case when max(FK_LEX_BUCHUNG) =1 then 1 else 0 end  +
case when max(FK_KATEGORIE) =1 then 1 else 0 end +
case when max(FK_ARBEITSTAG) =1 then 1 else 0 end +
case when max(FK_BUCHUNG)=1 then 1 else 0 end 	+
case when max(FK_ZAHLUNGSART) =1 then 1 else 0 end 		

sum1, null nr_row, max(sel_pk_inp_belege_all) sel_pk_inp_belege_all, 'erg' erg,
case when max(PK_INP_BELEGE_ALL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_KATEGORIE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ZAHLUNGSART) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_VERWENDUNGSZWECK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_INVENTAR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_PROJEKT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEGNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BEZEICHNUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_LAND) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CITY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BEL_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STEUERSATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_WAEHRUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STEUERNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_UMRECHNUNGSKURS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_REST_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_TEL_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_PRODUKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_BEGRÜNDUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_SONSTIGES) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(ZAHLUNGSBELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(LITER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(ZAPFSÄULE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LOCATION) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PERSÖNLICH_VOR_ORT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEG_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_VON_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BIS_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_ADRESSE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_PARKTICKET) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_FRMDW_MWST_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PREIS_PRO_MENGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MENGENEINHEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(LA_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LA_KONTO) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LA_WDH) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ZAHLSTATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(VERG_BEHOERDE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(CNT_PUNKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BELEG_ABLAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CNT_PUNKTE_GESCHAETZT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PUNKTE_VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(PUNKTE_BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LOCATION_VERG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_IST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_SOLL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(CODE_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(DESCR_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(GEZAHLT_AM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(WEBSEITE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(KUNDENNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(MODIFY_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(MODIFY_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ORT_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ADDRESSE_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUSSGELD_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BELEG_POS_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUCHUNG_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_INTERNET_APP) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_DUPL_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_DUPL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DUPL_BEMERKUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_GESCHÄFTSPARTNER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DUMMY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STORNIERT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADRESSE_SCHNELL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end --NUMBER

from vgl
)
*/
select 
to_char(1),
to_char(2)
 into v_comp_inp_belege_all
 from dual

;


 v_inp := 5;
 dbms_output.put_line(v_inp);

 pipe row(v_comp_inp_belege_all);



return ;
end;


/
--------------------------------------------------------
--  DDL for Function GETCOMPINPBELEGEALL3
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "COMPANY"."GETCOMPINPBELEGEALL3" (p_inp_belege_all_old number, p_inp_belege_all_new number) return ty_comp_inp_belege_all   PIPELINED IS

v_comp_inp_belege_all  ty_comp_inp_belege_all_1;

 v_inp number;
begin 

for i in (
with dat1 as (
                select 'old' sel, null sum1, 1 nr_row, inp.*
                from t_inp_belege_all inp
                where pk_inp_belege_all = p_inp_belege_all_old
),
dat2 as (
                select 'new' sel, null sum1, 2 nr_row, inp.*        
                from t_inp_belege_all inp
                where pk_inp_belege_all = p_inp_belege_all_new
),

un as (
select sel, sum1,nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_BAS_KAT_KATEGORIE	,	--	NUMBER
FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
FK_KTO_BUCHUNG	,	--	NUMBER
FK_STD_KTO_ZAHLUNGSART,	--	NUMBER
FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
FK_INV_INVENTAR	,	--	NUMBER
FK_PROJ_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_ADR_LAND	,	--	NUMBER
FK_ADR_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_BAS_STEU_STEUER_SATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_BAS_MON_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRUENDUNG) COMM_BEGRUENDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSAEULE	,	--	NUMBER
FK_LOC_LOCATION	,	--	NUMBER
PERSOENLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_BAS_KAL_VON_ARBEITSTAG	,	--	NUMBER
FK_BAS_KAL_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_BAS_MON_FRMDW	,	--	NUMBER
FK_BAS_MON_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_STD_INP_ZAHLUNGSSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
VERG_CNT_PUNKTE	,	--	NUMBER
FK_BEL_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
VERG_CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
VERG_PUNKTE_VON	,	--	DATE
VERG_PUNKTE_BIS	,	--	DATE
FK_LOC_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
VERG_GESCHW_IST	,	--	NUMBER
VERG_GESCHW_SOLL	,	--	NUMBER
VERG_GESCHW_UEBER_GRZ	,	--	NUMBER
VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
VERG_CODE_BUSSGELD	,	--	VARCHAR2
VERG_DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_STD_INP_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INT_INTERNET_APP	,	--	NUMBER
FK_CONTR_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_KON_GESCHAEFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADR_ADRESSE_SCHNELL	,	--	NUMBER
FK_LEX_RELATION_SRC,
FK_MAIN_KEY_SRC,
FK_STD_CONTR_STATUS_KAT,
FK_STD_CONTR_STATUS_VERW,
DATUM_STATUS_VERW,
DATUM_STATUS_KAT,
VERG_DATUM_RECHTSKRAFT,
VERG_DATUM_TILGUNG,
VERG_NUMMER_FLENS,
VERG_AKTENZEICHEN,
VERG_TATBESTANDSNUMMER,
FK_VER_VERTRAG

from dat1
   union all
    select  sel, sum1, nr_row, 
PK_INP_BELEGE_ALL	,	--	NUMBER
FK_LEX_BUCHUNG	,	--	NUMBER
FK_BAS_KAT_KATEGORIE	,	--	NUMBER
FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
FK_KTO_BUCHUNG	,	--	NUMBER
FK_STD_KTO_ZAHLUNGSART,	--	NUMBER
FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
FK_INV_INVENTAR	,	--	NUMBER
FK_PROJ_PROJEKT	,	--	NUMBER
BELEGNUMMER	,	--	VARCHAR2
BEZEICHNUNG	,	--	VARCHAR2
FK_ADR_LAND	,	--	NUMBER
FK_ADR_CITY	,	--	NUMBER
BEL_DATUM	,	--	DATE
VON	,	--	DATE
BIS	,	--	DATE
NETTO_BETRAG	,	--	NUMBER
FK_BAS_STEU_STEUER_SATZ	,	--	NUMBER
MWST_BETRAG	,	--	NUMBER
BRUTTO_BETRAG	,	--	NUMBER
FK_BAS_MON_WAEHRUNG	,	--	NUMBER
STEUERNUMMER	,	--	VARCHAR2
FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
length(COMM_REST_BELEG) COMM_REST_BELEG	,	--	CLOB
length(COMM_TEL_BELEG) COMM_TEL_BELEG	,	--	CLOB
length(COMM_PRODUKTE) COMM_PRODUKTE	,	--	CLOB
length(COMM_BEGRUENDUNG) COMM_BEGRUENDUNG	,	--	CLOB
length(COMM_SONSTIGES) COMM_SONSTIGES	,	--	CLOB
length(BELEG) BELEG	,	--	BLOB
length(ZAHLUNGSBELEG) ZAHLUNGSBELEG	,	--	BLOB
LITER	,	--	NUMBER
ZAPFSAEULE	,	--	NUMBER
FK_LOC_LOCATION	,	--	NUMBER
PERSOENLICH_VOR_ORT	,	--	NUMBER
BELEG_UHRZEIT	,	--	DATE
VON_UHRZEIT	,	--	DATE
BIS_UHRZEIT	,	--	DATE
FK_BAS_KAL_VON_ARBEITSTAG	,	--	NUMBER
FK_BAS_KAL_BIS_ARBEITSTAG	,	--	NUMBER
COMM_ADRESSE	,	--	VARCHAR2
TANKSTELLEN_NR	,	--	VARCHAR2
BRUTTO_BETRAG_INCL_TRINKG	,	--	NUMBER
length(COMM_PARKTICKET) COMM_PARKTICKET	,	--	CLOB
FRMDW_NETTO_BETRAG	,	--	NUMBER
FK_BAS_MON_FRMDW	,	--	NUMBER
FK_BAS_MON_FRMDW_MWST_SATZ	,	--	NUMBER
FRMDW_MWST_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_BETRAG	,	--	NUMBER
FRMDW_BRUTTO_INCL_TRINKG	,	--	NUMBER
MWST_BETRAG_EUR	,	--	NUMBER
BRUTTO_BETRAG_EUR	,	--	NUMBER
BRUTTO_INCL_TRINKG_EUR	,	--	NUMBER
NETTO_BETRAG_EUR	,	--	NUMBER
PREIS_PRO_MENGE	,	--	NUMBER
MENGENEINHEIT	,	--	NUMBER
LA_DATUM	,	--	DATE
FK_LA_KONTO	,	--	NUMBER
FK_LA_WDH	,	--	NUMBER
FK_STD_INP_ZAHLUNGSSTATUS	,	--	NUMBER
length(COMM_VERGEHEN) COMM_VERGEHEN	,	--	CLOB
VERG_BEHOERDE	,	--	VARCHAR2
VERG_CNT_PUNKTE	,	--	NUMBER
FK_BEL_BELEG_ABLAGE	,	--	VARCHAR2
FK_ABL_ORDNER_PAGE	,	--	NUMBER
VERG_CNT_PUNKTE_GESCHAETZT	,	--	NUMBER
VERG_PUNKTE_VON	,	--	DATE
VERG_PUNKTE_BIS	,	--	DATE
FK_LOC_LOCATION_VERG	,	--	NUMBER
FK_IMP_BA_BEL_OLD	,	--	NUMBER
VERG_GESCHW_IST	,	--	NUMBER
VERG_GESCHW_SOLL	,	--	NUMBER
VERG_GESCHW_UEBER_GRZ	,	--	NUMBER
VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL	,	--	NUMBER
VERG_CODE_BUSSGELD	,	--	VARCHAR2
VERG_DESCR_BUSSGELD	,	--	VARCHAR2
GEZAHLT_AM	,	--	DATE
WEBSEITE	,	--	VARCHAR2
KUNDENNUMMER	,	--	VARCHAR2
FK_REAL_BELEG_EXIST	,	--	NUMBER
FK_CALC_STATE	,	--	NUMBER
FK_CALC_STATE_EUR	,	--	NUMBER
FK_CALC_STATE_FRMDW	,	--	NUMBER
FK_STD_INP_STATUS	,	--	NUMBER
DATUM_VERGEHEN	,	--	DATE
CREATE_AT	,	--	DATE
CREATE_BY	,	--	VARCHAR2
MODIFY_AT	,	--	DATE
MODIFY_BY	,	--	DATE
DATUM_ORT_OK	,	--	DATE
DATUM_ADDRESSE_OK	,	--	DATE
DATUM_BUSSGELD_OK	,	--	DATE
DATUM_BELEG_POS_OK	,	--	DATE
DATUM_BUCHUNG_OK	,	--	DATE
DATUM_VERPFL_BEL_OK	,	--	DATE
FK_INT_INTERNET_APP	,	--	NUMBER
FK_CONTR_DUPL_STATUS	,	--	NUMBER
DATUM_DUPL_OK	,	--	DATE
DUPL_BEMERKUNG	,	--	VARCHAR2
FK_KON_GESCHAEFTSPARTNER	,	--	NUMBER
DUMMY	,	--	NUMBER
STORNIERT	,	--	NUMBER
FK_ADR_ADRESSE_SCHNELL	,	--	NUMBER
FK_LEX_RELATION_SRC,
FK_MAIN_KEY_SRC,
FK_STD_CONTR_STATUS_KAT,
FK_STD_CONTR_STATUS_VERW,
DATUM_STATUS_VERW,
DATUM_STATUS_KAT,
VERG_DATUM_RECHTSKRAFT,
VERG_DATUM_TILGUNG,
VERG_NUMMER_FLENS,
VERG_AKTENZEICHEN,
VERG_TATBESTANDSNUMMER,
FK_VER_VERTRAG
    from dat2
    ),


vgl as (
select sel, sum1, nr_row, 'erg' erg, PK_INP_BELEGE_ALL sel_PK_INP_BELEGE_ALL, 
row_number() over (partition by PK_INP_BELEGE_ALL order by nr_row) PK_INP_BELEGE_ALL,
row_number() over (partition by FK_LEX_BUCHUNG order by nr_row) FK_LEX_BUCHUNG,
row_number() over (partition by FK_BAS_KAT_KATEGORIE order by nr_row) FK_BAS_KAT_KATEGORIE,
row_number() over (partition by FK_BAS_KAL_ARBEITSTAG order by nr_row) FK_BAS_KAL_ARBEITSTAG,
row_number() over (partition by FK_KTO_BUCHUNG order by nr_row) FK_KTO_BUCHUNG,
row_number() over (partition by FK_STD_KTO_ZAHLUNGSART order by nr_row) FK_STD_KTO_ZAHLUNGSART,
row_number() over (partition by FK_STD_VERW_VERWENDUNGSZWECK order by nr_row) FK_STD_VERW_VERWENDUNGSZWECK,
row_number() over (partition by FK_INV_INVENTAR order by nr_row) FK_INV_INVENTAR,
row_number() over (partition by FK_PROJ_PROJEKT order by nr_row) FK_PROJ_PROJEKT,
row_number() over (partition by BELEGNUMMER order by nr_row) BELEGNUMMER,
row_number() over (partition by BEZEICHNUNG order by nr_row) BEZEICHNUNG,
row_number() over (partition by FK_ADR_LAND order by nr_row) FK_ADR_LAND,
row_number() over (partition by FK_ADR_CITY order by nr_row) FK_ADR_CITY,
row_number() over (partition by BEL_DATUM order by nr_row) BEL_DATUM,
row_number() over (partition by VON order by nr_row) VON,
row_number() over (partition by BIS order by nr_row) BIS,
row_number() over (partition by NETTO_BETRAG order by nr_row) NETTO_BETRAG,
row_number() over (partition by FK_BAS_STEU_STEUER_SATZ order by nr_row) FK_BAS_STEU_STEUER_SATZ,
row_number() over (partition by MWST_BETRAG order by nr_row) MWST_BETRAG,
row_number() over (partition by BRUTTO_BETRAG order by nr_row) BRUTTO_BETRAG,
row_number() over (partition by FK_BAS_MON_WAEHRUNG order by nr_row) FK_BAS_MON_WAEHRUNG,
row_number() over (partition by STEUERNUMMER order by nr_row) STEUERNUMMER,
row_number() over (partition by FK_BAS_MON_UMRECHNUNGSKURS order by nr_row) FK_BAS_MON_UMRECHNUNGSKURS,
row_number() over (partition by COMM_REST_BELEG order by nr_row) COMM_REST_BELEG,
row_number() over (partition by COMM_TEL_BELEG order by nr_row) COMM_TEL_BELEG,
row_number() over (partition by COMM_PRODUKTE order by nr_row) COMM_PRODUKTE,
row_number() over (partition by COMM_BEGRUENDUNG order by nr_row) COMM_BEGRUENDUNG,
row_number() over (partition by COMM_SONSTIGES order by nr_row) COMM_SONSTIGES,
row_number() over (partition by BELEG order by nr_row) BELEG,
row_number() over (partition by ZAHLUNGSBELEG order by nr_row) ZAHLUNGSBELEG,
row_number() over (partition by LITER order by nr_row) LITER,
row_number() over (partition by ZAPFSAEULE order by nr_row) ZAPFSAEULE,
row_number() over (partition by FK_LOC_LOCATION order by nr_row) FK_LOC_LOCATION,
row_number() over (partition by PERSOENLICH_VOR_ORT order by nr_row) PERSOENLICH_VOR_ORT,
row_number() over (partition by BELEG_UHRZEIT order by nr_row) BELEG_UHRZEIT,
row_number() over (partition by VON_UHRZEIT order by nr_row) VON_UHRZEIT,
row_number() over (partition by BIS_UHRZEIT order by nr_row) BIS_UHRZEIT,
row_number() over (partition by FK_BAS_KAL_VON_ARBEITSTAG order by nr_row) FK_BAS_KAL_VON_ARBEITSTAG,
row_number() over (partition by FK_BAS_KAL_BIS_ARBEITSTAG order by nr_row) FK_BAS_KAL_BIS_ARBEITSTAG,
row_number() over (partition by COMM_ADRESSE order by nr_row) COMM_ADRESSE,
row_number() over (partition by TANKSTELLEN_NR order by nr_row) TANKSTELLEN_NR,
row_number() over (partition by BRUTTO_BETRAG_INCL_TRINKG order by nr_row) BRUTTO_BETRAG_INCL_TRINKG,
row_number() over (partition by COMM_PARKTICKET order by nr_row) COMM_PARKTICKET,
row_number() over (partition by FRMDW_NETTO_BETRAG order by nr_row) FRMDW_NETTO_BETRAG,
row_number() over (partition by FK_BAS_MON_FRMDW order by nr_row) FK_BAS_MON_FRMDW,
row_number() over (partition by FK_BAS_MON_FRMDW_MWST_SATZ order by nr_row) FK_BAS_MON_FRMDW_MWST_SATZ,
row_number() over (partition by FRMDW_MWST_BETRAG order by nr_row) FRMDW_MWST_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_BETRAG order by nr_row) FRMDW_BRUTTO_BETRAG,
row_number() over (partition by FRMDW_BRUTTO_INCL_TRINKG order by nr_row) FRMDW_BRUTTO_INCL_TRINKG,
row_number() over (partition by MWST_BETRAG_EUR order by nr_row) MWST_BETRAG_EUR,
row_number() over (partition by BRUTTO_BETRAG_EUR order by nr_row) BRUTTO_BETRAG_EUR,
row_number() over (partition by BRUTTO_INCL_TRINKG_EUR order by nr_row) BRUTTO_INCL_TRINKG_EUR,
row_number() over (partition by NETTO_BETRAG_EUR order by nr_row) NETTO_BETRAG_EUR,
row_number() over (partition by PREIS_PRO_MENGE order by nr_row) PREIS_PRO_MENGE,
row_number() over (partition by MENGENEINHEIT order by nr_row) MENGENEINHEIT,
row_number() over (partition by LA_DATUM order by nr_row) LA_DATUM,
row_number() over (partition by FK_LA_KONTO order by nr_row) FK_LA_KONTO,
row_number() over (partition by FK_LA_WDH order by nr_row) FK_LA_WDH,
row_number() over (partition by FK_STD_INP_ZAHLUNGSSTATUS order by nr_row) FK_STD_INP_ZAHLUNGSSTATUS,
row_number() over (partition by COMM_VERGEHEN order by nr_row) COMM_VERGEHEN,
row_number() over (partition by VERG_BEHOERDE order by nr_row) VERG_BEHOERDE,
row_number() over (partition by VERG_CNT_PUNKTE order by nr_row) VERG_CNT_PUNKTE,
row_number() over (partition by FK_BEL_BELEG_ABLAGE order by nr_row) FK_BEL_BELEG_ABLAGE,
row_number() over (partition by FK_ABL_ORDNER_PAGE order by nr_row) FK_ABL_ORDNER_PAGE,
row_number() over (partition by VERG_CNT_PUNKTE_GESCHAETZT order by nr_row) VERG_CNT_PUNKTE_GESCHAETZT,
row_number() over (partition by VERG_PUNKTE_VON order by nr_row) VERG_PUNKTE_VON,
row_number() over (partition by VERG_PUNKTE_BIS order by nr_row) VERG_PUNKTE_BIS,
row_number() over (partition by FK_LOC_LOCATION_VERG order by nr_row) FK_LOC_LOCATION_VERG,
row_number() over (partition by FK_IMP_BA_BEL_OLD order by nr_row) FK_IMP_BA_BEL_OLD,
row_number() over (partition by VERG_GESCHW_IST order by nr_row) VERG_GESCHW_IST,
row_number() over (partition by VERG_GESCHW_SOLL order by nr_row) VERG_GESCHW_SOLL,
row_number() over (partition by VERG_GESCHW_UEBER_GRZ order by nr_row) VERG_GESCHW_UEBER_GRZ,
row_number() over (partition by VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL order by nr_row) VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL,
row_number() over (partition by VERG_CODE_BUSSGELD order by nr_row) VERG_CODE_BUSSGELD,
row_number() over (partition by VERG_DESCR_BUSSGELD order by nr_row) VERG_DESCR_BUSSGELD,
row_number() over (partition by GEZAHLT_AM order by nr_row) GEZAHLT_AM,
row_number() over (partition by WEBSEITE order by nr_row) WEBSEITE,
row_number() over (partition by KUNDENNUMMER order by nr_row) KUNDENNUMMER,
row_number() over (partition by FK_REAL_BELEG_EXIST order by nr_row) FK_REAL_BELEG_EXIST,
row_number() over (partition by FK_CALC_STATE order by nr_row) FK_CALC_STATE,
row_number() over (partition by FK_CALC_STATE_EUR order by nr_row) FK_CALC_STATE_EUR,
row_number() over (partition by FK_CALC_STATE_FRMDW order by nr_row) FK_CALC_STATE_FRMDW,
row_number() over (partition by FK_STD_INP_STATUS order by nr_row) FK_STD_INP_STATUS,
row_number() over (partition by DATUM_VERGEHEN order by nr_row) DATUM_VERGEHEN,
row_number() over (partition by CREATE_AT order by nr_row) CREATE_AT,
row_number() over (partition by CREATE_BY order by nr_row) CREATE_BY,
row_number() over (partition by MODIFY_AT order by nr_row) MODIFY_AT,
row_number() over (partition by MODIFY_BY order by nr_row) MODIFY_BY,
row_number() over (partition by DATUM_ORT_OK order by nr_row) DATUM_ORT_OK,
row_number() over (partition by DATUM_ADDRESSE_OK order by nr_row) DATUM_ADDRESSE_OK,
row_number() over (partition by DATUM_BUSSGELD_OK order by nr_row) DATUM_BUSSGELD_OK,
row_number() over (partition by DATUM_BELEG_POS_OK order by nr_row) DATUM_BELEG_POS_OK,
row_number() over (partition by DATUM_BUCHUNG_OK order by nr_row) DATUM_BUCHUNG_OK,
row_number() over (partition by DATUM_VERPFL_BEL_OK order by nr_row) DATUM_VERPFL_BEL_OK,
row_number() over (partition by FK_INT_INTERNET_APP order by nr_row) FK_INT_INTERNET_APP,
row_number() over (partition by FK_CONTR_DUPL_STATUS order by nr_row) FK_CONTR_DUPL_STATUS,
row_number() over (partition by DATUM_DUPL_OK order by nr_row) DATUM_DUPL_OK,
row_number() over (partition by DUPL_BEMERKUNG order by nr_row) DUPL_BEMERKUNG,
row_number() over (partition by FK_KON_GESCHAEFTSPARTNER order by nr_row) FK_KON_GESCHAEFTSPARTNER,
row_number() over (partition by DUMMY order by nr_row) DUMMY,
row_number() over (partition by STORNIERT order by nr_row) STORNIERT,
row_number() over (partition by FK_ADR_ADRESSE_SCHNELL order by nr_row) FK_ADR_ADRESSE_SCHNELL,
row_number() over (partition by FK_LEX_RELATION_SRC order by nr_row) FK_LEX_RELATION_SRC,
row_number() over (partition by FK_MAIN_KEY_SRC order by nr_row) FK_MAIN_KEY_SRC,
row_number() over (partition by FK_STD_CONTR_STATUS_KAT order by nr_row) FK_STD_CONTR_STATUS_KAT,
row_number() over (partition by FK_STD_CONTR_STATUS_VERW order by nr_row) FK_STD_CONTR_STATUS_VERW,
row_number() over (partition by DATUM_STATUS_VERW order by nr_row) DATUM_STATUS_VERW,
row_number() over (partition by DATUM_STATUS_KAT order by nr_row) DATUM_STATUS_KAT,
row_number() over (partition by VERG_DATUM_RECHTSKRAFT order by nr_row) VERG_DATUM_RECHTSKRAFT,
row_number() over (partition by VERG_DATUM_TILGUNG order by nr_row) VERG_DATUM_TILGUNG,
row_number() over (partition by VERG_NUMMER_FLENS order by nr_row) VERG_NUMMER_FLENS,
row_number() over (partition by VERG_AKTENZEICHEN order by nr_row) VERG_AKTENZEICHEN,
row_number() over (partition by VERG_TATBESTANDSNUMMER order by nr_row) VERG_TATBESTANDSNUMMER,
row_number() over (partition by FK_VER_VERTRAG order by nr_row) FK_VER_VERTRAG







from un
)

,


all_ as (
select sel, sum1,nr_row, pk_inp_belege_all sel_pk_inp_belege_all,  'erg' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_BAS_KAT_KATEGORIE) FK_BAS_KAT_KATEGORIE	,	--	NUMBER
to_char(FK_BAS_KAL_ARBEITSTAG) FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
to_char(FK_KTO_BUCHUNG) FK_KTO_BUCHUNG	,	--	NUMBER
to_char(FK_STD_KTO_ZAHLUNGSART) FK_STD_KTO_ZAHLUNGSART	,	--	NUMBER
to_char(FK_STD_VERW_VERWENDUNGSZWECK	) FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INV_INVENTAR	) FK_INV_INVENTAR	,	--	NUMBER
to_char(FK_PROJ_PROJEKT) FK_PROJ_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_ADR_LAND) FK_ADR_LAND	,	--	NUMBER
to_char(FK_ADR_CITY) FK_ADR_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_STEU_STEUER_SATZ) FK_BAS_STEU_STEUER_SATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_MON_WAEHRUNG) FK_BAS_MON_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_BAS_MON_UMRECHNUNGSKURS) FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRUENDUNG)) COMM_BEGRUENDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSAEULE) ZAPFSAEULE	,	--	NUMBER
to_char(FK_LOC_LOCATION) FK_LOC_LOCATION	,	--	NUMBER
to_char(PERSOENLICH_VOR_ORT) PERSOENLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_BAS_KAL_VON_ARBEITSTAG) FK_BAS_KAL_VON_ARBEITSTAG, --NUMBER
to_char(FK_BAS_KAL_BIS_ARBEITSTAG) FK_BAS_KAL_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_BAS_MON_FRMDW) FK_BAS_MON_FRMDW, --NUMBER
to_char(FK_BAS_MON_FRMDW_MWST_SATZ) FK_BAS_MON_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_STD_INP_ZAHLUNGSSTATUS) FK_STD_INP_ZAHLUNGSSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(VERG_CNT_PUNKTE) VERG_CNT_PUNKTE, --NUMBER
to_char(FK_BEL_BELEG_ABLAGE) FK_BEL_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(VERG_CNT_PUNKTE_GESCHAETZT) VERG_CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(VERG_PUNKTE_VON) VERG_PUNKTE_VON, --DATE
to_char(VERG_PUNKTE_BIS) VERG_PUNKTE_BIS, --DATE
to_char(FK_LOC_LOCATION_VERG) FK_LOC_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(VERG_GESCHW_IST) VERG_GESCHW_IST, --NUMBER
to_char(VERG_GESCHW_SOLL) VERG_GESCHW_SOLL, --NUMBER
to_char(VERG_GESCHW_UEBER_GRZ) VERG_GESCHW_UEBER_GRZ, --NUMBER
to_char(VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL) VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(VERG_CODE_BUSSGELD) VERG_CODE_BUSSGELD, --VARCHAR2
to_char(VERG_DESCR_BUSSGELD) VERG_DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_STD_INP_STATUS) FK_STD_INP_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INT_INTERNET_APP) FK_INT_INTERNET_APP, --NUMBER
to_char(FK_CONTR_DUPL_STATUS) FK_CONTR_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_KON_GESCHAEFTSPARTNER) FK_KON_GESCHAEFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADR_ADRESSE_SCHNELL) FK_ADR_ADRESSE_SCHNELL ,--NUMBER
to_char(FK_LEX_RELATION_SRC) FK_LEX_RELATION_SRC,
to_char(FK_MAIN_KEY_SRC) FK_MAIN_KEY_SRC,
to_char(FK_STD_CONTR_STATUS_KAT) FK_STD_CONTR_STATUS_KAT,
to_char(FK_STD_CONTR_STATUS_VERW) FK_STD_CONTR_STATUS_VERW,
to_char(DATUM_STATUS_VERW) DATUM_STATUS_VERW,
to_char(DATUM_STATUS_KAT) DATUM_STATUS_KAT,
to_char(VERG_DATUM_RECHTSKRAFT) VERG_DATUM_RECHTSKRAFT,
to_char(VERG_DATUM_TILGUNG) VERG_DATUM_TILGUNG,
to_char(VERG_NUMMER_FLENS) VERG_NUMMER_FLENS,
to_char(VERG_AKTENZEICHEN) VERG_AKTENZEICHEN,
to_char(VERG_TATBESTANDSNUMMER) VERG_TATBESTANDSNUMMER,
to_char(FK_VER_VERTRAG) FK_VER_VERTRAG


from un
union all
select sel, sum1,nr_row,sel_pk_inp_belege_all sel_pk_inp_belege_all, 'zw' erg,
to_char(PK_INP_BELEGE_ALL)	PK_INP_BELEGE_ALL,	--	NUMBER
to_char(FK_LEX_BUCHUNG) FK_LEX_BUCHUNG ,		--	NUMBER
to_char(FK_BAS_KAT_KATEGORIE) FK_BAS_KAT_KATEGORIE	,	--	NUMBER
to_char(FK_BAS_KAL_ARBEITSTAG) FK_BAS_KAL_ARBEITSTAG	,	--	NUMBER
to_char(FK_KTO_BUCHUNG) FK_KTO_BUCHUNG	,	--	NUMBER
to_char(FK_STD_KTO_ZAHLUNGSART) FK_STD_KTO_ZAHLUNGSART	,	--	NUMBER
to_char(FK_STD_VERW_VERWENDUNGSZWECK	) FK_STD_VERW_VERWENDUNGSZWECK	,	--	NUMBER
to_char(FK_INV_INVENTAR	) FK_INV_INVENTAR	,	--	NUMBER
to_char(FK_PROJ_PROJEKT) FK_PROJ_PROJEKT	,	--	NUMBER
to_char(BELEGNUMMER	) BELEGNUMMER,	--	VARCHAR2
to_char(BEZEICHNUNG) BEZEICHNUNG	,	--	VARCHAR2
to_char(FK_ADR_LAND) FK_ADR_LAND	,	--	NUMBER
to_char(FK_ADR_CITY) FK_ADR_CITY		,	--	NUMBER
to_char(BEL_DATUM) BEL_DATUM	,	--	DATE
to_char(VON) VON	,	--	DATE
to_char(BIS) BIS	,	--	DATE
to_char(NETTO_BETRAG) NETTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_STEU_STEUER_SATZ) FK_BAS_STEU_STEUER_SATZ		,	--	NUMBER
to_char(MWST_BETRAG) MWST_BETRAG		,	--	NUMBER
to_char(BRUTTO_BETRAG) BRUTTO_BETRAG	,	--	NUMBER
to_char(FK_BAS_MON_WAEHRUNG) FK_BAS_MON_WAEHRUNG	,	--	NUMBER
to_char(STEUERNUMMER) STEUERNUMMER	,	--	VARCHAR2
to_char(FK_BAS_MON_UMRECHNUNGSKURS) FK_BAS_MON_UMRECHNUNGSKURS	,	--	NUMBER
to_char(length(COMM_REST_BELEG)) COMM_REST_BELEG	,	--	CLOB
to_char(length(COMM_TEL_BELEG)) COMM_TEL_BELEG	,	--	CLOB
to_char(length(COMM_PRODUKTE)) COMM_PRODUKTE	,	--	CLOB
to_char(length(COMM_BEGRUENDUNG)) COMM_BEGRUENDUNG	,	--	CLOB
to_char(length(COMM_SONSTIGES)) COMM_SONSTIGES	,	--	CLOB
to_char(length(BELEG)) BELEG	,	--	BLOB
to_char(length(ZAHLUNGSBELEG)) ZAHLUNGSBELEG	,	--	BLOB
to_char(LITER) LITER	,	--	NUMBER
to_char(ZAPFSAEULE) ZAPFSAEULE	,	--	NUMBER
to_char(FK_LOC_LOCATION) FK_LOC_LOCATION	,	--	NUMBER
to_char(PERSOENLICH_VOR_ORT) PERSOENLICH_VOR_ORT	,	--	NUMBER
to_char(BELEG_UHRZEIT) BELEG_UHRZEIT	,	--	DATE
to_char(VON_UHRZEIT) 	VON_UHRZEIT,	--	DATE
to_char(BIS_UHRZEIT) BIS_UHRZEIT		,	--	DATE
to_char(FK_BAS_KAL_VON_ARBEITSTAG) FK_BAS_KAL_VON_ARBEITSTAG, --NUMBER
to_char(FK_BAS_KAL_BIS_ARBEITSTAG) FK_BAS_KAL_BIS_ARBEITSTAG, --NUMBER
to_char(COMM_ADRESSE) COMM_ADRESSE, --VARCHAR2
to_char(TANKSTELLEN_NR) TANKSTELLEN_NR, --VARCHAR2
to_char(BRUTTO_BETRAG_INCL_TRINKG) BRUTTO_BETRAG_INCL_TRINKG, --NUMBER
to_char(COMM_PARKTICKET) COMM_PARKTICKET, --CLOB
to_char(FRMDW_NETTO_BETRAG) FRMDW_NETTO_BETRAG, --NUMBER
to_char(FK_BAS_MON_FRMDW) FK_BAS_MON_FRMDW, --NUMBER
to_char(FK_BAS_MON_FRMDW_MWST_SATZ) FK_BAS_MON_FRMDW_MWST_SATZ, --NUMBER
to_char(FRMDW_MWST_BETRAG) FRMDW_MWST_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_BETRAG) FRMDW_BRUTTO_BETRAG, --NUMBER
to_char(FRMDW_BRUTTO_INCL_TRINKG) FRMDW_BRUTTO_INCL_TRINKG, --NUMBER
to_char(MWST_BETRAG_EUR) MWST_BETRAG_EUR, --NUMBER
to_char(BRUTTO_BETRAG_EUR) BRUTTO_BETRAG_EUR, --NUMBER
to_char(BRUTTO_INCL_TRINKG_EUR) BRUTTO_INCL_TRINKG_EUR, --NUMBER
to_char(NETTO_BETRAG_EUR) NETTO_BETRAG_EUR, --NUMBER
to_char(PREIS_PRO_MENGE) PREIS_PRO_MENGE, --NUMBER
to_char(MENGENEINHEIT) MENGENEINHEIT, --NUMBER
to_char(LA_DATUM) LA_DATUM, --DATE
to_char(FK_LA_KONTO) FK_LA_KONTO, --NUMBER
to_char(FK_LA_WDH) FK_LA_WDH, --NUMBER
to_char(FK_STD_INP_ZAHLUNGSSTATUS) FK_STD_INP_ZAHLUNGSSTATUS, --NUMBER
to_char(COMM_VERGEHEN) COMM_VERGEHEN, --CLOB
to_char(VERG_BEHOERDE) VERG_BEHOERDE, --VARCHAR2
to_char(VERG_CNT_PUNKTE) VERG_CNT_PUNKTE, --NUMBER
to_char(FK_BEL_BELEG_ABLAGE) FK_BEL_BELEG_ABLAGE, --VARCHAR2
to_char(FK_ABL_ORDNER_PAGE) FK_ABL_ORDNER_PAGE, --NUMBER
to_char(VERG_CNT_PUNKTE_GESCHAETZT) VERG_CNT_PUNKTE_GESCHAETZT, --NUMBER
to_char(VERG_PUNKTE_VON) VERG_PUNKTE_VON, --DATE
to_char(VERG_PUNKTE_BIS) VERG_PUNKTE_BIS, --DATE
to_char(FK_LOC_LOCATION_VERG) FK_LOC_LOCATION_VERG, --NUMBER
to_char(FK_IMP_BA_BEL_OLD) FK_IMP_BA_BEL_OLD, --NUMBER
to_char(VERG_GESCHW_IST) VERG_GESCHW_IST, --NUMBER
to_char(VERG_GESCHW_SOLL) VERG_GESCHW_SOLL, --NUMBER
to_char(VERG_GESCHW_UEBER_GRZ) VERG_GESCHW_UEBER_GRZ, --NUMBER
to_char(VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL) VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL, --NUMBER
to_char(VERG_CODE_BUSSGELD) VERG_CODE_BUSSGELD, --VARCHAR2
to_char(VERG_DESCR_BUSSGELD) VERG_DESCR_BUSSGELD, --VARCHAR2
to_char(GEZAHLT_AM) GEZAHLT_AM, --DATE
to_char(WEBSEITE) WEBSEITE, --VARCHAR2
to_char(KUNDENNUMMER) KUNDENNUMMER, --VARCHAR2
to_char(FK_REAL_BELEG_EXIST) FK_REAL_BELEG_EXIST, --NUMBER
to_char(FK_CALC_STATE) FK_CALC_STATE, --NUMBER
to_char(FK_CALC_STATE_EUR) FK_CALC_STATE_EUR, --NUMBER
to_char(FK_CALC_STATE_FRMDW) FK_CALC_STATE_FRMDW, --NUMBER
to_char(FK_STD_INP_STATUS) FK_STD_INP_STATUS, --NUMBER
to_char(DATUM_VERGEHEN) DATUM_VERGEHEN, --DATE
to_char(CREATE_AT) CREATE_AT, --DATE
to_char(CREATE_BY) CREATE_BY, --VARCHAR2
to_char(MODIFY_AT) MODIFY_AT, --DATE
to_char(MODIFY_BY) MODIFY_BY, --DATE
to_char(DATUM_ORT_OK) DATUM_ORT_OK, --DATE
to_char(DATUM_ADDRESSE_OK) DATUM_ADDRESSE_OK, --DATE
to_char(DATUM_BUSSGELD_OK) DATUM_BUSSGELD_OK, --DATE
to_char(DATUM_BELEG_POS_OK) DATUM_BELEG_POS_OK, --DATE
to_char(DATUM_BUCHUNG_OK) DATUM_BUCHUNG_OK, --DATE
to_char(DATUM_VERPFL_BEL_OK) DATUM_VERPFL_BEL_OK, --DATE
to_char(FK_INT_INTERNET_APP) FK_INT_INTERNET_APP, --NUMBER
to_char(FK_CONTR_DUPL_STATUS) FK_CONTR_DUPL_STATUS, --NUMBER
to_char(DATUM_DUPL_OK) DATUM_DUPL_OK, --DATE
to_char(DUPL_BEMERKUNG) DUPL_BEMERKUNG, --VARCHAR2
to_char(FK_KON_GESCHAEFTSPARTNER) FK_KON_GESCHAEFTSPARTNER, --NUMBER
to_char(DUMMY) DUMMY, --NUMBER
to_char(STORNIERT) STORNIERT, --NUMBER
to_char(FK_ADR_ADRESSE_SCHNELL) FK_ADR_ADRESSE_SCHNELL, --NUMBER
to_char(FK_LEX_RELATION_SRC) FK_LEX_RELATION_SRC,
to_char(FK_MAIN_KEY_SRC) FK_MAIN_KEY_SRC,
to_char(FK_STD_CONTR_STATUS_KAT) FK_STD_CONTR_STATUS_KAT,
to_char(FK_STD_CONTR_STATUS_VERW) FK_STD_CONTR_STATUS_VERW,
to_char(DATUM_STATUS_VERW) DATUM_STATUS_VERW,
to_char(DATUM_STATUS_KAT) DATUM_STATUS_KAT,
to_char(VERG_DATUM_RECHTSKRAFT) VERG_DATUM_RECHTSKRAFT,
to_char(VERG_DATUM_TILGUNG) VERG_DATUM_TILGUNG,
to_char(VERG_NUMMER_FLENS) VERG_NUMMER_FLENS,
to_char(VERG_AKTENZEICHEN) VERG_AKTENZEICHEN,
to_char(VERG_TATBESTANDSNUMMER) VERG_TATBESTANDSNUMMER,
to_char(FK_VER_VERTRAG) FK_VER_VERTRAG
from 
vgl
union all
select null sel, 

case when max(PK_INP_BELEGE_ALL) =1 then 1 else 0 end + --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_KAT_KATEGORIE) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_KAL_ARBEITSTAG) =1 then 1 else 0 end + --NUMBER
case when max(FK_KTO_BUCHUNG) =1 then 1 else 0 end + --NUMBER
case when max(FK_STD_KTO_ZAHLUNGSART) =1 then 1 else 0 end + --NUMBER
case when max(FK_STD_VERW_VERWENDUNGSZWECK) =1 then 1 else 0 end + --NUMBER
case when max(FK_INV_INVENTAR) =1 then 1 else 0 end + --NUMBER
case when max(FK_PROJ_PROJEKT) =1 then 1 else 0 end + --NUMBER
case when max(BELEGNUMMER) =1 then 1 else 0 end + --VARCHAR2
case when max(BEZEICHNUNG) =1 then 1 else 0 end + --VARCHAR2
case when max(FK_ADR_LAND) =1 then 1 else 0 end + --NUMBER
case when max(FK_ADR_CITY) =1 then 1 else 0 end + --NUMBER
case when max(BEL_DATUM) =1 then 1 else 0 end + --DATE
case when max(VON) =1 then 1 else 0 end + --DATE
case when max(BIS) =1 then 1 else 0 end + --DATE
case when max(NETTO_BETRAG) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_STEU_STEUER_SATZ) =1 then 1 else 0 end + --NUMBER
case when max(MWST_BETRAG) =1 then 1 else 0 end + --NUMBER
case when max(BRUTTO_BETRAG) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_MON_WAEHRUNG) =1 then 1 else 0 end + --NUMBER
case when max(STEUERNUMMER) =1 then 1 else 0 end + --VARCHAR2
case when max(FK_BAS_MON_UMRECHNUNGSKURS) =1 then 1 else 0 end + --NUMBER
case when max(COMM_REST_BELEG) =1 then 1 else 0 end + --CLOB
case when max(COMM_TEL_BELEG) =1 then 1 else 0 end + --CLOB
case when max(COMM_PRODUKTE) =1 then 1 else 0 end + --CLOB
case when max(COMM_BEGRUENDUNG) =1 then 1 else 0 end + --CLOB
case when max(COMM_SONSTIGES) =1 then 1 else 0 end + --CLOB
case when max(BELEG) =1 then 1 else 0 end + --BLOB
case when max(ZAHLUNGSBELEG) =1 then 1 else 0 end + --BLOB
case when max(LITER) =1 then 1 else 0 end + --NUMBER
case when max(ZAPFSAEULE) =1 then 1 else 0 end + --NUMBER
case when max(FK_LOC_LOCATION) =1 then 1 else 0 end + --NUMBER
case when max(PERSOENLICH_VOR_ORT) =1 then 1 else 0 end + --NUMBER
case when max(BELEG_UHRZEIT) =1 then 1 else 0 end + --DATE
case when max(VON_UHRZEIT) =1 then 1 else 0 end + --DATE
case when max(BIS_UHRZEIT) =1 then 1 else 0 end + --DATE
case when max(FK_BAS_KAL_VON_ARBEITSTAG) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_KAL_BIS_ARBEITSTAG) =1 then 1 else 0 end + --NUMBER
case when max(COMM_ADRESSE) =1 then 1 else 0 end + --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then 1 else 0 end + --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then 1 else 0 end + --NUMBER
case when max(COMM_PARKTICKET) =1 then 1 else 0 end + --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_MON_FRMDW) =1 then 1 else 0 end + --NUMBER
case when max(FK_BAS_MON_FRMDW_MWST_SATZ) =1 then 1 else 0 end + --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then 1 else 0 end + --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then 1 else 0 end + --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then 1 else 0 end + --NUMBER
case when max(MWST_BETRAG_EUR) =1 then 1 else 0 end + --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then 1 else 0 end + --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then 1 else 0 end + --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then 1 else 0 end + --NUMBER
case when max(PREIS_PRO_MENGE) =1 then 1 else 0 end + --NUMBER
case when max(MENGENEINHEIT) =1 then 1 else 0 end + --NUMBER
case when max(LA_DATUM) =1 then 1 else 0 end + --DATE
case when max(FK_LA_KONTO) =1 then 1 else 0 end + --NUMBER
case when max(FK_LA_WDH) =1 then 1 else 0 end + --NUMBER
case when max(FK_STD_INP_ZAHLUNGSSTATUS) =1 then 1 else 0 end + --NUMBER
case when max(COMM_VERGEHEN) =1 then 1 else 0 end + --CLOB
case when max(VERG_BEHOERDE) =1 then 1 else 0 end + --VARCHAR2
case when max(VERG_CNT_PUNKTE) =1 then 1 else 0 end + --NUMBER
case when max(FK_BEL_BELEG_ABLAGE) =1 then 1 else 0 end + --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then 1 else 0 end + --NUMBER
case when max(VERG_CNT_PUNKTE_GESCHAETZT) =1 then 1 else 0 end + --NUMBER
case when max(VERG_PUNKTE_VON) =1 then 1 else 0 end + --DATE
case when max(VERG_PUNKTE_BIS) =1 then 1 else 0 end + --DATE
case when max(FK_LOC_LOCATION_VERG) =1 then 1 else 0 end + --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then 1 else 0 end + --NUMBER
case when max(VERG_GESCHW_IST) =1 then 1 else 0 end + --NUMBER
case when max(VERG_GESCHW_SOLL) =1 then 1 else 0 end + --NUMBER
case when max(VERG_GESCHW_UEBER_GRZ) =1 then 1 else 0 end + --NUMBER
case when max(VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then 1 else 0 end + --NUMBER
case when max(VERG_CODE_BUSSGELD) =1 then 1 else 0 end + --VARCHAR2
case when max(VERG_DESCR_BUSSGELD) =1 then 1 else 0 end + --VARCHAR2
case when max(GEZAHLT_AM) =1 then 1 else 0 end + --DATE
case when max(WEBSEITE) =1 then 1 else 0 end + --VARCHAR2
case when max(KUNDENNUMMER) =1 then 1 else 0 end + --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then 1 else 0 end + --NUMBER
case when max(FK_CALC_STATE) =1 then 1 else 0 end + --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then 1 else 0 end + --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then 1 else 0 end + --NUMBER
case when max(FK_STD_INP_STATUS) =1 then 1 else 0 end + --NUMBER
case when max(DATUM_VERGEHEN) =1 then 1 else 0 end + --DATE
case when max(CREATE_AT) =1 then 1 else 0 end + --DATE
case when max(CREATE_BY) =1 then 1 else 0 end + --VARCHAR2
case when max(MODIFY_AT) =1 then 1 else 0 end + --DATE
case when max(MODIFY_BY) =1 then 1 else 0 end + --DATE
case when max(DATUM_ORT_OK) =1 then 1 else 0 end + --DATE
case when max(DATUM_ADDRESSE_OK) =1 then 1 else 0 end + --DATE
case when max(DATUM_BUSSGELD_OK) =1 then 1 else 0 end + --DATE
case when max(DATUM_BELEG_POS_OK) =1 then 1 else 0 end + --DATE
case when max(DATUM_BUCHUNG_OK) =1 then 1 else 0 end + --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then 1 else 0 end + --DATE
case when max(FK_INT_INTERNET_APP) =1 then 1 else 0 end + --NUMBER
case when max(FK_CONTR_DUPL_STATUS) =1 then 1 else 0 end + --NUMBER
case when max(DATUM_DUPL_OK) =1 then 1 else 0 end + --DATE
case when max(DUPL_BEMERKUNG) =1 then 1 else 0 end + --VARCHAR2
case when max(FK_KON_GESCHAEFTSPARTNER) =1 then 1 else 0 end + --NUMBER
case when max(DUMMY) =1 then 1 else 0 end + --NUMBER
case when max(STORNIERT) =1 then 1 else 0 end + --NUMBER
case when max(FK_ADR_ADRESSE_SCHNELL) =1 then 1 else 0 end+  --NUMBER
case when max(FK_LEX_RELATION_SRC) =1 then 1 else 0 end+
case when max(FK_MAIN_KEY_SRC) =1 then 1 else 0 end+
case when max(FK_STD_CONTR_STATUS_KAT) =1 then 1 else 0 end+
case when max(FK_STD_CONTR_STATUS_VERW) =1 then 1 else 0 end+
case when max(DATUM_STATUS_VERW) =1 then 1 else 0 end+
case when max(DATUM_STATUS_KAT) =1 then 1 else 0 end+
case when max(VERG_DATUM_RECHTSKRAFT) =1 then 1 else 0 end+
case when max(VERG_DATUM_TILGUNG) =1 then 1 else 0 end+
case when max(VERG_NUMMER_FLENS) =1 then 1 else 0 end+
case when max(VERG_AKTENZEICHEN) =1 then 1 else 0 end+
case when max(VERG_TATBESTANDSNUMMER) =1 then 1 else 0 end+
case when max(FK_VER_VERTRAG) =1 then 1 else 0 end

sum1, null nr_row, max(sel_pk_inp_belege_all) sel_pk_inp_belege_all, 'erg' erg,
case when max(PK_INP_BELEGE_ALL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LEX_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAT_KATEGORIE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAL_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_KTO_BUCHUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STD_KTO_ZAHLUNGSART) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STD_VERW_VERWENDUNGSZWECK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_INV_INVENTAR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_PROJ_PROJEKT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEGNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BEZEICHNUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ADR_LAND) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADR_CITY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BEL_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_STEU_STEUER_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_WAEHRUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STEUERNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_BAS_MON_UMRECHNUNGSKURS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_REST_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_TEL_BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_PRODUKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_BEGRUENDUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(COMM_SONSTIGES) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(BELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(ZAHLUNGSBELEG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --BLOB
case when max(LITER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(ZAPFSAEULE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LOC_LOCATION) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PERSOENLICH_VOR_ORT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BELEG_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VON_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(BIS_UHRZEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_BAS_KAL_VON_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_KAL_BIS_ARBEITSTAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_ADRESSE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(TANKSTELLEN_NR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(BRUTTO_BETRAG_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_PARKTICKET) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(FRMDW_NETTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BAS_MON_FRMDW_MWST_SATZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_MWST_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_BETRAG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FRMDW_BRUTTO_INCL_TRINKG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MWST_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(BRUTTO_INCL_TRINKG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(NETTO_BETRAG_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(PREIS_PRO_MENGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(MENGENEINHEIT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(LA_DATUM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LA_KONTO) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LA_WDH) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STD_INP_ZAHLUNGSSTATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(COMM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --CLOB
case when max(VERG_BEHOERDE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(VERG_CNT_PUNKTE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_BEL_BELEG_ABLAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_ABL_ORDNER_PAGE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_CNT_PUNKTE_GESCHAETZT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_PUNKTE_VON) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(VERG_PUNKTE_BIS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_LOC_LOCATION_VERG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_IMP_BA_BEL_OLD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_GESCHW_IST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_GESCHW_SOLL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_GESCHW_UEBER_GRZ) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(VERG_CODE_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(VERG_DESCR_BUSSGELD) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(GEZAHLT_AM) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(WEBSEITE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(KUNDENNUMMER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_REAL_BELEG_EXIST) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_EUR) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CALC_STATE_FRMDW) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_STD_INP_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_VERGEHEN) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(CREATE_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(MODIFY_AT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(MODIFY_BY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ORT_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_ADDRESSE_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUSSGELD_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BELEG_POS_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_BUCHUNG_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DATUM_VERPFL_BEL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(FK_INT_INTERNET_APP) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_CONTR_DUPL_STATUS) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DATUM_DUPL_OK) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --DATE
case when max(DUPL_BEMERKUNG) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --VARCHAR2
case when max(FK_KON_GESCHAEFTSPARTNER) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(DUMMY) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(STORNIERT) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_ADR_ADRESSE_SCHNELL) =1 then '<span style="background-color:red"> 1</span>' else '<span style="background-color:lightgreen"> 0</span>' end, --NUMBER
case when max(FK_LEX_RELATION_SRC) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(FK_MAIN_KEY_SRC) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(FK_STD_CONTR_STATUS_KAT) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(FK_STD_CONTR_STATUS_VERW) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(DATUM_STATUS_VERW) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(DATUM_STATUS_KAT) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(VERG_DATUM_RECHTSKRAFT) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(VERG_DATUM_TILGUNG) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(VERG_NUMMER_FLENS) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(VERG_AKTENZEICHEN) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(VERG_TATBESTANDSNUMMER) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end,
case when max(FK_VER_VERTRAG) =1 then '<span style=""background-color:red""> 1</span>' else '<span style=""background-color:lightgreen""> 0</span>' end

from vgl
)

select 
rownum rnr, all_.*

 from all_
) loop


 v_inp := 5;
 dbms_output.put_line(v_inp);

 v_comp_inp_belege_all := new  ty_comp_inp_belege_all_1 (


 i.CREATE_AT,
i.SEL,
i.COMM_SONSTIGES,
i.DATUM_ORT_OK,
i.BIS_UHRZEIT,
i.TANKSTELLEN_NR,
i.DATUM_ADDRESSE_OK,
i.DATUM_BUSSGELD_OK,
i.COMM_PRODUKTE,
i.FK_IMP_BA_BEL_OLD,
i.FK_CALC_STATE,
i.BEZEICHNUNG,
i.VON_UHRZEIT,
i.VERG_CNT_PUNKTE,
i.NR_ROW,
i.VON,
i.FK_BAS_MON_UMRECHNUNGSKURS,
i.BELEG,
i.COMM_TEL_BELEG,
i.PERSOENLICH_VOR_ORT,
i.FK_LOC_LOCATION_VERG,
i.ERG,
i.VERG_GESCHW_SOLL,
i.COMM_VERGEHEN,
i.VERG_GESCHW_UEBER_GRZ_ABZGL_MESSTOL,
i.FK_STD_KTO_ZAHLUNGSART,
i.FK_LOC_LOCATION,
i.BRUTTO_INCL_TRINKG_EUR,
i.FK_ABL_ORDNER_PAGE,
i.MODIFY_BY,
i.FK_BAS_KAT_KATEGORIE,
i.BEL_DATUM,
i.NETTO_BETRAG,
i.FK_LA_WDH,
i.VERG_PUNKTE_VON,
i.VERG_GESCHW_IST,
i.FK_INV_INVENTAR,
i.ZAPFSAEULE,
i.COMM_ADRESSE,
i.STEUERNUMMER,
i.FK_BAS_KAL_BIS_ARBEITSTAG,
i.BRUTTO_BETRAG_EUR,
i.MENGENEINHEIT,
i.DATUM_VERGEHEN,
i.FK_BAS_MON_WAEHRUNG,
i.FK_BAS_MON_FRMDW,
i.FK_STD_INP_STATUS,
i.SUM1,
i.FK_ADR_LAND,
i.FRMDW_MWST_BETRAG,
i.LA_DATUM,
i.VERG_CNT_PUNKTE_GESCHAETZT,
i.DATUM_DUPL_OK,
i.RNR,
i.FK_BAS_KAL_ARBEITSTAG,
i.VERG_CODE_BUSSGELD,
i.FK_INT_INTERNET_APP,
i.FK_BAS_STEU_STEUER_SATZ,
i.FRMDW_BRUTTO_INCL_TRINKG,
i.NETTO_BETRAG_EUR,
i.FK_KON_GESCHAEFTSPARTNER,
i.FK_LEX_BUCHUNG,
i.FK_KTO_BUCHUNG,
i.COMM_BEGRUENDUNG,
i.DATUM_VERPFL_BEL_OK,
i.BRUTTO_BETRAG_INCL_TRINKG,
i.FRMDW_BRUTTO_BETRAG,
i.VERG_BEHOERDE,
i.VERG_DESCR_BUSSGELD,
i.FK_REAL_BELEG_EXIST,
i.SEL_PK_INP_BELEGE_ALL,
i.PK_INP_BELEGE_ALL,
i.BRUTTO_BETRAG,
i.MWST_BETRAG,
i.ZAHLUNGSBELEG,
i.FK_BEL_BELEG_ABLAGE,
i.DUPL_BEMERKUNG,
i.BELEG_UHRZEIT,
i.MODIFY_AT,
i.DATUM_BUCHUNG_OK,
i.FRMDW_NETTO_BETRAG,
i.DUMMY,
i.FK_ADR_CITY,
i.LITER,
i.FK_CALC_STATE_FRMDW,
i.BIS,
i.COMM_REST_BELEG,
i.COMM_PARKTICKET,
i.MWST_BETRAG_EUR,
i.FK_LA_KONTO,
i.DATUM_BELEG_POS_OK,
i.BELEGNUMMER,
i.FK_BAS_MON_FRMDW_MWST_SATZ,
i.FK_CALC_STATE_EUR,
i.STORNIERT,
i.PREIS_PRO_MENGE,
i.FK_STD_INP_ZAHLUNGSSTATUS,
i.KUNDENNUMMER,
i.VERG_PUNKTE_BIS,
i.VERG_GESCHW_UEBER_GRZ,
i.FK_STD_VERW_VERWENDUNGSZWECK,
i.GEZAHLT_AM,
i.CREATE_BY,
i.FK_CONTR_DUPL_STATUS,
i.FK_ADR_ADRESSE_SCHNELL,
i.FK_PROJ_PROJEKT,
i.FK_BAS_KAL_VON_ARBEITSTAG,
i.WEBSEITE,
i.FK_LEX_RELATION_SRC,
i.FK_MAIN_KEY_SRC,
i.FK_STD_CONTR_STATUS_KAT,
i.FK_STD_CONTR_STATUS_VERW,
i.DATUM_STATUS_VERW,
i.DATUM_STATUS_KAT,
i.VERG_DATUM_RECHTSKRAFT,
i.VERG_DATUM_TILGUNG,
i.VERG_NUMMER_FLENS,
i.VERG_AKTENZEICHEN,
i.VERG_TATBESTANDSNUMMER,
i.FK_VER_VERTRAG


 );


 pipe row(v_comp_inp_belege_all);

end loop;

return ;
end;

/
--------------------------------------------------------
--  DDL for Function GET_TAB_PTF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "COMPANY"."GET_TAB_PTF" (p_rows IN NUMBER) RETURN t_tf_tab PIPELINED AS
v_row t_tf_row;
BEGIN
  FOR i IN ( select rownum wt, descr || rownum descr from (  select 1 wt,  'Description for '  descr from dual union all select 1 wt,  'Description for '   descr from dual )) loop

  v_row := new t_tf_row (i.wt, i.descr);

    PIPE ROW(v_row);
  END LOOP;

  RETURN;
END;


/
--------------------------------------------------------
--  Constraints for Table T_MDT_MANDANT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MDT_MANDANT" MODIFY ("PK_MDT_MANDANT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_MDT_MANDANT" ADD CONSTRAINT "T_MDT_MANDANT_PK" PRIMARY KEY ("PK_MDT_MANDANT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CONTR_KONTROLLE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CONTR_KONTROLLE" ADD CONSTRAINT "T_KONTROLLE_PK" PRIMARY KEY ("PK_CONTR_KONTROLLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_CONTR_KONTROLLE" MODIFY ("PK_CONTR_KONTROLLE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LOC_LOCATION
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LOC_LOCATION" MODIFY ("PK_LOC_LOCATION" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LOC_LOCATION" ADD CONSTRAINT "T_LOCATION_PK" PRIMARY KEY ("PK_LOC_LOCATION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_LOC_LOCATION" ADD CONSTRAINT "CON_LOCATION" UNIQUE ("LOCATION", "FK_BAS_LOC_LOCATION_TYPE", "FK_ADR_ADRESSE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_BELEGART_GRP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_BELEGART_GRP" ADD CONSTRAINT "PK_T_REL_BELEGART_GRP" PRIMARY KEY ("PK_REL_BELEGART_GRP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_BEL_BELEGART_GRP" MODIFY ("PK_REL_BELEGART_GRP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_TEL_TELEFONKARTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_TEL_TELEFONKARTEN" ADD CONSTRAINT "IMP_BA_TELEFONKARTEN_PK" PRIMARY KEY ("PK_TEL_TELEFONKARTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_TEL_TELEFONKARTEN" MODIFY ("PK_TEL_TELEFONKARTEN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_GRP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_GRP" MODIFY ("PK_KONTENPLAN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_GRP" ADD CONSTRAINT "T_KONTENPLAN_PK" PRIMARY KEY ("PK_KONTENPLAN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_LOHN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_LOHN" ADD CONSTRAINT "T_STEUER_LOHN_PK" PRIMARY KEY ("PK_STEU_STEUER_LOHN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_LOHN" MODIFY ("PK_STEU_STEUER_LOHN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_VERPFL_BELEG_SRC
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_SRC" MODIFY ("PK_REL_STEU_STEUER_VERPFL_BELEG_SRC" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_SRC" ADD CONSTRAINT "T_REL_STEU_STEUER_VERPFL_BELEG_SRC_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_VERPFL_BELEG_SRC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEHR_LOESUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEHR_LOESUNG" MODIFY ("PK_LEHR_LOESUNG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEHR_LOESUNG" ADD CONSTRAINT "T_LÖSUNG_PK" PRIMARY KEY ("PK_LEHR_LOESUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BEL_BELEGSEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BEL_BELEGSEL" ADD CONSTRAINT "T_BELEGSEL_PK" PRIMARY KEY ("PK_BEL_BELEGSEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BEL_BELEGSEL" MODIFY ("PK_BEL_BELEGSEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_KTO_GIROKONTO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_GIROKONTO" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_GIROKONTO" ADD CONSTRAINT "KTO_GIROKONTO_PK1" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_OEFFENTL_TICKETS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_OEFFENTL_TICKETS" ADD CONSTRAINT "IMP_BA_OEFFENTL_TICKETS_PK" PRIMARY KEY ("PK_IMP_BA_OEFFENTL_TICKETS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."IMP_BA_OEFFENTL_TICKETS" MODIFY ("PK_IMP_BA_OEFFENTL_TICKETS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_PROJ_PROJECT_PAYMENT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_PROJ_PROJECT_PAYMENT" ADD CONSTRAINT "PK_T_REL_PROJ_ZAHLUNG" PRIMARY KEY ("PK_REL_PROJ_ZAHLUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_PROJ_PROJECT_PAYMENT" MODIFY ("PK_REL_PROJ_ZAHLUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LEX
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX" ADD CONSTRAINT "T_LEX_PK" PRIMARY KEY ("PK_LEX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_LEX" MODIFY ("PK_LEX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_BAS_BEL_BELEGART_GRP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_BEL_BELEGART_GRP" ADD CONSTRAINT "PK_T_BELEGART_GRP" PRIMARY KEY ("PK_BAS_BEL_BELEGART_GRP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_BEL_BELEGART_GRP" MODIFY ("PK_BAS_BEL_BELEGART_GRP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_VER_VERTRAG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VER_VERTRAG" MODIFY ("PK_VER_VERTRAG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VER_VERTRAG" ADD CONSTRAINT "T_VERTRAG_PK" PRIMARY KEY ("PK_VER_VERTRAG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_PARKTICKETS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_PARKTICKETS" ADD CONSTRAINT "IMP_BA_PARKTICKETS_PK" PRIMARY KEY ("PK_IMP_BA_PARKTICKETS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."IMP_BA_PARKTICKETS" MODIFY ("PK_IMP_BA_PARKTICKETS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MASCH_PROJ_MATERIAL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MASCH_PROJ_MATERIAL" ADD CONSTRAINT "PK_T_MASCH_PROJ_MATERIAL" PRIMARY KEY ("PK_MASCH_PROJ_MATERIAL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_DB_TXT_REPLACED
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_DB_TXT_REPLACED" MODIFY ("PK_REL_DB_TXT_REPLACED" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_DB_TXT_REPLACED" ADD CONSTRAINT "T_REL_TXT_REPLACED_PK" PRIMARY KEY ("PK_REL_DB_TXT_REPLACED")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ABL_ORDNER
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ABL_ORDNER" ADD CONSTRAINT "T_ABL_ORDNER_PK" PRIMARY KEY ("PK_ABL_ORDNER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ABL_ORDNER" MODIFY ("PK_ABL_ORDNER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_BEL_BELEG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BEL_BELEG" MODIFY ("PK_BEL_BELEG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BEL_BELEG" ADD CONSTRAINT "T_BELEG_PK" PRIMARY KEY ("PK_BEL_BELEG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_JAHR_TODO_GRP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO_GRP" MODIFY ("PK_STEU_STEUER_JAHR_TODO_GRP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO_GRP" ADD CONSTRAINT "T_STEUER_JAHR_TODO_GRP_PK" PRIMARY KEY ("PK_STEU_STEUER_JAHR_TODO_GRP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_BAS_MENGENEINHEIT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_BAS_MENGENEINHEIT" MODIFY ("PK_MENGENEINHEIT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_BAS_MENGENEINHEIT" ADD CONSTRAINT "T_MENGENEINHEIT_PK" PRIMARY KEY ("PK_MENGENEINHEIT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_PROJ_STUNDENZETTEL_BELEG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_PROJ_STUNDENZETTEL_BELEG" MODIFY ("PK_REL_PROJ_STUNDENZETTEL_BELEG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_PROJ_STUNDENZETTEL_BELEG" ADD CONSTRAINT "T_REL_STUNDENZETTEL_BELEG_PK" PRIMARY KEY ("PK_REL_PROJ_STUNDENZETTEL_BELEG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_LEX_LEX
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_LEX_LEX" MODIFY ("PK_REL_LEX_LEX" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_LEX_LEX" ADD CONSTRAINT "T_REL_LEX_LEX_PK" PRIMARY KEY ("PK_REL_LEX_LEX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_LEX_LEX" ADD CONSTRAINT "T_REL_LEX_LEX_UK1" UNIQUE ("FK_BEL_BELEGNR1", "FK_BEL_BELEGNR2")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_STEUERNUMMER
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_STEUERNUMMER" ADD CONSTRAINT "T_STEUERNUMMER_PK" PRIMARY KEY ("PK_STEU_STEUERNUMMER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_STEUERNUMMER" MODIFY ("PK_STEU_STEUERNUMMER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_KONTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN" ADD CONSTRAINT "T_KONTENPLAN_KONTEN_PK" PRIMARY KEY ("PK_LEX_KONTENPLAN_KONTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN" MODIFY ("PK_LEX_KONTENPLAN_KONTEN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_INV_ANL_RESTBUCHWERT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INV_ANL_RESTBUCHWERT" MODIFY ("T_INV_RESTBUCHWERT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_INV_ANL_RESTBUCHWERT" ADD CONSTRAINT "T_INV_RESTBUCHWERT_PK" PRIMARY KEY ("T_INV_RESTBUCHWERT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_RE_RECHNUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_RE_RECHNUNG" MODIFY ("PK_RE_RECHNUNG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_RE_RECHNUNG" ADD CONSTRAINT "T_RECHNUNG_PK" PRIMARY KEY ("PK_RE_RECHNUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_INV_INVENTARTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_INV_INVENTARTYP" MODIFY ("PK_BAS_INV_INVENTARTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_INV_INVENTARTYP" ADD CONSTRAINT "T_INVENTARTYP_PK" PRIMARY KEY ("PK_BAS_INV_INVENTARTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMP_LOG_LOAD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_LOG_LOAD" MODIFY ("PK_IMP_LOG_LOAD" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_LOG_LOAD" ADD CONSTRAINT "IMP_LOG_LOAD_PK" PRIMARY KEY ("PK_IMP_LOG_LOAD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_VERS_RV_AUSZUG_PAGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE" MODIFY ("PK_RV_AUSZUG_PAGE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE" ADD CONSTRAINT "T_RV_AUSZUG_PAGE_PK" PRIMARY KEY ("PK_RV_AUSZUG_PAGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BILD_BILDER
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BILD_BILDER" MODIFY ("PK_BILD_BILDER" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BILD_BILDER" ADD CONSTRAINT "T_BILD_BILDER_PK" PRIMARY KEY ("PK_BILD_BILDER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_VERS_INSURANCE_YEARLY
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VERS_INSURANCE_YEARLY" MODIFY ("PK_INSURANCE_YEARLY" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VERS_INSURANCE_YEARLY" ADD CONSTRAINT "T_INSURANCE_YEARLY_PK" PRIMARY KEY ("PK_INSURANCE_YEARLY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_FLI_APL_MAINT_PROGR
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_FLI_APL_MAINT_PROGR" MODIFY ("PK_APL_MAINT_PROGR" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_FLI_APL_MAINT_PROGR" ADD CONSTRAINT "T_FLI_APL_MAINT_PROGR_PK" PRIMARY KEY ("PK_APL_MAINT_PROGR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KON_GESCHAEFTSPARTNER_KONTAKT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KON_GESCHAEFTSPARTNER_KONTAKT" MODIFY ("PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_KON_GESCHAEFTSPARTNER_KONTAKT" ADD CONSTRAINT "T_REL_GESCHAEFTSP_KONT_PK" PRIMARY KEY ("PK_REL_KON_GESCHAEFTSPARTNER_KONTAKT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_STEU_STEUER_SATZ
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_STEU_STEUER_SATZ" MODIFY ("PK_BAS_STEU_STEUER_SATZ" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_STEU_STEUER_SATZ" ADD CONSTRAINT "T_STEUERSATZ_PK" PRIMARY KEY ("PK_BAS_STEU_STEUER_SATZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_STEU_STEUER_SATZ" ADD CONSTRAINT "T_STEUERSATZ_UK1" UNIQUE ("STEUERSATZ", "FK_ADR_LAND")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_BANK
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_BANK" MODIFY ("PK_KTO_BANK" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_BANK" ADD CONSTRAINT "T_BANK_PK" PRIMARY KEY ("PK_KTO_BANK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_RE_RECHNUNG_STUNDENZETTEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_STUNDENZETTEL" MODIFY ("PK_REL_RE_STDZ" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_STUNDENZETTEL" ADD CONSTRAINT "T_REL_RECHNUNG_STUNDENZETTEL_PK" PRIMARY KEY ("PK_REL_RE_STDZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMP_ADR
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_ADR" ADD CONSTRAINT "DL_IMP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_MON_WAEHRUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_MON_WAEHRUNG" ADD CONSTRAINT "T_WAEHRUNG_PK" PRIMARY KEY ("PK_BAS_MON_WAEHRUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_MON_WAEHRUNG" MODIFY ("PK_BAS_MON_WAEHRUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_MDT_MANDANT_STD_GROUP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MDT_MANDANT_STD_GROUP" MODIFY ("PK_REL_MDT_MANDANT_STD_GROUP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_MDT_MANDANT_STD_GROUP" ADD CONSTRAINT "T_REL_MDT_MANDANT_STD_GROUP_PK" PRIMARY KEY ("PK_REL_MDT_MANDANT_STD_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_KONTEN_KAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT" MODIFY ("PK_LEX_KONTENPLAN_KONTEN_KAT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT" ADD CONSTRAINT "T_KONTENPLAN_KONTEN_KAT_PK" PRIMARY KEY ("PK_LEX_KONTENPLAN_KONTEN_KAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_ALLG_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_ALLG_BEL" ADD CONSTRAINT "IMP_BA_ALLG_BEL_PK" PRIMARY KEY ("PK_IMP_BA_ALLG_BEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."IMP_BA_ALLG_BEL" MODIFY ("PK_IMP_BA_ALLG_BEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_IMP_HOTEL_BOOKING
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_HOTEL_BOOKING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_HOTEL_BOOKING" ADD CONSTRAINT "IMP_HOTEL_BOOKING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" MODIFY ("PK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL" ADD CONSTRAINT "T_REL_MASCH_KOMP_KOMPONENTE_MATERIAL_PK" PRIMARY KEY ("PK_REL_MASCH_KOMP_KOMPONENTE_MATERIAL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_TAGESGELDKONTO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_TAGESGELDKONTO" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_TAGESGELDKONTO" ADD CONSTRAINT "KTO_TAGESGELDKONTO_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_WH_ART_ARTIKEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_WH_ART_ARTIKEL" MODIFY ("PK_WH_ART_ARTIKEL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_WH_ART_ARTIKEL" ADD CONSTRAINT "T_ARTIKEL_PK" PRIMARY KEY ("PK_WH_ART_ARTIKEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_KAT_KATEGORIE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_KAT_KATEGORIE" ADD CONSTRAINT "T_KONTO_BUCH_KAT_PK" PRIMARY KEY ("PK_BAS_KAT_KATEGORIE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_KAT_KATEGORIE" MODIFY ("PK_BAS_KAT_KATEGORIE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_KTO_KREDITKARTE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_KREDITKARTE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_KREDITKARTE" ADD CONSTRAINT "KTO_KREDITKARTE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" MODIFY ("PK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN" ADD CONSTRAINT "T_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN_PK" PRIMARY KEY ("PK_REL_MASCH_KOMP_KOMPONENTEN_KOMPONENTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CAR_AUTO_VERSICHERUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG" ADD CONSTRAINT "IMP_BA_KFZ_VERSICHERUNGEN_PK" PRIMARY KEY ("PK_CAR_AUTO_VERSICHERUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG" MODIFY ("PK_CAR_AUTO_VERSICHERUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_KAL_TERMINE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KAL_TERMINE" MODIFY ("PK_KAL_TERMIN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KAL_TERMINE" ADD CONSTRAINT "T_TERMINE_PK" PRIMARY KEY ("PK_KAL_TERMIN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_MONAT_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_BEL" ADD CONSTRAINT "T_REL_STEUER_MONAT_BEL_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_MONAT_BEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_BEL" MODIFY ("PK_REL_STEU_STEUER_MONAT_BEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_DB_TXT_REPLACE_LOG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_TXT_REPLACE_LOG" MODIFY ("PK_DB_TXT_REPLACE_LOG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_TXT_REPLACE_LOG" ADD CONSTRAINT "T_TXT_REPLACED_PK" PRIMARY KEY ("PK_DB_TXT_REPLACE_LOG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_LOHN_INP_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_INP_BEL" MODIFY ("PK_REL_STEU_STEUER_LOHN_INP_BEL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_INP_BEL" ADD CONSTRAINT "TABLE1_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_LOHN_INP_BEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_MASCH_ANL_ANLAGE_KOMPONENTE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE" MODIFY ("PK_REL_MASCH_ANL_ANLAGE_KOMPONENTE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_MASCH_ANL_ANLAGE_KOMPONENTE" ADD CONSTRAINT "T_REL_MASCH_ANL_ANLAGE_KOMPONENTE_PK" PRIMARY KEY ("PK_REL_MASCH_ANL_ANLAGE_KOMPONENTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_VORANMLDG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_VORANMLDG" ADD CONSTRAINT "T_STEUER_VORANMLDG_PK" PRIMARY KEY ("PK_STEU_STEUER_VORANMLDG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_VORANMLDG" MODIFY ("PK_STEU_STEUER_VORANMLDG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_VERS_RV_AUSZUG_PAGE_DET
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE_DET" MODIFY ("PK_RV_AUSZUG_PAGE_DET" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VERS_RV_AUSZUG_PAGE_DET" ADD CONSTRAINT "T_RV_AUSZUG_PAGE_DET_PK" PRIMARY KEY ("PK_RV_AUSZUG_PAGE_DET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_WH_ART_ARTIKELBUENDELUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBUENDELUNG" MODIFY ("PK_BAS_WH_ART_ARTIKELBUENDELUNG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBUENDELUNG" ADD CONSTRAINT "T_BUENDELUNG_PK" PRIMARY KEY ("PK_BAS_WH_ART_ARTIKELBUENDELUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_WH_ART_ARTIKELBESTANDTEILE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_WH_ART_ARTIKELBESTANDTEILE" MODIFY ("PK_ARTIKELBEST" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_WH_ART_ARTIKELBESTANDTEILE" ADD CONSTRAINT "T_ARTIKELBESTANDTEILE_PK" PRIMARY KEY ("PK_ARTIKELBEST")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" MODIFY ("PK_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL" ADD CONSTRAINT "T_REL_MASCH_BAND_STATION_MATERIAL_PK" PRIMARY KEY ("PK_REL_MASCH_BAND_STATION_KOMPONENTE_MATERIAL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CALC_MATCH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CALC_MATCH" MODIFY ("PK_MATCH" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_CALC_MATCH" ADD CONSTRAINT "T_MATCH_PK" PRIMARY KEY ("PK_MATCH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MASCH_KOMPONENTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MASCH_KOMPONENTEN" MODIFY ("PK_MASCH_KOMPONENTEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_MASCH_KOMPONENTEN" ADD CONSTRAINT "T_MASCH_KOMPONENTEN_PK" PRIMARY KEY ("PK_MASCH_KOMPONENTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KAT_KATEGORIE_BUCH_BELEG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KAT_KATEGORIE_BUCH_BELEG" MODIFY ("PK_REL_KAT_KATEGORIE_BUCH_BELEG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_KAT_KATEGORIE_BUCH_BELEG" ADD CONSTRAINT "T_REL_KAT_KATEGORIE_BUCH_BELEG_PK" PRIMARY KEY ("PK_REL_KAT_KATEGORIE_BUCH_BELEG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_TAB_TABLE_CONTENT_COUNT_LOAD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD" MODIFY ("PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_LOAD" ADD CONSTRAINT "T_DB_TAB_TABLE_CONTENT_COUNT_LOAD_PK" PRIMARY KEY ("PK_DB_TAB_TABLE_CONTENT_COUNT_LOAD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KZ_KENNZAHLEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KZ_KENNZAHLEN" MODIFY ("PK_KZ_KENNZAHLEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KZ_KENNZAHLEN" ADD CONSTRAINT "T_KZ_KENNZAHLEN_PK" PRIMARY KEY ("PK_KZ_KENNZAHLEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_WH_ART_ARTIKELTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELTYP" MODIFY ("PK_BAS_WH_ART_ARTIKELTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELTYP" MODIFY ("ARTIKELTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELTYP" ADD CONSTRAINT "T_ARTIKELTYP_PK" PRIMARY KEY ("PK_BAS_WH_ART_ARTIKELTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MASCH_MATERIAL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MASCH_MATERIAL" MODIFY ("PK_MASCH_MATERIAL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_MASCH_MATERIAL" ADD CONSTRAINT "T_MASCH_MATERIAL_PK" PRIMARY KEY ("PK_MASCH_MATERIAL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_BELEG_ARTIKEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_BELEG_ARTIKEL" MODIFY ("PK_REL_BEL_BELEG_ARTIKEL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_BEL_BELEG_ARTIKEL" ADD CONSTRAINT "T_REL_BELEG_ARTIKEL_PK" PRIMARY KEY ("PK_REL_BEL_BELEG_ARTIKEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_PROJ_STUNDEN_BELEG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_PROJ_STUNDEN_BELEG" MODIFY ("FK_STUNDENZETTEL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_PROJ_STUNDEN_BELEG" MODIFY ("FK_BELEG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_PROJ_STUNDEN_BELEG" ADD CONSTRAINT "T_REL_STUNDEN_BELEG_PK" PRIMARY KEY ("FK_STUNDENZETTEL", "FK_BELEG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_SUSA
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_SUSA" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_SUSA" ADD CONSTRAINT "IMP_LEX_SUSA_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_PP_VORGANG_DOWNLOAD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_PP_VORGANG_DOWNLOAD" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_PP_VORGANG_DOWNLOAD" ADD CONSTRAINT "PP_VORGANG_DOWNLOAD_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_RE_RECHNUNG_BELEG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG" MODIFY ("PK_REL_RE_RECHNUNG_BELEG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG" ADD CONSTRAINT "T_REL_RECHNUNG_BELEG_PK" PRIMARY KEY ("PK_REL_RE_RECHNUNG_BELEG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_FLI_FLI_FLIGHT_STEPS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_FLI_FLI_FLIGHT_STEPS" MODIFY ("PK_FLI_FLIGHT_STEPS" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_FLI_FLI_FLIGHT_STEPS" ADD CONSTRAINT "T_FLI_FLIGHT_STEPS_PK" PRIMARY KEY ("PK_FLI_FLIGHT_STEPS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_SATZ_LEX
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_SATZ_LEX" ADD CONSTRAINT "T_STEUER_SATZ_LEX_PK" PRIMARY KEY ("PK_STEU_STEUER_SATZ_LEX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_SATZ_LEX" MODIFY ("PK_STEU_STEUER_SATZ_LEX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_KTO_KONT_BUCH_LEX_BUCH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_LEX_BUCH" ADD CONSTRAINT "T_REL_KONT_BUCH_LEX_BUCH_PK" PRIMARY KEY ("PK_REL_KTO_KONT_BUCH_LEX_BUCH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_LEX_BUCH" MODIFY ("PK_REL_KTO_KONT_BUCH_LEX_BUCH" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_CONTR_DUPLIKAT_CHECK_KONTR
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK_KONTR" MODIFY ("PK_DUPLIKAT_CHECK_KONTROLLE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK_KONTR" ADD CONSTRAINT "T_DUPLIKAT_CHECK_KONTROLLE_PK" PRIMARY KEY ("PK_DUPLIKAT_CHECK_KONTROLLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_INT_INTERNETPORTAL_APP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INT_INTERNETPORTAL_APP" MODIFY ("PK_INT_INTERNETPORTAL_APP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_INT_INTERNETPORTAL_APP" MODIFY ("WEBSEITE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_INT_INTERNETPORTAL_APP" ADD CONSTRAINT "T_INTERNETPORTAL_APP_PK" PRIMARY KEY ("PK_INT_INTERNETPORTAL_APP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ABR_EN_HEIZUNGSABRECHNUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG" MODIFY ("PK_ABR_EN_HEIZUNGSABRECHNUNG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABRECHNUNG" ADD CONSTRAINT "IMP_BA_HEIZUNGSABRECHNUNG_PK" PRIMARY KEY ("PK_ABR_EN_HEIZUNGSABRECHNUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_INP_BELEGE_BEL_TYPE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE" MODIFY ("PK_REL_INP_BELEGE_BEL_TYPE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_INP_BELEGE_BEL_TYPE" ADD CONSTRAINT "T_REL_INP_BELEGE_BEL_TYPE_PK" PRIMARY KEY ("PK_REL_INP_BELEGE_BEL_TYPE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_INV_INVENTAR_ZAHLUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_ZAHLUNG" ADD CONSTRAINT "PK_T_REL_INVENTAR_ZAHLUNG" PRIMARY KEY ("PK_REL_INV_ZAHLUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_ZAHLUNG" MODIFY ("PK_REL_INV_ZAHLUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_VERPFL_MEHRAUFWD_DET
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" MODIFY ("PK_STEU_STEUER_VERPFL_MEHRAUFWD_DET" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" ADD CONSTRAINT "T_VERPFLEGUNGSMEHRAUFWAND_DET_PK" PRIMARY KEY ("PK_STEU_STEUER_VERPFL_MEHRAUFWD_DET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_INP_BELEGE_POS_ALL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INP_BELEGE_POS_ALL" ADD CONSTRAINT "INP_BELEGE_POS_ALL_PK" PRIMARY KEY ("PK_INP_BELEGE_POS_ALL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_INP_BELEGE_POS_ALL" MODIFY ("PK_INP_BELEGE_POS_ALL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_IMP_TEL_MOBILCOM_RECH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH" MODIFY ("PK_IMP_TEL_MOBILCOM_RECH" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH" ADD CONSTRAINT "IMP_TEL_MOBILCOM_RECH_PK" PRIMARY KEY ("PK_IMP_TEL_MOBILCOM_RECH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_KONTEN_TYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_TYP" MODIFY ("PK_KONTENPLAN_KONTEN_TYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_TYP" ADD CONSTRAINT "T_KONTENPLAN_KONTEN_TYP_PK" PRIMARY KEY ("PK_KONTENPLAN_KONTEN_TYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_INV_INVENTAR_KOMPONENTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_KOMPONENTEN" MODIFY ("PK_REL_INV_INVENTAR_KOMPONENTEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_KOMPONENTEN" ADD CONSTRAINT "T_REL_INV_INVENTAR_KOMPONENTEN_PK" PRIMARY KEY ("PK_REL_INV_INVENTAR_KOMPONENTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_PROD_PRODUCT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_PROD_PRODUCT" MODIFY ("PK_PROD_PRODUCT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_PROD_PRODUCT" ADD CONSTRAINT "T_PROD_PRODUCT_PK" PRIMARY KEY ("PK_PROD_PRODUCT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_FLI_APL_PLANE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_FLI_APL_PLANE" MODIFY ("PK_FLI_APL_PLANE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_FLI_APL_PLANE" ADD CONSTRAINT "T_FLI_APL_PLANE_PK" PRIMARY KEY ("PK_FLI_APL_PLANE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_SONSTIGE_BELEGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_SONSTIGE_BELEGE" MODIFY ("PK_IMP_BA_SONSTIGE_BELEGE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."IMP_BA_SONSTIGE_BELEGE" ADD CONSTRAINT "IMP_BA_SONSTIGE_BELEGE_PK" PRIMARY KEY ("PK_IMP_BA_SONSTIGE_BELEGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ABL_ORDNER_PAGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ABL_ORDNER_PAGE" ADD CONSTRAINT "T_ABL_ORDNER_PAGE_UK1" UNIQUE ("PAGE_NUMBER", "FK_ABL_ORDNER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ABL_ORDNER_PAGE" ADD CONSTRAINT "T_ABL_ORDNER_PAGE_PK" PRIMARY KEY ("PK_ABL_ORDNER_PAGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ABL_ORDNER_PAGE" MODIFY ("PK_ABL_ORDNER_PAGE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_IMP_INP_BELEGE_ALL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_INP_BELEGE_ALL" MODIFY ("PK_IMP_INP_BELEGE_ALL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_ABR_EN_STROMABLESUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ABR_EN_STROMABLESUNG" ADD CONSTRAINT "T_STROMABLESUNG_PK" PRIMARY KEY ("PK_ABR_EN_STROMABLESUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ABR_EN_STROMABLESUNG" MODIFY ("PK_ABR_EN_STROMABLESUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_FLI_AIR_AIRPORTS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_FLI_AIR_AIRPORTS" MODIFY ("PK_FLI_AIR_AIRPORTS" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_FLI_AIR_AIRPORTS" ADD CONSTRAINT "T_FLI_AIR_AIRPORTS_PK" PRIMARY KEY ("PK_FLI_AIR_AIRPORTS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KTO_KONTO_AUSZUG_GIR
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" ADD CONSTRAINT "T_REL_KONTO_AUSZUG_GIR_PK" PRIMARY KEY ("PK_REL_KTO_KONTO_AUSZUG_GIR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" MODIFY ("PK_REL_KTO_KONTO_AUSZUG_GIR" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_GIR" ADD CONSTRAINT "T_REL_KONTO_AUSZUG_GIR_UK3" UNIQUE ("FK_MAIN_KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_INV_INVENTAR_ARTIKEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_ARTIKEL" MODIFY ("PK_REL_INV_ART" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_ARTIKEL" ADD CONSTRAINT "T_REL_INVENTAR_ARTIKEL_PK" PRIMARY KEY ("PK_REL_INV_ART")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_TXT_REPLACE_CONTEXT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_TXT_REPLACE_CONTEXT" MODIFY ("PK_DB_TXT_REPLACE_CONTEXT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_TXT_REPLACE_CONTEXT" ADD CONSTRAINT "T_TXT_REPLACE_CONTEXT_PK" PRIMARY KEY ("PK_DB_TXT_REPLACE_CONTEXT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" MODIFY ("PK_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN" ADD CONSTRAINT "T_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN_PK" PRIMARY KEY ("PK_REL_INP_INP_BELEGE_ALL_TEL_TELEFONKARTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_BANKKONTO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_BANKKONTO" MODIFY ("PK_KTO_BANKKONTO" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_BANKKONTO" ADD CONSTRAINT "T_BANKKONTO_PK" PRIMARY KEY ("PK_KTO_BANKKONTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_BARGELD_BELEG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_BARGELD_BELEG" ADD CONSTRAINT "T_REL_BARGELD_BELEG_PK" PRIMARY KEY ("PK_REL_BARGELD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_BEL_BARGELD_BELEG" MODIFY ("PK_REL_BARGELD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_IMP_TEL_MOBILCOM_RECH_OV
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_OV" ADD CONSTRAINT "A3_Zus_Gruppierung_Ein_PK" PRIMARY KEY ("PK_IMP_TEL_MOBILCOM_RECH_OV")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_OV" MODIFY ("PK_IMP_TEL_MOBILCOM_RECH_OV" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_IMP_TEL_CONGSTAR_RECH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_TEL_CONGSTAR_RECH" MODIFY ("T_IMP_TEL_CONGSTAR_RECH" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_TEL_CONGSTAR_RECH" ADD CONSTRAINT "T_IMP_TEL_CONGSTAR_PK" PRIMARY KEY ("T_IMP_TEL_CONGSTAR_RECH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_GRENZBELEGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_GRENZBELEGE" MODIFY ("PK_IMP_BA_GRENZBELEGE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."IMP_BA_GRENZBELEGE" ADD CONSTRAINT "IMP_BA_GRENZBELEGE_PK" PRIMARY KEY ("PK_IMP_BA_GRENZBELEGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_COWORKING
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_COWORKING" MODIFY ("PK_IMP_BA_COWORKING" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."IMP_BA_COWORKING" ADD CONSTRAINT "IMP_BA_COWORKING_PK" PRIMARY KEY ("PK_IMP_BA_COWORKING")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_KON_GESCHAEFTSPARTNERTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_KON_GESCHAEFTSPARTNERTYP" MODIFY ("PK_BAS_KON_GESCHAEFTSPARTNERTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_KON_GESCHAEFTSPARTNERTYP" ADD CONSTRAINT "T_GESCHAEFTSPARTNERTYP_PK" PRIMARY KEY ("PK_BAS_KON_GESCHAEFTSPARTNERTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_KAT_OBERKATEGORIE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_KAT_OBERKATEGORIE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_KAT_OBERKATEGORIE" ADD CONSTRAINT "STD_OBERKATEGORIE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_KONTEN_KL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KL" MODIFY ("PK_KONTENPLAN_KONTEN_KL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KL" ADD CONSTRAINT "T_KONTENPLAN_KONTEN_KL_PK" PRIMARY KEY ("PK_KONTENPLAN_KONTEN_KL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_KONTO_BUCH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_KONTO_BUCH" ADD CONSTRAINT "T_KONTOAUSZUG_BUCH_PK" PRIMARY KEY ("PK_KTO_KONTO_BUCH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_KTO_KONTO_BUCH" MODIFY ("PK_KTO_KONTO_BUCH" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_JAHR_TODO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO" MODIFY ("PK_STEU_STEUER_JAHR_TODO" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STEU_STEUER_JAHR_TODO" ADD CONSTRAINT "T_STEUER_JAHR_TODO_PK" PRIMARY KEY ("PK_STEU_STEUER_JAHR_TODO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CAR_AUTO_VERSICHERUNG_POS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG_POS" MODIFY ("PK_CAR_AUTO_VERSICHERUNG_POS" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_CAR_AUTO_VERSICHERUNG_POS" ADD CONSTRAINT "IMP_BA_KFZ_VERSICHERUNG_POS_PK" PRIMARY KEY ("PK_CAR_AUTO_VERSICHERUNG_POS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KTO_KONT_BUCH_KONT_BUCH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" ADD CONSTRAINT "T_REL_KONT_BUCH_KONT_BUCH_PK" PRIMARY KEY ("PK_REL_KTO_KONT_BUCH_KONT_BUCH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" MODIFY ("PK_REL_KTO_KONT_BUCH_KONT_BUCH" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_KONT_BUCH" ADD CONSTRAINT "T_REL_KONT_BUCH_KONT_BUCH_UK1" UNIQUE ("FK_KTO_KONTO_BUCH1", "FK_KTO_KONTO_BUCH2")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KTO_KONTO_AUSZUG_BILD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_BILD" ADD CONSTRAINT "T_REL_KONTO_AUSZUG_BILD_PK" PRIMARY KEY ("PK_KTO_KONTO_AUSZUG_BILD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_KTO_KONTO_AUSZUG_BILD" MODIFY ("PK_KTO_KONTO_AUSZUG_BILD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_KONT_BUCH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_KONT_BUCH" ADD CONSTRAINT "T_REL_BEL_KONT_BUCH_PK" PRIMARY KEY ("PK_REL_BEL_KONT_BUCH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_BEL_KONT_BUCH" MODIFY ("PK_REL_BEL_KONT_BUCH" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_CONTR_DUPLIKAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT" MODIFY ("PK_DUPLIKAT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT" ADD CONSTRAINT "T_DUPLIKAT_PK" PRIMARY KEY ("PK_DUPLIKAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KON_GESCHAEFTSPARTNER
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KON_GESCHAEFTSPARTNER" MODIFY ("PK_KON_GESCHAEFTSPARTNER" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KON_GESCHAEFTSPARTNER" ADD CONSTRAINT "T_GESCHAEFTSPARTNER_PK" PRIMARY KEY ("PK_KON_GESCHAEFTSPARTNER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_VER_VERTRAG_MIETE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VER_VERTRAG_MIETE" MODIFY ("PK_VER_VERTRAG_MIETE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VER_VERTRAG_MIETE" ADD CONSTRAINT "T_MIETVERTRAG_PK" PRIMARY KEY ("PK_VER_VERTRAG_MIETE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MASCH_PROJ_FREMDLEISTUNGEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MASCH_PROJ_FREMDLEISTUNGEN" ADD CONSTRAINT "PK_T_MASCH_PROJ_FREMDLEISTUNGEN" PRIMARY KEY ("PK_MASCH_PROJ_FREMDLEISTUNGEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_TAB_TABLE_CONTENT_COUNT_CNT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT" MODIFY ("PK_DB_TAB_TABLE_CONTENT_COUNT_CNT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT_CNT" ADD CONSTRAINT "T_DB_TAB_TABLE_CONTENT_COUNT_CNT_PK" PRIMARY KEY ("PK_DB_TAB_TABLE_CONTENT_COUNT_CNT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CAR_AUTO_ERSATZTEILE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CAR_AUTO_ERSATZTEILE" ADD CONSTRAINT "IMP_BA_AUTOERSATZTEILE_PK" PRIMARY KEY ("PK_CAR_AUTO_ERSATZTEILE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_CAR_AUTO_ERSATZTEILE" MODIFY ("PK_CAR_AUTO_ERSATZTEILE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_LEX_KTO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_LEX_KTO" MODIFY ("FK_MAIN_KEY" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_LEX_KTO" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_IMP_LEX_RE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_LEX_RE" MODIFY ("PK_IMP_RE_LEXWARE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_LEX_RE" ADD CONSTRAINT "IMP_RE_LEXWARE_PK" PRIMARY KEY ("PK_IMP_RE_LEXWARE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KON_KONTAKT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KON_KONTAKT" MODIFY ("PK_KON_KONTAKT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KON_KONTAKT" ADD CONSTRAINT "T_KONTAKT_PK" PRIMARY KEY ("PK_KON_KONTAKT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_VERS_RV_AUSZUG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VERS_RV_AUSZUG" MODIFY ("PK_RV_AUSZUG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VERS_RV_AUSZUG" ADD CONSTRAINT "T_RV_AUSZUG_PK" PRIMARY KEY ("PK_RV_AUSZUG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_INV_SUB_ELEKTRONIK
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INV_SUB_ELEKTRONIK" ADD CONSTRAINT "IMP_BA_ELEKTRONIK_PK" PRIMARY KEY ("PK_INV_SUB_ELEKTRONIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_INV_SUB_ELEKTRONIK" MODIFY ("PK_INV_SUB_ELEKTRONIK" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_KTO_KAS_KASSE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_KAS_KASSE" MODIFY ("PK_KTO_KAS_KASSE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_KAS_KASSE" ADD CONSTRAINT "KAS_KASSE_PK" PRIMARY KEY ("PK_KTO_KAS_KASSE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_RENAME
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_RENAME" MODIFY ("PK_DB_RENAME" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_RENAME" ADD CONSTRAINT "T_DB_RENAME_PK" PRIMARY KEY ("PK_DB_RENAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_WH_ARTIKELTYP_ARTIKELTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_WH_ARTIKELTYP_ARTIKELTYP" ADD CONSTRAINT "T_REL_ARTIKELTYP_ARTIKELTY_PK" PRIMARY KEY ("PK_REL_WH_ARTIKELTYP_ARTIKELTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_WH_ARTIKELTYP_ARTIKELTYP" MODIFY ("PK_REL_WH_ARTIKELTYP_ARTIKELTYP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENBLATT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENBLATT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_KONTENBLATT" ADD CONSTRAINT "LEX_KONTENBLATT_PK" PRIMARY KEY ("ID")
  USING INDEX (CREATE UNIQUE INDEX "COMPANY"."IMP_KONTENBLATT_2018_PK" ON "COMPANY"."T_LEX_KONTENBLATT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" )  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KON_KONTAKTPERSON_ADRESSE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KON_KONTAKTPERSON_ADRESSE" MODIFY ("PK_REL_KONTP_ADR" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_KON_KONTAKTPERSON_ADRESSE" ADD CONSTRAINT "T_REL_KONTAKTPERSON_ADRESSE_PK" PRIMARY KEY ("PK_REL_KONTP_ADR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_PP_VORGANG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_PP_VORGANG" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_PP_VORGANG" ADD CONSTRAINT "PP_VORGANG_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_TXT_REPLACE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_TXT_REPLACE" MODIFY ("PK_DB_TXT_REPLACE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_TXT_REPLACE" ADD CONSTRAINT "T_TXT_REPLACE_PK" PRIMARY KEY ("PK_DB_TXT_REPLACE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_KAL_ARBEITSTAGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_KAL_ARBEITSTAGE" MODIFY ("PK_BAS_KAL_ARBEITSTAGE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_KAL_ARBEITSTAGE" ADD CONSTRAINT "T_ARBEITSTAGE_PK" PRIMARY KEY ("PK_BAS_KAL_ARBEITSTAGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_RE_RECHNUNG_BELEG_NEU
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_BELEG_NEU" MODIFY ("PK_REL_STDZ_BEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_BAS_PROJ_PROJEKT_ART_OLD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_PROJ_PROJEKT_ART_OLD" ADD CONSTRAINT "PK_T_PROJEKT_ART" PRIMARY KEY ("PK_BAS_PROJ_PROJEKT_ART")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_PROJ_PROJEKT_ART_OLD" MODIFY ("PK_BAS_PROJ_PROJEKT_ART" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_MDT_MANDANT_STD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MDT_MANDANT_STD" MODIFY ("PK_REL_MDT_MANDANT_STD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LEHR_FRAGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEHR_FRAGE" ADD CONSTRAINT "T_FRAGE_PK" PRIMARY KEY ("PK_LEHR_FRAGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_LEHR_FRAGE" MODIFY ("PK_LEHR_FRAGE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_JAHR
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_JAHR" MODIFY ("PK_STEU_STEUER_JAHR" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STEU_STEUER_JAHR" ADD CONSTRAINT "T_STEUER_JAHR_PK" PRIMARY KEY ("PK_STEU_STEUER_JAHR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_BAS_FARBE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_BAS_FARBE" MODIFY ("PK_FARBE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_BAS_FARBE" ADD CONSTRAINT "T_FARBE_PK" PRIMARY KEY ("PK_FARBE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_RE_SUB_HOTELRECHNUNGEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_RE_SUB_HOTELRECHNUNGEN" ADD CONSTRAINT "IMP_BA_HOTELRECHNUNGEN_PK" PRIMARY KEY ("PK_RE_SUB_HOTELRECHNUNGEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_RE_SUB_HOTELRECHNUNGEN" MODIFY ("PK_RE_SUB_HOTELRECHNUNGEN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_LEX_KONTENPLAN_KTO_KTO_KAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_LEX_KONTENPLAN_KTO_KTO_KAT" ADD CONSTRAINT "T_REL_KONTENPLAN_KTO_KTO_K_PK" PRIMARY KEY ("PK_REL_LEX_KONTENPLAN_KTO_KTO_KAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_LEX_KONTENPLAN_KTO_KTO_KAT" MODIFY ("PK_REL_LEX_KONTENPLAN_KTO_KTO_KAT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" MODIFY ("PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT" ADD CONSTRAINT "T_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT_PK" PRIMARY KEY ("PK_PREV_PROJ_PROJECT_CALCULATION_SERVICE_PRODUCT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMP_TEL_O2
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_TEL_O2" ADD CONSTRAINT "IMP_TEL_O2_PK" PRIMARY KEY ("PK_IMP_TEL_O2")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_IMP_TEL_O2" MODIFY ("PK_IMP_TEL_O2" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_ADR_PLZ_ORT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_PLZ_ORT" MODIFY ("PK_ADR_PLZ_ORT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_PLZ_ORT" ADD CONSTRAINT "T_PLZ_ORT_PK" PRIMARY KEY ("PK_ADR_PLZ_ORT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ADR_PLZ_ORT" ADD CONSTRAINT "CON_PLZ_ORT" UNIQUE ("PLZ", "OT", "FK_ADR_ORT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_KONTEN_GRP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_GRP" ADD CONSTRAINT "T_KONTENPLAN_KONTEN_GRP_PK" PRIMARY KEY ("PK_LEX_KONTENPLAN_KONTEN_GRP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_GRP" MODIFY ("PK_LEX_KONTENPLAN_KONTEN_GRP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_ADR_KONTINENT_LAND
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_ADR_KONTINENT_LAND" MODIFY ("PK_REL_KONTINENT_LAND" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_ADR_KONTINENT_LAND" ADD CONSTRAINT "T_REL_KONTINENT_LAND_PK" PRIMARY KEY ("PK_REL_KONTINENT_LAND")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_ORG_ORG_UNIT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_ORG_ORG_UNIT" MODIFY ("PK_ORGANISATIONSEINHEIT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_ORG_ORG_UNIT" ADD CONSTRAINT "T_ORGANISATIONSEINHEIT_PK" PRIMARY KEY ("PK_ORGANISATIONSEINHEIT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEHR_EINSENDEAUFGABE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEHR_EINSENDEAUFGABE" MODIFY ("PK_LEHR_EINSENDEAUFGABE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEHR_EINSENDEAUFGABE" ADD CONSTRAINT "T_EINSENDEAUFGABE_PK" PRIMARY KEY ("PK_LEHR_EINSENDEAUFGABE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_INV_KOMP_KOMPONENTEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INV_KOMP_KOMPONENTEN" MODIFY ("PK_INV_KOMPONENTEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_INV_KOMP_KOMPONENTEN" ADD CONSTRAINT "T_COMP_PK" PRIMARY KEY ("PK_INV_KOMPONENTEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_TEL_RECHNUNG_DET
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_TEL_RECHNUNG_DET" MODIFY ("PK_TEL_RECHNUNG_DET" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_TEL_RECHNUNG_DET" ADD CONSTRAINT "T_TEL_RECHNUNG_DET_PK" PRIMARY KEY ("PK_TEL_RECHNUNG_DET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_BELEG_LOCATION
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_BELEG_LOCATION" MODIFY ("PK_REL_BEL_LOC" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_BEL_BELEG_LOCATION" ADD CONSTRAINT "T_REL_BELEG_LOCATION_PK" PRIMARY KEY ("PK_REL_BEL_LOC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_MON_UMTAUSCHKURS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_MON_UMTAUSCHKURS" ADD CONSTRAINT "T_UMTAUSCHKURS_PK" PRIMARY KEY ("PK_T_UMTAUSCHKURS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_MON_UMTAUSCHKURS" MODIFY ("PK_T_UMTAUSCHKURS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_BAS_LOC_LOCATION_TYPE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_LOC_LOCATION_TYPE" MODIFY ("PK_BAS_LOC_LOCATION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_LOC_LOCATION_TYPE" ADD CONSTRAINT "T_LOCATION_TYPE_PK" PRIMARY KEY ("PK_BAS_LOC_LOCATION_TYPE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BAS_LOC_LOCATION_TYPE" ADD CONSTRAINT "CON_LOC_TYPE" UNIQUE ("LOCATION_TYPE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_KON_KONTAKTTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_KON_KONTAKTTYP" MODIFY ("PK_KONTAKTTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_KON_KONTAKTTYP" ADD CONSTRAINT "T_KONTAKTTYP_PK" PRIMARY KEY ("PK_KONTAKTTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_HAUPT_MERK" MODIFY ("PK_AUDI_FIN_VERTRAG_HAUPT_MERK" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" MODIFY ("PK_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL" ADD CONSTRAINT "T_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL_PK" PRIMARY KEY ("PK_REL_INP_INP_BELEGE_ALL_INP_BELEGE_ALL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_KONTO_AUSZUG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_KONTO_AUSZUG" ADD CONSTRAINT "T_KONTO_AUSZUG_PK" PRIMARY KEY ("PK_KTO_KONTO_AUSZUG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_KTO_KONTO_AUSZUG" MODIFY ("PK_KTO_KONTO_AUSZUG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MASCH_PROJ_INBETRIEBNAHME
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MASCH_PROJ_INBETRIEBNAHME" ADD CONSTRAINT "PK_T_MASCH_PROJ_INBETRIEBNAHME" PRIMARY KEY ("PK_MASCH_PROJ_INBETRIEBNAHME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_MONAT_RECH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_RECH" ADD CONSTRAINT "T_REL_STEUER_MONAT_RECH_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_MONAT_RECH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_MONAT_RECH" MODIFY ("PK_REL_STEU_STEUER_MONAT_RECH" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_LEX_KTO_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_LEX_KTO_BEL" ADD CONSTRAINT "T_REL_LEX_KTO_BEL_PK" PRIMARY KEY ("PK_REL_LEX_KTO_BEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_LEX_KTO_BEL" MODIFY ("PK_REL_LEX_KTO_BEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_INV_INVENTARE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INV_INVENTARE" MODIFY ("PK_INV_INVENTAR" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_INV_INVENTARE" ADD CONSTRAINT "T_INVENTARE_PK" PRIMARY KEY ("PK_INV_INVENTAR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ORG_BEITRAG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ORG_BEITRAG" ADD CONSTRAINT "T_BEITRAG_PK" PRIMARY KEY ("PK_BEITRAG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ORG_BEITRAG" MODIFY ("PK_BEITRAG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_STD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STD" MODIFY ("PK_STD" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STD" MODIFY ("FK_STD_GROUP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STD" MODIFY ("STD_VALUE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STD" ADD CONSTRAINT "T_STD_PK" PRIMARY KEY ("PK_STD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STD" ADD CONSTRAINT "T_STD_UK1" UNIQUE ("FK_STD_GROUP", "STD_VALUE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_LOHN_ZAHLUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_ZAHLUNG" ADD CONSTRAINT "T_REL_STEUER_LOHN_ZAHL_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_LOHN_ZAHLUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_LOHN_ZAHLUNG" MODIFY ("PK_REL_STEU_STEUER_LOHN_ZAHLUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_ADR_REGION
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_REGION" MODIFY ("T_ADR_REGION" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_REGION" ADD CONSTRAINT "T_ADR_BUNDESLAND_PK" PRIMARY KEY ("T_ADR_REGION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_SATZ_GUELT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_SATZ_GUELT" ADD CONSTRAINT "T_REL_STEUER_SATZ_GÜLT_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_SATZ_GUELT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_SATZ_GUELT" MODIFY ("PK_REL_STEU_STEUER_SATZ_GUELT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LEX_LONG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_LONG" ADD CONSTRAINT "T_LEX_LONG_UK1" UNIQUE ("RELATION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_OBJ_OBJECT_LIST
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_OBJ_OBJECT_LIST" MODIFY ("PK_DB_OBJ_OBJECT_LIST" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_OBJ_OBJECT_LIST" ADD CONSTRAINT "T_DB_OBJECT_LIST_PK" PRIMARY KEY ("PK_DB_OBJ_OBJECT_LIST")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_WH_LAGERORT_ARTIKEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_WH_LAGERORT_ARTIKEL" MODIFY ("PK_REL_LAGO_ART" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_WH_LAGERORT_ARTIKEL" ADD CONSTRAINT "T_REL_LAGERORT_ARTIKEL_PK" PRIMARY KEY ("PK_REL_LAGO_ART")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ADR_ORT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_ORT" MODIFY ("PK_ADR_ORT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_ORT" ADD CONSTRAINT "T_ORT_PK" PRIMARY KEY ("PK_ADR_ORT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ADR_ORT" ADD CONSTRAINT "CON_ORT" UNIQUE ("ORT", "FK_ADR_LAND")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ADR_ADRESSE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_ADRESSE" MODIFY ("PK_ADR_ADRESSE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_ADRESSE" ADD CONSTRAINT "T_ADRESSE_PK" PRIMARY KEY ("PK_ADR_ADRESSE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_PROJ_STUNDENZETTEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_PROJ_STUNDENZETTEL" MODIFY ("PK_PROJ_STUNDENZETTEL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_PROJ_STUNDENZETTEL" ADD CONSTRAINT "T_STUNDENZETTEL_PK" PRIMARY KEY ("PK_PROJ_STUNDENZETTEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" MODIFY ("PK_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" MODIFY ("FK_DB_OBJ_OBJECT_LIST" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST" ADD CONSTRAINT "T_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST_PK" PRIMARY KEY ("PK_REL_DB_OBJ_OBJECT_LIST_OBJECT_HIST")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMP_TEL_VODAFONE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_TEL_VODAFONE" MODIFY ("PK_IMP_TEL_VODAFONE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_TEL_VODAFONE" ADD CONSTRAINT "IMP_TEL_VODAFONE_PK" PRIMARY KEY ("PK_IMP_TEL_VODAFONE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEHR_LEHRGANG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEHR_LEHRGANG" MODIFY ("PK_LEHR_LEHRGANG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEHR_LEHRGANG" ADD CONSTRAINT "T_LEHRGANG_PK" PRIMARY KEY ("PK_LEHR_LEHRGANG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_SOL_SOLUTION
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_SOL_SOLUTION" MODIFY ("PK_SOL_SOLUTION" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_SOL_SOLUTION" ADD CONSTRAINT "T_SOL_SOLUTION_PK" PRIMARY KEY ("PK_SOL_SOLUTION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_PAYPAL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_PAYPAL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_PAYPAL" ADD CONSTRAINT "KTO_PAYPAL_PK1" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LOC_LOCATION_SUB
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LOC_LOCATION_SUB" MODIFY ("PK_LOC_LOCATION_SUB" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LOC_LOCATION_SUB" ADD CONSTRAINT "T_LOC_LOCATION_SUB_PK" PRIMARY KEY ("PK_LOC_LOCATION_SUB")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ABR_EN_HEIZUNGSABLESUNG_DETAILS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABLESUNG_DETAILS" MODIFY ("PK_ABR_HEIZUNGSABLESUNG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ABR_EN_HEIZUNGSABLESUNG_DETAILS" ADD CONSTRAINT "T_HEIZUNGSABLESUNG_PK" PRIMARY KEY ("PK_ABR_HEIZUNGSABLESUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_KONTENPLAN_KONTEN_KAT_GRP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT_GRP" ADD CONSTRAINT "T_KONTENPLAN_KONTEN_KAT_GR_PK" PRIMARY KEY ("PK_LEX_KONTENPLAN_KONTEN_KAT_GRP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_LEX_KONTENPLAN_KONTEN_KAT_GRP" MODIFY ("PK_LEX_KONTENPLAN_KONTEN_KAT_GRP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" MODIFY ("PK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN" ADD CONSTRAINT "T_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN_PK" PRIMARY KEY ("PK_REL_MASCH_MAT_MATERIAL_MATERIAL_MAIN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_TEX_TEXTILREINIGUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_TEX_TEXTILREINIGUNG" ADD CONSTRAINT "IMP_BA_TEXTILREINIGUNG_PK" PRIMARY KEY ("PK_TEX_TEXTILREINIGUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_TEX_TEXTILREINIGUNG" MODIFY ("PK_TEX_TEXTILREINIGUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PROJ1_ADDFRIEND
--------------------------------------------------------

  ALTER TABLE "COMPANY"."PROJ1_ADDFRIEND" MODIFY ("FRIEND_ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."PROJ1_ADDFRIEND" ADD CONSTRAINT "T_ADDFRIEND_PK" PRIMARY KEY ("FRIEND_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_KAT_IMMO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_KAT_IMMO" MODIFY ("PK_BAS_KAT_IMMO" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_KAT_IMMO" ADD CONSTRAINT "T_BAS_KAT_IMMO_PK" PRIMARY KEY ("PK_BAS_KAT_IMMO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMP_TEL_MOBILCOM_RECH_DET
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET" MODIFY ("PK_IMP_TEL_MOBILCOM_RECH_DET" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_TEL_MOBILCOM_RECH_DET" ADD CONSTRAINT "T_IMP_TEL_MOBILCOM_RECH_DET_PK" PRIMARY KEY ("PK_IMP_TEL_MOBILCOM_RECH_DET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_SEPA_VORLAGEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_SEPA_VORLAGEN" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_SEPA_VORLAGEN" ADD CONSTRAINT "T_SEPA_VORLAGEN_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_DB_OBJ_OBJECT_LIST_PART
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART" MODIFY ("PK_REL_DB_OBJ_OBJECT_LIST_PART" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_DB_OBJ_OBJECT_LIST_PART" ADD CONSTRAINT "T_REL_DB_OBJ_OBJECT_LIST_PART_PK" PRIMARY KEY ("PK_REL_DB_OBJ_OBJECT_LIST_PART")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_FLI_FLI_FLIGHT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_FLI_FLI_FLIGHT" MODIFY ("PK_FLI_FLIGHT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_FLI_FLI_FLIGHT" ADD CONSTRAINT "T_FLI_FLI_FLIGHT_PK" PRIMARY KEY ("PK_FLI_FLIGHT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BUCH_BUCH
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BUCH_BUCH" MODIFY ("PK_BUCH_BUCH" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BUCH_BUCH" ADD CONSTRAINT "T_BUCH_PK" PRIMARY KEY ("PK_BUCH_BUCH")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KTO_DOWNLOAD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KTO_DOWNLOAD" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KTO_DOWNLOAD" ADD CONSTRAINT "PP_DOWNLOAD_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_WH_ART_ARTIKELBESTANDTEILTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBESTANDTEILTYP" MODIFY ("PK_BAS_WH_ART_ARTIKELBESTTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_WH_ART_ARTIKELBESTANDTEILTYP" ADD CONSTRAINT "T_ARTIKELBESTANDTEILTYP_PK" PRIMARY KEY ("PK_BAS_WH_ART_ARTIKELBESTTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BEL_BELEGPOSITION
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BEL_BELEGPOSITION" MODIFY ("PK_BEL_BELEGPOSITION" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BEL_BELEGPOSITION" ADD CONSTRAINT "T_BELEGPOSITION_PK" PRIMARY KEY ("PK_BEL_BELEGPOSITION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_LEX_LONG_COMM
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("FK_RELATION" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("COMMENT_TEXT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("CREATED" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("UPDATED" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" MODIFY ("UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_LEX_LONG_COMM" ADD CONSTRAINT "T_LEX_LONG_COMM_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_STEU_STEUER_VERPFL_BELEG_ORT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_ORT" MODIFY ("PK_REL_STEU_STEUER_VERPFL_BELEG_ORT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_STEU_STEUER_VERPFL_BELEG_ORT" ADD CONSTRAINT "T_REL_STEUER_VERPFL_BELEG_ORT1_PK" PRIMARY KEY ("PK_REL_STEU_STEUER_VERPFL_BELEG_ORT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_BELEG_INVENTAR
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_BELEG_INVENTAR" MODIFY ("PK_REL_BEL_BELEG_INVENTAR" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_BEL_BELEG_INVENTAR" ADD CONSTRAINT "T_REL_BELEG_INVENTAR_PK" PRIMARY KEY ("PK_REL_BEL_BELEG_INVENTAR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_PROJ_PROJEKT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_PROJ_PROJEKT" MODIFY ("PK_PROJ_PROJEKT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_PROJ_PROJEKT" ADD CONSTRAINT "T_PROJEKT_PK" PRIMARY KEY ("PK_PROJ_PROJEKT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_INP_BELEGE_ALL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_INP_BELEGE_ALL" ADD CONSTRAINT "INP_BELEGE_ALL_PK" PRIMARY KEY ("PK_INP_BELEGE_ALL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_INP_BELEGE_ALL" MODIFY ("PK_INP_BELEGE_ALL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_LEHR_FRAGE_LOESUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_LEHR_FRAGE_LOESUNG" ADD CONSTRAINT "T_REL_FRAGE_LÖS_PK" PRIMARY KEY ("PK_LEHR_FRAGE_LOESEUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_LEHR_FRAGE_LOESUNG" MODIFY ("PK_LEHR_FRAGE_LOESEUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_CONTR_DUPLIKAT_CHECK
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK" MODIFY ("PK_DUPLIKAT_CHECK" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT_CHECK" ADD CONSTRAINT "T_DUPLIKAT_CHECK_PK" PRIMARY KEY ("PK_DUPLIKAT_CHECK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_MONAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_MONAT" ADD CONSTRAINT "T_STEUER_MONAT_PK" PRIMARY KEY ("PK_STEU_STEUER_MONAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_MONAT" MODIFY ("PK_STEU_STEUER_MONAT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_BEI_KK_KRANKENKASSE_DET
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BEI_KK_KRANKENKASSE_DET" ADD CONSTRAINT "IMP_BA_KRANKENKASSE_PK" PRIMARY KEY ("PK_BEI_KK_KRANKENKASSE_DET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_BEI_KK_KRANKENKASSE_DET" MODIFY ("PK_BEI_KK_KRANKENKASSE_DET" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PROJ1_ADDFRIEND_RELATIONS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."PROJ1_ADDFRIEND_RELATIONS" MODIFY ("ADDFRIEND_RELATION_ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."PROJ1_ADDFRIEND_RELATIONS" ADD CONSTRAINT "T_ADDFRIEND_RELATIONS_PK" PRIMARY KEY ("ADDFRIEND_RELATION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMMO_OBJEKT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMMO_OBJEKT" MODIFY ("T_IMMO_OBJEKT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMMO_OBJEKT" ADD CONSTRAINT "T_IMMO_OBJEKT_PK" PRIMARY KEY ("T_IMMO_OBJEKT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ADR_ADRESSE_SCHNELL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_ADRESSE_SCHNELL" MODIFY ("PK_ADR_ADRESSE_SCHNELL" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_ADRESSE_SCHNELL" ADD CONSTRAINT "T_ADRESSE_NEU_PK" PRIMARY KEY ("PK_ADR_ADRESSE_SCHNELL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_BEL_LEX
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_BEL_LEX" ADD CONSTRAINT "T_REL_BEL_LEX_PK" PRIMARY KEY ("PK_REL_BEL_LEX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_BEL_LEX" MODIFY ("PK_REL_BEL_LEX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_PROJ_PROJEKT_ANGEBOT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_PROJ_PROJEKT_ANGEBOT" MODIFY ("PK_PROJ_PROJEKT_ANGEBOT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_PROJ_PROJEKT_ANGEBOT" ADD CONSTRAINT "T_PROJ_PROJEKT_ANGEBOT_PK" PRIMARY KEY ("PK_PROJ_PROJEKT_ANGEBOT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CAR_AUTO_VERMIETUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CAR_AUTO_VERMIETUNG" ADD CONSTRAINT "IMP_BA_CARMIETE_PK" PRIMARY KEY ("PK_CAR_AUTO_VERMIETUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_CAR_AUTO_VERMIETUNG" MODIFY ("PK_CAR_AUTO_VERMIETUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_ADR_KONTINENT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_KONTINENT" MODIFY ("PK_ADR_KONTINENT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_KONTINENT" ADD CONSTRAINT "T_KONTINENT_PK" PRIMARY KEY ("PK_ADR_KONTINENT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_ADR_LAND
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ADR_LAND" MODIFY ("PK_ADR_LAND" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_ADR_LAND" ADD CONSTRAINT "T_LAND_PK" PRIMARY KEY ("PK_ADR_LAND")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_ADR_LAND" ADD CONSTRAINT "CON_LAND" UNIQUE ("LAND")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STD_GROUP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STD_GROUP" MODIFY ("PK_STD_GROUP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STD_GROUP" ADD CONSTRAINT "T_STD_GROUP_PK" PRIMARY KEY ("PK_STD_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STD_GROUP" ADD CONSTRAINT "T_STD_GROUP_UK1" UNIQUE ("STD_GROUP_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_VERS_VERSICHERUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VERS_VERSICHERUNG" MODIFY ("PK_VERS_VERSICHERUNG" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VERS_VERSICHERUNG" ADD CONSTRAINT "T_VERS_VERSICHERUNG_PK" PRIMARY KEY ("PK_VERS_VERSICHERUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_KRANKENKASSE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_KRANKENKASSE" ADD CONSTRAINT "T_STEUER_KRANKENKASSE_PK" PRIMARY KEY ("PK_STEU_STEUER_KRANKENKASSE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_KRANKENKASSE" MODIFY ("PK_STEU_STEUER_KRANKENKASSE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_MONAT_TODO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_MONAT_TODO" MODIFY ("PK_STEU_STEUER_MONAT_TODO" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STEU_STEUER_MONAT_TODO" ADD CONSTRAINT "T_STEUER_MONAT_TODO_PK" PRIMARY KEY ("PK_STEU_STEUER_MONAT_TODO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_INV_INVENTAR_VERBRAUCHSMAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_VERBRAUCHSMAT" MODIFY ("PK_REL_INV_VERBRAUCHSMAT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_VERBRAUCHSMAT" ADD CONSTRAINT "T_REL_INV_VERBRAUCHSMAT_PK" PRIMARY KEY ("PK_REL_INV_VERBRAUCHSMAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_IMP_BEL_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_IMP_BEL_BEL" ADD CONSTRAINT "T_REL_IMP_BEL_BEL_PK" PRIMARY KEY ("PK_REL_IMP_BEL_BEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_IMP_BEL_BEL" MODIFY ("PK_REL_IMP_BEL_BEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_CONTR_KATEGORIE_ZAHLUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CONTR_KATEGORIE_ZAHLUNG" ADD CONSTRAINT "CONTR_KATEGORIE_ZAHLUNG_PK" PRIMARY KEY ("PK_CONTR_KATEGORIE_ZAHLUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_CONTR_KATEGORIE_ZAHLUNG" MODIFY ("PK_CONTR_KATEGORIE_ZAHLUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_PROJ_PROJECT_LOCATION
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" ADD CONSTRAINT "PK_T_REL_PROJ_LOCATION" PRIMARY KEY ("PK_REL_PROJ_PROJECT_LOCATION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" MODIFY ("PK_REL_PROJ_PROJECT_LOCATION" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_PROJ_PROJECT_LOCATION" ADD CONSTRAINT "CON_PROJ_LOC" UNIQUE ("FK_PROJ_PROJEKT", "FK_LOC_LOCATION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_VERPFL_MEHRAUFWD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" MODIFY ("PK_STEU_STEUER_VERPFL_MEHRAUFWD" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" ADD CONSTRAINT "T_VERPFLEGUNGSMEHRAUFWAND_PK" PRIMARY KEY ("PK_STEU_STEUER_VERPFL_MEHRAUFWD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_RE_RECHNUNG_ZAHLUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_ZAHLUNG" ADD CONSTRAINT "T_REL_RECHNUNG_ZAHLUNG_PK" PRIMARY KEY ("PK_REL_RE_RECHNUNG_ZAHLUNG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_RE_RECHNUNG_ZAHLUNG" MODIFY ("PK_REL_RE_RECHNUNG_ZAHLUNG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_STEU_STEUER_LOHNSTEUERKARTE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_LOHNSTEUERKARTE" ADD CONSTRAINT "T_STEUER_LOHNSTEUERKARTE_PK" PRIMARY KEY ("PK_STEU_STEUER_LOHNSTEUERKARTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_LOHNSTEUERKARTE" MODIFY ("PK_STEU_STEUER_LOHNSTEUERKARTE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table IMP_BA_BUSSGELDER
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_BUSSGELDER" ADD CONSTRAINT "IMP_BA_BUSSGELDER_PK" PRIMARY KEY ("PK_IMP_BA_BUSSGELDER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."IMP_BA_BUSSGELDER" MODIFY ("PK_IMP_BA_BUSSGELDER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_VERK_BAHN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VERK_BAHN" MODIFY ("PK_BAHN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VERK_BAHN" ADD CONSTRAINT "T_BAHN_PK" PRIMARY KEY ("PK_BAHN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MASCH_BAND_STATIONEN
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_MASCH_BAND_STATIONEN" MODIFY ("PK_MASCH_BAND_STATIONEN" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_MASCH_BAND_STATIONEN" ADD CONSTRAINT "T_MASCH_BAND_STATION_PK" PRIMARY KEY ("PK_MASCH_BAND_STATIONEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KTO_KONT_BUCH_IMP_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_IMP_BEL" ADD CONSTRAINT "T_REL_KONT_BUCH_IMP_BEL_PK" PRIMARY KEY ("PK_REL_KTO_KONT_BUCH_IMP_BEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_KTO_KONT_BUCH_IMP_BEL" MODIFY ("PK_REL_KTO_KONT_BUCH_IMP_BEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_LEX_LEX_BANKKONTO
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_LEX_LEX_BANKKONTO" ADD CONSTRAINT "T_PK" PRIMARY KEY ("PK_REL_LEX_LEX_BANKKONTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_LEX_LEX_BANKKONTO" MODIFY ("PK_REL_LEX_LEX_BANKKONTO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_RE_RECHNUNG_MAHNUNG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_RE_RECHNUNG_MAHNUNG" ADD CONSTRAINT "T_OFFENE_EINGANGSRECHNUNGE_PK" PRIMARY KEY ("PK_OFFENE_RECHNUNGEN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_RE_RECHNUNG_MAHNUNG" MODIFY ("PK_OFFENE_RECHNUNGEN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_VER_VERTRAG_AUDI_FIN_POS
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_POS" MODIFY ("PK_VER_VERTRAG_AUDI_FIN_POS" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_VER_VERTRAG_AUDI_FIN_POS" ADD CONSTRAINT "T_AUDI_FIN_VERTRAG_POS_PK" PRIMARY KEY ("PK_VER_VERTRAG_AUDI_FIN_POS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_BEL_BELEGART
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_BEL_BELEGART" MODIFY ("PK_BAS_BEL_BELEGART" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_BEL_BELEGART" ADD CONSTRAINT "T_BELEGART_PK" PRIMARY KEY ("PK_BAS_BEL_BELEGART")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_IMP_BEL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_IMP_BEL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_IMP_BEL" ADD CONSTRAINT "T_IMP_BEL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_USM_USER
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_USM_USER" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_USM_USER" ADD CONSTRAINT "T_USER_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DOC_DOCUMENT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DOC_DOCUMENT" MODIFY ("PK_DOC_DOCUMENT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DOC_DOCUMENT" ADD CONSTRAINT "T_UNTERLAGEN_PK" PRIMARY KEY ("PK_DOC_DOCUMENT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_BAS_WH_PACKUNGSTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_BAS_WH_PACKUNGSTYP" MODIFY ("PK_PACKKUNGSTYP" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_BAS_WH_PACKUNGSTYP" ADD CONSTRAINT "T_PACKUNGSTYP_PK" PRIMARY KEY ("PK_PACKKUNGSTYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DB_TAB_TABLE_CONTENT_COUNT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT" MODIFY ("PK_DB_TAB_TABLE_CONTENT_COUNT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_DB_TAB_TABLE_CONTENT_COUNT" ADD CONSTRAINT "T_DB_TAB_TABLE_CONTENT_COUNT_PK" PRIMARY KEY ("PK_DB_TAB_TABLE_CONTENT_COUNT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_KON_PERSON
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_KON_PERSON" MODIFY ("PK_KON_PERSON" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_KON_PERSON" ADD CONSTRAINT "T_PERSON_PK" PRIMARY KEY ("PK_KON_PERSON")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_REL_KON_KONTAKT_KONTAKTTYP
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_KON_KONTAKT_KONTAKTTYP" MODIFY ("PK_REL_KON_KONT" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_REL_KON_KONTAKT_KONTAKTTYP" ADD CONSTRAINT "T_REL_KONTAKT_KONTAKTTYP_PK" PRIMARY KEY ("PK_REL_KON_KONT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_WET_NIEDERSCHLAGSMENGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_WET_NIEDERSCHLAGSMENGE" MODIFY ("PK_WET_NIEDERSCHLAGSMENGE" NOT NULL ENABLE);
  ALTER TABLE "COMPANY"."T_WET_NIEDERSCHLAGSMENGE" ADD CONSTRAINT "T_NIEDERSCHLAGSMENGE_PK" PRIMARY KEY ("PK_WET_NIEDERSCHLAGSMENGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMP_BA_TANKSTELLE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."IMP_BA_TANKSTELLE" ADD CONSTRAINT "IMP_BA_TANKSTELLE_PK" PRIMARY KEY ("PK_IMP_BA_TANKSTELLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."IMP_BA_TANKSTELLE" MODIFY ("PK_IMP_BA_TANKSTELLE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_REL_INV_INVENTAR_BARZAHL
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_BARZAHL" ADD CONSTRAINT "T_REL_INVENTAR_BARZAHL_PK" PRIMARY KEY ("PK_REL_INV_BARZAHL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "COMPANY"."T_REL_INV_INVENTAR_BARZAHL" MODIFY ("PK_REL_INV_BARZAHL" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table T_ABL_ORDNER_PAGE
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_ABL_ORDNER_PAGE" ADD CONSTRAINT "T_ABL_ORDNER_PAGE_FK1" FOREIGN KEY ("FK_ABL_ORDNER")
	  REFERENCES "COMPANY"."T_ABL_ORDNER" ("PK_ABL_ORDNER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_CONTR_DUPLIKAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_CONTR_DUPLIKAT" ADD CONSTRAINT "T_DUPLIKAT_FK1" FOREIGN KEY ("FK_DUPLIKAT_CHECK")
	  REFERENCES "COMPANY"."T_CONTR_DUPLIKAT_CHECK" ("PK_DUPLIKAT_CHECK") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_STEU_STEUER_MONAT
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_MONAT" ADD CONSTRAINT "T_STEUER_MONAT_FK1" FOREIGN KEY ("FK_BAS_KAL_STEUER_JAHR")
	  REFERENCES "COMPANY"."T_STEU_STEUER_JAHR" ("PK_STEU_STEUER_JAHR") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_STEU_STEUER_VERPFL_MEHRAUFWD
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" ADD CONSTRAINT "T_VERPFLEGUNGSMEHRAUFWAND_FK1" FOREIGN KEY ("FK_INP_BELEGE_ALL")
	  REFERENCES "COMPANY"."T_INP_BELEGE_ALL" ("PK_INP_BELEGE_ALL") ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" ADD CONSTRAINT "T_VERPFLEGUNGSMEHRAUFWAND_FK2" FOREIGN KEY ("FK_STEU_STEUER_MONAT")
	  REFERENCES "COMPANY"."T_STEU_STEUER_MONAT" ("PK_STEU_STEUER_MONAT") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_STEU_STEUER_VERPFL_MEHRAUFWD_DET
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" ADD CONSTRAINT "T_VERPFLEGUNGSMEHRAUFWAND_DET_FK1" FOREIGN KEY ("FK_STEU_STEUER_VERPFL_MEHRAUFWD")
	  REFERENCES "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD" ("PK_STEU_STEUER_VERPFL_MEHRAUFWD") ENABLE;
  ALTER TABLE "COMPANY"."T_STEU_STEUER_VERPFL_MEHRAUFWD_DET" ADD CONSTRAINT "T_VERPFLEGUNGSMEHRAUFWAND_DET_FK2" FOREIGN KEY ("FK_ADR_ORT")
	  REFERENCES "COMPANY"."T_ADR_ORT" ("PK_ADR_ORT") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_STEU_STEUER_VORANMLDG
--------------------------------------------------------

  ALTER TABLE "COMPANY"."T_STEU_STEUER_VORANMLDG" ADD CONSTRAINT "T_STEUER_VORANMLDG_FK1" FOREIGN KEY ("FK_STEU_STEUER_MONAT")
	  REFERENCES "COMPANY"."T_STEU_STEUER_MONAT" ("PK_STEU_STEUER_MONAT") ENABLE;
